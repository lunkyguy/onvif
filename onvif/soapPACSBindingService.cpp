/* soapPACSBindingService.cpp
   Generated by gSOAP 2.8.17r from onvif.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapPACSBindingService.h"

PACSBindingService::PACSBindingService()
{	this->soap = soap_new();
	this->own = true;
	PACSBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

PACSBindingService::PACSBindingService(struct soap *_soap)
{	this->soap = _soap;
	this->own = false;
	PACSBindingService_init(_soap->imode, _soap->omode);
}

PACSBindingService::PACSBindingService(soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	PACSBindingService_init(iomode, iomode);
}

PACSBindingService::PACSBindingService(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->own = true;
	PACSBindingService_init(imode, omode);
}

PACSBindingService::~PACSBindingService()
{	if (this->own)
		soap_free(this->soap);
}

void PACSBindingService::PACSBindingService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"chan", "http://schemas.microsoft.com/ws/2005/02/duplex", NULL, NULL},
	{"wsa5", "http://www.w3.org/2005/08/addressing", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL},
	{"c14n", "http://www.w3.org/2001/10/xml-exc-c14n#", NULL, NULL},
	{"wsu", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd", NULL, NULL},
	{"xenc", "http://www.w3.org/2001/04/xmlenc#", NULL, NULL},
	{"wsc", "http://schemas.xmlsoap.org/ws/2005/02/sc", NULL, NULL},
	{"ds", "http://www.w3.org/2000/09/xmldsig#", NULL, NULL},
	{"wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd", NULL},
	{"ns2", "http://www.onvif.org/ver10/pacs", NULL, NULL},
	{"xmime", "http://tempuri.org/xmime.xsd", NULL, NULL},
	{"xop", "http://www.w3.org/2004/08/xop/include", NULL, NULL},
	{"tt", "http://www.onvif.org/ver10/schema", NULL, NULL},
	{"wsrfbf", "http://docs.oasis-open.org/wsrf/bf-2", NULL, NULL},
	{"wstop", "http://docs.oasis-open.org/wsn/t-1", NULL, NULL},
	{"wsrfr", "http://docs.oasis-open.org/wsrf/r-2", NULL, NULL},
	{"name", "http://www.onvif.org/ver10/advancedsecurity/wsdl/AdvancedSecurityServiceBinding", NULL, NULL},
	{"name10", "http://www.onvif.org/ver10/events/wsdl/NotificationProducerBinding", NULL, NULL},
	{"name11", "http://www.onvif.org/ver10/events/wsdl/NotificationConsumerBinding", NULL, NULL},
	{"name12", "http://www.onvif.org/ver10/events/wsdl/PullPointBinding", NULL, NULL},
	{"name13", "http://www.onvif.org/ver10/events/wsdl/CreatePullPointBinding", NULL, NULL},
	{"name14", "http://www.onvif.org/ver10/events/wsdl/PausableSubscriptionManagerBinding", NULL, NULL},
	{"wsnt", "http://docs.oasis-open.org/wsn/b-2", NULL, NULL},
	{"name2", "http://www.onvif.org/ver10/advancedsecurity/wsdl/KeystoreBinding", NULL, NULL},
	{"name3", "http://www.onvif.org/ver10/advancedsecurity/wsdl/TLSServerBinding", NULL, NULL},
	{"name4", "http://www.onvif.org/ver10/advancedsecurity/wsdl/Dot1XBinding", NULL, NULL},
	{"ns5", "http://www.onvif.org/ver10/advancedsecurity/wsdl", NULL, NULL},
	{"name5", "http://www.onvif.org/ver20/analytics/wsdl/RuleEngineBinding", NULL, NULL},
	{"name6", "http://www.onvif.org/ver20/analytics/wsdl/AnalyticsEngineBinding", NULL, NULL},
	{"tan", "http://www.onvif.org/ver20/analytics/wsdl", NULL, NULL},
	{"name7", "http://www.onvif.org/ver10/events/wsdl/PullPointSubscriptionBinding", NULL, NULL},
	{"name8", "http://www.onvif.org/ver10/events/wsdl/EventBinding", NULL, NULL},
	{"tev", "http://www.onvif.org/ver10/events/wsdl", NULL, NULL},
	{"name9", "http://www.onvif.org/ver10/events/wsdl/SubscriptionManagerBinding", NULL, NULL},
	{"ns1", "http://www.onvif.org/ver10/accesscontrol/wsdl", NULL, NULL},
	{"ns10", "http://www.onvif.org/ver10/provisioning/wsdl", NULL, NULL},
	{"ns11", "http://www.onvif.org/ver10/schedule/wsdl", NULL, NULL},
	{"ns12", "http://www.onvif.org/ver10/thermal/wsdl", NULL, NULL},
	{"ns3", "http://www.onvif.org/ver10/accessrules/wsdl", NULL, NULL},
	{"ns4", "http://www.onvif.org/ver10/actionengine/wsdl", NULL, NULL},
	{"ns6", "http://www.onvif.org/ver10/authenticationbehavior/wsdl", NULL, NULL},
	{"ns7", "http://www.onvif.org/ver10/credential/wsdl", NULL, NULL},
	{"ns8", "http://www.onvif.org/ver10/doorcontrol/wsdl", NULL, NULL},
	{"ns9", "http://www.onvif.org/ver20/media/wsdl", NULL, NULL},
	{"tad", "http://www.onvif.org/ver10/analyticsdevice/wsdl", NULL, NULL},
	{"tds", "http://www.onvif.org/ver10/device/wsdl", NULL, NULL},
	{"timg", "http://www.onvif.org/ver20/imaging/wsdl", NULL, NULL},
	{"tls", "http://www.onvif.org/ver10/display/wsdl", NULL, NULL},
	{"tmd", "http://www.onvif.org/ver10/deviceIO/wsdl", NULL, NULL},
	{"tptz", "http://www.onvif.org/ver20/ptz/wsdl", NULL, NULL},
	{"trc", "http://www.onvif.org/ver10/recording/wsdl", NULL, NULL},
	{"trp", "http://www.onvif.org/ver10/replay/wsdl", NULL, NULL},
	{"trt", "http://www.onvif.org/ver10/media/wsdl", NULL, NULL},
	{"trv", "http://www.onvif.org/ver10/receiver/wsdl", NULL, NULL},
	{"tse", "http://www.onvif.org/ver10/search/wsdl", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
}

void PACSBindingService::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void PACSBindingService::reset()
{	destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	PACSBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
PACSBindingService *PACSBindingService::copy()
{	PACSBindingService *dup = SOAP_NEW_COPY(PACSBindingService);
	if (dup)
		soap_copy_context(dup->soap, this->soap);
	return dup;
}
#endif

int PACSBindingService::soap_close_socket()
{	return soap_closesock(this->soap);
}

int PACSBindingService::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

int PACSBindingService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this->soap, string, detailXML);
}

int PACSBindingService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

int PACSBindingService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this->soap, string, detailXML);
}

int PACSBindingService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

void PACSBindingService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void PACSBindingService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *PACSBindingService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

void PACSBindingService::soap_noheader()
{	this->soap->header = NULL;
}

void PACSBindingService::soap_header(char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance, struct _wsse__Security *wsse__Security)
{	::soap_header(this->soap);
	this->soap->header->wsa5__MessageID = wsa5__MessageID;
	this->soap->header->wsa5__RelatesTo = wsa5__RelatesTo;
	this->soap->header->wsa5__From = wsa5__From;
	this->soap->header->wsa5__ReplyTo = wsa5__ReplyTo;
	this->soap->header->wsa5__FaultTo = wsa5__FaultTo;
	this->soap->header->wsa5__To = wsa5__To;
	this->soap->header->wsa5__Action = wsa5__Action;
	this->soap->header->chan__ChannelInstance = chan__ChannelInstance;
	this->soap->header->wsse__Security = wsse__Security;
}

const SOAP_ENV__Header *PACSBindingService::soap_header()
{	return this->soap->header;
}

int PACSBindingService::run(int port)
{	if (soap_valid_socket(this->soap->master) || soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()) || serve())
				return this->soap->error;
			soap_destroy(this->soap);
			soap_end(this->soap);
		}
	}
	else
		return this->soap->error;
	return SOAP_OK;
}

SOAP_SOCKET PACSBindingService::bind(const char *host, int port, int backlog)
{	return soap_bind(this->soap, host, port, backlog);
}

SOAP_SOCKET PACSBindingService::accept()
{	return soap_accept(this->soap);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int PACSBindingService::ssl_accept()
{	return soap_ssl_accept(this->soap);
}
#endif

int PACSBindingService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->soap->max_keep_alive;
#endif
	do
	{

#ifndef WITH_FASTCGI
		if (this->soap->max_keep_alive > 0 && !--k)
			this->soap->keep_alive = 0;
#endif

		if (soap_begin_serve(this->soap))
		{	if (this->soap->error >= SOAP_STOP)
				continue;
			return this->soap->error;
		}
		if (dispatch() || (this->soap->fserveloop && this->soap->fserveloop(this->soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this->soap);
#else
			return soap_send_fault(this->soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this->soap);
		soap_end(this->soap);
	} while (1);
#else
	} while (this->soap->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___ns1__GetServiceCapabilities(PACSBindingService*);
static int serve___ns1__GetAccessPointInfoList(PACSBindingService*);
static int serve___ns1__GetAccessPointInfo(PACSBindingService*);
static int serve___ns1__GetAccessPointList(PACSBindingService*);
static int serve___ns1__GetAccessPoints(PACSBindingService*);
static int serve___ns1__CreateAccessPoint(PACSBindingService*);
static int serve___ns1__SetAccessPoint(PACSBindingService*);
static int serve___ns1__ModifyAccessPoint(PACSBindingService*);
static int serve___ns1__DeleteAccessPoint(PACSBindingService*);
static int serve___ns1__SetAccessPointAuthenticationProfile(PACSBindingService*);
static int serve___ns1__DeleteAccessPointAuthenticationProfile(PACSBindingService*);
static int serve___ns1__GetAreaInfoList(PACSBindingService*);
static int serve___ns1__GetAreaInfo(PACSBindingService*);
static int serve___ns1__GetAreaList(PACSBindingService*);
static int serve___ns1__GetAreas(PACSBindingService*);
static int serve___ns1__CreateArea(PACSBindingService*);
static int serve___ns1__SetArea(PACSBindingService*);
static int serve___ns1__ModifyArea(PACSBindingService*);
static int serve___ns1__DeleteArea(PACSBindingService*);
static int serve___ns1__GetAccessPointState(PACSBindingService*);
static int serve___ns1__EnableAccessPoint(PACSBindingService*);
static int serve___ns1__DisableAccessPoint(PACSBindingService*);
static int serve___ns1__ExternalAuthorization(PACSBindingService*);

int PACSBindingService::dispatch()
{	PACSBindingService_init(this->soap->imode, this->soap->omode);
	soap_peek_element(this->soap);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:GetServiceCapabilities"))
		return serve___ns1__GetServiceCapabilities(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:GetAccessPointInfoList"))
		return serve___ns1__GetAccessPointInfoList(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:GetAccessPointInfo"))
		return serve___ns1__GetAccessPointInfo(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:GetAccessPointList"))
		return serve___ns1__GetAccessPointList(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:GetAccessPoints"))
		return serve___ns1__GetAccessPoints(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:CreateAccessPoint"))
		return serve___ns1__CreateAccessPoint(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:SetAccessPoint"))
		return serve___ns1__SetAccessPoint(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:ModifyAccessPoint"))
		return serve___ns1__ModifyAccessPoint(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:DeleteAccessPoint"))
		return serve___ns1__DeleteAccessPoint(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:SetAccessPointAuthenticationProfile"))
		return serve___ns1__SetAccessPointAuthenticationProfile(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:DeleteAccessPointAuthenticationProfile"))
		return serve___ns1__DeleteAccessPointAuthenticationProfile(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:GetAreaInfoList"))
		return serve___ns1__GetAreaInfoList(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:GetAreaInfo"))
		return serve___ns1__GetAreaInfo(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:GetAreaList"))
		return serve___ns1__GetAreaList(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:GetAreas"))
		return serve___ns1__GetAreas(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:CreateArea"))
		return serve___ns1__CreateArea(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:SetArea"))
		return serve___ns1__SetArea(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:ModifyArea"))
		return serve___ns1__ModifyArea(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:DeleteArea"))
		return serve___ns1__DeleteArea(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:GetAccessPointState"))
		return serve___ns1__GetAccessPointState(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:EnableAccessPoint"))
		return serve___ns1__EnableAccessPoint(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:DisableAccessPoint"))
		return serve___ns1__DisableAccessPoint(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:ExternalAuthorization"))
		return serve___ns1__ExternalAuthorization(this);
	return this->soap->error = SOAP_NO_METHOD;
}

static int serve___ns1__GetServiceCapabilities(PACSBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__GetServiceCapabilities soap_tmp___ns1__GetServiceCapabilities;
	_ns1__GetServiceCapabilitiesResponse ns1__GetServiceCapabilitiesResponse;
	ns1__GetServiceCapabilitiesResponse.soap_default(soap);
	soap_default___ns1__GetServiceCapabilities(soap, &soap_tmp___ns1__GetServiceCapabilities);
	if (!soap_get___ns1__GetServiceCapabilities(soap, &soap_tmp___ns1__GetServiceCapabilities, "-ns1:GetServiceCapabilities", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetServiceCapabilities(soap_tmp___ns1__GetServiceCapabilities.ns1__GetServiceCapabilities, &ns1__GetServiceCapabilitiesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__GetServiceCapabilitiesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetServiceCapabilitiesResponse.soap_put(soap, "ns1:GetServiceCapabilitiesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetServiceCapabilitiesResponse.soap_put(soap, "ns1:GetServiceCapabilitiesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetAccessPointInfoList(PACSBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__GetAccessPointInfoList soap_tmp___ns1__GetAccessPointInfoList;
	_ns1__GetAccessPointInfoListResponse ns1__GetAccessPointInfoListResponse;
	ns1__GetAccessPointInfoListResponse.soap_default(soap);
	soap_default___ns1__GetAccessPointInfoList(soap, &soap_tmp___ns1__GetAccessPointInfoList);
	if (!soap_get___ns1__GetAccessPointInfoList(soap, &soap_tmp___ns1__GetAccessPointInfoList, "-ns1:GetAccessPointInfoList", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAccessPointInfoList(soap_tmp___ns1__GetAccessPointInfoList.ns1__GetAccessPointInfoList, &ns1__GetAccessPointInfoListResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__GetAccessPointInfoListResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetAccessPointInfoListResponse.soap_put(soap, "ns1:GetAccessPointInfoListResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetAccessPointInfoListResponse.soap_put(soap, "ns1:GetAccessPointInfoListResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetAccessPointInfo(PACSBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__GetAccessPointInfo soap_tmp___ns1__GetAccessPointInfo;
	_ns1__GetAccessPointInfoResponse ns1__GetAccessPointInfoResponse;
	ns1__GetAccessPointInfoResponse.soap_default(soap);
	soap_default___ns1__GetAccessPointInfo(soap, &soap_tmp___ns1__GetAccessPointInfo);
	if (!soap_get___ns1__GetAccessPointInfo(soap, &soap_tmp___ns1__GetAccessPointInfo, "-ns1:GetAccessPointInfo", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAccessPointInfo(soap_tmp___ns1__GetAccessPointInfo.ns1__GetAccessPointInfo, &ns1__GetAccessPointInfoResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__GetAccessPointInfoResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetAccessPointInfoResponse.soap_put(soap, "ns1:GetAccessPointInfoResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetAccessPointInfoResponse.soap_put(soap, "ns1:GetAccessPointInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetAccessPointList(PACSBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__GetAccessPointList soap_tmp___ns1__GetAccessPointList;
	_ns1__GetAccessPointListResponse ns1__GetAccessPointListResponse;
	ns1__GetAccessPointListResponse.soap_default(soap);
	soap_default___ns1__GetAccessPointList(soap, &soap_tmp___ns1__GetAccessPointList);
	if (!soap_get___ns1__GetAccessPointList(soap, &soap_tmp___ns1__GetAccessPointList, "-ns1:GetAccessPointList", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAccessPointList(soap_tmp___ns1__GetAccessPointList.ns1__GetAccessPointList, &ns1__GetAccessPointListResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__GetAccessPointListResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetAccessPointListResponse.soap_put(soap, "ns1:GetAccessPointListResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetAccessPointListResponse.soap_put(soap, "ns1:GetAccessPointListResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetAccessPoints(PACSBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__GetAccessPoints soap_tmp___ns1__GetAccessPoints;
	_ns1__GetAccessPointsResponse ns1__GetAccessPointsResponse;
	ns1__GetAccessPointsResponse.soap_default(soap);
	soap_default___ns1__GetAccessPoints(soap, &soap_tmp___ns1__GetAccessPoints);
	if (!soap_get___ns1__GetAccessPoints(soap, &soap_tmp___ns1__GetAccessPoints, "-ns1:GetAccessPoints", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAccessPoints(soap_tmp___ns1__GetAccessPoints.ns1__GetAccessPoints, &ns1__GetAccessPointsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__GetAccessPointsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetAccessPointsResponse.soap_put(soap, "ns1:GetAccessPointsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetAccessPointsResponse.soap_put(soap, "ns1:GetAccessPointsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__CreateAccessPoint(PACSBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__CreateAccessPoint soap_tmp___ns1__CreateAccessPoint;
	_ns1__CreateAccessPointResponse ns1__CreateAccessPointResponse;
	ns1__CreateAccessPointResponse.soap_default(soap);
	soap_default___ns1__CreateAccessPoint(soap, &soap_tmp___ns1__CreateAccessPoint);
	if (!soap_get___ns1__CreateAccessPoint(soap, &soap_tmp___ns1__CreateAccessPoint, "-ns1:CreateAccessPoint", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->CreateAccessPoint(soap_tmp___ns1__CreateAccessPoint.ns1__CreateAccessPoint, &ns1__CreateAccessPointResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__CreateAccessPointResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__CreateAccessPointResponse.soap_put(soap, "ns1:CreateAccessPointResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__CreateAccessPointResponse.soap_put(soap, "ns1:CreateAccessPointResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__SetAccessPoint(PACSBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__SetAccessPoint soap_tmp___ns1__SetAccessPoint;
	_ns1__SetAccessPointResponse ns1__SetAccessPointResponse;
	ns1__SetAccessPointResponse.soap_default(soap);
	soap_default___ns1__SetAccessPoint(soap, &soap_tmp___ns1__SetAccessPoint);
	if (!soap_get___ns1__SetAccessPoint(soap, &soap_tmp___ns1__SetAccessPoint, "-ns1:SetAccessPoint", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetAccessPoint(soap_tmp___ns1__SetAccessPoint.ns1__SetAccessPoint, &ns1__SetAccessPointResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__SetAccessPointResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__SetAccessPointResponse.soap_put(soap, "ns1:SetAccessPointResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__SetAccessPointResponse.soap_put(soap, "ns1:SetAccessPointResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__ModifyAccessPoint(PACSBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__ModifyAccessPoint soap_tmp___ns1__ModifyAccessPoint;
	_ns1__ModifyAccessPointResponse ns1__ModifyAccessPointResponse;
	ns1__ModifyAccessPointResponse.soap_default(soap);
	soap_default___ns1__ModifyAccessPoint(soap, &soap_tmp___ns1__ModifyAccessPoint);
	if (!soap_get___ns1__ModifyAccessPoint(soap, &soap_tmp___ns1__ModifyAccessPoint, "-ns1:ModifyAccessPoint", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->ModifyAccessPoint(soap_tmp___ns1__ModifyAccessPoint.ns1__ModifyAccessPoint, &ns1__ModifyAccessPointResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__ModifyAccessPointResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__ModifyAccessPointResponse.soap_put(soap, "ns1:ModifyAccessPointResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__ModifyAccessPointResponse.soap_put(soap, "ns1:ModifyAccessPointResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__DeleteAccessPoint(PACSBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__DeleteAccessPoint soap_tmp___ns1__DeleteAccessPoint;
	_ns1__DeleteAccessPointResponse ns1__DeleteAccessPointResponse;
	ns1__DeleteAccessPointResponse.soap_default(soap);
	soap_default___ns1__DeleteAccessPoint(soap, &soap_tmp___ns1__DeleteAccessPoint);
	if (!soap_get___ns1__DeleteAccessPoint(soap, &soap_tmp___ns1__DeleteAccessPoint, "-ns1:DeleteAccessPoint", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->DeleteAccessPoint(soap_tmp___ns1__DeleteAccessPoint.ns1__DeleteAccessPoint, &ns1__DeleteAccessPointResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__DeleteAccessPointResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__DeleteAccessPointResponse.soap_put(soap, "ns1:DeleteAccessPointResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__DeleteAccessPointResponse.soap_put(soap, "ns1:DeleteAccessPointResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__SetAccessPointAuthenticationProfile(PACSBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__SetAccessPointAuthenticationProfile soap_tmp___ns1__SetAccessPointAuthenticationProfile;
	_ns1__SetAccessPointAuthenticationProfileResponse ns1__SetAccessPointAuthenticationProfileResponse;
	ns1__SetAccessPointAuthenticationProfileResponse.soap_default(soap);
	soap_default___ns1__SetAccessPointAuthenticationProfile(soap, &soap_tmp___ns1__SetAccessPointAuthenticationProfile);
	if (!soap_get___ns1__SetAccessPointAuthenticationProfile(soap, &soap_tmp___ns1__SetAccessPointAuthenticationProfile, "-ns1:SetAccessPointAuthenticationProfile", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetAccessPointAuthenticationProfile(soap_tmp___ns1__SetAccessPointAuthenticationProfile.ns1__SetAccessPointAuthenticationProfile, &ns1__SetAccessPointAuthenticationProfileResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__SetAccessPointAuthenticationProfileResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__SetAccessPointAuthenticationProfileResponse.soap_put(soap, "ns1:SetAccessPointAuthenticationProfileResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__SetAccessPointAuthenticationProfileResponse.soap_put(soap, "ns1:SetAccessPointAuthenticationProfileResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__DeleteAccessPointAuthenticationProfile(PACSBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__DeleteAccessPointAuthenticationProfile soap_tmp___ns1__DeleteAccessPointAuthenticationProfile;
	_ns1__DeleteAccessPointAuthenticationProfileResponse ns1__DeleteAccessPointAuthenticationProfileResponse;
	ns1__DeleteAccessPointAuthenticationProfileResponse.soap_default(soap);
	soap_default___ns1__DeleteAccessPointAuthenticationProfile(soap, &soap_tmp___ns1__DeleteAccessPointAuthenticationProfile);
	if (!soap_get___ns1__DeleteAccessPointAuthenticationProfile(soap, &soap_tmp___ns1__DeleteAccessPointAuthenticationProfile, "-ns1:DeleteAccessPointAuthenticationProfile", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->DeleteAccessPointAuthenticationProfile(soap_tmp___ns1__DeleteAccessPointAuthenticationProfile.ns1__DeleteAccessPointAuthenticationProfile, &ns1__DeleteAccessPointAuthenticationProfileResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__DeleteAccessPointAuthenticationProfileResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__DeleteAccessPointAuthenticationProfileResponse.soap_put(soap, "ns1:DeleteAccessPointAuthenticationProfileResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__DeleteAccessPointAuthenticationProfileResponse.soap_put(soap, "ns1:DeleteAccessPointAuthenticationProfileResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetAreaInfoList(PACSBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__GetAreaInfoList soap_tmp___ns1__GetAreaInfoList;
	_ns1__GetAreaInfoListResponse ns1__GetAreaInfoListResponse;
	ns1__GetAreaInfoListResponse.soap_default(soap);
	soap_default___ns1__GetAreaInfoList(soap, &soap_tmp___ns1__GetAreaInfoList);
	if (!soap_get___ns1__GetAreaInfoList(soap, &soap_tmp___ns1__GetAreaInfoList, "-ns1:GetAreaInfoList", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAreaInfoList(soap_tmp___ns1__GetAreaInfoList.ns1__GetAreaInfoList, &ns1__GetAreaInfoListResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__GetAreaInfoListResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetAreaInfoListResponse.soap_put(soap, "ns1:GetAreaInfoListResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetAreaInfoListResponse.soap_put(soap, "ns1:GetAreaInfoListResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetAreaInfo(PACSBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__GetAreaInfo soap_tmp___ns1__GetAreaInfo;
	_ns1__GetAreaInfoResponse ns1__GetAreaInfoResponse;
	ns1__GetAreaInfoResponse.soap_default(soap);
	soap_default___ns1__GetAreaInfo(soap, &soap_tmp___ns1__GetAreaInfo);
	if (!soap_get___ns1__GetAreaInfo(soap, &soap_tmp___ns1__GetAreaInfo, "-ns1:GetAreaInfo", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAreaInfo(soap_tmp___ns1__GetAreaInfo.ns1__GetAreaInfo, &ns1__GetAreaInfoResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__GetAreaInfoResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetAreaInfoResponse.soap_put(soap, "ns1:GetAreaInfoResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetAreaInfoResponse.soap_put(soap, "ns1:GetAreaInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetAreaList(PACSBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__GetAreaList soap_tmp___ns1__GetAreaList;
	_ns1__GetAreaListResponse ns1__GetAreaListResponse;
	ns1__GetAreaListResponse.soap_default(soap);
	soap_default___ns1__GetAreaList(soap, &soap_tmp___ns1__GetAreaList);
	if (!soap_get___ns1__GetAreaList(soap, &soap_tmp___ns1__GetAreaList, "-ns1:GetAreaList", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAreaList(soap_tmp___ns1__GetAreaList.ns1__GetAreaList, &ns1__GetAreaListResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__GetAreaListResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetAreaListResponse.soap_put(soap, "ns1:GetAreaListResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetAreaListResponse.soap_put(soap, "ns1:GetAreaListResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetAreas(PACSBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__GetAreas soap_tmp___ns1__GetAreas;
	_ns1__GetAreasResponse ns1__GetAreasResponse;
	ns1__GetAreasResponse.soap_default(soap);
	soap_default___ns1__GetAreas(soap, &soap_tmp___ns1__GetAreas);
	if (!soap_get___ns1__GetAreas(soap, &soap_tmp___ns1__GetAreas, "-ns1:GetAreas", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAreas(soap_tmp___ns1__GetAreas.ns1__GetAreas, &ns1__GetAreasResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__GetAreasResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetAreasResponse.soap_put(soap, "ns1:GetAreasResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetAreasResponse.soap_put(soap, "ns1:GetAreasResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__CreateArea(PACSBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__CreateArea soap_tmp___ns1__CreateArea;
	_ns1__CreateAreaResponse ns1__CreateAreaResponse;
	ns1__CreateAreaResponse.soap_default(soap);
	soap_default___ns1__CreateArea(soap, &soap_tmp___ns1__CreateArea);
	if (!soap_get___ns1__CreateArea(soap, &soap_tmp___ns1__CreateArea, "-ns1:CreateArea", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->CreateArea(soap_tmp___ns1__CreateArea.ns1__CreateArea, &ns1__CreateAreaResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__CreateAreaResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__CreateAreaResponse.soap_put(soap, "ns1:CreateAreaResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__CreateAreaResponse.soap_put(soap, "ns1:CreateAreaResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__SetArea(PACSBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__SetArea soap_tmp___ns1__SetArea;
	_ns1__SetAreaResponse ns1__SetAreaResponse;
	ns1__SetAreaResponse.soap_default(soap);
	soap_default___ns1__SetArea(soap, &soap_tmp___ns1__SetArea);
	if (!soap_get___ns1__SetArea(soap, &soap_tmp___ns1__SetArea, "-ns1:SetArea", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetArea(soap_tmp___ns1__SetArea.ns1__SetArea, &ns1__SetAreaResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__SetAreaResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__SetAreaResponse.soap_put(soap, "ns1:SetAreaResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__SetAreaResponse.soap_put(soap, "ns1:SetAreaResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__ModifyArea(PACSBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__ModifyArea soap_tmp___ns1__ModifyArea;
	_ns1__ModifyAreaResponse ns1__ModifyAreaResponse;
	ns1__ModifyAreaResponse.soap_default(soap);
	soap_default___ns1__ModifyArea(soap, &soap_tmp___ns1__ModifyArea);
	if (!soap_get___ns1__ModifyArea(soap, &soap_tmp___ns1__ModifyArea, "-ns1:ModifyArea", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->ModifyArea(soap_tmp___ns1__ModifyArea.ns1__ModifyArea, &ns1__ModifyAreaResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__ModifyAreaResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__ModifyAreaResponse.soap_put(soap, "ns1:ModifyAreaResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__ModifyAreaResponse.soap_put(soap, "ns1:ModifyAreaResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__DeleteArea(PACSBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__DeleteArea soap_tmp___ns1__DeleteArea;
	_ns1__DeleteAreaResponse ns1__DeleteAreaResponse;
	ns1__DeleteAreaResponse.soap_default(soap);
	soap_default___ns1__DeleteArea(soap, &soap_tmp___ns1__DeleteArea);
	if (!soap_get___ns1__DeleteArea(soap, &soap_tmp___ns1__DeleteArea, "-ns1:DeleteArea", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->DeleteArea(soap_tmp___ns1__DeleteArea.ns1__DeleteArea, &ns1__DeleteAreaResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__DeleteAreaResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__DeleteAreaResponse.soap_put(soap, "ns1:DeleteAreaResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__DeleteAreaResponse.soap_put(soap, "ns1:DeleteAreaResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetAccessPointState(PACSBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__GetAccessPointState soap_tmp___ns1__GetAccessPointState;
	_ns1__GetAccessPointStateResponse ns1__GetAccessPointStateResponse;
	ns1__GetAccessPointStateResponse.soap_default(soap);
	soap_default___ns1__GetAccessPointState(soap, &soap_tmp___ns1__GetAccessPointState);
	if (!soap_get___ns1__GetAccessPointState(soap, &soap_tmp___ns1__GetAccessPointState, "-ns1:GetAccessPointState", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAccessPointState(soap_tmp___ns1__GetAccessPointState.ns1__GetAccessPointState, &ns1__GetAccessPointStateResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__GetAccessPointStateResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetAccessPointStateResponse.soap_put(soap, "ns1:GetAccessPointStateResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetAccessPointStateResponse.soap_put(soap, "ns1:GetAccessPointStateResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__EnableAccessPoint(PACSBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__EnableAccessPoint soap_tmp___ns1__EnableAccessPoint;
	_ns1__EnableAccessPointResponse ns1__EnableAccessPointResponse;
	ns1__EnableAccessPointResponse.soap_default(soap);
	soap_default___ns1__EnableAccessPoint(soap, &soap_tmp___ns1__EnableAccessPoint);
	if (!soap_get___ns1__EnableAccessPoint(soap, &soap_tmp___ns1__EnableAccessPoint, "-ns1:EnableAccessPoint", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->EnableAccessPoint(soap_tmp___ns1__EnableAccessPoint.ns1__EnableAccessPoint, &ns1__EnableAccessPointResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__EnableAccessPointResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__EnableAccessPointResponse.soap_put(soap, "ns1:EnableAccessPointResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__EnableAccessPointResponse.soap_put(soap, "ns1:EnableAccessPointResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__DisableAccessPoint(PACSBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__DisableAccessPoint soap_tmp___ns1__DisableAccessPoint;
	_ns1__DisableAccessPointResponse ns1__DisableAccessPointResponse;
	ns1__DisableAccessPointResponse.soap_default(soap);
	soap_default___ns1__DisableAccessPoint(soap, &soap_tmp___ns1__DisableAccessPoint);
	if (!soap_get___ns1__DisableAccessPoint(soap, &soap_tmp___ns1__DisableAccessPoint, "-ns1:DisableAccessPoint", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->DisableAccessPoint(soap_tmp___ns1__DisableAccessPoint.ns1__DisableAccessPoint, &ns1__DisableAccessPointResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__DisableAccessPointResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__DisableAccessPointResponse.soap_put(soap, "ns1:DisableAccessPointResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__DisableAccessPointResponse.soap_put(soap, "ns1:DisableAccessPointResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__ExternalAuthorization(PACSBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__ExternalAuthorization soap_tmp___ns1__ExternalAuthorization;
	_ns1__ExternalAuthorizationResponse ns1__ExternalAuthorizationResponse;
	ns1__ExternalAuthorizationResponse.soap_default(soap);
	soap_default___ns1__ExternalAuthorization(soap, &soap_tmp___ns1__ExternalAuthorization);
	if (!soap_get___ns1__ExternalAuthorization(soap, &soap_tmp___ns1__ExternalAuthorization, "-ns1:ExternalAuthorization", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->ExternalAuthorization(soap_tmp___ns1__ExternalAuthorization.ns1__ExternalAuthorization, &ns1__ExternalAuthorizationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__ExternalAuthorizationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__ExternalAuthorizationResponse.soap_put(soap, "ns1:ExternalAuthorizationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__ExternalAuthorizationResponse.soap_put(soap, "ns1:ExternalAuthorizationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
