/* soapStub.h
   Generated by gSOAP 2.8.17r from onvif.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_WSA_2005
#define SOAP_NAMESPACE_OF_wsc	"http://schemas.xmlsoap.org/ws/2005/02/sc"
#define SOAP_NAMESPACE_OF_ns1	"http://www.onvif.org/ver10/accesscontrol/wsdl"
#define SOAP_NAMESPACE_OF_ns2	"http://www.onvif.org/ver10/pacs"
#define SOAP_NAMESPACE_OF_ns3	"http://www.onvif.org/ver10/accessrules/wsdl"
#define SOAP_NAMESPACE_OF_ns4	"http://www.onvif.org/ver10/actionengine/wsdl"
#define SOAP_NAMESPACE_OF_tt	"http://www.onvif.org/ver10/schema"
#define SOAP_NAMESPACE_OF_wsnt	"http://docs.oasis-open.org/wsn/b-2"
#define SOAP_NAMESPACE_OF_wsrfbf	"http://docs.oasis-open.org/wsrf/bf-2"
#define SOAP_NAMESPACE_OF_wstop	"http://docs.oasis-open.org/wsn/t-1"
#define SOAP_NAMESPACE_OF_ns5	"http://www.onvif.org/ver10/advancedsecurity/wsdl"
#define SOAP_NAMESPACE_OF_tan	"http://www.onvif.org/ver20/analytics/wsdl"
#define SOAP_NAMESPACE_OF_tad	"http://www.onvif.org/ver10/analyticsdevice/wsdl"
#define SOAP_NAMESPACE_OF_ns6	"http://www.onvif.org/ver10/authenticationbehavior/wsdl"
#define SOAP_NAMESPACE_OF_ns7	"http://www.onvif.org/ver10/credential/wsdl"
#define SOAP_NAMESPACE_OF_tmd	"http://www.onvif.org/ver10/deviceIO/wsdl"
#define SOAP_NAMESPACE_OF_tds	"http://www.onvif.org/ver10/device/wsdl"
#define SOAP_NAMESPACE_OF_tls	"http://www.onvif.org/ver10/display/wsdl"
#define SOAP_NAMESPACE_OF_ns8	"http://www.onvif.org/ver10/doorcontrol/wsdl"
#define SOAP_NAMESPACE_OF_tev	"http://www.onvif.org/ver10/events/wsdl"
#define SOAP_NAMESPACE_OF_empty	""
#define SOAP_NAMESPACE_OF_wsrfrw	"http://docs.oasis-open.org/wsrf/rw-2"
#define SOAP_NAMESPACE_OF_wsrfr	"http://docs.oasis-open.org/wsrf/r-2"
#define SOAP_NAMESPACE_OF_timg	"http://www.onvif.org/ver20/imaging/wsdl"
#define SOAP_NAMESPACE_OF_trt	"http://www.onvif.org/ver10/media/wsdl"
#define SOAP_NAMESPACE_OF_ns9	"http://www.onvif.org/ver20/media/wsdl"
#define SOAP_NAMESPACE_OF_ns10	"http://www.onvif.org/ver10/provisioning/wsdl"
#define SOAP_NAMESPACE_OF_tptz	"http://www.onvif.org/ver20/ptz/wsdl"
#define SOAP_NAMESPACE_OF_trv	"http://www.onvif.org/ver10/receiver/wsdl"
#define SOAP_NAMESPACE_OF_trc	"http://www.onvif.org/ver10/recording/wsdl"
#define SOAP_NAMESPACE_OF_trp	"http://www.onvif.org/ver10/replay/wsdl"
#define SOAP_NAMESPACE_OF_ns11	"http://www.onvif.org/ver10/schedule/wsdl"
#define SOAP_NAMESPACE_OF_tse	"http://www.onvif.org/ver10/search/wsdl"
#define SOAP_NAMESPACE_OF_ns12	"http://www.onvif.org/ver10/thermal/wsdl"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20817
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_wsa5__RelationshipType
#define SOAP_TYPE_wsa5__RelationshipType (19)
/* wsa5:RelationshipType */
enum wsa5__RelationshipType { http_x003a_x002f_x002fwww_x002ew3_x002eorg_x002f2005_x002f08_x002faddressing_x002freply = 0 };
typedef enum wsa5__RelationshipType wsa5__RelationshipType;
#endif

#ifndef SOAP_TYPE_wsa5__FaultCodesType
#define SOAP_TYPE_wsa5__FaultCodesType (20)
/* wsa5:FaultCodesType */
enum wsa5__FaultCodesType { wsa5__InvalidAddressingHeader = 0, wsa5__InvalidAddress = 1, wsa5__InvalidEPR = 2, wsa5__InvalidCardinality = 3, wsa5__MissingAddressInEPR = 4, wsa5__DuplicateMessageID = 5, wsa5__ActionMismatch = 6, wsa5__MessageAddressingHeaderRequired = 7, wsa5__DestinationUnreachable = 8, wsa5__ActionNotSupported = 9, wsa5__EndpointUnavailable = 10 };
typedef enum wsa5__FaultCodesType wsa5__FaultCodesType;
#endif

#ifndef SOAP_TYPE__wsa5__IsReferenceParameter
#define SOAP_TYPE__wsa5__IsReferenceParameter (40)
/* wsa5:IsReferenceParameter */
enum _wsa5__IsReferenceParameter { _wsa5__IsReferenceParameter__false = 0, _wsa5__IsReferenceParameter__true = 1 };
typedef enum _wsa5__IsReferenceParameter _wsa5__IsReferenceParameter;
#endif

#ifndef SOAP_TYPE_wsu__tTimestampFault
#define SOAP_TYPE_wsu__tTimestampFault (57)
/* wsu:tTimestampFault */
enum wsu__tTimestampFault { wsu__MessageExpired = 0 };
typedef enum wsu__tTimestampFault wsu__tTimestampFault;
#endif

#ifndef SOAP_TYPE_wsse__FaultcodeEnum
#define SOAP_TYPE_wsse__FaultcodeEnum (59)
/* wsse:FaultcodeEnum */
enum wsse__FaultcodeEnum { wsse__UnsupportedSecurityToken = 0, wsse__UnsupportedAlgorithm = 1, wsse__InvalidSecurity = 2, wsse__InvalidSecurityToken = 3, wsse__FailedAuthentication = 4, wsse__FailedCheck = 5, wsse__SecurityTokenUnavailable = 6 };
typedef enum wsse__FaultcodeEnum wsse__FaultcodeEnum;
#endif

#ifndef SOAP_TYPE_wsc__FaultCodeType
#define SOAP_TYPE_wsc__FaultCodeType (131)
/* wsc:FaultCodeType */
enum wsc__FaultCodeType { wsc__BadContextToken = 0, wsc__UnsupportedContextToken = 1, wsc__UnknownDerivationSource = 2, wsc__RenewNeeded = 3, wsc__UnableToRenew = 4 };
#endif

#ifndef SOAP_TYPE_ns1__Decision
#define SOAP_TYPE_ns1__Decision (2018)
/* ns1:Decision */
enum ns1__Decision { ns1__Decision__Granted = 0, ns1__Decision__Denied = 1 };
#endif

#ifndef SOAP_TYPE_ns1__DenyReason
#define SOAP_TYPE_ns1__DenyReason (2020)
/* ns1:DenyReason */
enum ns1__DenyReason { ns1__DenyReason__CredentialNotEnabled = 0, ns1__DenyReason__CredentialNotActive = 1, ns1__DenyReason__CredentialExpired = 2, ns1__DenyReason__InvalidPIN = 3, ns1__DenyReason__NotPermittedAtThisTime = 4, ns1__DenyReason__Unauthorized = 5, ns1__DenyReason__Other = 6 };
#endif

#ifndef SOAP_TYPE_ns4__AddressFormatType
#define SOAP_TYPE_ns4__AddressFormatType (2030)
/* ns4:AddressFormatType */
enum ns4__AddressFormatType { ns4__AddressFormatType__hostname = 0, ns4__AddressFormatType__ipv4 = 1, ns4__AddressFormatType__ipv6 = 2, ns4__AddressFormatType__Extended = 3 };
#endif

#ifndef SOAP_TYPE_ns4__EMailAuthenticationMode
#define SOAP_TYPE_ns4__EMailAuthenticationMode (2032)
/* ns4:EMailAuthenticationMode */
enum ns4__EMailAuthenticationMode { ns4__EMailAuthenticationMode__none = 0, ns4__EMailAuthenticationMode__SMTP = 1, ns4__EMailAuthenticationMode__POPSMTP = 2, ns4__EMailAuthenticationMode__Extended = 3 };
#endif

#ifndef SOAP_TYPE_ns4__HttpProtocolType
#define SOAP_TYPE_ns4__HttpProtocolType (2034)
/* ns4:HttpProtocolType */
enum ns4__HttpProtocolType { ns4__HttpProtocolType__http = 0, ns4__HttpProtocolType__https = 1, ns4__HttpProtocolType__Extended = 2 };
#endif

#ifndef SOAP_TYPE_ns4__HttpAuthenticationMethodType
#define SOAP_TYPE_ns4__HttpAuthenticationMethodType (2036)
/* ns4:HttpAuthenticationMethodType */
enum ns4__HttpAuthenticationMethodType { ns4__HttpAuthenticationMethodType__none = 0, ns4__HttpAuthenticationMethodType__MD5Digest = 1, ns4__HttpAuthenticationMethodType__Extended = 2 };
#endif

#ifndef SOAP_TYPE_ns4__FileSuffixType
#define SOAP_TYPE_ns4__FileSuffixType (2038)
/* ns4:FileSuffixType */
enum ns4__FileSuffixType { ns4__FileSuffixType__none = 0, ns4__FileSuffixType__sequence = 1, ns4__FileSuffixType__dateTime = 2, ns4__FileSuffixType__Extended = 3 };
#endif

#ifndef SOAP_TYPE_tt__RotateMode
#define SOAP_TYPE_tt__RotateMode (2042)
/* tt:RotateMode */
enum tt__RotateMode { tt__RotateMode__OFF = 0, tt__RotateMode__ON = 1, tt__RotateMode__AUTO = 2 };
#endif

#ifndef SOAP_TYPE_tt__SceneOrientationMode
#define SOAP_TYPE_tt__SceneOrientationMode (2044)
/* tt:SceneOrientationMode */
enum tt__SceneOrientationMode { tt__SceneOrientationMode__MANUAL = 0, tt__SceneOrientationMode__AUTO = 1 };
#endif

#ifndef SOAP_TYPE_tt__SceneOrientationOption
#define SOAP_TYPE_tt__SceneOrientationOption (2046)
/* tt:SceneOrientationOption */
enum tt__SceneOrientationOption { tt__SceneOrientationOption__Below = 0, tt__SceneOrientationOption__Horizon = 1, tt__SceneOrientationOption__Above = 2 };
#endif

#ifndef SOAP_TYPE_tt__ViewModes
#define SOAP_TYPE_tt__ViewModes (2048)
/* tt:ViewModes */
enum tt__ViewModes { tt__ViewModes__tt_x003aFisheye = 0, tt__ViewModes__tt_x003a360Panorama = 1, tt__ViewModes__tt_x003a180Panorama = 2, tt__ViewModes__tt_x003aQuad = 3, tt__ViewModes__tt_x003aOriginal = 4, tt__ViewModes__tt_x003aLeftHalf = 5, tt__ViewModes__tt_x003aRightHalf = 6, tt__ViewModes__tt_x003aDewarp = 7 };
#endif

#ifndef SOAP_TYPE_tt__VideoEncoding
#define SOAP_TYPE_tt__VideoEncoding (2050)
/* tt:VideoEncoding */
enum tt__VideoEncoding { tt__VideoEncoding__JPEG = 0, tt__VideoEncoding__MPEG4 = 1, tt__VideoEncoding__H264 = 2 };
#endif

#ifndef SOAP_TYPE_tt__Mpeg4Profile
#define SOAP_TYPE_tt__Mpeg4Profile (2052)
/* tt:Mpeg4Profile */
enum tt__Mpeg4Profile { tt__Mpeg4Profile__SP = 0, tt__Mpeg4Profile__ASP = 1 };
#endif

#ifndef SOAP_TYPE_tt__H264Profile
#define SOAP_TYPE_tt__H264Profile (2054)
/* tt:H264Profile */
enum tt__H264Profile { tt__H264Profile__Baseline = 0, tt__H264Profile__Main = 1, tt__H264Profile__Extended = 2, tt__H264Profile__High = 3 };
#endif

#ifndef SOAP_TYPE_tt__VideoEncodingMimeNames
#define SOAP_TYPE_tt__VideoEncodingMimeNames (2056)
/* tt:VideoEncodingMimeNames */
enum tt__VideoEncodingMimeNames { tt__VideoEncodingMimeNames__JPEG = 0, tt__VideoEncodingMimeNames__MPV4_ES = 1, tt__VideoEncodingMimeNames__H264 = 2, tt__VideoEncodingMimeNames__H265 = 3 };
#endif

#ifndef SOAP_TYPE_tt__VideoEncodingProfiles
#define SOAP_TYPE_tt__VideoEncodingProfiles (2058)
/* tt:VideoEncodingProfiles */
enum tt__VideoEncodingProfiles { tt__VideoEncodingProfiles__Simple = 0, tt__VideoEncodingProfiles__AdvancedSimple = 1, tt__VideoEncodingProfiles__Baseline = 2, tt__VideoEncodingProfiles__Main = 3, tt__VideoEncodingProfiles__Main10 = 4, tt__VideoEncodingProfiles__Extended = 5, tt__VideoEncodingProfiles__High = 6 };
#endif

#ifndef SOAP_TYPE_tt__AudioEncoding
#define SOAP_TYPE_tt__AudioEncoding (2060)
/* tt:AudioEncoding */
enum tt__AudioEncoding { tt__AudioEncoding__G711 = 0, tt__AudioEncoding__G726 = 1, tt__AudioEncoding__AAC = 2 };
#endif

#ifndef SOAP_TYPE_tt__AudioEncodingMimeNames
#define SOAP_TYPE_tt__AudioEncodingMimeNames (2062)
/* tt:AudioEncodingMimeNames */
enum tt__AudioEncodingMimeNames { tt__AudioEncodingMimeNames__PCMU = 0, tt__AudioEncodingMimeNames__G726 = 1, tt__AudioEncodingMimeNames__MP4A_LATM = 2 };
#endif

#ifndef SOAP_TYPE_tt__MetadataCompressionType
#define SOAP_TYPE_tt__MetadataCompressionType (2064)
/* tt:MetadataCompressionType */
enum tt__MetadataCompressionType { tt__MetadataCompressionType__None = 0, tt__MetadataCompressionType__GZIP = 1, tt__MetadataCompressionType__EXI = 2 };
#endif

#ifndef SOAP_TYPE_tt__StreamType
#define SOAP_TYPE_tt__StreamType (2066)
/* tt:StreamType */
enum tt__StreamType { tt__StreamType__RTP_Unicast = 0, tt__StreamType__RTP_Multicast = 1 };
#endif

#ifndef SOAP_TYPE_tt__TransportProtocol
#define SOAP_TYPE_tt__TransportProtocol (2068)
/* tt:TransportProtocol */
enum tt__TransportProtocol { tt__TransportProtocol__UDP = 0, tt__TransportProtocol__TCP = 1, tt__TransportProtocol__RTSP = 2, tt__TransportProtocol__HTTP = 3 };
#endif

#ifndef SOAP_TYPE_tt__ScopeDefinition
#define SOAP_TYPE_tt__ScopeDefinition (2070)
/* tt:ScopeDefinition */
enum tt__ScopeDefinition { tt__ScopeDefinition__Fixed = 0, tt__ScopeDefinition__Configurable = 1 };
#endif

#ifndef SOAP_TYPE_tt__DiscoveryMode
#define SOAP_TYPE_tt__DiscoveryMode (2072)
/* tt:DiscoveryMode */
enum tt__DiscoveryMode { tt__DiscoveryMode__Discoverable = 0, tt__DiscoveryMode__NonDiscoverable = 1 };
#endif

#ifndef SOAP_TYPE_tt__Duplex
#define SOAP_TYPE_tt__Duplex (2076)
/* tt:Duplex */
enum tt__Duplex { tt__Duplex__Full = 0, tt__Duplex__Half = 1 };
#endif

#ifndef SOAP_TYPE_tt__IPv6DHCPConfiguration
#define SOAP_TYPE_tt__IPv6DHCPConfiguration (2080)
/* tt:IPv6DHCPConfiguration */
enum tt__IPv6DHCPConfiguration { tt__IPv6DHCPConfiguration__Auto = 0, tt__IPv6DHCPConfiguration__Stateful = 1, tt__IPv6DHCPConfiguration__Stateless = 2, tt__IPv6DHCPConfiguration__Off = 3 };
#endif

#ifndef SOAP_TYPE_tt__NetworkProtocolType
#define SOAP_TYPE_tt__NetworkProtocolType (2082)
/* tt:NetworkProtocolType */
enum tt__NetworkProtocolType { tt__NetworkProtocolType__HTTP = 0, tt__NetworkProtocolType__HTTPS = 1, tt__NetworkProtocolType__RTSP = 2 };
#endif

#ifndef SOAP_TYPE_tt__NetworkHostType
#define SOAP_TYPE_tt__NetworkHostType (2084)
/* tt:NetworkHostType */
enum tt__NetworkHostType { tt__NetworkHostType__IPv4 = 0, tt__NetworkHostType__IPv6 = 1, tt__NetworkHostType__DNS = 2 };
#endif

#ifndef SOAP_TYPE_tt__IPType
#define SOAP_TYPE_tt__IPType (2092)
/* tt:IPType */
enum tt__IPType { tt__IPType__IPv4 = 0, tt__IPType__IPv6 = 1 };
#endif

#ifndef SOAP_TYPE_tt__IPAddressFilterType
#define SOAP_TYPE_tt__IPAddressFilterType (2098)
/* tt:IPAddressFilterType */
enum tt__IPAddressFilterType { tt__IPAddressFilterType__Allow = 0, tt__IPAddressFilterType__Deny = 1 };
#endif

#ifndef SOAP_TYPE_tt__DynamicDNSType
#define SOAP_TYPE_tt__DynamicDNSType (2100)
/* tt:DynamicDNSType */
enum tt__DynamicDNSType { tt__DynamicDNSType__NoUpdate = 0, tt__DynamicDNSType__ClientUpdates = 1, tt__DynamicDNSType__ServerUpdates = 2 };
#endif

#ifndef SOAP_TYPE_tt__Dot11StationMode
#define SOAP_TYPE_tt__Dot11StationMode (2104)
/* tt:Dot11StationMode */
enum tt__Dot11StationMode { tt__Dot11StationMode__Ad_hoc = 0, tt__Dot11StationMode__Infrastructure = 1, tt__Dot11StationMode__Extended = 2 };
#endif

#ifndef SOAP_TYPE_tt__Dot11SecurityMode
#define SOAP_TYPE_tt__Dot11SecurityMode (2106)
/* tt:Dot11SecurityMode */
enum tt__Dot11SecurityMode { tt__Dot11SecurityMode__None = 0, tt__Dot11SecurityMode__WEP = 1, tt__Dot11SecurityMode__PSK = 2, tt__Dot11SecurityMode__Dot1X = 3, tt__Dot11SecurityMode__Extended = 4 };
#endif

#ifndef SOAP_TYPE_tt__Dot11Cipher
#define SOAP_TYPE_tt__Dot11Cipher (2108)
/* tt:Dot11Cipher */
enum tt__Dot11Cipher { tt__Dot11Cipher__CCMP = 0, tt__Dot11Cipher__TKIP = 1, tt__Dot11Cipher__Any = 2, tt__Dot11Cipher__Extended = 3 };
#endif

#ifndef SOAP_TYPE_tt__Dot11SignalStrength
#define SOAP_TYPE_tt__Dot11SignalStrength (2114)
/* tt:Dot11SignalStrength */
enum tt__Dot11SignalStrength { tt__Dot11SignalStrength__None = 0, tt__Dot11SignalStrength__Very_x0020Bad = 1, tt__Dot11SignalStrength__Bad = 2, tt__Dot11SignalStrength__Good = 3, tt__Dot11SignalStrength__Very_x0020Good = 4, tt__Dot11SignalStrength__Extended = 5 };
#endif

#ifndef SOAP_TYPE_tt__Dot11AuthAndMangementSuite
#define SOAP_TYPE_tt__Dot11AuthAndMangementSuite (2116)
/* tt:Dot11AuthAndMangementSuite */
enum tt__Dot11AuthAndMangementSuite { tt__Dot11AuthAndMangementSuite__None = 0, tt__Dot11AuthAndMangementSuite__Dot1X = 1, tt__Dot11AuthAndMangementSuite__PSK = 2, tt__Dot11AuthAndMangementSuite__Extended = 3 };
#endif

#ifndef SOAP_TYPE_tt__CapabilityCategory
#define SOAP_TYPE_tt__CapabilityCategory (2118)
/* tt:CapabilityCategory */
enum tt__CapabilityCategory { tt__CapabilityCategory__All = 0, tt__CapabilityCategory__Analytics = 1, tt__CapabilityCategory__Device = 2, tt__CapabilityCategory__Events = 3, tt__CapabilityCategory__Imaging = 4, tt__CapabilityCategory__Media = 5, tt__CapabilityCategory__PTZ = 6 };
#endif

#ifndef SOAP_TYPE_tt__SystemLogType
#define SOAP_TYPE_tt__SystemLogType (2120)
/* tt:SystemLogType */
enum tt__SystemLogType { tt__SystemLogType__System = 0, tt__SystemLogType__Access = 1 };
#endif

#ifndef SOAP_TYPE_tt__FactoryDefaultType
#define SOAP_TYPE_tt__FactoryDefaultType (2122)
/* tt:FactoryDefaultType */
enum tt__FactoryDefaultType { tt__FactoryDefaultType__Hard = 0, tt__FactoryDefaultType__Soft = 1 };
#endif

#ifndef SOAP_TYPE_tt__SetDateTimeType
#define SOAP_TYPE_tt__SetDateTimeType (2124)
/* tt:SetDateTimeType */
enum tt__SetDateTimeType { tt__SetDateTimeType__Manual = 0, tt__SetDateTimeType__NTP = 1 };
#endif

#ifndef SOAP_TYPE_tt__UserLevel
#define SOAP_TYPE_tt__UserLevel (2126)
/* tt:UserLevel */
enum tt__UserLevel { tt__UserLevel__Administrator = 0, tt__UserLevel__Operator = 1, tt__UserLevel__User = 2, tt__UserLevel__Anonymous = 3, tt__UserLevel__Extended = 4 };
#endif

#ifndef SOAP_TYPE_tt__RelayLogicalState
#define SOAP_TYPE_tt__RelayLogicalState (2128)
/* tt:RelayLogicalState */
enum tt__RelayLogicalState { tt__RelayLogicalState__active = 0, tt__RelayLogicalState__inactive = 1 };
#endif

#ifndef SOAP_TYPE_tt__RelayIdleState
#define SOAP_TYPE_tt__RelayIdleState (2130)
/* tt:RelayIdleState */
enum tt__RelayIdleState { tt__RelayIdleState__closed = 0, tt__RelayIdleState__open = 1 };
#endif

#ifndef SOAP_TYPE_tt__RelayMode
#define SOAP_TYPE_tt__RelayMode (2132)
/* tt:RelayMode */
enum tt__RelayMode { tt__RelayMode__Monostable = 0, tt__RelayMode__Bistable = 1 };
#endif

#ifndef SOAP_TYPE_tt__DigitalIdleState
#define SOAP_TYPE_tt__DigitalIdleState (2134)
/* tt:DigitalIdleState */
enum tt__DigitalIdleState { tt__DigitalIdleState__closed = 0, tt__DigitalIdleState__open = 1 };
#endif

#ifndef SOAP_TYPE_tt__EFlipMode
#define SOAP_TYPE_tt__EFlipMode (2136)
/* tt:EFlipMode */
enum tt__EFlipMode { tt__EFlipMode__OFF = 0, tt__EFlipMode__ON = 1, tt__EFlipMode__Extended = 2 };
#endif

#ifndef SOAP_TYPE_tt__ReverseMode
#define SOAP_TYPE_tt__ReverseMode (2138)
/* tt:ReverseMode */
enum tt__ReverseMode { tt__ReverseMode__OFF = 0, tt__ReverseMode__ON = 1, tt__ReverseMode__AUTO = 2, tt__ReverseMode__Extended = 3 };
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourState
#define SOAP_TYPE_tt__PTZPresetTourState (2142)
/* tt:PTZPresetTourState */
enum tt__PTZPresetTourState { tt__PTZPresetTourState__Idle = 0, tt__PTZPresetTourState__Touring = 1, tt__PTZPresetTourState__Paused = 2, tt__PTZPresetTourState__Extended = 3 };
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourDirection
#define SOAP_TYPE_tt__PTZPresetTourDirection (2144)
/* tt:PTZPresetTourDirection */
enum tt__PTZPresetTourDirection { tt__PTZPresetTourDirection__Forward = 0, tt__PTZPresetTourDirection__Backward = 1, tt__PTZPresetTourDirection__Extended = 2 };
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourOperation
#define SOAP_TYPE_tt__PTZPresetTourOperation (2146)
/* tt:PTZPresetTourOperation */
enum tt__PTZPresetTourOperation { tt__PTZPresetTourOperation__Start = 0, tt__PTZPresetTourOperation__Stop = 1, tt__PTZPresetTourOperation__Pause = 2, tt__PTZPresetTourOperation__Extended = 3 };
#endif

#ifndef SOAP_TYPE_tt__AutoFocusMode
#define SOAP_TYPE_tt__AutoFocusMode (2148)
/* tt:AutoFocusMode */
enum tt__AutoFocusMode { tt__AutoFocusMode__AUTO = 0, tt__AutoFocusMode__MANUAL = 1 };
#endif

#ifndef SOAP_TYPE_tt__WideDynamicMode
#define SOAP_TYPE_tt__WideDynamicMode (2150)
/* tt:WideDynamicMode */
enum tt__WideDynamicMode { tt__WideDynamicMode__OFF = 0, tt__WideDynamicMode__ON = 1 };
#endif

#ifndef SOAP_TYPE_tt__BacklightCompensationMode
#define SOAP_TYPE_tt__BacklightCompensationMode (2152)
/* tt:BacklightCompensationMode */
enum tt__BacklightCompensationMode { tt__BacklightCompensationMode__OFF = 0, tt__BacklightCompensationMode__ON = 1 };
#endif

#ifndef SOAP_TYPE_tt__ExposurePriority
#define SOAP_TYPE_tt__ExposurePriority (2154)
/* tt:ExposurePriority */
enum tt__ExposurePriority { tt__ExposurePriority__LowNoise = 0, tt__ExposurePriority__FrameRate = 1 };
#endif

#ifndef SOAP_TYPE_tt__ExposureMode
#define SOAP_TYPE_tt__ExposureMode (2156)
/* tt:ExposureMode */
enum tt__ExposureMode { tt__ExposureMode__AUTO = 0, tt__ExposureMode__MANUAL = 1 };
#endif

#ifndef SOAP_TYPE_tt__Enabled
#define SOAP_TYPE_tt__Enabled (2158)
/* tt:Enabled */
enum tt__Enabled { tt__Enabled__ENABLED = 0, tt__Enabled__DISABLED = 1 };
#endif

#ifndef SOAP_TYPE_tt__WhiteBalanceMode
#define SOAP_TYPE_tt__WhiteBalanceMode (2160)
/* tt:WhiteBalanceMode */
enum tt__WhiteBalanceMode { tt__WhiteBalanceMode__AUTO = 0, tt__WhiteBalanceMode__MANUAL = 1 };
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterMode
#define SOAP_TYPE_tt__IrCutFilterMode (2162)
/* tt:IrCutFilterMode */
enum tt__IrCutFilterMode { tt__IrCutFilterMode__ON = 0, tt__IrCutFilterMode__OFF = 1, tt__IrCutFilterMode__AUTO = 2 };
#endif

#ifndef SOAP_TYPE_tt__ImageStabilizationMode
#define SOAP_TYPE_tt__ImageStabilizationMode (2164)
/* tt:ImageStabilizationMode */
enum tt__ImageStabilizationMode { tt__ImageStabilizationMode__OFF = 0, tt__ImageStabilizationMode__ON = 1, tt__ImageStabilizationMode__AUTO = 2, tt__ImageStabilizationMode__Extended = 3 };
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterAutoBoundaryType
#define SOAP_TYPE_tt__IrCutFilterAutoBoundaryType (2166)
/* tt:IrCutFilterAutoBoundaryType */
enum tt__IrCutFilterAutoBoundaryType { tt__IrCutFilterAutoBoundaryType__Common = 0, tt__IrCutFilterAutoBoundaryType__ToOn = 1, tt__IrCutFilterAutoBoundaryType__ToOff = 2, tt__IrCutFilterAutoBoundaryType__Extended = 3 };
#endif

#ifndef SOAP_TYPE_tt__ToneCompensationMode
#define SOAP_TYPE_tt__ToneCompensationMode (2168)
/* tt:ToneCompensationMode */
enum tt__ToneCompensationMode { tt__ToneCompensationMode__OFF = 0, tt__ToneCompensationMode__ON = 1, tt__ToneCompensationMode__AUTO = 2 };
#endif

#ifndef SOAP_TYPE_tt__DefoggingMode
#define SOAP_TYPE_tt__DefoggingMode (2170)
/* tt:DefoggingMode */
enum tt__DefoggingMode { tt__DefoggingMode__OFF = 0, tt__DefoggingMode__ON = 1, tt__DefoggingMode__AUTO = 2 };
#endif

#ifndef SOAP_TYPE_tt__PropertyOperation
#define SOAP_TYPE_tt__PropertyOperation (2174)
/* tt:PropertyOperation */
enum tt__PropertyOperation { tt__PropertyOperation__Initialized = 0, tt__PropertyOperation__Deleted = 1, tt__PropertyOperation__Changed = 2 };
#endif

#ifndef SOAP_TYPE_tt__Direction
#define SOAP_TYPE_tt__Direction (2176)
/* tt:Direction */
enum tt__Direction { tt__Direction__Left = 0, tt__Direction__Right = 1, tt__Direction__Any = 2 };
#endif

#ifndef SOAP_TYPE_tt__ReceiverMode
#define SOAP_TYPE_tt__ReceiverMode (2178)
/* tt:ReceiverMode */
enum tt__ReceiverMode { tt__ReceiverMode__AutoConnect = 0, tt__ReceiverMode__AlwaysConnect = 1, tt__ReceiverMode__NeverConnect = 2, tt__ReceiverMode__Unknown = 3 };
#endif

#ifndef SOAP_TYPE_tt__ReceiverState
#define SOAP_TYPE_tt__ReceiverState (2180)
/* tt:ReceiverState */
enum tt__ReceiverState { tt__ReceiverState__NotConnected = 0, tt__ReceiverState__Connecting = 1, tt__ReceiverState__Connected = 2, tt__ReceiverState__Unknown = 3 };
#endif

#ifndef SOAP_TYPE_tt__SearchState
#define SOAP_TYPE_tt__SearchState (2186)
/* tt:SearchState */
enum tt__SearchState { tt__SearchState__Queued = 0, tt__SearchState__Searching = 1, tt__SearchState__Completed = 2, tt__SearchState__Unknown = 3 };
#endif

#ifndef SOAP_TYPE_tt__RecordingStatus
#define SOAP_TYPE_tt__RecordingStatus (2188)
/* tt:RecordingStatus */
enum tt__RecordingStatus { tt__RecordingStatus__Initiated = 0, tt__RecordingStatus__Recording = 1, tt__RecordingStatus__Stopped = 2, tt__RecordingStatus__Removing = 3, tt__RecordingStatus__Removed = 4, tt__RecordingStatus__Unknown = 5 };
#endif

#ifndef SOAP_TYPE_tt__TrackType
#define SOAP_TYPE_tt__TrackType (2190)
/* tt:TrackType */
enum tt__TrackType { tt__TrackType__Video = 0, tt__TrackType__Audio = 1, tt__TrackType__Metadata = 2, tt__TrackType__Extended = 3 };
#endif

#ifndef SOAP_TYPE_tt__ModeOfOperation
#define SOAP_TYPE_tt__ModeOfOperation (2196)
/* tt:ModeOfOperation */
enum tt__ModeOfOperation { tt__ModeOfOperation__Idle = 0, tt__ModeOfOperation__Active = 1, tt__ModeOfOperation__Unknown = 2 };
#endif

#ifndef SOAP_TYPE_tt__OSDType
#define SOAP_TYPE_tt__OSDType (2200)
/* tt:OSDType */
enum tt__OSDType { tt__OSDType__Text = 0, tt__OSDType__Image = 1, tt__OSDType__Extended = 2 };
#endif

#ifndef SOAP_TYPE_tt__MoveStatus
#define SOAP_TYPE_tt__MoveStatus (2204)
/* tt:MoveStatus */
enum tt__MoveStatus { tt__MoveStatus__IDLE = 0, tt__MoveStatus__MOVING = 1, tt__MoveStatus__UNKNOWN = 2 };
#endif

#ifndef SOAP_TYPE_tt__Entity
#define SOAP_TYPE_tt__Entity (2206)
/* tt:Entity */
enum tt__Entity { tt__Entity__Device = 0, tt__Entity__VideoSource = 1, tt__Entity__AudioSource = 2 };
#endif

#ifndef SOAP_TYPE_ns5__KeyStatus
#define SOAP_TYPE_ns5__KeyStatus (2224)
/* ns5:KeyStatus */
enum ns5__KeyStatus { ns5__KeyStatus__ok = 0, ns5__KeyStatus__generating = 1, ns5__KeyStatus__corrupt = 2 };
#endif

#ifndef SOAP_TYPE_tmd__SerialPortType
#define SOAP_TYPE_tmd__SerialPortType (2238)
/* tmd:SerialPortType */
enum tmd__SerialPortType { tmd__SerialPortType__RS232 = 0, tmd__SerialPortType__RS422HalfDuplex = 1, tmd__SerialPortType__RS422FullDuplex = 2, tmd__SerialPortType__RS485HalfDuplex = 3, tmd__SerialPortType__RS485FullDuplex = 4, tmd__SerialPortType__Generic = 5 };
#endif

#ifndef SOAP_TYPE_tmd__ParityBit
#define SOAP_TYPE_tmd__ParityBit (2240)
/* tmd:ParityBit */
enum tmd__ParityBit { tmd__ParityBit__None = 0, tmd__ParityBit__Even = 1, tmd__ParityBit__Odd = 2, tmd__ParityBit__Mark = 3, tmd__ParityBit__Space = 4, tmd__ParityBit__Extended = 5 };
#endif

#ifndef SOAP_TYPE_tds__AutoGeoModes
#define SOAP_TYPE_tds__AutoGeoModes (2242)
/* tds:AutoGeoModes */
enum tds__AutoGeoModes { tds__AutoGeoModes__Location = 0, tds__AutoGeoModes__Heading = 1, tds__AutoGeoModes__Leveling = 2 };
#endif

#ifndef SOAP_TYPE_tds__StorageType
#define SOAP_TYPE_tds__StorageType (2244)
/* tds:StorageType */
enum tds__StorageType { tds__StorageType__NFS = 0, tds__StorageType__CIFS = 1, tds__StorageType__CDMI = 2, tds__StorageType__FTP = 3 };
#endif

#ifndef SOAP_TYPE_ns8__DoorPhysicalState
#define SOAP_TYPE_ns8__DoorPhysicalState (2246)
/* ns8:DoorPhysicalState */
enum ns8__DoorPhysicalState { ns8__DoorPhysicalState__Unknown = 0, ns8__DoorPhysicalState__Open = 1, ns8__DoorPhysicalState__Closed = 2, ns8__DoorPhysicalState__Fault = 3 };
#endif

#ifndef SOAP_TYPE_ns8__LockPhysicalState
#define SOAP_TYPE_ns8__LockPhysicalState (2248)
/* ns8:LockPhysicalState */
enum ns8__LockPhysicalState { ns8__LockPhysicalState__Unknown = 0, ns8__LockPhysicalState__Locked = 1, ns8__LockPhysicalState__Unlocked = 2, ns8__LockPhysicalState__Fault = 3 };
#endif

#ifndef SOAP_TYPE_ns8__DoorAlarmState
#define SOAP_TYPE_ns8__DoorAlarmState (2250)
/* ns8:DoorAlarmState */
enum ns8__DoorAlarmState { ns8__DoorAlarmState__Normal = 0, ns8__DoorAlarmState__DoorForcedOpen = 1, ns8__DoorAlarmState__DoorOpenTooLong = 2 };
#endif

#ifndef SOAP_TYPE_ns8__DoorTamperState
#define SOAP_TYPE_ns8__DoorTamperState (2252)
/* ns8:DoorTamperState */
enum ns8__DoorTamperState { ns8__DoorTamperState__Unknown = 0, ns8__DoorTamperState__NotInTamper = 1, ns8__DoorTamperState__TamperDetected = 2 };
#endif

#ifndef SOAP_TYPE_ns8__DoorFaultState
#define SOAP_TYPE_ns8__DoorFaultState (2254)
/* ns8:DoorFaultState */
enum ns8__DoorFaultState { ns8__DoorFaultState__Unknown = 0, ns8__DoorFaultState__NotInFault = 1, ns8__DoorFaultState__FaultDetected = 2 };
#endif

#ifndef SOAP_TYPE_ns8__DoorMode
#define SOAP_TYPE_ns8__DoorMode (2256)
/* ns8:DoorMode */
enum ns8__DoorMode { ns8__DoorMode__Unknown = 0, ns8__DoorMode__Locked = 1, ns8__DoorMode__Unlocked = 2, ns8__DoorMode__Accessed = 3, ns8__DoorMode__Blocked = 4, ns8__DoorMode__LockedDown = 5, ns8__DoorMode__LockedOpen = 6, ns8__DoorMode__DoubleLocked = 7 };
#endif

#ifndef SOAP_TYPE_timg__ImagingPresetType
#define SOAP_TYPE_timg__ImagingPresetType (2258)
/* timg:ImagingPresetType */
enum timg__ImagingPresetType { timg__ImagingPresetType__Custom = 0, timg__ImagingPresetType__ClearWeather = 1, timg__ImagingPresetType__Cloudy = 2, timg__ImagingPresetType__Fog = 3, timg__ImagingPresetType__Rain = 4, timg__ImagingPresetType__Snowing = 5, timg__ImagingPresetType__Snow = 6, timg__ImagingPresetType__WDR = 7, timg__ImagingPresetType__Shade = 8, timg__ImagingPresetType__Night = 9, timg__ImagingPresetType__Indoor = 10, timg__ImagingPresetType__Fluorescent = 11, timg__ImagingPresetType__Incandescent = 12, timg__ImagingPresetType__Sodium_x0028Natrium_x0029 = 13, timg__ImagingPresetType__Sunrise_x0028Horizon_x0029 = 14, timg__ImagingPresetType__Sunset_x0028Rear_x0029 = 15, timg__ImagingPresetType__ExtremeHot = 16, timg__ImagingPresetType__ExtremeCold = 17, timg__ImagingPresetType__Underwater = 18, timg__ImagingPresetType__CloseUp = 19, timg__ImagingPresetType__Motion = 20, timg__ImagingPresetType__FlickerFree50 = 21, timg__ImagingPresetType__FlickerFree60 = 22 };
#endif

#ifndef SOAP_TYPE_ns9__ConfigurationEnumeration
#define SOAP_TYPE_ns9__ConfigurationEnumeration (2260)
/* ns9:ConfigurationEnumeration */
enum ns9__ConfigurationEnumeration { ns9__ConfigurationEnumeration__All = 0, ns9__ConfigurationEnumeration__VideoSource = 1, ns9__ConfigurationEnumeration__VideoEncoder = 2, ns9__ConfigurationEnumeration__AudioSource = 3, ns9__ConfigurationEnumeration__AudioEncoder = 4, ns9__ConfigurationEnumeration__AudioOutput = 5, ns9__ConfigurationEnumeration__AudioDecoder = 6, ns9__ConfigurationEnumeration__Metadata = 7, ns9__ConfigurationEnumeration__Analytics = 8, ns9__ConfigurationEnumeration__PTZ = 9 };
#endif

#ifndef SOAP_TYPE_ns9__TransportProtocol
#define SOAP_TYPE_ns9__TransportProtocol (2262)
/* ns9:TransportProtocol */
enum ns9__TransportProtocol { ns9__TransportProtocol__RtspUnicast = 0, ns9__TransportProtocol__RtspMulticast = 1, ns9__TransportProtocol__RTSP = 2, ns9__TransportProtocol__RtspOverHttp = 3 };
#endif

#ifndef SOAP_TYPE_ns9__MaskType
#define SOAP_TYPE_ns9__MaskType (2264)
/* ns9:MaskType */
enum ns9__MaskType { ns9__MaskType__Color = 0, ns9__MaskType__Pixelated = 1, ns9__MaskType__Blurred = 2 };
#endif

#ifndef SOAP_TYPE_ns10__PanDirection
#define SOAP_TYPE_ns10__PanDirection (2266)
/* ns10:PanDirection */
enum ns10__PanDirection { ns10__PanDirection__Left = 0, ns10__PanDirection__Right = 1 };
#endif

#ifndef SOAP_TYPE_ns10__TiltDirection
#define SOAP_TYPE_ns10__TiltDirection (2268)
/* ns10:TiltDirection */
enum ns10__TiltDirection { ns10__TiltDirection__Up = 0, ns10__TiltDirection__Down = 1 };
#endif

#ifndef SOAP_TYPE_ns10__ZoomDirection
#define SOAP_TYPE_ns10__ZoomDirection (2270)
/* ns10:ZoomDirection */
enum ns10__ZoomDirection { ns10__ZoomDirection__Wide = 0, ns10__ZoomDirection__Telephoto = 1 };
#endif

#ifndef SOAP_TYPE_ns10__RollDirection
#define SOAP_TYPE_ns10__RollDirection (2272)
/* ns10:RollDirection */
enum ns10__RollDirection { ns10__RollDirection__Clockwise = 0, ns10__RollDirection__Counterclockwise = 1, ns10__RollDirection__Auto = 2 };
#endif

#ifndef SOAP_TYPE_ns10__FocusDirection
#define SOAP_TYPE_ns10__FocusDirection (2274)
/* ns10:FocusDirection */
enum ns10__FocusDirection { ns10__FocusDirection__Near = 0, ns10__FocusDirection__Far = 1, ns10__FocusDirection__Auto = 2 };
#endif

#ifndef SOAP_TYPE_ns12__Polarity
#define SOAP_TYPE_ns12__Polarity (2276)
/* ns12:Polarity */
enum ns12__Polarity { ns12__Polarity__WhiteHot = 0, ns12__Polarity__BlackHot = 1 };
#endif

#ifndef SOAP_TYPE_ns12__ColorPaletteType
#define SOAP_TYPE_ns12__ColorPaletteType (2278)
/* ns12:ColorPaletteType */
enum ns12__ColorPaletteType { ns12__ColorPaletteType__Custom = 0, ns12__ColorPaletteType__Grayscale = 1, ns12__ColorPaletteType__BlackHot = 2, ns12__ColorPaletteType__WhiteHot = 3, ns12__ColorPaletteType__Sepia = 4, ns12__ColorPaletteType__Red = 5, ns12__ColorPaletteType__Iron = 6, ns12__ColorPaletteType__Rain = 7, ns12__ColorPaletteType__Rainbow = 8, ns12__ColorPaletteType__Isotherm = 9 };
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE_xsd__duration
#define SOAP_TYPE_xsd__duration (158)
typedef LONG64 xsd__duration;
#endif
#ifndef SOAP_TYPE_xsd__QName
#define SOAP_TYPE_xsd__QName (153)
typedef std::string xsd__QName;
#endif


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE__xop__Include
#define SOAP_TYPE__xop__Include (8)
/* Base64 schema type: */
struct _xop__Include
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 8; } /* = unique type id SOAP_TYPE__xop__Include */
};
typedef struct _xop__Include _xop__Include;
#endif

#ifndef SOAP_TYPE_wsa5__EndpointReferenceType
#define SOAP_TYPE_wsa5__EndpointReferenceType (12)
/* wsa5:EndpointReferenceType */
struct wsa5__EndpointReferenceType
{
public:
	char *Address;	/* required element of type xsd:string */
	struct wsa5__ReferenceParametersType *ReferenceParameters;	/* optional element of type wsa5:ReferenceParametersType */
	struct wsa5__MetadataType *Metadata;	/* optional element of type wsa5:MetadataType */
	int __size;	/* sequence of elements <-any> */
	char **__any;
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
public:
	int soap_type() const { return 12; } /* = unique type id SOAP_TYPE_wsa5__EndpointReferenceType */
};
typedef struct wsa5__EndpointReferenceType wsa5__EndpointReferenceType;
#endif

#ifndef SOAP_TYPE_wsa5__ReferenceParametersType
#define SOAP_TYPE_wsa5__ReferenceParametersType (13)
/* wsa5:ReferenceParametersType */
struct wsa5__ReferenceParametersType
{
public:
	int *chan__ChannelInstance;	/* optional element of type xsd:int */
	int __size;	/* sequence of elements <-any> */
	char **__any;
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
public:
	int soap_type() const { return 13; } /* = unique type id SOAP_TYPE_wsa5__ReferenceParametersType */
};
typedef struct wsa5__ReferenceParametersType wsa5__ReferenceParametersType;
#endif

#ifndef SOAP_TYPE_wsa5__MetadataType
#define SOAP_TYPE_wsa5__MetadataType (14)
/* wsa5:MetadataType */
struct wsa5__MetadataType
{
public:
	int __size;	/* sequence of elements <-any> */
	char **__any;
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
public:
	int soap_type() const { return 14; } /* = unique type id SOAP_TYPE_wsa5__MetadataType */
};
typedef struct wsa5__MetadataType wsa5__MetadataType;
#endif

#ifndef SOAP_TYPE_wsa5__ProblemActionType
#define SOAP_TYPE_wsa5__ProblemActionType (16)
/* wsa5:ProblemActionType */
struct wsa5__ProblemActionType
{
public:
	char *Action;	/* optional element of type xsd:string */
	char *SoapAction;	/* optional element of type xsd:string */
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
public:
	int soap_type() const { return 16; } /* = unique type id SOAP_TYPE_wsa5__ProblemActionType */
};
typedef struct wsa5__ProblemActionType wsa5__ProblemActionType;
#endif

#ifndef SOAP_TYPE_wsa5__RelatesToType
#define SOAP_TYPE_wsa5__RelatesToType (15)
/* Primitive wsa5:RelatesToType schema type: */
struct wsa5__RelatesToType
{
public:
	char *__item;
	char *RelationshipType;	/* optional attribute of type wsa5:RelationshipTypeOpenEnum */
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
public:
	int soap_type() const { return 15; } /* = unique type id SOAP_TYPE_wsa5__RelatesToType */
};
typedef struct wsa5__RelatesToType wsa5__RelatesToType;
#endif

#ifndef SOAP_TYPE_chan__ChannelInstanceType
#define SOAP_TYPE_chan__ChannelInstanceType (41)
/* Primitive chan:ChannelInstanceType schema type: */
struct chan__ChannelInstanceType
{
public:
	int __item;
	enum _wsa5__IsReferenceParameter wsa5__IsReferenceParameter;	/* optional attribute of type wsa5:IsReferenceParameter */
public:
	int soap_type() const { return 41; } /* = unique type id SOAP_TYPE_chan__ChannelInstanceType */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (42)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	char *wsa5__MessageID;	/* optional element of type wsa5:MessageID */
	struct wsa5__RelatesToType *wsa5__RelatesTo;	/* optional element of type wsa5:RelatesTo */
	struct wsa5__EndpointReferenceType *wsa5__From;	/* optional element of type wsa5:From */
	struct wsa5__EndpointReferenceType *wsa5__ReplyTo;	/* mustUnderstand */
	struct wsa5__EndpointReferenceType *wsa5__FaultTo;	/* mustUnderstand */
	char *wsa5__To;	/* mustUnderstand */
	char *wsa5__Action;	/* mustUnderstand */
	struct chan__ChannelInstanceType *chan__ChannelInstance;	/* optional element of type chan:ChannelInstanceType */
	struct _wsse__Security *wsse__Security;	/* mustUnderstand */
public:
	int soap_type() const { return 42; } /* = unique type id SOAP_TYPE_SOAP_ENV__Header */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (50)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 50; } /* = unique type id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (52)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 52; } /* = unique type id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (56)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 56; } /* = unique type id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

#ifndef SOAP_TYPE__wsu__Timestamp
#define SOAP_TYPE__wsu__Timestamp (58)
/* wsu:Timestamp */
struct _wsu__Timestamp
{
public:
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *Created;	/* optional element of type xsd:string */
	char *Expires;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 58; } /* = unique type id SOAP_TYPE__wsu__Timestamp */
};
typedef struct _wsu__Timestamp _wsu__Timestamp;
#endif

#ifndef SOAP_TYPE__wsse__UsernameToken
#define SOAP_TYPE__wsse__UsernameToken (60)
/* wsse:UsernameToken */
struct _wsse__UsernameToken
{
public:
	char *Username;	/* optional element of type xsd:string */
	struct _wsse__Password *Password;	/* optional element of type wsse:Password */
	char *Nonce;	/* optional element of type xsd:string */
	char *wsu__Created;	/* optional element of type xsd:string */
	char *wsu__Id;	/* optional attribute of type xsd:string */
public:
	int soap_type() const { return 60; } /* = unique type id SOAP_TYPE__wsse__UsernameToken */
};
typedef struct _wsse__UsernameToken _wsse__UsernameToken;
#endif

#ifndef SOAP_TYPE__wsse__BinarySecurityToken
#define SOAP_TYPE__wsse__BinarySecurityToken (63)
/* Primitive wsse:BinarySecurityToken schema type: */
struct _wsse__BinarySecurityToken
{
public:
	char *__item;
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *ValueType;	/* optional attribute of type xsd:string */
	char *EncodingType;	/* optional attribute of type xsd:string */
public:
	int soap_type() const { return 63; } /* = unique type id SOAP_TYPE__wsse__BinarySecurityToken */
};
typedef struct _wsse__BinarySecurityToken _wsse__BinarySecurityToken;
#endif

#ifndef SOAP_TYPE__wsse__Reference
#define SOAP_TYPE__wsse__Reference (64)
/* wsse:Reference */
struct _wsse__Reference
{
public:
	char *URI;	/* optional attribute of type xsd:string */
	char *ValueType;	/* optional attribute of type xsd:string */
public:
	int soap_type() const { return 64; } /* = unique type id SOAP_TYPE__wsse__Reference */
};
typedef struct _wsse__Reference _wsse__Reference;
#endif

#ifndef SOAP_TYPE__wsse__Embedded
#define SOAP_TYPE__wsse__Embedded (65)
/* wsse:Embedded */
struct _wsse__Embedded
{
public:
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *ValueType;	/* optional attribute of type xsd:string */
public:
	int soap_type() const { return 65; } /* = unique type id SOAP_TYPE__wsse__Embedded */
};
typedef struct _wsse__Embedded _wsse__Embedded;
#endif

#ifndef SOAP_TYPE__wsse__KeyIdentifier
#define SOAP_TYPE__wsse__KeyIdentifier (66)
/* Primitive wsse:KeyIdentifier schema type: */
struct _wsse__KeyIdentifier
{
public:
	char *__item;
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *ValueType;	/* optional attribute of type xsd:string */
	char *EncodingType;	/* optional attribute of type xsd:string */
public:
	int soap_type() const { return 66; } /* = unique type id SOAP_TYPE__wsse__KeyIdentifier */
};
typedef struct _wsse__KeyIdentifier _wsse__KeyIdentifier;
#endif

#ifndef SOAP_TYPE__wsse__SecurityTokenReference
#define SOAP_TYPE__wsse__SecurityTokenReference (67)
/* wsse:SecurityTokenReference */
struct _wsse__SecurityTokenReference
{
public:
	struct _wsse__Reference *Reference;	/* optional element of type wsse:Reference */
	struct _wsse__KeyIdentifier *KeyIdentifier;	/* optional element of type wsse:KeyIdentifier */
	struct _wsse__Embedded *Embedded;	/* optional element of type wsse:Embedded */
	struct ds__X509DataType *ds__X509Data;	/* optional element of type ds:X509DataType */
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *wsc__Instance;	/* optional attribute of type xsd:string */
	char *Usage;	/* optional attribute of type xsd:string */
public:
	int soap_type() const { return 67; } /* = unique type id SOAP_TYPE__wsse__SecurityTokenReference */
};
typedef struct _wsse__SecurityTokenReference _wsse__SecurityTokenReference;
#endif

#ifndef SOAP_TYPE_ds__SignatureType
#define SOAP_TYPE_ds__SignatureType (73)
/* ds:SignatureType */
struct ds__SignatureType
{
public:
	struct ds__SignedInfoType *SignedInfo;	/* optional element of type ds:SignedInfoType */
	char *SignatureValue;	/* optional element of type xsd:string */
	struct ds__KeyInfoType *KeyInfo;	/* optional element of type ds:KeyInfoType */
	char *Id;	/* optional attribute of type xsd:string */
public:
	int soap_type() const { return 73; } /* = unique type id SOAP_TYPE_ds__SignatureType */
};
typedef struct ds__SignatureType ds__SignatureType;
#endif

#ifndef SOAP_TYPE__c14n__InclusiveNamespaces
#define SOAP_TYPE__c14n__InclusiveNamespaces (83)
/* c14n:InclusiveNamespaces */
struct _c14n__InclusiveNamespaces
{
public:
	char *PrefixList;	/* optional attribute of type xsd:string */
public:
	int soap_type() const { return 83; } /* = unique type id SOAP_TYPE__c14n__InclusiveNamespaces */
};
typedef struct _c14n__InclusiveNamespaces _c14n__InclusiveNamespaces;
#endif

#ifndef SOAP_TYPE_ds__TransformType
#define SOAP_TYPE_ds__TransformType (84)
/* ds:TransformType */
struct ds__TransformType
{
public:
	struct _c14n__InclusiveNamespaces *c14n__InclusiveNamespaces;	/* optional element of type c14n:InclusiveNamespaces */
	char *__any;
	char *Algorithm;	/* optional attribute of type xsd:string */
public:
	int soap_type() const { return 84; } /* = unique type id SOAP_TYPE_ds__TransformType */
};
typedef struct ds__TransformType ds__TransformType;
#endif

#ifndef SOAP_TYPE_ds__KeyInfoType
#define SOAP_TYPE_ds__KeyInfoType (76)
/* ds:KeyInfoType */
struct ds__KeyInfoType
{
public:
	char *KeyName;	/* optional element of type xsd:string */
	struct ds__KeyValueType *KeyValue;	/* optional element of type ds:KeyValueType */
	struct ds__RetrievalMethodType *RetrievalMethod;	/* optional element of type ds:RetrievalMethodType */
	struct ds__X509DataType *X509Data;	/* optional element of type ds:X509DataType */
	struct _wsse__SecurityTokenReference *wsse__SecurityTokenReference;	/* optional element of type wsse:SecurityTokenReference */
	char *Id;	/* optional attribute of type xsd:string */
public:
	int soap_type() const { return 76; } /* = unique type id SOAP_TYPE_ds__KeyInfoType */
};
typedef struct ds__KeyInfoType ds__KeyInfoType;
#endif

#ifndef SOAP_TYPE_ds__SignedInfoType
#define SOAP_TYPE_ds__SignedInfoType (74)
/* ds:SignedInfoType */
struct ds__SignedInfoType
{
public:
	struct ds__CanonicalizationMethodType *CanonicalizationMethod;	/* required element of type ds:CanonicalizationMethodType */
	struct ds__SignatureMethodType *SignatureMethod;	/* required element of type ds:SignatureMethodType */
	int __sizeReference;	/* sequence of elements <Reference> */
	struct ds__ReferenceType **Reference;	/* required element of type ds:ReferenceType */
	char *Id;	/* optional attribute of type xsd:string */
public:
	int soap_type() const { return 74; } /* = unique type id SOAP_TYPE_ds__SignedInfoType */
};
typedef struct ds__SignedInfoType ds__SignedInfoType;
#endif

#ifndef SOAP_TYPE_ds__CanonicalizationMethodType
#define SOAP_TYPE_ds__CanonicalizationMethodType (79)
/* ds:CanonicalizationMethodType */
struct ds__CanonicalizationMethodType
{
public:
	char *Algorithm;	/* required attribute of type xsd:string */
	struct _c14n__InclusiveNamespaces *c14n__InclusiveNamespaces;	/* optional element of type c14n:InclusiveNamespaces */
public:
	int soap_type() const { return 79; } /* = unique type id SOAP_TYPE_ds__CanonicalizationMethodType */
};
typedef struct ds__CanonicalizationMethodType ds__CanonicalizationMethodType;
#endif

#ifndef SOAP_TYPE_ds__SignatureMethodType
#define SOAP_TYPE_ds__SignatureMethodType (80)
/* ds:SignatureMethodType */
struct ds__SignatureMethodType
{
public:
	int *HMACOutputLength;	/* optional element of type xsd:int */
	char *Algorithm;	/* required attribute of type xsd:string */
public:
	int soap_type() const { return 80; } /* = unique type id SOAP_TYPE_ds__SignatureMethodType */
};
typedef struct ds__SignatureMethodType ds__SignatureMethodType;
#endif

#ifndef SOAP_TYPE_ds__ReferenceType
#define SOAP_TYPE_ds__ReferenceType (81)
/* ds:ReferenceType */
struct ds__ReferenceType
{
public:
	struct ds__TransformsType *Transforms;	/* optional element of type ds:TransformsType */
	struct ds__DigestMethodType *DigestMethod;	/* required element of type ds:DigestMethodType */
	char *DigestValue;	/* required element of type xsd:string */
	char *Id;	/* optional attribute of type xsd:string */
	char *URI;	/* optional attribute of type xsd:string */
	char *Type;	/* optional attribute of type xsd:string */
public:
	int soap_type() const { return 81; } /* = unique type id SOAP_TYPE_ds__ReferenceType */
};
typedef struct ds__ReferenceType ds__ReferenceType;
#endif

#ifndef SOAP_TYPE_ds__TransformsType
#define SOAP_TYPE_ds__TransformsType (82)
/* ds:TransformsType */
struct ds__TransformsType
{
public:
	int __sizeTransform;	/* sequence of elements <Transform> */
	struct ds__TransformType *Transform;	/* required element of type ds:TransformType */
public:
	int soap_type() const { return 82; } /* = unique type id SOAP_TYPE_ds__TransformsType */
};
typedef struct ds__TransformsType ds__TransformsType;
#endif

#ifndef SOAP_TYPE_ds__DigestMethodType
#define SOAP_TYPE_ds__DigestMethodType (87)
/* ds:DigestMethodType */
struct ds__DigestMethodType
{
public:
	char *Algorithm;	/* required attribute of type xsd:string */
public:
	int soap_type() const { return 87; } /* = unique type id SOAP_TYPE_ds__DigestMethodType */
};
typedef struct ds__DigestMethodType ds__DigestMethodType;
#endif

#ifndef SOAP_TYPE_ds__KeyValueType
#define SOAP_TYPE_ds__KeyValueType (88)
/* ds:KeyValueType */
struct ds__KeyValueType
{
public:
	struct ds__DSAKeyValueType *DSAKeyValue;	/* optional element of type ds:DSAKeyValueType */
	struct ds__RSAKeyValueType *RSAKeyValue;	/* optional element of type ds:RSAKeyValueType */
public:
	int soap_type() const { return 88; } /* = unique type id SOAP_TYPE_ds__KeyValueType */
};
typedef struct ds__KeyValueType ds__KeyValueType;
#endif

#ifndef SOAP_TYPE_ds__RetrievalMethodType
#define SOAP_TYPE_ds__RetrievalMethodType (90)
/* ds:RetrievalMethodType */
struct ds__RetrievalMethodType
{
public:
	struct ds__TransformsType *Transforms;	/* optional element of type ds:TransformsType */
	char *URI;	/* optional attribute of type xsd:string */
	char *Type;	/* optional attribute of type xsd:string */
public:
	int soap_type() const { return 90; } /* = unique type id SOAP_TYPE_ds__RetrievalMethodType */
};
typedef struct ds__RetrievalMethodType ds__RetrievalMethodType;
#endif

#ifndef SOAP_TYPE_ds__X509DataType
#define SOAP_TYPE_ds__X509DataType (71)
/* ds:X509DataType */
struct ds__X509DataType
{
public:
	struct ds__X509IssuerSerialType *X509IssuerSerial;	/* optional element of type ds:X509IssuerSerialType */
	char *X509SKI;	/* optional element of type xsd:string */
	char *X509SubjectName;	/* optional element of type xsd:string */
	char *X509Certificate;	/* optional element of type xsd:string */
	char *X509CRL;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 71; } /* = unique type id SOAP_TYPE_ds__X509DataType */
};
typedef struct ds__X509DataType ds__X509DataType;
#endif

#ifndef SOAP_TYPE_ds__X509IssuerSerialType
#define SOAP_TYPE_ds__X509IssuerSerialType (94)
/* ds:X509IssuerSerialType */
struct ds__X509IssuerSerialType
{
public:
	char *X509IssuerName;	/* required element of type xsd:string */
	char *X509SerialNumber;	/* required element of type xsd:string */
public:
	int soap_type() const { return 94; } /* = unique type id SOAP_TYPE_ds__X509IssuerSerialType */
};
typedef struct ds__X509IssuerSerialType ds__X509IssuerSerialType;
#endif

#ifndef SOAP_TYPE_ds__DSAKeyValueType
#define SOAP_TYPE_ds__DSAKeyValueType (95)
/* ds:DSAKeyValueType */
struct ds__DSAKeyValueType
{
public:
	char *G;	/* optional element of type xsd:string */
	char *Y;	/* required element of type xsd:string */
	char *J;	/* optional element of type xsd:string */
	char *P;	/* required element of type xsd:string */
	char *Q;	/* required element of type xsd:string */
	char *Seed;	/* required element of type xsd:string */
	char *PgenCounter;	/* required element of type xsd:string */
public:
	int soap_type() const { return 95; } /* = unique type id SOAP_TYPE_ds__DSAKeyValueType */
};
typedef struct ds__DSAKeyValueType ds__DSAKeyValueType;
#endif

#ifndef SOAP_TYPE_ds__RSAKeyValueType
#define SOAP_TYPE_ds__RSAKeyValueType (96)
/* ds:RSAKeyValueType */
struct ds__RSAKeyValueType
{
public:
	char *Modulus;	/* required element of type xsd:string */
	char *Exponent;	/* required element of type xsd:string */
public:
	int soap_type() const { return 96; } /* = unique type id SOAP_TYPE_ds__RSAKeyValueType */
};
typedef struct ds__RSAKeyValueType ds__RSAKeyValueType;
#endif

#ifndef SOAP_TYPE_xenc__EncryptionPropertyType
#define SOAP_TYPE_xenc__EncryptionPropertyType (117)
/* xenc:EncryptionPropertyType */
struct xenc__EncryptionPropertyType
{
public:
	char *Target;	/* optional attribute of type xsd:string */
	char *Id;	/* optional attribute of type xsd:string */
public:
	int soap_type() const { return 117; } /* = unique type id SOAP_TYPE_xenc__EncryptionPropertyType */
};
typedef struct xenc__EncryptionPropertyType xenc__EncryptionPropertyType;
#endif

#ifndef SOAP_TYPE_xenc__EncryptedType
#define SOAP_TYPE_xenc__EncryptedType (107)
/* xenc:EncryptedType */
struct xenc__EncryptedType
{
public:
	struct xenc__EncryptionMethodType *EncryptionMethod;	/* optional element of type xenc:EncryptionMethodType */
	struct ds__KeyInfoType *ds__KeyInfo;	/* optional element of type ds:KeyInfo */
	struct xenc__CipherDataType *CipherData;	/* required element of type xenc:CipherDataType */
	struct xenc__EncryptionPropertiesType *EncryptionProperties;	/* optional element of type xenc:EncryptionPropertiesType */
	char *Id;	/* optional attribute of type xsd:string */
	char *Type;	/* optional attribute of type xsd:string */
	char *MimeType;	/* optional attribute of type xsd:string */
	char *Encoding;	/* optional attribute of type xsd:string */
public:
	int soap_type() const { return 107; } /* = unique type id SOAP_TYPE_xenc__EncryptedType */
};
typedef struct xenc__EncryptedType xenc__EncryptedType;
#endif

#ifndef SOAP_TYPE_xenc__EncryptionMethodType
#define SOAP_TYPE_xenc__EncryptionMethodType (108)
/* xenc:EncryptionMethodType */
struct xenc__EncryptionMethodType
{
public:
	int *KeySize;	/* optional element of type xsd:int */
	char *OAEPparams;	/* optional element of type xsd:string */
	char *Algorithm;	/* required attribute of type xsd:string */
	struct ds__DigestMethodType *ds__DigestMethod;	/* optional element of type ds:DigestMethodType */
	char *__mixed;
public:
	int soap_type() const { return 108; } /* = unique type id SOAP_TYPE_xenc__EncryptionMethodType */
};
typedef struct xenc__EncryptionMethodType xenc__EncryptionMethodType;
#endif

#ifndef SOAP_TYPE_xenc__CipherDataType
#define SOAP_TYPE_xenc__CipherDataType (109)
/* xenc:CipherDataType */
struct xenc__CipherDataType
{
public:
	char *CipherValue;	/* optional element of type xsd:string */
	struct xenc__CipherReferenceType *CipherReference;	/* optional element of type xenc:CipherReferenceType */
public:
	int soap_type() const { return 109; } /* = unique type id SOAP_TYPE_xenc__CipherDataType */
};
typedef struct xenc__CipherDataType xenc__CipherDataType;
#endif

#ifndef SOAP_TYPE_xenc__CipherReferenceType
#define SOAP_TYPE_xenc__CipherReferenceType (110)
/* xenc:CipherReferenceType */
struct xenc__CipherReferenceType
{
public:
	struct xenc__TransformsType *Transforms;	/* optional element of type xenc:TransformsType */
	char *URI;	/* required attribute of type xsd:string */
public:
	int soap_type() const { return 110; } /* = unique type id SOAP_TYPE_xenc__CipherReferenceType */
};
typedef struct xenc__CipherReferenceType xenc__CipherReferenceType;
#endif

#ifndef SOAP_TYPE_xenc__TransformsType
#define SOAP_TYPE_xenc__TransformsType (111)
/* xenc:TransformsType */
struct xenc__TransformsType
{
public:
	struct ds__TransformType ds__Transform;	/* required element of type ds:Transform */
public:
	int soap_type() const { return 111; } /* = unique type id SOAP_TYPE_xenc__TransformsType */
};
typedef struct xenc__TransformsType xenc__TransformsType;
#endif

#ifndef SOAP_TYPE_xenc__AgreementMethodType
#define SOAP_TYPE_xenc__AgreementMethodType (114)
/* xenc:AgreementMethodType */
struct xenc__AgreementMethodType
{
public:
	char *KA_Nonce;	/* optional element of type xsd:string */
	struct ds__KeyInfoType *OriginatorKeyInfo;	/* optional element of type ds:KeyInfoType */
	struct ds__KeyInfoType *RecipientKeyInfo;	/* optional element of type ds:KeyInfoType */
	char *Algorithm;	/* required attribute of type xsd:string */
	char *__mixed;
public:
	int soap_type() const { return 114; } /* = unique type id SOAP_TYPE_xenc__AgreementMethodType */
};
typedef struct xenc__AgreementMethodType xenc__AgreementMethodType;
#endif

#ifndef SOAP_TYPE_xenc__ReferenceType
#define SOAP_TYPE_xenc__ReferenceType (115)
/* xenc:ReferenceType */
struct xenc__ReferenceType
{
public:
	char *URI;	/* required attribute of type xsd:string */
public:
	int soap_type() const { return 115; } /* = unique type id SOAP_TYPE_xenc__ReferenceType */
};
typedef struct xenc__ReferenceType xenc__ReferenceType;
#endif

#ifndef SOAP_TYPE_xenc__EncryptionPropertiesType
#define SOAP_TYPE_xenc__EncryptionPropertiesType (116)
/* xenc:EncryptionPropertiesType */
struct xenc__EncryptionPropertiesType
{
public:
	int __sizeEncryptionProperty;	/* sequence of elements <EncryptionProperty> */
	struct xenc__EncryptionPropertyType *EncryptionProperty;	/* required element of type xenc:EncryptionPropertyType */
	char *Id;	/* optional attribute of type xsd:string */
public:
	int soap_type() const { return 116; } /* = unique type id SOAP_TYPE_xenc__EncryptionPropertiesType */
};
typedef struct xenc__EncryptionPropertiesType xenc__EncryptionPropertiesType;
#endif

#ifndef SOAP_TYPE___xenc__union_ReferenceList
#define SOAP_TYPE___xenc__union_ReferenceList (126)
/* Operation wrapper: */
struct __xenc__union_ReferenceList
{
public:
	struct xenc__ReferenceType *DataReference;	/* optional element of type xenc:ReferenceType */
	struct xenc__ReferenceType *KeyReference;	/* optional element of type xenc:ReferenceType */
public:
	int soap_type() const { return 126; } /* = unique type id SOAP_TYPE___xenc__union_ReferenceList */
};
#endif

#ifndef SOAP_TYPE__xenc__ReferenceList
#define SOAP_TYPE__xenc__ReferenceList (118)
/* xenc:ReferenceList */
struct _xenc__ReferenceList
{
public:
	int __size_ReferenceList;	/* sequence of elements <-union-ReferenceList> */
	struct __xenc__union_ReferenceList *__union_ReferenceList;
public:
	int soap_type() const { return 118; } /* = unique type id SOAP_TYPE__xenc__ReferenceList */
};
typedef struct _xenc__ReferenceList _xenc__ReferenceList;
#endif

#ifndef SOAP_TYPE_xenc__EncryptedDataType
#define SOAP_TYPE_xenc__EncryptedDataType (112)
/* xenc:EncryptedDataType */
struct xenc__EncryptedDataType
{
public:
	struct xenc__EncryptionMethodType *EncryptionMethod;	/* optional element of type xenc:EncryptionMethodType */
	struct ds__KeyInfoType *ds__KeyInfo;	/* optional element of type ds:KeyInfo */
	struct xenc__CipherDataType *CipherData;	/* required element of type xenc:CipherDataType */
	struct xenc__EncryptionPropertiesType *EncryptionProperties;	/* optional element of type xenc:EncryptionPropertiesType */
	char *Id;	/* optional attribute of type xsd:string */
	char *Type;	/* optional attribute of type xsd:string */
	char *MimeType;	/* optional attribute of type xsd:string */
	char *Encoding;	/* optional attribute of type xsd:string */
public:
	int soap_type() const { return 112; } /* = unique type id SOAP_TYPE_xenc__EncryptedDataType */
};
typedef struct xenc__EncryptedDataType xenc__EncryptedDataType;
#endif

#ifndef SOAP_TYPE_xenc__EncryptedKeyType
#define SOAP_TYPE_xenc__EncryptedKeyType (113)
/* xenc:EncryptedKeyType */
struct xenc__EncryptedKeyType
{
public:
	struct xenc__EncryptionMethodType *EncryptionMethod;	/* optional element of type xenc:EncryptionMethodType */
	struct ds__KeyInfoType *ds__KeyInfo;	/* optional element of type ds:KeyInfo */
	struct xenc__CipherDataType *CipherData;	/* required element of type xenc:CipherDataType */
	struct xenc__EncryptionPropertiesType *EncryptionProperties;	/* optional element of type xenc:EncryptionPropertiesType */
	char *Id;	/* optional attribute of type xsd:string */
	char *Type;	/* optional attribute of type xsd:string */
	char *MimeType;	/* optional attribute of type xsd:string */
	char *Encoding;	/* optional attribute of type xsd:string */
	struct _xenc__ReferenceList *ReferenceList;	/* optional element of type xenc:ReferenceList */
	char *CarriedKeyName;	/* optional element of type xsd:string */
	char *Recipient;	/* optional attribute of type xsd:string */
public:
	int soap_type() const { return 113; } /* = unique type id SOAP_TYPE_xenc__EncryptedKeyType */
};
typedef struct xenc__EncryptedKeyType xenc__EncryptedKeyType;
#endif

#ifndef SOAP_TYPE_wsc__SecurityContextTokenType
#define SOAP_TYPE_wsc__SecurityContextTokenType (132)
/* wsc:SecurityContextTokenType */
struct wsc__SecurityContextTokenType
{
public:
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *Identifier;	/* optional element of type xsd:string */
	char *Instance;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 132; } /* = unique type id SOAP_TYPE_wsc__SecurityContextTokenType */
};
#endif

#ifndef SOAP_TYPE__wsc__union_DerivedKeyTokenType
#define SOAP_TYPE__wsc__union_DerivedKeyTokenType (137)
/* xsd:choice */
union _wsc__union_DerivedKeyTokenType
{
#define SOAP_UNION__wsc__union_DerivedKeyTokenType_Generation	(1)
	ULONG64 Generation;
#define SOAP_UNION__wsc__union_DerivedKeyTokenType_Offset	(2)
	ULONG64 Offset;
};
#endif

#ifndef SOAP_TYPE___wsc__DerivedKeyTokenType_sequence
#define SOAP_TYPE___wsc__DerivedKeyTokenType_sequence (136)
/* Operation wrapper: */
struct __wsc__DerivedKeyTokenType_sequence
{
public:
	int __union_DerivedKeyTokenType;	/* union discriminant (of union defined below) */
	union _wsc__union_DerivedKeyTokenType union_DerivedKeyTokenType;	/* required element of type xsd:choice */
	ULONG64 *Length;	/* optional element of type xsd:unsignedLong */
public:
	int soap_type() const { return 136; } /* = unique type id SOAP_TYPE___wsc__DerivedKeyTokenType_sequence */
};
#endif

#ifndef SOAP_TYPE_wsc__DerivedKeyTokenType
#define SOAP_TYPE_wsc__DerivedKeyTokenType (133)
/* wsc:DerivedKeyTokenType */
struct wsc__DerivedKeyTokenType
{
public:
	struct _wsse__SecurityTokenReference *wsse__SecurityTokenReference;	/* optional element of type wsse:SecurityTokenReference */
	struct wsc__PropertiesType *Properties;	/* optional element of type wsc:PropertiesType */
	int __size_DerivedKeyTokenType_sequence;	/* sequence of elements <-DerivedKeyTokenType-sequence> */
	struct __wsc__DerivedKeyTokenType_sequence *__DerivedKeyTokenType_sequence;
	char *Label;	/* optional element of type xsd:string */
	char *Nonce;	/* optional element of type xsd:string */
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *Algorithm;	/* optional attribute of type xsd:string */
public:
	int soap_type() const { return 133; } /* = unique type id SOAP_TYPE_wsc__DerivedKeyTokenType */
};
#endif

#ifndef SOAP_TYPE_wsc__PropertiesType
#define SOAP_TYPE_wsc__PropertiesType (134)
/* wsc:PropertiesType */
struct wsc__PropertiesType
{
public:
	int soap_type() const { return 134; } /* = unique type id SOAP_TYPE_wsc__PropertiesType */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE__wsse__Security
#define SOAP_TYPE__wsse__Security (140)
/* wsse:Security */
struct _wsse__Security
{
public:
	struct _wsu__Timestamp *wsu__Timestamp;	/* optional element of type wsu:Timestamp */
	struct _wsse__UsernameToken *UsernameToken;	/* optional element of type wsse:UsernameToken */
	struct _wsse__BinarySecurityToken *BinarySecurityToken;	/* optional element of type wsse:BinarySecurityToken */
	struct xenc__EncryptedKeyType *xenc__EncryptedKey;	/* optional element of type xenc:EncryptedKeyType */
	struct _xenc__ReferenceList *xenc__ReferenceList;	/* optional element of type xenc:ReferenceList */
	struct wsc__SecurityContextTokenType *wsc__SecurityContextToken;	/* optional element of type wsc:SecurityContextTokenType */
	struct ds__SignatureType *ds__Signature;	/* optional element of type ds:SignatureType */
	char *SOAP_ENV__actor;	/* optional attribute of type xsd:string */
	char *SOAP_ENV__role;	/* optional attribute of type xsd:string */
public:
	int soap_type() const { return 140; } /* = unique type id SOAP_TYPE__wsse__Security */
};
typedef struct _wsse__Security _wsse__Security;
#endif

#ifndef SOAP_TYPE__wsse__Password
#define SOAP_TYPE__wsse__Password (61)
/* Primitive wsse:Password schema type: */
struct _wsse__Password
{
public:
	char *__item;
	char *Type;	/* optional attribute of type xsd:string */
public:
	int soap_type() const { return 61; } /* = unique type id SOAP_TYPE__wsse__Password */
};
typedef struct _wsse__Password _wsse__Password;
#endif

#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (148)
/* Primitive xsd:anyType schema type: */
class SOAP_CMAC xsd__anyType
{
public:
	char *__item;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 148; } /* = unique type id SOAP_TYPE_xsd__anyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anyType() { xsd__anyType::soap_default(NULL); }
	virtual ~xsd__anyType() { }
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Envelope
#define SOAP_TYPE_SOAP_ENV__Envelope (150)
/* SOAP-ENV:Envelope */
struct SOAP_ENV__Envelope
{
public:
	struct SOAP_ENV__Header *SOAP_ENV__Header;	/* optional element of type SOAP-ENV:Header */
	char *SOAP_ENV__Body;	/* optional element of type xsd:anyType */
public:
	int soap_type() const { return 150; } /* = unique type id SOAP_TYPE_SOAP_ENV__Envelope */
};
#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (154)
/* Base64 schema type: */
class SOAP_CMAC xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 154; } /* = unique type id SOAP_TYPE_xsd__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary() { xsd__base64Binary::soap_default(NULL); }
	virtual ~xsd__base64Binary() { }
};
#endif

#ifndef SOAP_TYPE_xsd__hexBinary
#define SOAP_TYPE_xsd__hexBinary (159)
/* hexBinary schema type: */
class SOAP_CMAC xsd__hexBinary
{
public:
	unsigned char *__ptr;
	int __size;
public:
	virtual int soap_type() const { return 159; } /* = unique type id SOAP_TYPE_xsd__hexBinary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__hexBinary() { xsd__hexBinary::soap_default(NULL); }
	virtual ~xsd__hexBinary() { }
};
#endif

#ifndef SOAP_TYPE_xsd__NCName_
#define SOAP_TYPE_xsd__NCName_ (161)
/* Primitive xsd:NCName schema type: */
class SOAP_CMAC xsd__NCName_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 161; } /* = unique type id SOAP_TYPE_xsd__NCName_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__NCName_() { xsd__NCName_::soap_default(NULL); }
	virtual ~xsd__NCName_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__QName_
#define SOAP_TYPE_xsd__QName_ (162)
/* Primitive xsd:QName schema type: */
class SOAP_CMAC xsd__QName_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 162; } /* = unique type id SOAP_TYPE_xsd__QName_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__QName_() { xsd__QName_::soap_default(NULL); }
	virtual ~xsd__QName_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__anySimpleType_
#define SOAP_TYPE_xsd__anySimpleType_ (164)
/* Primitive xsd:anySimpleType schema type: */
class SOAP_CMAC xsd__anySimpleType_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 164; } /* = unique type id SOAP_TYPE_xsd__anySimpleType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anySimpleType_() { xsd__anySimpleType_::soap_default(NULL); }
	virtual ~xsd__anySimpleType_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__anyURI_
#define SOAP_TYPE_xsd__anyURI_ (166)
/* Primitive xsd:anyURI schema type: */
class SOAP_CMAC xsd__anyURI_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 166; } /* = unique type id SOAP_TYPE_xsd__anyURI_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anyURI_() { xsd__anyURI_::soap_default(NULL); }
	virtual ~xsd__anyURI_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__base64Binary_
#define SOAP_TYPE_xsd__base64Binary_ (167)
/* Primitive xsd:base64Binary schema type: */
class SOAP_CMAC xsd__base64Binary_ : public xsd__anyType
{
public:
	xsd__base64Binary __item;
public:
	virtual int soap_type() const { return 167; } /* = unique type id SOAP_TYPE_xsd__base64Binary_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary_() { xsd__base64Binary_::soap_default(NULL); }
	virtual ~xsd__base64Binary_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__boolean
#define SOAP_TYPE_xsd__boolean (168)
/* Primitive xsd:boolean schema type: */
class SOAP_CMAC xsd__boolean : public xsd__anyType
{
public:
	bool __item;
public:
	virtual int soap_type() const { return 168; } /* = unique type id SOAP_TYPE_xsd__boolean */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__boolean() { xsd__boolean::soap_default(NULL); }
	virtual ~xsd__boolean() { }
};
#endif

#ifndef SOAP_TYPE_xsd__dateTime
#define SOAP_TYPE_xsd__dateTime (170)
/* Primitive xsd:dateTime schema type: */
class SOAP_CMAC xsd__dateTime : public xsd__anyType
{
public:
	time_t __item;
public:
	virtual int soap_type() const { return 170; } /* = unique type id SOAP_TYPE_xsd__dateTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__dateTime() { xsd__dateTime::soap_default(NULL); }
	virtual ~xsd__dateTime() { }
};
#endif

#ifndef SOAP_TYPE_xsd__double
#define SOAP_TYPE_xsd__double (172)
/* Primitive xsd:double schema type: */
class SOAP_CMAC xsd__double : public xsd__anyType
{
public:
	double __item;
public:
	virtual int soap_type() const { return 172; } /* = unique type id SOAP_TYPE_xsd__double */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__double() { xsd__double::soap_default(NULL); }
	virtual ~xsd__double() { }
};
#endif

#ifndef SOAP_TYPE_xsd__duration_
#define SOAP_TYPE_xsd__duration_ (174)
/* Primitive xsd:duration schema type: */
class SOAP_CMAC xsd__duration_ : public xsd__anyType
{
public:
	LONG64 __item;	/* external */
public:
	virtual int soap_type() const { return 174; } /* = unique type id SOAP_TYPE_xsd__duration_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__duration_() { xsd__duration_::soap_default(NULL); }
	virtual ~xsd__duration_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__float
#define SOAP_TYPE_xsd__float (175)
/* Primitive xsd:float schema type: */
class SOAP_CMAC xsd__float : public xsd__anyType
{
public:
	float __item;
public:
	virtual int soap_type() const { return 175; } /* = unique type id SOAP_TYPE_xsd__float */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__float() { xsd__float::soap_default(NULL); }
	virtual ~xsd__float() { }
};
#endif

#ifndef SOAP_TYPE_xsd__hexBinary_
#define SOAP_TYPE_xsd__hexBinary_ (177)
/* Primitive xsd:hexBinary schema type: */
class SOAP_CMAC xsd__hexBinary_ : public xsd__anyType
{
public:
	xsd__hexBinary __item;
public:
	virtual int soap_type() const { return 177; } /* = unique type id SOAP_TYPE_xsd__hexBinary_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__hexBinary_() { xsd__hexBinary_::soap_default(NULL); }
	virtual ~xsd__hexBinary_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__int
#define SOAP_TYPE_xsd__int (178)
/* Primitive xsd:int schema type: */
class SOAP_CMAC xsd__int : public xsd__anyType
{
public:
	int __item;
public:
	virtual int soap_type() const { return 178; } /* = unique type id SOAP_TYPE_xsd__int */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__int() { xsd__int::soap_default(NULL); }
	virtual ~xsd__int() { }
};
#endif

#ifndef SOAP_TYPE_xsd__integer_
#define SOAP_TYPE_xsd__integer_ (180)
/* Primitive xsd:integer schema type: */
class SOAP_CMAC xsd__integer_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 180; } /* = unique type id SOAP_TYPE_xsd__integer_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__integer_() { xsd__integer_::soap_default(NULL); }
	virtual ~xsd__integer_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__nonNegativeInteger_
#define SOAP_TYPE_xsd__nonNegativeInteger_ (182)
/* Primitive xsd:nonNegativeInteger schema type: */
class SOAP_CMAC xsd__nonNegativeInteger_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 182; } /* = unique type id SOAP_TYPE_xsd__nonNegativeInteger_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__nonNegativeInteger_() { xsd__nonNegativeInteger_::soap_default(NULL); }
	virtual ~xsd__nonNegativeInteger_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__positiveInteger_
#define SOAP_TYPE_xsd__positiveInteger_ (184)
/* Primitive xsd:positiveInteger schema type: */
class SOAP_CMAC xsd__positiveInteger_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 184; } /* = unique type id SOAP_TYPE_xsd__positiveInteger_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__positiveInteger_() { xsd__positiveInteger_::soap_default(NULL); }
	virtual ~xsd__positiveInteger_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (185)
/* Primitive xsd:string schema type: */
class SOAP_CMAC xsd__string : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 185; } /* = unique type id SOAP_TYPE_xsd__string */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__string() { xsd__string::soap_default(NULL); }
	virtual ~xsd__string() { }
};
#endif

#ifndef SOAP_TYPE_xsd__time_
#define SOAP_TYPE_xsd__time_ (187)
/* Primitive xsd:time schema type: */
class SOAP_CMAC xsd__time_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 187; } /* = unique type id SOAP_TYPE_xsd__time_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__time_() { xsd__time_::soap_default(NULL); }
	virtual ~xsd__time_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__token_
#define SOAP_TYPE_xsd__token_ (189)
/* Primitive xsd:token schema type: */
class SOAP_CMAC xsd__token_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 189; } /* = unique type id SOAP_TYPE_xsd__token_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__token_() { xsd__token_::soap_default(NULL); }
	virtual ~xsd__token_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__unsignedInt
#define SOAP_TYPE_xsd__unsignedInt (190)
/* Primitive xsd:unsignedInt schema type: */
class SOAP_CMAC xsd__unsignedInt : public xsd__anyType
{
public:
	unsigned int __item;
public:
	virtual int soap_type() const { return 190; } /* = unique type id SOAP_TYPE_xsd__unsignedInt */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__unsignedInt() { xsd__unsignedInt::soap_default(NULL); }
	virtual ~xsd__unsignedInt() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Decision_
#define SOAP_TYPE_ns1__Decision_ (2019)
/* Primitive ns1:Decision schema type: */
class SOAP_CMAC ns1__Decision_ : public xsd__anyType
{
public:
	enum ns1__Decision __item;
public:
	virtual int soap_type() const { return 2019; } /* = unique type id SOAP_TYPE_ns1__Decision_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Decision_() { ns1__Decision_::soap_default(NULL); }
	virtual ~ns1__Decision_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DenyReason_
#define SOAP_TYPE_ns1__DenyReason_ (2021)
/* Primitive ns1:DenyReason schema type: */
class SOAP_CMAC ns1__DenyReason_ : public xsd__anyType
{
public:
	enum ns1__DenyReason __item;
public:
	virtual int soap_type() const { return 2021; } /* = unique type id SOAP_TYPE_ns1__DenyReason_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DenyReason_() { ns1__DenyReason_::soap_default(NULL); }
	virtual ~ns1__DenyReason_() { }
};
#endif

#ifndef SOAP_TYPE_ns2__ReferenceToken__
#define SOAP_TYPE_ns2__ReferenceToken__ (2023)
/* Primitive ns2:ReferenceToken schema type: */
class SOAP_CMAC ns2__ReferenceToken__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2023; } /* = unique type id SOAP_TYPE_ns2__ReferenceToken__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__ReferenceToken__() { ns2__ReferenceToken__::soap_default(NULL); }
	virtual ~ns2__ReferenceToken__() { }
};
#endif

#ifndef SOAP_TYPE_ns2__Name__
#define SOAP_TYPE_ns2__Name__ (2025)
/* Primitive ns2:Name schema type: */
class SOAP_CMAC ns2__Name__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2025; } /* = unique type id SOAP_TYPE_ns2__Name__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__Name__() { ns2__Name__::soap_default(NULL); }
	virtual ~ns2__Name__() { }
};
#endif

#ifndef SOAP_TYPE_ns2__Description__
#define SOAP_TYPE_ns2__Description__ (2027)
/* Primitive ns2:Description schema type: */
class SOAP_CMAC ns2__Description__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2027; } /* = unique type id SOAP_TYPE_ns2__Description__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__Description__() { ns2__Description__::soap_default(NULL); }
	virtual ~ns2__Description__() { }
};
#endif

#ifndef SOAP_TYPE_ns2__PositiveInteger__
#define SOAP_TYPE_ns2__PositiveInteger__ (2029)
/* Primitive ns2:PositiveInteger schema type: */
class SOAP_CMAC ns2__PositiveInteger__ : public xsd__anyType
{
public:
	unsigned int __item;
public:
	virtual int soap_type() const { return 2029; } /* = unique type id SOAP_TYPE_ns2__PositiveInteger__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__PositiveInteger__() { ns2__PositiveInteger__::soap_default(NULL); }
	virtual ~ns2__PositiveInteger__() { }
};
#endif

#ifndef SOAP_TYPE_ns4__AddressFormatType_
#define SOAP_TYPE_ns4__AddressFormatType_ (2031)
/* Primitive ns4:AddressFormatType schema type: */
class SOAP_CMAC ns4__AddressFormatType_ : public xsd__anyType
{
public:
	enum ns4__AddressFormatType __item;
public:
	virtual int soap_type() const { return 2031; } /* = unique type id SOAP_TYPE_ns4__AddressFormatType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__AddressFormatType_() { ns4__AddressFormatType_::soap_default(NULL); }
	virtual ~ns4__AddressFormatType_() { }
};
#endif

#ifndef SOAP_TYPE_ns4__EMailAuthenticationMode_
#define SOAP_TYPE_ns4__EMailAuthenticationMode_ (2033)
/* Primitive ns4:EMailAuthenticationMode schema type: */
class SOAP_CMAC ns4__EMailAuthenticationMode_ : public xsd__anyType
{
public:
	enum ns4__EMailAuthenticationMode __item;
public:
	virtual int soap_type() const { return 2033; } /* = unique type id SOAP_TYPE_ns4__EMailAuthenticationMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__EMailAuthenticationMode_() { ns4__EMailAuthenticationMode_::soap_default(NULL); }
	virtual ~ns4__EMailAuthenticationMode_() { }
};
#endif

#ifndef SOAP_TYPE_ns4__HttpProtocolType_
#define SOAP_TYPE_ns4__HttpProtocolType_ (2035)
/* Primitive ns4:HttpProtocolType schema type: */
class SOAP_CMAC ns4__HttpProtocolType_ : public xsd__anyType
{
public:
	enum ns4__HttpProtocolType __item;
public:
	virtual int soap_type() const { return 2035; } /* = unique type id SOAP_TYPE_ns4__HttpProtocolType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__HttpProtocolType_() { ns4__HttpProtocolType_::soap_default(NULL); }
	virtual ~ns4__HttpProtocolType_() { }
};
#endif

#ifndef SOAP_TYPE_ns4__HttpAuthenticationMethodType_
#define SOAP_TYPE_ns4__HttpAuthenticationMethodType_ (2037)
/* Primitive ns4:HttpAuthenticationMethodType schema type: */
class SOAP_CMAC ns4__HttpAuthenticationMethodType_ : public xsd__anyType
{
public:
	enum ns4__HttpAuthenticationMethodType __item;
public:
	virtual int soap_type() const { return 2037; } /* = unique type id SOAP_TYPE_ns4__HttpAuthenticationMethodType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__HttpAuthenticationMethodType_() { ns4__HttpAuthenticationMethodType_::soap_default(NULL); }
	virtual ~ns4__HttpAuthenticationMethodType_() { }
};
#endif

#ifndef SOAP_TYPE_ns4__FileSuffixType_
#define SOAP_TYPE_ns4__FileSuffixType_ (2039)
/* Primitive ns4:FileSuffixType schema type: */
class SOAP_CMAC ns4__FileSuffixType_ : public xsd__anyType
{
public:
	enum ns4__FileSuffixType __item;
public:
	virtual int soap_type() const { return 2039; } /* = unique type id SOAP_TYPE_ns4__FileSuffixType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__FileSuffixType_() { ns4__FileSuffixType_::soap_default(NULL); }
	virtual ~ns4__FileSuffixType_() { }
};
#endif

#ifndef SOAP_TYPE_tt__Name__
#define SOAP_TYPE_tt__Name__ (2041)
/* Primitive tt:Name schema type: */
class SOAP_CMAC tt__Name__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2041; } /* = unique type id SOAP_TYPE_tt__Name__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Name__() { tt__Name__::soap_default(NULL); }
	virtual ~tt__Name__() { }
};
#endif

#ifndef SOAP_TYPE_tt__RotateMode_
#define SOAP_TYPE_tt__RotateMode_ (2043)
/* Primitive tt:RotateMode schema type: */
class SOAP_CMAC tt__RotateMode_ : public xsd__anyType
{
public:
	enum tt__RotateMode __item;
public:
	virtual int soap_type() const { return 2043; } /* = unique type id SOAP_TYPE_tt__RotateMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RotateMode_() { tt__RotateMode_::soap_default(NULL); }
	virtual ~tt__RotateMode_() { }
};
#endif

#ifndef SOAP_TYPE_tt__SceneOrientationMode_
#define SOAP_TYPE_tt__SceneOrientationMode_ (2045)
/* Primitive tt:SceneOrientationMode schema type: */
class SOAP_CMAC tt__SceneOrientationMode_ : public xsd__anyType
{
public:
	enum tt__SceneOrientationMode __item;
public:
	virtual int soap_type() const { return 2045; } /* = unique type id SOAP_TYPE_tt__SceneOrientationMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SceneOrientationMode_() { tt__SceneOrientationMode_::soap_default(NULL); }
	virtual ~tt__SceneOrientationMode_() { }
};
#endif

#ifndef SOAP_TYPE_tt__SceneOrientationOption_
#define SOAP_TYPE_tt__SceneOrientationOption_ (2047)
/* Primitive tt:SceneOrientationOption schema type: */
class SOAP_CMAC tt__SceneOrientationOption_ : public xsd__anyType
{
public:
	enum tt__SceneOrientationOption __item;
public:
	virtual int soap_type() const { return 2047; } /* = unique type id SOAP_TYPE_tt__SceneOrientationOption_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SceneOrientationOption_() { tt__SceneOrientationOption_::soap_default(NULL); }
	virtual ~tt__SceneOrientationOption_() { }
};
#endif

#ifndef SOAP_TYPE_tt__ViewModes_
#define SOAP_TYPE_tt__ViewModes_ (2049)
/* Primitive tt:ViewModes schema type: */
class SOAP_CMAC tt__ViewModes_ : public xsd__anyType
{
public:
	enum tt__ViewModes __item;
public:
	virtual int soap_type() const { return 2049; } /* = unique type id SOAP_TYPE_tt__ViewModes_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ViewModes_() { tt__ViewModes_::soap_default(NULL); }
	virtual ~tt__ViewModes_() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoEncoding_
#define SOAP_TYPE_tt__VideoEncoding_ (2051)
/* Primitive tt:VideoEncoding schema type: */
class SOAP_CMAC tt__VideoEncoding_ : public xsd__anyType
{
public:
	enum tt__VideoEncoding __item;
public:
	virtual int soap_type() const { return 2051; } /* = unique type id SOAP_TYPE_tt__VideoEncoding_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoEncoding_() { tt__VideoEncoding_::soap_default(NULL); }
	virtual ~tt__VideoEncoding_() { }
};
#endif

#ifndef SOAP_TYPE_tt__Mpeg4Profile_
#define SOAP_TYPE_tt__Mpeg4Profile_ (2053)
/* Primitive tt:Mpeg4Profile schema type: */
class SOAP_CMAC tt__Mpeg4Profile_ : public xsd__anyType
{
public:
	enum tt__Mpeg4Profile __item;
public:
	virtual int soap_type() const { return 2053; } /* = unique type id SOAP_TYPE_tt__Mpeg4Profile_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Mpeg4Profile_() { tt__Mpeg4Profile_::soap_default(NULL); }
	virtual ~tt__Mpeg4Profile_() { }
};
#endif

#ifndef SOAP_TYPE_tt__H264Profile_
#define SOAP_TYPE_tt__H264Profile_ (2055)
/* Primitive tt:H264Profile schema type: */
class SOAP_CMAC tt__H264Profile_ : public xsd__anyType
{
public:
	enum tt__H264Profile __item;
public:
	virtual int soap_type() const { return 2055; } /* = unique type id SOAP_TYPE_tt__H264Profile_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__H264Profile_() { tt__H264Profile_::soap_default(NULL); }
	virtual ~tt__H264Profile_() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoEncodingMimeNames_
#define SOAP_TYPE_tt__VideoEncodingMimeNames_ (2057)
/* Primitive tt:VideoEncodingMimeNames schema type: */
class SOAP_CMAC tt__VideoEncodingMimeNames_ : public xsd__anyType
{
public:
	enum tt__VideoEncodingMimeNames __item;
public:
	virtual int soap_type() const { return 2057; } /* = unique type id SOAP_TYPE_tt__VideoEncodingMimeNames_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoEncodingMimeNames_() { tt__VideoEncodingMimeNames_::soap_default(NULL); }
	virtual ~tt__VideoEncodingMimeNames_() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoEncodingProfiles_
#define SOAP_TYPE_tt__VideoEncodingProfiles_ (2059)
/* Primitive tt:VideoEncodingProfiles schema type: */
class SOAP_CMAC tt__VideoEncodingProfiles_ : public xsd__anyType
{
public:
	enum tt__VideoEncodingProfiles __item;
public:
	virtual int soap_type() const { return 2059; } /* = unique type id SOAP_TYPE_tt__VideoEncodingProfiles_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoEncodingProfiles_() { tt__VideoEncodingProfiles_::soap_default(NULL); }
	virtual ~tt__VideoEncodingProfiles_() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioEncoding_
#define SOAP_TYPE_tt__AudioEncoding_ (2061)
/* Primitive tt:AudioEncoding schema type: */
class SOAP_CMAC tt__AudioEncoding_ : public xsd__anyType
{
public:
	enum tt__AudioEncoding __item;
public:
	virtual int soap_type() const { return 2061; } /* = unique type id SOAP_TYPE_tt__AudioEncoding_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioEncoding_() { tt__AudioEncoding_::soap_default(NULL); }
	virtual ~tt__AudioEncoding_() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioEncodingMimeNames_
#define SOAP_TYPE_tt__AudioEncodingMimeNames_ (2063)
/* Primitive tt:AudioEncodingMimeNames schema type: */
class SOAP_CMAC tt__AudioEncodingMimeNames_ : public xsd__anyType
{
public:
	enum tt__AudioEncodingMimeNames __item;
public:
	virtual int soap_type() const { return 2063; } /* = unique type id SOAP_TYPE_tt__AudioEncodingMimeNames_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioEncodingMimeNames_() { tt__AudioEncodingMimeNames_::soap_default(NULL); }
	virtual ~tt__AudioEncodingMimeNames_() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataCompressionType_
#define SOAP_TYPE_tt__MetadataCompressionType_ (2065)
/* Primitive tt:MetadataCompressionType schema type: */
class SOAP_CMAC tt__MetadataCompressionType_ : public xsd__anyType
{
public:
	enum tt__MetadataCompressionType __item;
public:
	virtual int soap_type() const { return 2065; } /* = unique type id SOAP_TYPE_tt__MetadataCompressionType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataCompressionType_() { tt__MetadataCompressionType_::soap_default(NULL); }
	virtual ~tt__MetadataCompressionType_() { }
};
#endif

#ifndef SOAP_TYPE_tt__StreamType_
#define SOAP_TYPE_tt__StreamType_ (2067)
/* Primitive tt:StreamType schema type: */
class SOAP_CMAC tt__StreamType_ : public xsd__anyType
{
public:
	enum tt__StreamType __item;
public:
	virtual int soap_type() const { return 2067; } /* = unique type id SOAP_TYPE_tt__StreamType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__StreamType_() { tt__StreamType_::soap_default(NULL); }
	virtual ~tt__StreamType_() { }
};
#endif

#ifndef SOAP_TYPE_tt__TransportProtocol_
#define SOAP_TYPE_tt__TransportProtocol_ (2069)
/* Primitive tt:TransportProtocol schema type: */
class SOAP_CMAC tt__TransportProtocol_ : public xsd__anyType
{
public:
	enum tt__TransportProtocol __item;
public:
	virtual int soap_type() const { return 2069; } /* = unique type id SOAP_TYPE_tt__TransportProtocol_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TransportProtocol_() { tt__TransportProtocol_::soap_default(NULL); }
	virtual ~tt__TransportProtocol_() { }
};
#endif

#ifndef SOAP_TYPE_tt__ScopeDefinition_
#define SOAP_TYPE_tt__ScopeDefinition_ (2071)
/* Primitive tt:ScopeDefinition schema type: */
class SOAP_CMAC tt__ScopeDefinition_ : public xsd__anyType
{
public:
	enum tt__ScopeDefinition __item;
public:
	virtual int soap_type() const { return 2071; } /* = unique type id SOAP_TYPE_tt__ScopeDefinition_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ScopeDefinition_() { tt__ScopeDefinition_::soap_default(NULL); }
	virtual ~tt__ScopeDefinition_() { }
};
#endif

#ifndef SOAP_TYPE_tt__DiscoveryMode_
#define SOAP_TYPE_tt__DiscoveryMode_ (2073)
/* Primitive tt:DiscoveryMode schema type: */
class SOAP_CMAC tt__DiscoveryMode_ : public xsd__anyType
{
public:
	enum tt__DiscoveryMode __item;
public:
	virtual int soap_type() const { return 2073; } /* = unique type id SOAP_TYPE_tt__DiscoveryMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DiscoveryMode_() { tt__DiscoveryMode_::soap_default(NULL); }
	virtual ~tt__DiscoveryMode_() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceConfigPriority__
#define SOAP_TYPE_tt__NetworkInterfaceConfigPriority__ (2075)
/* Primitive tt:NetworkInterfaceConfigPriority schema type: */
class SOAP_CMAC tt__NetworkInterfaceConfigPriority__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2075; } /* = unique type id SOAP_TYPE_tt__NetworkInterfaceConfigPriority__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceConfigPriority__() { tt__NetworkInterfaceConfigPriority__::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceConfigPriority__() { }
};
#endif

#ifndef SOAP_TYPE_tt__Duplex_
#define SOAP_TYPE_tt__Duplex_ (2077)
/* Primitive tt:Duplex schema type: */
class SOAP_CMAC tt__Duplex_ : public xsd__anyType
{
public:
	enum tt__Duplex __item;
public:
	virtual int soap_type() const { return 2077; } /* = unique type id SOAP_TYPE_tt__Duplex_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Duplex_() { tt__Duplex_::soap_default(NULL); }
	virtual ~tt__Duplex_() { }
};
#endif

#ifndef SOAP_TYPE_tt__IANA_IfTypes__
#define SOAP_TYPE_tt__IANA_IfTypes__ (2079)
/* Primitive tt:IANA-IfTypes schema type: */
class SOAP_CMAC tt__IANA_IfTypes__ : public xsd__anyType
{
public:
	int __item;
public:
	virtual int soap_type() const { return 2079; } /* = unique type id SOAP_TYPE_tt__IANA_IfTypes__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IANA_IfTypes__() { tt__IANA_IfTypes__::soap_default(NULL); }
	virtual ~tt__IANA_IfTypes__() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPv6DHCPConfiguration_
#define SOAP_TYPE_tt__IPv6DHCPConfiguration_ (2081)
/* Primitive tt:IPv6DHCPConfiguration schema type: */
class SOAP_CMAC tt__IPv6DHCPConfiguration_ : public xsd__anyType
{
public:
	enum tt__IPv6DHCPConfiguration __item;
public:
	virtual int soap_type() const { return 2081; } /* = unique type id SOAP_TYPE_tt__IPv6DHCPConfiguration_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPv6DHCPConfiguration_() { tt__IPv6DHCPConfiguration_::soap_default(NULL); }
	virtual ~tt__IPv6DHCPConfiguration_() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkProtocolType_
#define SOAP_TYPE_tt__NetworkProtocolType_ (2083)
/* Primitive tt:NetworkProtocolType schema type: */
class SOAP_CMAC tt__NetworkProtocolType_ : public xsd__anyType
{
public:
	enum tt__NetworkProtocolType __item;
public:
	virtual int soap_type() const { return 2083; } /* = unique type id SOAP_TYPE_tt__NetworkProtocolType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkProtocolType_() { tt__NetworkProtocolType_::soap_default(NULL); }
	virtual ~tt__NetworkProtocolType_() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkHostType_
#define SOAP_TYPE_tt__NetworkHostType_ (2085)
/* Primitive tt:NetworkHostType schema type: */
class SOAP_CMAC tt__NetworkHostType_ : public xsd__anyType
{
public:
	enum tt__NetworkHostType __item;
public:
	virtual int soap_type() const { return 2085; } /* = unique type id SOAP_TYPE_tt__NetworkHostType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkHostType_() { tt__NetworkHostType_::soap_default(NULL); }
	virtual ~tt__NetworkHostType_() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPv4Address__
#define SOAP_TYPE_tt__IPv4Address__ (2087)
/* Primitive tt:IPv4Address schema type: */
class SOAP_CMAC tt__IPv4Address__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2087; } /* = unique type id SOAP_TYPE_tt__IPv4Address__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPv4Address__() { tt__IPv4Address__::soap_default(NULL); }
	virtual ~tt__IPv4Address__() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPv6Address__
#define SOAP_TYPE_tt__IPv6Address__ (2089)
/* Primitive tt:IPv6Address schema type: */
class SOAP_CMAC tt__IPv6Address__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2089; } /* = unique type id SOAP_TYPE_tt__IPv6Address__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPv6Address__() { tt__IPv6Address__::soap_default(NULL); }
	virtual ~tt__IPv6Address__() { }
};
#endif

#ifndef SOAP_TYPE_tt__HwAddress__
#define SOAP_TYPE_tt__HwAddress__ (2091)
/* Primitive tt:HwAddress schema type: */
class SOAP_CMAC tt__HwAddress__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2091; } /* = unique type id SOAP_TYPE_tt__HwAddress__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__HwAddress__() { tt__HwAddress__::soap_default(NULL); }
	virtual ~tt__HwAddress__() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPType_
#define SOAP_TYPE_tt__IPType_ (2093)
/* Primitive tt:IPType schema type: */
class SOAP_CMAC tt__IPType_ : public xsd__anyType
{
public:
	enum tt__IPType __item;
public:
	virtual int soap_type() const { return 2093; } /* = unique type id SOAP_TYPE_tt__IPType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPType_() { tt__IPType_::soap_default(NULL); }
	virtual ~tt__IPType_() { }
};
#endif

#ifndef SOAP_TYPE_tt__DNSName__
#define SOAP_TYPE_tt__DNSName__ (2095)
/* Primitive tt:DNSName schema type: */
class SOAP_CMAC tt__DNSName__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2095; } /* = unique type id SOAP_TYPE_tt__DNSName__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DNSName__() { tt__DNSName__::soap_default(NULL); }
	virtual ~tt__DNSName__() { }
};
#endif

#ifndef SOAP_TYPE_tt__Domain__
#define SOAP_TYPE_tt__Domain__ (2097)
/* Primitive tt:Domain schema type: */
class SOAP_CMAC tt__Domain__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2097; } /* = unique type id SOAP_TYPE_tt__Domain__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Domain__() { tt__Domain__::soap_default(NULL); }
	virtual ~tt__Domain__() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPAddressFilterType_
#define SOAP_TYPE_tt__IPAddressFilterType_ (2099)
/* Primitive tt:IPAddressFilterType schema type: */
class SOAP_CMAC tt__IPAddressFilterType_ : public xsd__anyType
{
public:
	enum tt__IPAddressFilterType __item;
public:
	virtual int soap_type() const { return 2099; } /* = unique type id SOAP_TYPE_tt__IPAddressFilterType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPAddressFilterType_() { tt__IPAddressFilterType_::soap_default(NULL); }
	virtual ~tt__IPAddressFilterType_() { }
};
#endif

#ifndef SOAP_TYPE_tt__DynamicDNSType_
#define SOAP_TYPE_tt__DynamicDNSType_ (2101)
/* Primitive tt:DynamicDNSType schema type: */
class SOAP_CMAC tt__DynamicDNSType_ : public xsd__anyType
{
public:
	enum tt__DynamicDNSType __item;
public:
	virtual int soap_type() const { return 2101; } /* = unique type id SOAP_TYPE_tt__DynamicDNSType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DynamicDNSType_() { tt__DynamicDNSType_::soap_default(NULL); }
	virtual ~tt__DynamicDNSType_() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11SSIDType__
#define SOAP_TYPE_tt__Dot11SSIDType__ (2103)
/* Primitive tt:Dot11SSIDType schema type: */
class SOAP_CMAC tt__Dot11SSIDType__ : public xsd__anyType
{
public:
	xsd__hexBinary __item;
public:
	virtual int soap_type() const { return 2103; } /* = unique type id SOAP_TYPE_tt__Dot11SSIDType__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11SSIDType__() { tt__Dot11SSIDType__::soap_default(NULL); }
	virtual ~tt__Dot11SSIDType__() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11StationMode_
#define SOAP_TYPE_tt__Dot11StationMode_ (2105)
/* Primitive tt:Dot11StationMode schema type: */
class SOAP_CMAC tt__Dot11StationMode_ : public xsd__anyType
{
public:
	enum tt__Dot11StationMode __item;
public:
	virtual int soap_type() const { return 2105; } /* = unique type id SOAP_TYPE_tt__Dot11StationMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11StationMode_() { tt__Dot11StationMode_::soap_default(NULL); }
	virtual ~tt__Dot11StationMode_() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11SecurityMode_
#define SOAP_TYPE_tt__Dot11SecurityMode_ (2107)
/* Primitive tt:Dot11SecurityMode schema type: */
class SOAP_CMAC tt__Dot11SecurityMode_ : public xsd__anyType
{
public:
	enum tt__Dot11SecurityMode __item;
public:
	virtual int soap_type() const { return 2107; } /* = unique type id SOAP_TYPE_tt__Dot11SecurityMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11SecurityMode_() { tt__Dot11SecurityMode_::soap_default(NULL); }
	virtual ~tt__Dot11SecurityMode_() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11Cipher_
#define SOAP_TYPE_tt__Dot11Cipher_ (2109)
/* Primitive tt:Dot11Cipher schema type: */
class SOAP_CMAC tt__Dot11Cipher_ : public xsd__anyType
{
public:
	enum tt__Dot11Cipher __item;
public:
	virtual int soap_type() const { return 2109; } /* = unique type id SOAP_TYPE_tt__Dot11Cipher_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11Cipher_() { tt__Dot11Cipher_::soap_default(NULL); }
	virtual ~tt__Dot11Cipher_() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11PSK__
#define SOAP_TYPE_tt__Dot11PSK__ (2111)
/* Primitive tt:Dot11PSK schema type: */
class SOAP_CMAC tt__Dot11PSK__ : public xsd__anyType
{
public:
	xsd__hexBinary __item;
public:
	virtual int soap_type() const { return 2111; } /* = unique type id SOAP_TYPE_tt__Dot11PSK__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11PSK__() { tt__Dot11PSK__::soap_default(NULL); }
	virtual ~tt__Dot11PSK__() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11PSKPassphrase__
#define SOAP_TYPE_tt__Dot11PSKPassphrase__ (2113)
/* Primitive tt:Dot11PSKPassphrase schema type: */
class SOAP_CMAC tt__Dot11PSKPassphrase__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2113; } /* = unique type id SOAP_TYPE_tt__Dot11PSKPassphrase__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11PSKPassphrase__() { tt__Dot11PSKPassphrase__::soap_default(NULL); }
	virtual ~tt__Dot11PSKPassphrase__() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11SignalStrength_
#define SOAP_TYPE_tt__Dot11SignalStrength_ (2115)
/* Primitive tt:Dot11SignalStrength schema type: */
class SOAP_CMAC tt__Dot11SignalStrength_ : public xsd__anyType
{
public:
	enum tt__Dot11SignalStrength __item;
public:
	virtual int soap_type() const { return 2115; } /* = unique type id SOAP_TYPE_tt__Dot11SignalStrength_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11SignalStrength_() { tt__Dot11SignalStrength_::soap_default(NULL); }
	virtual ~tt__Dot11SignalStrength_() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11AuthAndMangementSuite_
#define SOAP_TYPE_tt__Dot11AuthAndMangementSuite_ (2117)
/* Primitive tt:Dot11AuthAndMangementSuite schema type: */
class SOAP_CMAC tt__Dot11AuthAndMangementSuite_ : public xsd__anyType
{
public:
	enum tt__Dot11AuthAndMangementSuite __item;
public:
	virtual int soap_type() const { return 2117; } /* = unique type id SOAP_TYPE_tt__Dot11AuthAndMangementSuite_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11AuthAndMangementSuite_() { tt__Dot11AuthAndMangementSuite_::soap_default(NULL); }
	virtual ~tt__Dot11AuthAndMangementSuite_() { }
};
#endif

#ifndef SOAP_TYPE_tt__CapabilityCategory_
#define SOAP_TYPE_tt__CapabilityCategory_ (2119)
/* Primitive tt:CapabilityCategory schema type: */
class SOAP_CMAC tt__CapabilityCategory_ : public xsd__anyType
{
public:
	enum tt__CapabilityCategory __item;
public:
	virtual int soap_type() const { return 2119; } /* = unique type id SOAP_TYPE_tt__CapabilityCategory_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CapabilityCategory_() { tt__CapabilityCategory_::soap_default(NULL); }
	virtual ~tt__CapabilityCategory_() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemLogType_
#define SOAP_TYPE_tt__SystemLogType_ (2121)
/* Primitive tt:SystemLogType schema type: */
class SOAP_CMAC tt__SystemLogType_ : public xsd__anyType
{
public:
	enum tt__SystemLogType __item;
public:
	virtual int soap_type() const { return 2121; } /* = unique type id SOAP_TYPE_tt__SystemLogType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemLogType_() { tt__SystemLogType_::soap_default(NULL); }
	virtual ~tt__SystemLogType_() { }
};
#endif

#ifndef SOAP_TYPE_tt__FactoryDefaultType_
#define SOAP_TYPE_tt__FactoryDefaultType_ (2123)
/* Primitive tt:FactoryDefaultType schema type: */
class SOAP_CMAC tt__FactoryDefaultType_ : public xsd__anyType
{
public:
	enum tt__FactoryDefaultType __item;
public:
	virtual int soap_type() const { return 2123; } /* = unique type id SOAP_TYPE_tt__FactoryDefaultType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FactoryDefaultType_() { tt__FactoryDefaultType_::soap_default(NULL); }
	virtual ~tt__FactoryDefaultType_() { }
};
#endif

#ifndef SOAP_TYPE_tt__SetDateTimeType_
#define SOAP_TYPE_tt__SetDateTimeType_ (2125)
/* Primitive tt:SetDateTimeType schema type: */
class SOAP_CMAC tt__SetDateTimeType_ : public xsd__anyType
{
public:
	enum tt__SetDateTimeType __item;
public:
	virtual int soap_type() const { return 2125; } /* = unique type id SOAP_TYPE_tt__SetDateTimeType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SetDateTimeType_() { tt__SetDateTimeType_::soap_default(NULL); }
	virtual ~tt__SetDateTimeType_() { }
};
#endif

#ifndef SOAP_TYPE_tt__UserLevel_
#define SOAP_TYPE_tt__UserLevel_ (2127)
/* Primitive tt:UserLevel schema type: */
class SOAP_CMAC tt__UserLevel_ : public xsd__anyType
{
public:
	enum tt__UserLevel __item;
public:
	virtual int soap_type() const { return 2127; } /* = unique type id SOAP_TYPE_tt__UserLevel_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__UserLevel_() { tt__UserLevel_::soap_default(NULL); }
	virtual ~tt__UserLevel_() { }
};
#endif

#ifndef SOAP_TYPE_tt__RelayLogicalState_
#define SOAP_TYPE_tt__RelayLogicalState_ (2129)
/* Primitive tt:RelayLogicalState schema type: */
class SOAP_CMAC tt__RelayLogicalState_ : public xsd__anyType
{
public:
	enum tt__RelayLogicalState __item;
public:
	virtual int soap_type() const { return 2129; } /* = unique type id SOAP_TYPE_tt__RelayLogicalState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RelayLogicalState_() { tt__RelayLogicalState_::soap_default(NULL); }
	virtual ~tt__RelayLogicalState_() { }
};
#endif

#ifndef SOAP_TYPE_tt__RelayIdleState_
#define SOAP_TYPE_tt__RelayIdleState_ (2131)
/* Primitive tt:RelayIdleState schema type: */
class SOAP_CMAC tt__RelayIdleState_ : public xsd__anyType
{
public:
	enum tt__RelayIdleState __item;
public:
	virtual int soap_type() const { return 2131; } /* = unique type id SOAP_TYPE_tt__RelayIdleState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RelayIdleState_() { tt__RelayIdleState_::soap_default(NULL); }
	virtual ~tt__RelayIdleState_() { }
};
#endif

#ifndef SOAP_TYPE_tt__RelayMode_
#define SOAP_TYPE_tt__RelayMode_ (2133)
/* Primitive tt:RelayMode schema type: */
class SOAP_CMAC tt__RelayMode_ : public xsd__anyType
{
public:
	enum tt__RelayMode __item;
public:
	virtual int soap_type() const { return 2133; } /* = unique type id SOAP_TYPE_tt__RelayMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RelayMode_() { tt__RelayMode_::soap_default(NULL); }
	virtual ~tt__RelayMode_() { }
};
#endif

#ifndef SOAP_TYPE_tt__DigitalIdleState_
#define SOAP_TYPE_tt__DigitalIdleState_ (2135)
/* Primitive tt:DigitalIdleState schema type: */
class SOAP_CMAC tt__DigitalIdleState_ : public xsd__anyType
{
public:
	enum tt__DigitalIdleState __item;
public:
	virtual int soap_type() const { return 2135; } /* = unique type id SOAP_TYPE_tt__DigitalIdleState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DigitalIdleState_() { tt__DigitalIdleState_::soap_default(NULL); }
	virtual ~tt__DigitalIdleState_() { }
};
#endif

#ifndef SOAP_TYPE_tt__EFlipMode_
#define SOAP_TYPE_tt__EFlipMode_ (2137)
/* Primitive tt:EFlipMode schema type: */
class SOAP_CMAC tt__EFlipMode_ : public xsd__anyType
{
public:
	enum tt__EFlipMode __item;
public:
	virtual int soap_type() const { return 2137; } /* = unique type id SOAP_TYPE_tt__EFlipMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EFlipMode_() { tt__EFlipMode_::soap_default(NULL); }
	virtual ~tt__EFlipMode_() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReverseMode_
#define SOAP_TYPE_tt__ReverseMode_ (2139)
/* Primitive tt:ReverseMode schema type: */
class SOAP_CMAC tt__ReverseMode_ : public xsd__anyType
{
public:
	enum tt__ReverseMode __item;
public:
	virtual int soap_type() const { return 2139; } /* = unique type id SOAP_TYPE_tt__ReverseMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReverseMode_() { tt__ReverseMode_::soap_default(NULL); }
	virtual ~tt__ReverseMode_() { }
};
#endif

#ifndef SOAP_TYPE_tt__AuxiliaryData__
#define SOAP_TYPE_tt__AuxiliaryData__ (2141)
/* Primitive tt:AuxiliaryData schema type: */
class SOAP_CMAC tt__AuxiliaryData__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2141; } /* = unique type id SOAP_TYPE_tt__AuxiliaryData__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AuxiliaryData__() { tt__AuxiliaryData__::soap_default(NULL); }
	virtual ~tt__AuxiliaryData__() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourState_
#define SOAP_TYPE_tt__PTZPresetTourState_ (2143)
/* Primitive tt:PTZPresetTourState schema type: */
class SOAP_CMAC tt__PTZPresetTourState_ : public xsd__anyType
{
public:
	enum tt__PTZPresetTourState __item;
public:
	virtual int soap_type() const { return 2143; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourState_() { tt__PTZPresetTourState_::soap_default(NULL); }
	virtual ~tt__PTZPresetTourState_() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourDirection_
#define SOAP_TYPE_tt__PTZPresetTourDirection_ (2145)
/* Primitive tt:PTZPresetTourDirection schema type: */
class SOAP_CMAC tt__PTZPresetTourDirection_ : public xsd__anyType
{
public:
	enum tt__PTZPresetTourDirection __item;
public:
	virtual int soap_type() const { return 2145; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourDirection_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourDirection_() { tt__PTZPresetTourDirection_::soap_default(NULL); }
	virtual ~tt__PTZPresetTourDirection_() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourOperation_
#define SOAP_TYPE_tt__PTZPresetTourOperation_ (2147)
/* Primitive tt:PTZPresetTourOperation schema type: */
class SOAP_CMAC tt__PTZPresetTourOperation_ : public xsd__anyType
{
public:
	enum tt__PTZPresetTourOperation __item;
public:
	virtual int soap_type() const { return 2147; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourOperation_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourOperation_() { tt__PTZPresetTourOperation_::soap_default(NULL); }
	virtual ~tt__PTZPresetTourOperation_() { }
};
#endif

#ifndef SOAP_TYPE_tt__AutoFocusMode_
#define SOAP_TYPE_tt__AutoFocusMode_ (2149)
/* Primitive tt:AutoFocusMode schema type: */
class SOAP_CMAC tt__AutoFocusMode_ : public xsd__anyType
{
public:
	enum tt__AutoFocusMode __item;
public:
	virtual int soap_type() const { return 2149; } /* = unique type id SOAP_TYPE_tt__AutoFocusMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AutoFocusMode_() { tt__AutoFocusMode_::soap_default(NULL); }
	virtual ~tt__AutoFocusMode_() { }
};
#endif

#ifndef SOAP_TYPE_tt__WideDynamicMode_
#define SOAP_TYPE_tt__WideDynamicMode_ (2151)
/* Primitive tt:WideDynamicMode schema type: */
class SOAP_CMAC tt__WideDynamicMode_ : public xsd__anyType
{
public:
	enum tt__WideDynamicMode __item;
public:
	virtual int soap_type() const { return 2151; } /* = unique type id SOAP_TYPE_tt__WideDynamicMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WideDynamicMode_() { tt__WideDynamicMode_::soap_default(NULL); }
	virtual ~tt__WideDynamicMode_() { }
};
#endif

#ifndef SOAP_TYPE_tt__BacklightCompensationMode_
#define SOAP_TYPE_tt__BacklightCompensationMode_ (2153)
/* Primitive tt:BacklightCompensationMode schema type: */
class SOAP_CMAC tt__BacklightCompensationMode_ : public xsd__anyType
{
public:
	enum tt__BacklightCompensationMode __item;
public:
	virtual int soap_type() const { return 2153; } /* = unique type id SOAP_TYPE_tt__BacklightCompensationMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__BacklightCompensationMode_() { tt__BacklightCompensationMode_::soap_default(NULL); }
	virtual ~tt__BacklightCompensationMode_() { }
};
#endif

#ifndef SOAP_TYPE_tt__ExposurePriority_
#define SOAP_TYPE_tt__ExposurePriority_ (2155)
/* Primitive tt:ExposurePriority schema type: */
class SOAP_CMAC tt__ExposurePriority_ : public xsd__anyType
{
public:
	enum tt__ExposurePriority __item;
public:
	virtual int soap_type() const { return 2155; } /* = unique type id SOAP_TYPE_tt__ExposurePriority_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ExposurePriority_() { tt__ExposurePriority_::soap_default(NULL); }
	virtual ~tt__ExposurePriority_() { }
};
#endif

#ifndef SOAP_TYPE_tt__ExposureMode_
#define SOAP_TYPE_tt__ExposureMode_ (2157)
/* Primitive tt:ExposureMode schema type: */
class SOAP_CMAC tt__ExposureMode_ : public xsd__anyType
{
public:
	enum tt__ExposureMode __item;
public:
	virtual int soap_type() const { return 2157; } /* = unique type id SOAP_TYPE_tt__ExposureMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ExposureMode_() { tt__ExposureMode_::soap_default(NULL); }
	virtual ~tt__ExposureMode_() { }
};
#endif

#ifndef SOAP_TYPE_tt__Enabled_
#define SOAP_TYPE_tt__Enabled_ (2159)
/* Primitive tt:Enabled schema type: */
class SOAP_CMAC tt__Enabled_ : public xsd__anyType
{
public:
	enum tt__Enabled __item;
public:
	virtual int soap_type() const { return 2159; } /* = unique type id SOAP_TYPE_tt__Enabled_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Enabled_() { tt__Enabled_::soap_default(NULL); }
	virtual ~tt__Enabled_() { }
};
#endif

#ifndef SOAP_TYPE_tt__WhiteBalanceMode_
#define SOAP_TYPE_tt__WhiteBalanceMode_ (2161)
/* Primitive tt:WhiteBalanceMode schema type: */
class SOAP_CMAC tt__WhiteBalanceMode_ : public xsd__anyType
{
public:
	enum tt__WhiteBalanceMode __item;
public:
	virtual int soap_type() const { return 2161; } /* = unique type id SOAP_TYPE_tt__WhiteBalanceMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WhiteBalanceMode_() { tt__WhiteBalanceMode_::soap_default(NULL); }
	virtual ~tt__WhiteBalanceMode_() { }
};
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterMode_
#define SOAP_TYPE_tt__IrCutFilterMode_ (2163)
/* Primitive tt:IrCutFilterMode schema type: */
class SOAP_CMAC tt__IrCutFilterMode_ : public xsd__anyType
{
public:
	enum tt__IrCutFilterMode __item;
public:
	virtual int soap_type() const { return 2163; } /* = unique type id SOAP_TYPE_tt__IrCutFilterMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IrCutFilterMode_() { tt__IrCutFilterMode_::soap_default(NULL); }
	virtual ~tt__IrCutFilterMode_() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImageStabilizationMode_
#define SOAP_TYPE_tt__ImageStabilizationMode_ (2165)
/* Primitive tt:ImageStabilizationMode schema type: */
class SOAP_CMAC tt__ImageStabilizationMode_ : public xsd__anyType
{
public:
	enum tt__ImageStabilizationMode __item;
public:
	virtual int soap_type() const { return 2165; } /* = unique type id SOAP_TYPE_tt__ImageStabilizationMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImageStabilizationMode_() { tt__ImageStabilizationMode_::soap_default(NULL); }
	virtual ~tt__ImageStabilizationMode_() { }
};
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterAutoBoundaryType_
#define SOAP_TYPE_tt__IrCutFilterAutoBoundaryType_ (2167)
/* Primitive tt:IrCutFilterAutoBoundaryType schema type: */
class SOAP_CMAC tt__IrCutFilterAutoBoundaryType_ : public xsd__anyType
{
public:
	enum tt__IrCutFilterAutoBoundaryType __item;
public:
	virtual int soap_type() const { return 2167; } /* = unique type id SOAP_TYPE_tt__IrCutFilterAutoBoundaryType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IrCutFilterAutoBoundaryType_() { tt__IrCutFilterAutoBoundaryType_::soap_default(NULL); }
	virtual ~tt__IrCutFilterAutoBoundaryType_() { }
};
#endif

#ifndef SOAP_TYPE_tt__ToneCompensationMode_
#define SOAP_TYPE_tt__ToneCompensationMode_ (2169)
/* Primitive tt:ToneCompensationMode schema type: */
class SOAP_CMAC tt__ToneCompensationMode_ : public xsd__anyType
{
public:
	enum tt__ToneCompensationMode __item;
public:
	virtual int soap_type() const { return 2169; } /* = unique type id SOAP_TYPE_tt__ToneCompensationMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ToneCompensationMode_() { tt__ToneCompensationMode_::soap_default(NULL); }
	virtual ~tt__ToneCompensationMode_() { }
};
#endif

#ifndef SOAP_TYPE_tt__DefoggingMode_
#define SOAP_TYPE_tt__DefoggingMode_ (2171)
/* Primitive tt:DefoggingMode schema type: */
class SOAP_CMAC tt__DefoggingMode_ : public xsd__anyType
{
public:
	enum tt__DefoggingMode __item;
public:
	virtual int soap_type() const { return 2171; } /* = unique type id SOAP_TYPE_tt__DefoggingMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DefoggingMode_() { tt__DefoggingMode_::soap_default(NULL); }
	virtual ~tt__DefoggingMode_() { }
};
#endif

#ifndef SOAP_TYPE_tt__TopicNamespaceLocation__
#define SOAP_TYPE_tt__TopicNamespaceLocation__ (2173)
/* Primitive tt:TopicNamespaceLocation schema type: */
class SOAP_CMAC tt__TopicNamespaceLocation__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2173; } /* = unique type id SOAP_TYPE_tt__TopicNamespaceLocation__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TopicNamespaceLocation__() { tt__TopicNamespaceLocation__::soap_default(NULL); }
	virtual ~tt__TopicNamespaceLocation__() { }
};
#endif

#ifndef SOAP_TYPE_tt__PropertyOperation_
#define SOAP_TYPE_tt__PropertyOperation_ (2175)
/* Primitive tt:PropertyOperation schema type: */
class SOAP_CMAC tt__PropertyOperation_ : public xsd__anyType
{
public:
	enum tt__PropertyOperation __item;
public:
	virtual int soap_type() const { return 2175; } /* = unique type id SOAP_TYPE_tt__PropertyOperation_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PropertyOperation_() { tt__PropertyOperation_::soap_default(NULL); }
	virtual ~tt__PropertyOperation_() { }
};
#endif

#ifndef SOAP_TYPE_tt__Direction_
#define SOAP_TYPE_tt__Direction_ (2177)
/* Primitive tt:Direction schema type: */
class SOAP_CMAC tt__Direction_ : public xsd__anyType
{
public:
	enum tt__Direction __item;
public:
	virtual int soap_type() const { return 2177; } /* = unique type id SOAP_TYPE_tt__Direction_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Direction_() { tt__Direction_::soap_default(NULL); }
	virtual ~tt__Direction_() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReceiverMode_
#define SOAP_TYPE_tt__ReceiverMode_ (2179)
/* Primitive tt:ReceiverMode schema type: */
class SOAP_CMAC tt__ReceiverMode_ : public xsd__anyType
{
public:
	enum tt__ReceiverMode __item;
public:
	virtual int soap_type() const { return 2179; } /* = unique type id SOAP_TYPE_tt__ReceiverMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReceiverMode_() { tt__ReceiverMode_::soap_default(NULL); }
	virtual ~tt__ReceiverMode_() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReceiverState_
#define SOAP_TYPE_tt__ReceiverState_ (2181)
/* Primitive tt:ReceiverState schema type: */
class SOAP_CMAC tt__ReceiverState_ : public xsd__anyType
{
public:
	enum tt__ReceiverState __item;
public:
	virtual int soap_type() const { return 2181; } /* = unique type id SOAP_TYPE_tt__ReceiverState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReceiverState_() { tt__ReceiverState_::soap_default(NULL); }
	virtual ~tt__ReceiverState_() { }
};
#endif

#ifndef SOAP_TYPE_tt__Description__
#define SOAP_TYPE_tt__Description__ (2183)
/* Primitive tt:Description schema type: */
class SOAP_CMAC tt__Description__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2183; } /* = unique type id SOAP_TYPE_tt__Description__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Description__() { tt__Description__::soap_default(NULL); }
	virtual ~tt__Description__() { }
};
#endif

#ifndef SOAP_TYPE_tt__XPathExpression__
#define SOAP_TYPE_tt__XPathExpression__ (2185)
/* Primitive tt:XPathExpression schema type: */
class SOAP_CMAC tt__XPathExpression__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2185; } /* = unique type id SOAP_TYPE_tt__XPathExpression__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__XPathExpression__() { tt__XPathExpression__::soap_default(NULL); }
	virtual ~tt__XPathExpression__() { }
};
#endif

#ifndef SOAP_TYPE_tt__SearchState_
#define SOAP_TYPE_tt__SearchState_ (2187)
/* Primitive tt:SearchState schema type: */
class SOAP_CMAC tt__SearchState_ : public xsd__anyType
{
public:
	enum tt__SearchState __item;
public:
	virtual int soap_type() const { return 2187; } /* = unique type id SOAP_TYPE_tt__SearchState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SearchState_() { tt__SearchState_::soap_default(NULL); }
	virtual ~tt__SearchState_() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingStatus_
#define SOAP_TYPE_tt__RecordingStatus_ (2189)
/* Primitive tt:RecordingStatus schema type: */
class SOAP_CMAC tt__RecordingStatus_ : public xsd__anyType
{
public:
	enum tt__RecordingStatus __item;
public:
	virtual int soap_type() const { return 2189; } /* = unique type id SOAP_TYPE_tt__RecordingStatus_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingStatus_() { tt__RecordingStatus_::soap_default(NULL); }
	virtual ~tt__RecordingStatus_() { }
};
#endif

#ifndef SOAP_TYPE_tt__TrackType_
#define SOAP_TYPE_tt__TrackType_ (2191)
/* Primitive tt:TrackType schema type: */
class SOAP_CMAC tt__TrackType_ : public xsd__anyType
{
public:
	enum tt__TrackType __item;
public:
	virtual int soap_type() const { return 2191; } /* = unique type id SOAP_TYPE_tt__TrackType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TrackType_() { tt__TrackType_::soap_default(NULL); }
	virtual ~tt__TrackType_() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobMode__
#define SOAP_TYPE_tt__RecordingJobMode__ (2193)
/* Primitive tt:RecordingJobMode schema type: */
class SOAP_CMAC tt__RecordingJobMode__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2193; } /* = unique type id SOAP_TYPE_tt__RecordingJobMode__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobMode__() { tt__RecordingJobMode__::soap_default(NULL); }
	virtual ~tt__RecordingJobMode__() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobState__
#define SOAP_TYPE_tt__RecordingJobState__ (2195)
/* Primitive tt:RecordingJobState schema type: */
class SOAP_CMAC tt__RecordingJobState__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2195; } /* = unique type id SOAP_TYPE_tt__RecordingJobState__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobState__() { tt__RecordingJobState__::soap_default(NULL); }
	virtual ~tt__RecordingJobState__() { }
};
#endif

#ifndef SOAP_TYPE_tt__ModeOfOperation_
#define SOAP_TYPE_tt__ModeOfOperation_ (2197)
/* Primitive tt:ModeOfOperation schema type: */
class SOAP_CMAC tt__ModeOfOperation_ : public xsd__anyType
{
public:
	enum tt__ModeOfOperation __item;
public:
	virtual int soap_type() const { return 2197; } /* = unique type id SOAP_TYPE_tt__ModeOfOperation_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ModeOfOperation_() { tt__ModeOfOperation_::soap_default(NULL); }
	virtual ~tt__ModeOfOperation_() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioClassType__
#define SOAP_TYPE_tt__AudioClassType__ (2199)
/* Primitive tt:AudioClassType schema type: */
class SOAP_CMAC tt__AudioClassType__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2199; } /* = unique type id SOAP_TYPE_tt__AudioClassType__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioClassType__() { tt__AudioClassType__::soap_default(NULL); }
	virtual ~tt__AudioClassType__() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDType_
#define SOAP_TYPE_tt__OSDType_ (2201)
/* Primitive tt:OSDType schema type: */
class SOAP_CMAC tt__OSDType_ : public xsd__anyType
{
public:
	enum tt__OSDType __item;
public:
	virtual int soap_type() const { return 2201; } /* = unique type id SOAP_TYPE_tt__OSDType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDType_() { tt__OSDType_::soap_default(NULL); }
	virtual ~tt__OSDType_() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReferenceToken__
#define SOAP_TYPE_tt__ReferenceToken__ (2203)
/* Primitive tt:ReferenceToken schema type: */
class SOAP_CMAC tt__ReferenceToken__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2203; } /* = unique type id SOAP_TYPE_tt__ReferenceToken__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReferenceToken__() { tt__ReferenceToken__::soap_default(NULL); }
	virtual ~tt__ReferenceToken__() { }
};
#endif

#ifndef SOAP_TYPE_tt__MoveStatus_
#define SOAP_TYPE_tt__MoveStatus_ (2205)
/* Primitive tt:MoveStatus schema type: */
class SOAP_CMAC tt__MoveStatus_ : public xsd__anyType
{
public:
	enum tt__MoveStatus __item;
public:
	virtual int soap_type() const { return 2205; } /* = unique type id SOAP_TYPE_tt__MoveStatus_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MoveStatus_() { tt__MoveStatus_::soap_default(NULL); }
	virtual ~tt__MoveStatus_() { }
};
#endif

#ifndef SOAP_TYPE_tt__Entity_
#define SOAP_TYPE_tt__Entity_ (2207)
/* Primitive tt:Entity schema type: */
class SOAP_CMAC tt__Entity_ : public xsd__anyType
{
public:
	enum tt__Entity __item;
public:
	virtual int soap_type() const { return 2207; } /* = unique type id SOAP_TYPE_tt__Entity_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Entity_() { tt__Entity_::soap_default(NULL); }
	virtual ~tt__Entity_() { }
};
#endif

#ifndef SOAP_TYPE_wstop__FullTopicExpression__
#define SOAP_TYPE_wstop__FullTopicExpression__ (2209)
/* Primitive wstop:FullTopicExpression schema type: */
class SOAP_CMAC wstop__FullTopicExpression__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2209; } /* = unique type id SOAP_TYPE_wstop__FullTopicExpression__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__FullTopicExpression__() { wstop__FullTopicExpression__::soap_default(NULL); }
	virtual ~wstop__FullTopicExpression__() { }
};
#endif

#ifndef SOAP_TYPE_wstop__ConcreteTopicExpression__
#define SOAP_TYPE_wstop__ConcreteTopicExpression__ (2211)
/* Primitive wstop:ConcreteTopicExpression schema type: */
class SOAP_CMAC wstop__ConcreteTopicExpression__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2211; } /* = unique type id SOAP_TYPE_wstop__ConcreteTopicExpression__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__ConcreteTopicExpression__() { wstop__ConcreteTopicExpression__::soap_default(NULL); }
	virtual ~wstop__ConcreteTopicExpression__() { }
};
#endif

#ifndef SOAP_TYPE_wstop__SimpleTopicExpression__
#define SOAP_TYPE_wstop__SimpleTopicExpression__ (2213)
/* Primitive wstop:SimpleTopicExpression schema type: */
class SOAP_CMAC wstop__SimpleTopicExpression__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2213; } /* = unique type id SOAP_TYPE_wstop__SimpleTopicExpression__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__SimpleTopicExpression__() { wstop__SimpleTopicExpression__::soap_default(NULL); }
	virtual ~wstop__SimpleTopicExpression__() { }
};
#endif

#ifndef SOAP_TYPE_ns5__KeyID__
#define SOAP_TYPE_ns5__KeyID__ (2215)
/* Primitive ns5:KeyID schema type: */
class SOAP_CMAC ns5__KeyID__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2215; } /* = unique type id SOAP_TYPE_ns5__KeyID__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__KeyID__() { ns5__KeyID__::soap_default(NULL); }
	virtual ~ns5__KeyID__() { }
};
#endif

#ifndef SOAP_TYPE_ns5__CertificateID__
#define SOAP_TYPE_ns5__CertificateID__ (2217)
/* Primitive ns5:CertificateID schema type: */
class SOAP_CMAC ns5__CertificateID__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2217; } /* = unique type id SOAP_TYPE_ns5__CertificateID__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__CertificateID__() { ns5__CertificateID__::soap_default(NULL); }
	virtual ~ns5__CertificateID__() { }
};
#endif

#ifndef SOAP_TYPE_ns5__CertificationPathID__
#define SOAP_TYPE_ns5__CertificationPathID__ (2219)
/* Primitive ns5:CertificationPathID schema type: */
class SOAP_CMAC ns5__CertificationPathID__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2219; } /* = unique type id SOAP_TYPE_ns5__CertificationPathID__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__CertificationPathID__() { ns5__CertificationPathID__::soap_default(NULL); }
	virtual ~ns5__CertificationPathID__() { }
};
#endif

#ifndef SOAP_TYPE_ns5__PassphraseID__
#define SOAP_TYPE_ns5__PassphraseID__ (2221)
/* Primitive ns5:PassphraseID schema type: */
class SOAP_CMAC ns5__PassphraseID__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2221; } /* = unique type id SOAP_TYPE_ns5__PassphraseID__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__PassphraseID__() { ns5__PassphraseID__::soap_default(NULL); }
	virtual ~ns5__PassphraseID__() { }
};
#endif

#ifndef SOAP_TYPE_ns5__Dot1XID__
#define SOAP_TYPE_ns5__Dot1XID__ (2223)
/* Primitive ns5:Dot1XID schema type: */
class SOAP_CMAC ns5__Dot1XID__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2223; } /* = unique type id SOAP_TYPE_ns5__Dot1XID__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__Dot1XID__() { ns5__Dot1XID__::soap_default(NULL); }
	virtual ~ns5__Dot1XID__() { }
};
#endif

#ifndef SOAP_TYPE_ns5__KeyStatus_
#define SOAP_TYPE_ns5__KeyStatus_ (2225)
/* Primitive ns5:KeyStatus schema type: */
class SOAP_CMAC ns5__KeyStatus_ : public xsd__anyType
{
public:
	enum ns5__KeyStatus __item;
public:
	virtual int soap_type() const { return 2225; } /* = unique type id SOAP_TYPE_ns5__KeyStatus_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__KeyStatus_() { ns5__KeyStatus_::soap_default(NULL); }
	virtual ~ns5__KeyStatus_() { }
};
#endif

#ifndef SOAP_TYPE_ns5__DotDecimalOID__
#define SOAP_TYPE_ns5__DotDecimalOID__ (2227)
/* Primitive ns5:DotDecimalOID schema type: */
class SOAP_CMAC ns5__DotDecimalOID__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2227; } /* = unique type id SOAP_TYPE_ns5__DotDecimalOID__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__DotDecimalOID__() { ns5__DotDecimalOID__::soap_default(NULL); }
	virtual ~ns5__DotDecimalOID__() { }
};
#endif

#ifndef SOAP_TYPE_ns5__DNAttributeType__
#define SOAP_TYPE_ns5__DNAttributeType__ (2229)
/* Primitive ns5:DNAttributeType schema type: */
class SOAP_CMAC ns5__DNAttributeType__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2229; } /* = unique type id SOAP_TYPE_ns5__DNAttributeType__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__DNAttributeType__() { ns5__DNAttributeType__::soap_default(NULL); }
	virtual ~ns5__DNAttributeType__() { }
};
#endif

#ifndef SOAP_TYPE_ns5__DNAttributeValue__
#define SOAP_TYPE_ns5__DNAttributeValue__ (2231)
/* Primitive ns5:DNAttributeValue schema type: */
class SOAP_CMAC ns5__DNAttributeValue__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2231; } /* = unique type id SOAP_TYPE_ns5__DNAttributeValue__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__DNAttributeValue__() { ns5__DNAttributeValue__::soap_default(NULL); }
	virtual ~ns5__DNAttributeValue__() { }
};
#endif

#ifndef SOAP_TYPE_ns5__Base64DERencodedASN1Value__
#define SOAP_TYPE_ns5__Base64DERencodedASN1Value__ (2233)
/* Primitive ns5:Base64DERencodedASN1Value schema type: */
class SOAP_CMAC ns5__Base64DERencodedASN1Value__ : public xsd__anyType
{
public:
	xsd__base64Binary __item;
public:
	virtual int soap_type() const { return 2233; } /* = unique type id SOAP_TYPE_ns5__Base64DERencodedASN1Value__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__Base64DERencodedASN1Value__() { ns5__Base64DERencodedASN1Value__::soap_default(NULL); }
	virtual ~ns5__Base64DERencodedASN1Value__() { }
};
#endif

#ifndef SOAP_TYPE_ns5__CRLID__
#define SOAP_TYPE_ns5__CRLID__ (2235)
/* Primitive ns5:CRLID schema type: */
class SOAP_CMAC ns5__CRLID__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2235; } /* = unique type id SOAP_TYPE_ns5__CRLID__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__CRLID__() { ns5__CRLID__::soap_default(NULL); }
	virtual ~ns5__CRLID__() { }
};
#endif

#ifndef SOAP_TYPE_ns5__CertPathValidationPolicyID__
#define SOAP_TYPE_ns5__CertPathValidationPolicyID__ (2237)
/* Primitive ns5:CertPathValidationPolicyID schema type: */
class SOAP_CMAC ns5__CertPathValidationPolicyID__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2237; } /* = unique type id SOAP_TYPE_ns5__CertPathValidationPolicyID__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__CertPathValidationPolicyID__() { ns5__CertPathValidationPolicyID__::soap_default(NULL); }
	virtual ~ns5__CertPathValidationPolicyID__() { }
};
#endif

#ifndef SOAP_TYPE_tmd__SerialPortType_
#define SOAP_TYPE_tmd__SerialPortType_ (2239)
/* Primitive tmd:SerialPortType schema type: */
class SOAP_CMAC tmd__SerialPortType_ : public xsd__anyType
{
public:
	enum tmd__SerialPortType __item;
public:
	virtual int soap_type() const { return 2239; } /* = unique type id SOAP_TYPE_tmd__SerialPortType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__SerialPortType_() { tmd__SerialPortType_::soap_default(NULL); }
	virtual ~tmd__SerialPortType_() { }
};
#endif

#ifndef SOAP_TYPE_tmd__ParityBit_
#define SOAP_TYPE_tmd__ParityBit_ (2241)
/* Primitive tmd:ParityBit schema type: */
class SOAP_CMAC tmd__ParityBit_ : public xsd__anyType
{
public:
	enum tmd__ParityBit __item;
public:
	virtual int soap_type() const { return 2241; } /* = unique type id SOAP_TYPE_tmd__ParityBit_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__ParityBit_() { tmd__ParityBit_::soap_default(NULL); }
	virtual ~tmd__ParityBit_() { }
};
#endif

#ifndef SOAP_TYPE_tds__AutoGeoModes_
#define SOAP_TYPE_tds__AutoGeoModes_ (2243)
/* Primitive tds:AutoGeoModes schema type: */
class SOAP_CMAC tds__AutoGeoModes_ : public xsd__anyType
{
public:
	enum tds__AutoGeoModes __item;
public:
	virtual int soap_type() const { return 2243; } /* = unique type id SOAP_TYPE_tds__AutoGeoModes_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tds__AutoGeoModes_() { tds__AutoGeoModes_::soap_default(NULL); }
	virtual ~tds__AutoGeoModes_() { }
};
#endif

#ifndef SOAP_TYPE_tds__StorageType_
#define SOAP_TYPE_tds__StorageType_ (2245)
/* Primitive tds:StorageType schema type: */
class SOAP_CMAC tds__StorageType_ : public xsd__anyType
{
public:
	enum tds__StorageType __item;
public:
	virtual int soap_type() const { return 2245; } /* = unique type id SOAP_TYPE_tds__StorageType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tds__StorageType_() { tds__StorageType_::soap_default(NULL); }
	virtual ~tds__StorageType_() { }
};
#endif

#ifndef SOAP_TYPE_ns8__DoorPhysicalState_
#define SOAP_TYPE_ns8__DoorPhysicalState_ (2247)
/* Primitive ns8:DoorPhysicalState schema type: */
class SOAP_CMAC ns8__DoorPhysicalState_ : public xsd__anyType
{
public:
	enum ns8__DoorPhysicalState __item;
public:
	virtual int soap_type() const { return 2247; } /* = unique type id SOAP_TYPE_ns8__DoorPhysicalState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__DoorPhysicalState_() { ns8__DoorPhysicalState_::soap_default(NULL); }
	virtual ~ns8__DoorPhysicalState_() { }
};
#endif

#ifndef SOAP_TYPE_ns8__LockPhysicalState_
#define SOAP_TYPE_ns8__LockPhysicalState_ (2249)
/* Primitive ns8:LockPhysicalState schema type: */
class SOAP_CMAC ns8__LockPhysicalState_ : public xsd__anyType
{
public:
	enum ns8__LockPhysicalState __item;
public:
	virtual int soap_type() const { return 2249; } /* = unique type id SOAP_TYPE_ns8__LockPhysicalState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__LockPhysicalState_() { ns8__LockPhysicalState_::soap_default(NULL); }
	virtual ~ns8__LockPhysicalState_() { }
};
#endif

#ifndef SOAP_TYPE_ns8__DoorAlarmState_
#define SOAP_TYPE_ns8__DoorAlarmState_ (2251)
/* Primitive ns8:DoorAlarmState schema type: */
class SOAP_CMAC ns8__DoorAlarmState_ : public xsd__anyType
{
public:
	enum ns8__DoorAlarmState __item;
public:
	virtual int soap_type() const { return 2251; } /* = unique type id SOAP_TYPE_ns8__DoorAlarmState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__DoorAlarmState_() { ns8__DoorAlarmState_::soap_default(NULL); }
	virtual ~ns8__DoorAlarmState_() { }
};
#endif

#ifndef SOAP_TYPE_ns8__DoorTamperState_
#define SOAP_TYPE_ns8__DoorTamperState_ (2253)
/* Primitive ns8:DoorTamperState schema type: */
class SOAP_CMAC ns8__DoorTamperState_ : public xsd__anyType
{
public:
	enum ns8__DoorTamperState __item;
public:
	virtual int soap_type() const { return 2253; } /* = unique type id SOAP_TYPE_ns8__DoorTamperState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__DoorTamperState_() { ns8__DoorTamperState_::soap_default(NULL); }
	virtual ~ns8__DoorTamperState_() { }
};
#endif

#ifndef SOAP_TYPE_ns8__DoorFaultState_
#define SOAP_TYPE_ns8__DoorFaultState_ (2255)
/* Primitive ns8:DoorFaultState schema type: */
class SOAP_CMAC ns8__DoorFaultState_ : public xsd__anyType
{
public:
	enum ns8__DoorFaultState __item;
public:
	virtual int soap_type() const { return 2255; } /* = unique type id SOAP_TYPE_ns8__DoorFaultState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__DoorFaultState_() { ns8__DoorFaultState_::soap_default(NULL); }
	virtual ~ns8__DoorFaultState_() { }
};
#endif

#ifndef SOAP_TYPE_ns8__DoorMode_
#define SOAP_TYPE_ns8__DoorMode_ (2257)
/* Primitive ns8:DoorMode schema type: */
class SOAP_CMAC ns8__DoorMode_ : public xsd__anyType
{
public:
	enum ns8__DoorMode __item;
public:
	virtual int soap_type() const { return 2257; } /* = unique type id SOAP_TYPE_ns8__DoorMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__DoorMode_() { ns8__DoorMode_::soap_default(NULL); }
	virtual ~ns8__DoorMode_() { }
};
#endif

#ifndef SOAP_TYPE_timg__ImagingPresetType_
#define SOAP_TYPE_timg__ImagingPresetType_ (2259)
/* Primitive timg:ImagingPresetType schema type: */
class SOAP_CMAC timg__ImagingPresetType_ : public xsd__anyType
{
public:
	enum timg__ImagingPresetType __item;
public:
	virtual int soap_type() const { return 2259; } /* = unique type id SOAP_TYPE_timg__ImagingPresetType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         timg__ImagingPresetType_() { timg__ImagingPresetType_::soap_default(NULL); }
	virtual ~timg__ImagingPresetType_() { }
};
#endif

#ifndef SOAP_TYPE_ns9__ConfigurationEnumeration_
#define SOAP_TYPE_ns9__ConfigurationEnumeration_ (2261)
/* Primitive ns9:ConfigurationEnumeration schema type: */
class SOAP_CMAC ns9__ConfigurationEnumeration_ : public xsd__anyType
{
public:
	enum ns9__ConfigurationEnumeration __item;
public:
	virtual int soap_type() const { return 2261; } /* = unique type id SOAP_TYPE_ns9__ConfigurationEnumeration_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns9__ConfigurationEnumeration_() { ns9__ConfigurationEnumeration_::soap_default(NULL); }
	virtual ~ns9__ConfigurationEnumeration_() { }
};
#endif

#ifndef SOAP_TYPE_ns9__TransportProtocol_
#define SOAP_TYPE_ns9__TransportProtocol_ (2263)
/* Primitive ns9:TransportProtocol schema type: */
class SOAP_CMAC ns9__TransportProtocol_ : public xsd__anyType
{
public:
	enum ns9__TransportProtocol __item;
public:
	virtual int soap_type() const { return 2263; } /* = unique type id SOAP_TYPE_ns9__TransportProtocol_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns9__TransportProtocol_() { ns9__TransportProtocol_::soap_default(NULL); }
	virtual ~ns9__TransportProtocol_() { }
};
#endif

#ifndef SOAP_TYPE_ns9__MaskType_
#define SOAP_TYPE_ns9__MaskType_ (2265)
/* Primitive ns9:MaskType schema type: */
class SOAP_CMAC ns9__MaskType_ : public xsd__anyType
{
public:
	enum ns9__MaskType __item;
public:
	virtual int soap_type() const { return 2265; } /* = unique type id SOAP_TYPE_ns9__MaskType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns9__MaskType_() { ns9__MaskType_::soap_default(NULL); }
	virtual ~ns9__MaskType_() { }
};
#endif

#ifndef SOAP_TYPE_ns10__PanDirection_
#define SOAP_TYPE_ns10__PanDirection_ (2267)
/* Primitive ns10:PanDirection schema type: */
class SOAP_CMAC ns10__PanDirection_ : public xsd__anyType
{
public:
	enum ns10__PanDirection __item;
public:
	virtual int soap_type() const { return 2267; } /* = unique type id SOAP_TYPE_ns10__PanDirection_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns10__PanDirection_() { ns10__PanDirection_::soap_default(NULL); }
	virtual ~ns10__PanDirection_() { }
};
#endif

#ifndef SOAP_TYPE_ns10__TiltDirection_
#define SOAP_TYPE_ns10__TiltDirection_ (2269)
/* Primitive ns10:TiltDirection schema type: */
class SOAP_CMAC ns10__TiltDirection_ : public xsd__anyType
{
public:
	enum ns10__TiltDirection __item;
public:
	virtual int soap_type() const { return 2269; } /* = unique type id SOAP_TYPE_ns10__TiltDirection_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns10__TiltDirection_() { ns10__TiltDirection_::soap_default(NULL); }
	virtual ~ns10__TiltDirection_() { }
};
#endif

#ifndef SOAP_TYPE_ns10__ZoomDirection_
#define SOAP_TYPE_ns10__ZoomDirection_ (2271)
/* Primitive ns10:ZoomDirection schema type: */
class SOAP_CMAC ns10__ZoomDirection_ : public xsd__anyType
{
public:
	enum ns10__ZoomDirection __item;
public:
	virtual int soap_type() const { return 2271; } /* = unique type id SOAP_TYPE_ns10__ZoomDirection_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns10__ZoomDirection_() { ns10__ZoomDirection_::soap_default(NULL); }
	virtual ~ns10__ZoomDirection_() { }
};
#endif

#ifndef SOAP_TYPE_ns10__RollDirection_
#define SOAP_TYPE_ns10__RollDirection_ (2273)
/* Primitive ns10:RollDirection schema type: */
class SOAP_CMAC ns10__RollDirection_ : public xsd__anyType
{
public:
	enum ns10__RollDirection __item;
public:
	virtual int soap_type() const { return 2273; } /* = unique type id SOAP_TYPE_ns10__RollDirection_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns10__RollDirection_() { ns10__RollDirection_::soap_default(NULL); }
	virtual ~ns10__RollDirection_() { }
};
#endif

#ifndef SOAP_TYPE_ns10__FocusDirection_
#define SOAP_TYPE_ns10__FocusDirection_ (2275)
/* Primitive ns10:FocusDirection schema type: */
class SOAP_CMAC ns10__FocusDirection_ : public xsd__anyType
{
public:
	enum ns10__FocusDirection __item;
public:
	virtual int soap_type() const { return 2275; } /* = unique type id SOAP_TYPE_ns10__FocusDirection_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns10__FocusDirection_() { ns10__FocusDirection_::soap_default(NULL); }
	virtual ~ns10__FocusDirection_() { }
};
#endif

#ifndef SOAP_TYPE_ns12__Polarity_
#define SOAP_TYPE_ns12__Polarity_ (2277)
/* Primitive ns12:Polarity schema type: */
class SOAP_CMAC ns12__Polarity_ : public xsd__anyType
{
public:
	enum ns12__Polarity __item;
public:
	virtual int soap_type() const { return 2277; } /* = unique type id SOAP_TYPE_ns12__Polarity_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns12__Polarity_() { ns12__Polarity_::soap_default(NULL); }
	virtual ~ns12__Polarity_() { }
};
#endif

#ifndef SOAP_TYPE_ns12__ColorPaletteType_
#define SOAP_TYPE_ns12__ColorPaletteType_ (2279)
/* Primitive ns12:ColorPaletteType schema type: */
class SOAP_CMAC ns12__ColorPaletteType_ : public xsd__anyType
{
public:
	enum ns12__ColorPaletteType __item;
public:
	virtual int soap_type() const { return 2279; } /* = unique type id SOAP_TYPE_ns12__ColorPaletteType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns12__ColorPaletteType_() { ns12__ColorPaletteType_::soap_default(NULL); }
	virtual ~ns12__ColorPaletteType_() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReceiverReference__
#define SOAP_TYPE_tt__ReceiverReference__ (2281)
/* Primitive tt:ReceiverReference schema type: */
class SOAP_CMAC tt__ReceiverReference__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2281; } /* = unique type id SOAP_TYPE_tt__ReceiverReference__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReceiverReference__() { tt__ReceiverReference__::soap_default(NULL); }
	virtual ~tt__ReceiverReference__() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingReference__
#define SOAP_TYPE_tt__RecordingReference__ (2283)
/* Primitive tt:RecordingReference schema type: */
class SOAP_CMAC tt__RecordingReference__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2283; } /* = unique type id SOAP_TYPE_tt__RecordingReference__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingReference__() { tt__RecordingReference__::soap_default(NULL); }
	virtual ~tt__RecordingReference__() { }
};
#endif

#ifndef SOAP_TYPE_tt__TrackReference__
#define SOAP_TYPE_tt__TrackReference__ (2285)
/* Primitive tt:TrackReference schema type: */
class SOAP_CMAC tt__TrackReference__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2285; } /* = unique type id SOAP_TYPE_tt__TrackReference__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TrackReference__() { tt__TrackReference__::soap_default(NULL); }
	virtual ~tt__TrackReference__() { }
};
#endif

#ifndef SOAP_TYPE_tt__JobToken__
#define SOAP_TYPE_tt__JobToken__ (2287)
/* Primitive tt:JobToken schema type: */
class SOAP_CMAC tt__JobToken__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2287; } /* = unique type id SOAP_TYPE_tt__JobToken__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__JobToken__() { tt__JobToken__::soap_default(NULL); }
	virtual ~tt__JobToken__() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobReference__
#define SOAP_TYPE_tt__RecordingJobReference__ (2289)
/* Primitive tt:RecordingJobReference schema type: */
class SOAP_CMAC tt__RecordingJobReference__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 2289; } /* = unique type id SOAP_TYPE_tt__RecordingJobReference__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobReference__() { tt__RecordingJobReference__::soap_default(NULL); }
	virtual ~tt__RecordingJobReference__() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ServiceCapabilities
#define SOAP_TYPE_ns1__ServiceCapabilities (192)
/* ns1:ServiceCapabilities */
class SOAP_CMAC ns1__ServiceCapabilities : public xsd__anyType
{
public:
	std::vector<char * >__any;
	unsigned int MaxLimit;	/* required attribute */
	unsigned int MaxAccessPoints;	/* optional attribute */
	unsigned int MaxAreas;	/* optional attribute */
	bool ClientSuppliedTokenSupported;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 192; } /* = unique type id SOAP_TYPE_ns1__ServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ServiceCapabilities() { ns1__ServiceCapabilities::soap_default(NULL); }
	virtual ~ns1__ServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AccessPointExtension
#define SOAP_TYPE_ns1__AccessPointExtension (196)
/* ns1:AccessPointExtension */
class SOAP_CMAC ns1__AccessPointExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 196; } /* = unique type id SOAP_TYPE_ns1__AccessPointExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AccessPointExtension() { ns1__AccessPointExtension::soap_default(NULL); }
	virtual ~ns1__AccessPointExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AccessPointCapabilities
#define SOAP_TYPE_ns1__AccessPointCapabilities (197)
/* ns1:AccessPointCapabilities */
class SOAP_CMAC ns1__AccessPointCapabilities : public xsd__anyType
{
public:
	std::vector<std::string >SupportedSecurityLevels;	/* optional element of type ns2:ReferenceToken */
	class ns1__SupportedSecurityLevelsExtension *Extension;	/* optional element of type ns1:SupportedSecurityLevelsExtension */
	std::vector<char * >__any;
	bool DisableAccessPoint;	/* required attribute */
	bool *Duress;	/* optional attribute */
	bool *AnonymousAccess;	/* optional attribute */
	bool *AccessTaken;	/* optional attribute */
	bool *ExternalAuthorization;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 197; } /* = unique type id SOAP_TYPE_ns1__AccessPointCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AccessPointCapabilities() { ns1__AccessPointCapabilities::soap_default(NULL); }
	virtual ~ns1__AccessPointCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SupportedSecurityLevelsExtension
#define SOAP_TYPE_ns1__SupportedSecurityLevelsExtension (198)
/* ns1:SupportedSecurityLevelsExtension */
class SOAP_CMAC ns1__SupportedSecurityLevelsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 198; } /* = unique type id SOAP_TYPE_ns1__SupportedSecurityLevelsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SupportedSecurityLevelsExtension() { ns1__SupportedSecurityLevelsExtension::soap_default(NULL); }
	virtual ~ns1__SupportedSecurityLevelsExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AreaExtension
#define SOAP_TYPE_ns1__AreaExtension (202)
/* ns1:AreaExtension */
class SOAP_CMAC ns1__AreaExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 202; } /* = unique type id SOAP_TYPE_ns1__AreaExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AreaExtension() { ns1__AreaExtension::soap_default(NULL); }
	virtual ~ns1__AreaExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AccessPointState
#define SOAP_TYPE_ns1__AccessPointState (203)
/* ns1:AccessPointState */
class SOAP_CMAC ns1__AccessPointState : public xsd__anyType
{
public:
	bool Enabled;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 203; } /* = unique type id SOAP_TYPE_ns1__AccessPointState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AccessPointState() { ns1__AccessPointState::soap_default(NULL); }
	virtual ~ns1__AccessPointState() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetServiceCapabilities
#define SOAP_TYPE__ns1__GetServiceCapabilities (204)
/* ns1:GetServiceCapabilities */
class SOAP_CMAC _ns1__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 204; } /* = unique type id SOAP_TYPE__ns1__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetServiceCapabilities() { _ns1__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_ns1__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetServiceCapabilitiesResponse
#define SOAP_TYPE__ns1__GetServiceCapabilitiesResponse (205)
/* ns1:GetServiceCapabilitiesResponse */
class SOAP_CMAC _ns1__GetServiceCapabilitiesResponse
{
public:
	ns1__ServiceCapabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ServiceCapabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 205; } /* = unique type id SOAP_TYPE__ns1__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetServiceCapabilitiesResponse() { _ns1__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_ns1__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetAccessPointInfoList
#define SOAP_TYPE__ns1__GetAccessPointInfoList (206)
/* ns1:GetAccessPointInfoList */
class SOAP_CMAC _ns1__GetAccessPointInfoList
{
public:
	int *Limit;	/* optional element of type xsd:int */
	std::string *StartReference;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 206; } /* = unique type id SOAP_TYPE__ns1__GetAccessPointInfoList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetAccessPointInfoList() { _ns1__GetAccessPointInfoList::soap_default(NULL); }
	virtual ~_ns1__GetAccessPointInfoList() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetAccessPointInfoListResponse
#define SOAP_TYPE__ns1__GetAccessPointInfoListResponse (207)
/* ns1:GetAccessPointInfoListResponse */
class SOAP_CMAC _ns1__GetAccessPointInfoListResponse
{
public:
	std::string *NextStartReference;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	std::vector<class ns1__AccessPointInfo * >AccessPointInfo;	/* optional element of type ns1:AccessPointInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 207; } /* = unique type id SOAP_TYPE__ns1__GetAccessPointInfoListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetAccessPointInfoListResponse() { _ns1__GetAccessPointInfoListResponse::soap_default(NULL); }
	virtual ~_ns1__GetAccessPointInfoListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetAccessPointInfo
#define SOAP_TYPE__ns1__GetAccessPointInfo (208)
/* ns1:GetAccessPointInfo */
class SOAP_CMAC _ns1__GetAccessPointInfo
{
public:
	std::vector<std::string >Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 208; } /* = unique type id SOAP_TYPE__ns1__GetAccessPointInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetAccessPointInfo() { _ns1__GetAccessPointInfo::soap_default(NULL); }
	virtual ~_ns1__GetAccessPointInfo() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetAccessPointInfoResponse
#define SOAP_TYPE__ns1__GetAccessPointInfoResponse (209)
/* ns1:GetAccessPointInfoResponse */
class SOAP_CMAC _ns1__GetAccessPointInfoResponse
{
public:
	std::vector<ns1__AccessPointInfo * >AccessPointInfo;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:AccessPointInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 209; } /* = unique type id SOAP_TYPE__ns1__GetAccessPointInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetAccessPointInfoResponse() { _ns1__GetAccessPointInfoResponse::soap_default(NULL); }
	virtual ~_ns1__GetAccessPointInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetAccessPointList
#define SOAP_TYPE__ns1__GetAccessPointList (210)
/* ns1:GetAccessPointList */
class SOAP_CMAC _ns1__GetAccessPointList
{
public:
	int *Limit;	/* optional element of type xsd:int */
	std::string *StartReference;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 210; } /* = unique type id SOAP_TYPE__ns1__GetAccessPointList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetAccessPointList() { _ns1__GetAccessPointList::soap_default(NULL); }
	virtual ~_ns1__GetAccessPointList() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetAccessPointListResponse
#define SOAP_TYPE__ns1__GetAccessPointListResponse (211)
/* ns1:GetAccessPointListResponse */
class SOAP_CMAC _ns1__GetAccessPointListResponse
{
public:
	std::string *NextStartReference;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	std::vector<class ns1__AccessPoint * >AccessPoint;	/* optional element of type ns1:AccessPoint */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 211; } /* = unique type id SOAP_TYPE__ns1__GetAccessPointListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetAccessPointListResponse() { _ns1__GetAccessPointListResponse::soap_default(NULL); }
	virtual ~_ns1__GetAccessPointListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetAccessPoints
#define SOAP_TYPE__ns1__GetAccessPoints (212)
/* ns1:GetAccessPoints */
class SOAP_CMAC _ns1__GetAccessPoints
{
public:
	std::vector<std::string >Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 212; } /* = unique type id SOAP_TYPE__ns1__GetAccessPoints */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetAccessPoints() { _ns1__GetAccessPoints::soap_default(NULL); }
	virtual ~_ns1__GetAccessPoints() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetAccessPointsResponse
#define SOAP_TYPE__ns1__GetAccessPointsResponse (213)
/* ns1:GetAccessPointsResponse */
class SOAP_CMAC _ns1__GetAccessPointsResponse
{
public:
	std::vector<ns1__AccessPoint * >AccessPoint;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:AccessPoint */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 213; } /* = unique type id SOAP_TYPE__ns1__GetAccessPointsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetAccessPointsResponse() { _ns1__GetAccessPointsResponse::soap_default(NULL); }
	virtual ~_ns1__GetAccessPointsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateAccessPoint
#define SOAP_TYPE__ns1__CreateAccessPoint (214)
/* ns1:CreateAccessPoint */
class SOAP_CMAC _ns1__CreateAccessPoint
{
public:
	ns1__AccessPoint *AccessPoint;	/* required element of type ns1:AccessPoint */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 214; } /* = unique type id SOAP_TYPE__ns1__CreateAccessPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateAccessPoint() { _ns1__CreateAccessPoint::soap_default(NULL); }
	virtual ~_ns1__CreateAccessPoint() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateAccessPointResponse
#define SOAP_TYPE__ns1__CreateAccessPointResponse (215)
/* ns1:CreateAccessPointResponse */
class SOAP_CMAC _ns1__CreateAccessPointResponse
{
public:
	std::string Token;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 215; } /* = unique type id SOAP_TYPE__ns1__CreateAccessPointResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateAccessPointResponse() { _ns1__CreateAccessPointResponse::soap_default(NULL); }
	virtual ~_ns1__CreateAccessPointResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetAccessPoint
#define SOAP_TYPE__ns1__SetAccessPoint (216)
/* ns1:SetAccessPoint */
class SOAP_CMAC _ns1__SetAccessPoint
{
public:
	ns1__AccessPoint *AccessPoint;	/* required element of type ns1:AccessPoint */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 216; } /* = unique type id SOAP_TYPE__ns1__SetAccessPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetAccessPoint() { _ns1__SetAccessPoint::soap_default(NULL); }
	virtual ~_ns1__SetAccessPoint() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetAccessPointResponse
#define SOAP_TYPE__ns1__SetAccessPointResponse (217)
/* ns1:SetAccessPointResponse */
class SOAP_CMAC _ns1__SetAccessPointResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 217; } /* = unique type id SOAP_TYPE__ns1__SetAccessPointResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetAccessPointResponse() { _ns1__SetAccessPointResponse::soap_default(NULL); }
	virtual ~_ns1__SetAccessPointResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ModifyAccessPoint
#define SOAP_TYPE__ns1__ModifyAccessPoint (218)
/* ns1:ModifyAccessPoint */
class SOAP_CMAC _ns1__ModifyAccessPoint
{
public:
	ns1__AccessPoint *AccessPoint;	/* required element of type ns1:AccessPoint */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 218; } /* = unique type id SOAP_TYPE__ns1__ModifyAccessPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ModifyAccessPoint() { _ns1__ModifyAccessPoint::soap_default(NULL); }
	virtual ~_ns1__ModifyAccessPoint() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ModifyAccessPointResponse
#define SOAP_TYPE__ns1__ModifyAccessPointResponse (219)
/* ns1:ModifyAccessPointResponse */
class SOAP_CMAC _ns1__ModifyAccessPointResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 219; } /* = unique type id SOAP_TYPE__ns1__ModifyAccessPointResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ModifyAccessPointResponse() { _ns1__ModifyAccessPointResponse::soap_default(NULL); }
	virtual ~_ns1__ModifyAccessPointResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DeleteAccessPoint
#define SOAP_TYPE__ns1__DeleteAccessPoint (220)
/* ns1:DeleteAccessPoint */
class SOAP_CMAC _ns1__DeleteAccessPoint
{
public:
	std::string Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 220; } /* = unique type id SOAP_TYPE__ns1__DeleteAccessPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DeleteAccessPoint() { _ns1__DeleteAccessPoint::soap_default(NULL); }
	virtual ~_ns1__DeleteAccessPoint() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DeleteAccessPointResponse
#define SOAP_TYPE__ns1__DeleteAccessPointResponse (221)
/* ns1:DeleteAccessPointResponse */
class SOAP_CMAC _ns1__DeleteAccessPointResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 221; } /* = unique type id SOAP_TYPE__ns1__DeleteAccessPointResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DeleteAccessPointResponse() { _ns1__DeleteAccessPointResponse::soap_default(NULL); }
	virtual ~_ns1__DeleteAccessPointResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetAccessPointAuthenticationProfile
#define SOAP_TYPE__ns1__SetAccessPointAuthenticationProfile (222)
/* ns1:SetAccessPointAuthenticationProfile */
class SOAP_CMAC _ns1__SetAccessPointAuthenticationProfile
{
public:
	std::string Token;	/* required element of type ns2:ReferenceToken */
	std::string AuthenticationProfileToken;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 222; } /* = unique type id SOAP_TYPE__ns1__SetAccessPointAuthenticationProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetAccessPointAuthenticationProfile() { _ns1__SetAccessPointAuthenticationProfile::soap_default(NULL); }
	virtual ~_ns1__SetAccessPointAuthenticationProfile() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetAccessPointAuthenticationProfileResponse
#define SOAP_TYPE__ns1__SetAccessPointAuthenticationProfileResponse (223)
/* ns1:SetAccessPointAuthenticationProfileResponse */
class SOAP_CMAC _ns1__SetAccessPointAuthenticationProfileResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 223; } /* = unique type id SOAP_TYPE__ns1__SetAccessPointAuthenticationProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetAccessPointAuthenticationProfileResponse() { _ns1__SetAccessPointAuthenticationProfileResponse::soap_default(NULL); }
	virtual ~_ns1__SetAccessPointAuthenticationProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DeleteAccessPointAuthenticationProfile
#define SOAP_TYPE__ns1__DeleteAccessPointAuthenticationProfile (224)
/* ns1:DeleteAccessPointAuthenticationProfile */
class SOAP_CMAC _ns1__DeleteAccessPointAuthenticationProfile
{
public:
	std::string Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 224; } /* = unique type id SOAP_TYPE__ns1__DeleteAccessPointAuthenticationProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DeleteAccessPointAuthenticationProfile() { _ns1__DeleteAccessPointAuthenticationProfile::soap_default(NULL); }
	virtual ~_ns1__DeleteAccessPointAuthenticationProfile() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DeleteAccessPointAuthenticationProfileResponse
#define SOAP_TYPE__ns1__DeleteAccessPointAuthenticationProfileResponse (225)
/* ns1:DeleteAccessPointAuthenticationProfileResponse */
class SOAP_CMAC _ns1__DeleteAccessPointAuthenticationProfileResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 225; } /* = unique type id SOAP_TYPE__ns1__DeleteAccessPointAuthenticationProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DeleteAccessPointAuthenticationProfileResponse() { _ns1__DeleteAccessPointAuthenticationProfileResponse::soap_default(NULL); }
	virtual ~_ns1__DeleteAccessPointAuthenticationProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetAreaInfoList
#define SOAP_TYPE__ns1__GetAreaInfoList (226)
/* ns1:GetAreaInfoList */
class SOAP_CMAC _ns1__GetAreaInfoList
{
public:
	int *Limit;	/* optional element of type xsd:int */
	std::string *StartReference;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 226; } /* = unique type id SOAP_TYPE__ns1__GetAreaInfoList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetAreaInfoList() { _ns1__GetAreaInfoList::soap_default(NULL); }
	virtual ~_ns1__GetAreaInfoList() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetAreaInfoListResponse
#define SOAP_TYPE__ns1__GetAreaInfoListResponse (227)
/* ns1:GetAreaInfoListResponse */
class SOAP_CMAC _ns1__GetAreaInfoListResponse
{
public:
	std::string *NextStartReference;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	std::vector<class ns1__AreaInfo * >AreaInfo;	/* optional element of type ns1:AreaInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 227; } /* = unique type id SOAP_TYPE__ns1__GetAreaInfoListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetAreaInfoListResponse() { _ns1__GetAreaInfoListResponse::soap_default(NULL); }
	virtual ~_ns1__GetAreaInfoListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetAreaInfo
#define SOAP_TYPE__ns1__GetAreaInfo (228)
/* ns1:GetAreaInfo */
class SOAP_CMAC _ns1__GetAreaInfo
{
public:
	std::vector<std::string >Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 228; } /* = unique type id SOAP_TYPE__ns1__GetAreaInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetAreaInfo() { _ns1__GetAreaInfo::soap_default(NULL); }
	virtual ~_ns1__GetAreaInfo() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetAreaInfoResponse
#define SOAP_TYPE__ns1__GetAreaInfoResponse (229)
/* ns1:GetAreaInfoResponse */
class SOAP_CMAC _ns1__GetAreaInfoResponse
{
public:
	std::vector<ns1__AreaInfo * >AreaInfo;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:AreaInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 229; } /* = unique type id SOAP_TYPE__ns1__GetAreaInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetAreaInfoResponse() { _ns1__GetAreaInfoResponse::soap_default(NULL); }
	virtual ~_ns1__GetAreaInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetAreaList
#define SOAP_TYPE__ns1__GetAreaList (230)
/* ns1:GetAreaList */
class SOAP_CMAC _ns1__GetAreaList
{
public:
	int *Limit;	/* optional element of type xsd:int */
	std::string *StartReference;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 230; } /* = unique type id SOAP_TYPE__ns1__GetAreaList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetAreaList() { _ns1__GetAreaList::soap_default(NULL); }
	virtual ~_ns1__GetAreaList() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetAreaListResponse
#define SOAP_TYPE__ns1__GetAreaListResponse (231)
/* ns1:GetAreaListResponse */
class SOAP_CMAC _ns1__GetAreaListResponse
{
public:
	std::string *NextStartReference;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	std::vector<class ns1__Area * >Area;	/* optional element of type ns1:Area */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 231; } /* = unique type id SOAP_TYPE__ns1__GetAreaListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetAreaListResponse() { _ns1__GetAreaListResponse::soap_default(NULL); }
	virtual ~_ns1__GetAreaListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetAreas
#define SOAP_TYPE__ns1__GetAreas (232)
/* ns1:GetAreas */
class SOAP_CMAC _ns1__GetAreas
{
public:
	std::vector<std::string >Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 232; } /* = unique type id SOAP_TYPE__ns1__GetAreas */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetAreas() { _ns1__GetAreas::soap_default(NULL); }
	virtual ~_ns1__GetAreas() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetAreasResponse
#define SOAP_TYPE__ns1__GetAreasResponse (233)
/* ns1:GetAreasResponse */
class SOAP_CMAC _ns1__GetAreasResponse
{
public:
	std::vector<ns1__Area * >Area;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:Area */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 233; } /* = unique type id SOAP_TYPE__ns1__GetAreasResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetAreasResponse() { _ns1__GetAreasResponse::soap_default(NULL); }
	virtual ~_ns1__GetAreasResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateArea
#define SOAP_TYPE__ns1__CreateArea (234)
/* ns1:CreateArea */
class SOAP_CMAC _ns1__CreateArea
{
public:
	ns1__Area *Area;	/* required element of type ns1:Area */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 234; } /* = unique type id SOAP_TYPE__ns1__CreateArea */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateArea() { _ns1__CreateArea::soap_default(NULL); }
	virtual ~_ns1__CreateArea() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateAreaResponse
#define SOAP_TYPE__ns1__CreateAreaResponse (235)
/* ns1:CreateAreaResponse */
class SOAP_CMAC _ns1__CreateAreaResponse
{
public:
	std::string Token;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 235; } /* = unique type id SOAP_TYPE__ns1__CreateAreaResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateAreaResponse() { _ns1__CreateAreaResponse::soap_default(NULL); }
	virtual ~_ns1__CreateAreaResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetArea
#define SOAP_TYPE__ns1__SetArea (236)
/* ns1:SetArea */
class SOAP_CMAC _ns1__SetArea
{
public:
	ns1__Area *Area;	/* required element of type ns1:Area */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 236; } /* = unique type id SOAP_TYPE__ns1__SetArea */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetArea() { _ns1__SetArea::soap_default(NULL); }
	virtual ~_ns1__SetArea() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetAreaResponse
#define SOAP_TYPE__ns1__SetAreaResponse (237)
/* ns1:SetAreaResponse */
class SOAP_CMAC _ns1__SetAreaResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 237; } /* = unique type id SOAP_TYPE__ns1__SetAreaResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetAreaResponse() { _ns1__SetAreaResponse::soap_default(NULL); }
	virtual ~_ns1__SetAreaResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ModifyArea
#define SOAP_TYPE__ns1__ModifyArea (238)
/* ns1:ModifyArea */
class SOAP_CMAC _ns1__ModifyArea
{
public:
	ns1__Area *Area;	/* required element of type ns1:Area */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 238; } /* = unique type id SOAP_TYPE__ns1__ModifyArea */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ModifyArea() { _ns1__ModifyArea::soap_default(NULL); }
	virtual ~_ns1__ModifyArea() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ModifyAreaResponse
#define SOAP_TYPE__ns1__ModifyAreaResponse (239)
/* ns1:ModifyAreaResponse */
class SOAP_CMAC _ns1__ModifyAreaResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 239; } /* = unique type id SOAP_TYPE__ns1__ModifyAreaResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ModifyAreaResponse() { _ns1__ModifyAreaResponse::soap_default(NULL); }
	virtual ~_ns1__ModifyAreaResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DeleteArea
#define SOAP_TYPE__ns1__DeleteArea (240)
/* ns1:DeleteArea */
class SOAP_CMAC _ns1__DeleteArea
{
public:
	std::string Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 240; } /* = unique type id SOAP_TYPE__ns1__DeleteArea */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DeleteArea() { _ns1__DeleteArea::soap_default(NULL); }
	virtual ~_ns1__DeleteArea() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DeleteAreaResponse
#define SOAP_TYPE__ns1__DeleteAreaResponse (241)
/* ns1:DeleteAreaResponse */
class SOAP_CMAC _ns1__DeleteAreaResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 241; } /* = unique type id SOAP_TYPE__ns1__DeleteAreaResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DeleteAreaResponse() { _ns1__DeleteAreaResponse::soap_default(NULL); }
	virtual ~_ns1__DeleteAreaResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetAccessPointState
#define SOAP_TYPE__ns1__GetAccessPointState (242)
/* ns1:GetAccessPointState */
class SOAP_CMAC _ns1__GetAccessPointState
{
public:
	std::string Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 242; } /* = unique type id SOAP_TYPE__ns1__GetAccessPointState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetAccessPointState() { _ns1__GetAccessPointState::soap_default(NULL); }
	virtual ~_ns1__GetAccessPointState() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetAccessPointStateResponse
#define SOAP_TYPE__ns1__GetAccessPointStateResponse (243)
/* ns1:GetAccessPointStateResponse */
class SOAP_CMAC _ns1__GetAccessPointStateResponse
{
public:
	ns1__AccessPointState *AccessPointState;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:AccessPointState */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 243; } /* = unique type id SOAP_TYPE__ns1__GetAccessPointStateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetAccessPointStateResponse() { _ns1__GetAccessPointStateResponse::soap_default(NULL); }
	virtual ~_ns1__GetAccessPointStateResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__EnableAccessPoint
#define SOAP_TYPE__ns1__EnableAccessPoint (244)
/* ns1:EnableAccessPoint */
class SOAP_CMAC _ns1__EnableAccessPoint
{
public:
	std::string Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 244; } /* = unique type id SOAP_TYPE__ns1__EnableAccessPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__EnableAccessPoint() { _ns1__EnableAccessPoint::soap_default(NULL); }
	virtual ~_ns1__EnableAccessPoint() { }
};
#endif

#ifndef SOAP_TYPE__ns1__EnableAccessPointResponse
#define SOAP_TYPE__ns1__EnableAccessPointResponse (245)
/* ns1:EnableAccessPointResponse */
class SOAP_CMAC _ns1__EnableAccessPointResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 245; } /* = unique type id SOAP_TYPE__ns1__EnableAccessPointResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__EnableAccessPointResponse() { _ns1__EnableAccessPointResponse::soap_default(NULL); }
	virtual ~_ns1__EnableAccessPointResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DisableAccessPoint
#define SOAP_TYPE__ns1__DisableAccessPoint (246)
/* ns1:DisableAccessPoint */
class SOAP_CMAC _ns1__DisableAccessPoint
{
public:
	std::string Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 246; } /* = unique type id SOAP_TYPE__ns1__DisableAccessPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DisableAccessPoint() { _ns1__DisableAccessPoint::soap_default(NULL); }
	virtual ~_ns1__DisableAccessPoint() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DisableAccessPointResponse
#define SOAP_TYPE__ns1__DisableAccessPointResponse (247)
/* ns1:DisableAccessPointResponse */
class SOAP_CMAC _ns1__DisableAccessPointResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 247; } /* = unique type id SOAP_TYPE__ns1__DisableAccessPointResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DisableAccessPointResponse() { _ns1__DisableAccessPointResponse::soap_default(NULL); }
	virtual ~_ns1__DisableAccessPointResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ExternalAuthorization
#define SOAP_TYPE__ns1__ExternalAuthorization (248)
/* ns1:ExternalAuthorization */
class SOAP_CMAC _ns1__ExternalAuthorization
{
public:
	std::string AccessPointToken;	/* required element of type ns2:ReferenceToken */
	std::string *CredentialToken;	/* optional element of type ns2:ReferenceToken */
	std::string *Reason;	/* optional element of type xsd:string */
	enum ns1__Decision Decision;	/* required element of type ns1:Decision */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 248; } /* = unique type id SOAP_TYPE__ns1__ExternalAuthorization */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ExternalAuthorization() { _ns1__ExternalAuthorization::soap_default(NULL); }
	virtual ~_ns1__ExternalAuthorization() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ExternalAuthorizationResponse
#define SOAP_TYPE__ns1__ExternalAuthorizationResponse (249)
/* ns1:ExternalAuthorizationResponse */
class SOAP_CMAC _ns1__ExternalAuthorizationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 249; } /* = unique type id SOAP_TYPE__ns1__ExternalAuthorizationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ExternalAuthorizationResponse() { _ns1__ExternalAuthorizationResponse::soap_default(NULL); }
	virtual ~_ns1__ExternalAuthorizationResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__DataEntity
#define SOAP_TYPE_ns2__DataEntity (250)
/* Primitive ns2:DataEntity schema type: */
class SOAP_CMAC ns2__DataEntity : public xsd__anyType
{
public:
	std::string token;	/* required attribute */
public:
	virtual int soap_type() const { return 250; } /* = unique type id SOAP_TYPE_ns2__DataEntity */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__DataEntity() { ns2__DataEntity::soap_default(NULL); }
	virtual ~ns2__DataEntity() { }
};
#endif

#ifndef SOAP_TYPE_ns2__Attribute
#define SOAP_TYPE_ns2__Attribute (251)
/* ns2:Attribute */
class SOAP_CMAC ns2__Attribute : public xsd__anyType
{
public:
	std::vector<char * >__any;
	std::string Name;	/* required attribute */
	std::string *Value;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 251; } /* = unique type id SOAP_TYPE_ns2__Attribute */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__Attribute() { ns2__Attribute::soap_default(NULL); }
	virtual ~ns2__Attribute() { }
};
#endif

#ifndef SOAP_TYPE_ns3__ServiceCapabilities
#define SOAP_TYPE_ns3__ServiceCapabilities (252)
/* ns3:ServiceCapabilities */
class SOAP_CMAC ns3__ServiceCapabilities : public xsd__anyType
{
public:
	std::vector<char * >__any;
	unsigned int MaxLimit;	/* required attribute */
	unsigned int MaxAccessProfiles;	/* required attribute */
	unsigned int MaxAccessPoliciesPerAccessProfile;	/* required attribute */
	bool MultipleSchedulesPerAccessPointSupported;	/* required attribute */
	bool ClientSuppliedTokenSupported;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 252; } /* = unique type id SOAP_TYPE_ns3__ServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__ServiceCapabilities() { ns3__ServiceCapabilities::soap_default(NULL); }
	virtual ~ns3__ServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_ns3__AccessPolicy
#define SOAP_TYPE_ns3__AccessPolicy (253)
/* ns3:AccessPolicy */
class SOAP_CMAC ns3__AccessPolicy : public xsd__anyType
{
public:
	std::string ScheduleToken;	/* required element of type ns2:ReferenceToken */
	std::string Entity;	/* required element of type ns2:ReferenceToken */
	std::string *EntityType;	/* optional element of type xsd:QName */
	class ns3__AccessPolicyExtension *Extension;	/* optional element of type ns3:AccessPolicyExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 253; } /* = unique type id SOAP_TYPE_ns3__AccessPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__AccessPolicy() { ns3__AccessPolicy::soap_default(NULL); }
	virtual ~ns3__AccessPolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns3__AccessPolicyExtension
#define SOAP_TYPE_ns3__AccessPolicyExtension (254)
/* ns3:AccessPolicyExtension */
class SOAP_CMAC ns3__AccessPolicyExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 254; } /* = unique type id SOAP_TYPE_ns3__AccessPolicyExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__AccessPolicyExtension() { ns3__AccessPolicyExtension::soap_default(NULL); }
	virtual ~ns3__AccessPolicyExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns3__AccessProfileExtension
#define SOAP_TYPE_ns3__AccessProfileExtension (257)
/* ns3:AccessProfileExtension */
class SOAP_CMAC ns3__AccessProfileExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 257; } /* = unique type id SOAP_TYPE_ns3__AccessProfileExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__AccessProfileExtension() { ns3__AccessProfileExtension::soap_default(NULL); }
	virtual ~ns3__AccessProfileExtension() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetServiceCapabilities
#define SOAP_TYPE__ns3__GetServiceCapabilities (258)
/* ns3:GetServiceCapabilities */
class SOAP_CMAC _ns3__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 258; } /* = unique type id SOAP_TYPE__ns3__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetServiceCapabilities() { _ns3__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_ns3__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetServiceCapabilitiesResponse
#define SOAP_TYPE__ns3__GetServiceCapabilitiesResponse (259)
/* ns3:GetServiceCapabilitiesResponse */
class SOAP_CMAC _ns3__GetServiceCapabilitiesResponse
{
public:
	ns3__ServiceCapabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns3:ServiceCapabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 259; } /* = unique type id SOAP_TYPE__ns3__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetServiceCapabilitiesResponse() { _ns3__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_ns3__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetAccessProfileInfo
#define SOAP_TYPE__ns3__GetAccessProfileInfo (260)
/* ns3:GetAccessProfileInfo */
class SOAP_CMAC _ns3__GetAccessProfileInfo
{
public:
	std::vector<std::string >Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 260; } /* = unique type id SOAP_TYPE__ns3__GetAccessProfileInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetAccessProfileInfo() { _ns3__GetAccessProfileInfo::soap_default(NULL); }
	virtual ~_ns3__GetAccessProfileInfo() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetAccessProfileInfoResponse
#define SOAP_TYPE__ns3__GetAccessProfileInfoResponse (261)
/* ns3:GetAccessProfileInfoResponse */
class SOAP_CMAC _ns3__GetAccessProfileInfoResponse
{
public:
	std::vector<class ns3__AccessProfileInfo * >AccessProfileInfo;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:AccessProfileInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 261; } /* = unique type id SOAP_TYPE__ns3__GetAccessProfileInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetAccessProfileInfoResponse() { _ns3__GetAccessProfileInfoResponse::soap_default(NULL); }
	virtual ~_ns3__GetAccessProfileInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetAccessProfileInfoList
#define SOAP_TYPE__ns3__GetAccessProfileInfoList (262)
/* ns3:GetAccessProfileInfoList */
class SOAP_CMAC _ns3__GetAccessProfileInfoList
{
public:
	int *Limit;	/* optional element of type xsd:int */
	std::string *StartReference;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 262; } /* = unique type id SOAP_TYPE__ns3__GetAccessProfileInfoList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetAccessProfileInfoList() { _ns3__GetAccessProfileInfoList::soap_default(NULL); }
	virtual ~_ns3__GetAccessProfileInfoList() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetAccessProfileInfoListResponse
#define SOAP_TYPE__ns3__GetAccessProfileInfoListResponse (263)
/* ns3:GetAccessProfileInfoListResponse */
class SOAP_CMAC _ns3__GetAccessProfileInfoListResponse
{
public:
	std::string *NextStartReference;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	std::vector<ns3__AccessProfileInfo * >AccessProfileInfo;	/* optional element of type ns3:AccessProfileInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 263; } /* = unique type id SOAP_TYPE__ns3__GetAccessProfileInfoListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetAccessProfileInfoListResponse() { _ns3__GetAccessProfileInfoListResponse::soap_default(NULL); }
	virtual ~_ns3__GetAccessProfileInfoListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetAccessProfiles
#define SOAP_TYPE__ns3__GetAccessProfiles (264)
/* ns3:GetAccessProfiles */
class SOAP_CMAC _ns3__GetAccessProfiles
{
public:
	std::vector<std::string >Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 264; } /* = unique type id SOAP_TYPE__ns3__GetAccessProfiles */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetAccessProfiles() { _ns3__GetAccessProfiles::soap_default(NULL); }
	virtual ~_ns3__GetAccessProfiles() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetAccessProfilesResponse
#define SOAP_TYPE__ns3__GetAccessProfilesResponse (265)
/* ns3:GetAccessProfilesResponse */
class SOAP_CMAC _ns3__GetAccessProfilesResponse
{
public:
	std::vector<class ns3__AccessProfile * >AccessProfile;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:AccessProfile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 265; } /* = unique type id SOAP_TYPE__ns3__GetAccessProfilesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetAccessProfilesResponse() { _ns3__GetAccessProfilesResponse::soap_default(NULL); }
	virtual ~_ns3__GetAccessProfilesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetAccessProfileList
#define SOAP_TYPE__ns3__GetAccessProfileList (266)
/* ns3:GetAccessProfileList */
class SOAP_CMAC _ns3__GetAccessProfileList
{
public:
	int *Limit;	/* optional element of type xsd:int */
	std::string *StartReference;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 266; } /* = unique type id SOAP_TYPE__ns3__GetAccessProfileList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetAccessProfileList() { _ns3__GetAccessProfileList::soap_default(NULL); }
	virtual ~_ns3__GetAccessProfileList() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetAccessProfileListResponse
#define SOAP_TYPE__ns3__GetAccessProfileListResponse (267)
/* ns3:GetAccessProfileListResponse */
class SOAP_CMAC _ns3__GetAccessProfileListResponse
{
public:
	std::string *NextStartReference;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	std::vector<ns3__AccessProfile * >AccessProfile;	/* optional element of type ns3:AccessProfile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 267; } /* = unique type id SOAP_TYPE__ns3__GetAccessProfileListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetAccessProfileListResponse() { _ns3__GetAccessProfileListResponse::soap_default(NULL); }
	virtual ~_ns3__GetAccessProfileListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__CreateAccessProfile
#define SOAP_TYPE__ns3__CreateAccessProfile (268)
/* ns3:CreateAccessProfile */
class SOAP_CMAC _ns3__CreateAccessProfile
{
public:
	ns3__AccessProfile *AccessProfile;	/* required element of type ns3:AccessProfile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 268; } /* = unique type id SOAP_TYPE__ns3__CreateAccessProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__CreateAccessProfile() { _ns3__CreateAccessProfile::soap_default(NULL); }
	virtual ~_ns3__CreateAccessProfile() { }
};
#endif

#ifndef SOAP_TYPE__ns3__CreateAccessProfileResponse
#define SOAP_TYPE__ns3__CreateAccessProfileResponse (269)
/* ns3:CreateAccessProfileResponse */
class SOAP_CMAC _ns3__CreateAccessProfileResponse
{
public:
	std::string Token;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 269; } /* = unique type id SOAP_TYPE__ns3__CreateAccessProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__CreateAccessProfileResponse() { _ns3__CreateAccessProfileResponse::soap_default(NULL); }
	virtual ~_ns3__CreateAccessProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__ModifyAccessProfile
#define SOAP_TYPE__ns3__ModifyAccessProfile (270)
/* ns3:ModifyAccessProfile */
class SOAP_CMAC _ns3__ModifyAccessProfile
{
public:
	ns3__AccessProfile *AccessProfile;	/* required element of type ns3:AccessProfile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 270; } /* = unique type id SOAP_TYPE__ns3__ModifyAccessProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__ModifyAccessProfile() { _ns3__ModifyAccessProfile::soap_default(NULL); }
	virtual ~_ns3__ModifyAccessProfile() { }
};
#endif

#ifndef SOAP_TYPE__ns3__ModifyAccessProfileResponse
#define SOAP_TYPE__ns3__ModifyAccessProfileResponse (271)
/* ns3:ModifyAccessProfileResponse */
class SOAP_CMAC _ns3__ModifyAccessProfileResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 271; } /* = unique type id SOAP_TYPE__ns3__ModifyAccessProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__ModifyAccessProfileResponse() { _ns3__ModifyAccessProfileResponse::soap_default(NULL); }
	virtual ~_ns3__ModifyAccessProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__SetAccessProfile
#define SOAP_TYPE__ns3__SetAccessProfile (272)
/* ns3:SetAccessProfile */
class SOAP_CMAC _ns3__SetAccessProfile
{
public:
	ns3__AccessProfile *AccessProfile;	/* required element of type ns3:AccessProfile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 272; } /* = unique type id SOAP_TYPE__ns3__SetAccessProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__SetAccessProfile() { _ns3__SetAccessProfile::soap_default(NULL); }
	virtual ~_ns3__SetAccessProfile() { }
};
#endif

#ifndef SOAP_TYPE__ns3__SetAccessProfileResponse
#define SOAP_TYPE__ns3__SetAccessProfileResponse (273)
/* ns3:SetAccessProfileResponse */
class SOAP_CMAC _ns3__SetAccessProfileResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 273; } /* = unique type id SOAP_TYPE__ns3__SetAccessProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__SetAccessProfileResponse() { _ns3__SetAccessProfileResponse::soap_default(NULL); }
	virtual ~_ns3__SetAccessProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__DeleteAccessProfile
#define SOAP_TYPE__ns3__DeleteAccessProfile (274)
/* ns3:DeleteAccessProfile */
class SOAP_CMAC _ns3__DeleteAccessProfile
{
public:
	std::string Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 274; } /* = unique type id SOAP_TYPE__ns3__DeleteAccessProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__DeleteAccessProfile() { _ns3__DeleteAccessProfile::soap_default(NULL); }
	virtual ~_ns3__DeleteAccessProfile() { }
};
#endif

#ifndef SOAP_TYPE__ns3__DeleteAccessProfileResponse
#define SOAP_TYPE__ns3__DeleteAccessProfileResponse (275)
/* ns3:DeleteAccessProfileResponse */
class SOAP_CMAC _ns3__DeleteAccessProfileResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 275; } /* = unique type id SOAP_TYPE__ns3__DeleteAccessProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__DeleteAccessProfileResponse() { _ns3__DeleteAccessProfileResponse::soap_default(NULL); }
	virtual ~_ns3__DeleteAccessProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__ActionConfigDescription
#define SOAP_TYPE_ns4__ActionConfigDescription (276)
/* ns4:ActionConfigDescription */
class SOAP_CMAC ns4__ActionConfigDescription : public xsd__anyType
{
public:
	class tt__ItemListDescription *ParameterDescription;	/* required element of type tt:ItemListDescription */
	std::string Name;	/* required attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 276; } /* = unique type id SOAP_TYPE_ns4__ActionConfigDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__ActionConfigDescription() { ns4__ActionConfigDescription::soap_default(NULL); }
	virtual ~ns4__ActionConfigDescription() { }
};
#endif

#ifndef SOAP_TYPE_ns4__SupportedActions
#define SOAP_TYPE_ns4__SupportedActions (277)
/* ns4:SupportedActions */
class SOAP_CMAC ns4__SupportedActions : public xsd__anyType
{
public:
	std::vector<std::string >ActionContentSchemaLocation;	/* optional element of type xsd:anyURI */
	std::vector<ns4__ActionConfigDescription * >ActionDescription;	/* optional element of type ns4:ActionConfigDescription */
	class ns4__SupportedActionsExtension *Extension;	/* optional element of type ns4:SupportedActionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 277; } /* = unique type id SOAP_TYPE_ns4__SupportedActions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__SupportedActions() { ns4__SupportedActions::soap_default(NULL); }
	virtual ~ns4__SupportedActions() { }
};
#endif

#ifndef SOAP_TYPE_ns4__SupportedActionsExtension
#define SOAP_TYPE_ns4__SupportedActionsExtension (278)
/* ns4:SupportedActionsExtension */
class SOAP_CMAC ns4__SupportedActionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 278; } /* = unique type id SOAP_TYPE_ns4__SupportedActionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__SupportedActionsExtension() { ns4__SupportedActionsExtension::soap_default(NULL); }
	virtual ~ns4__SupportedActionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns4__ActionEngineCapabilities
#define SOAP_TYPE_ns4__ActionEngineCapabilities (279)
/* ns4:ActionEngineCapabilities */
class SOAP_CMAC ns4__ActionEngineCapabilities : public xsd__anyType
{
public:
	std::vector<class ns4__ActionTypeLimits * >ActionCapabilities;	/* optional element of type ns4:ActionTypeLimits */
	class ns4__ActionEngineCapabilitiesExtension *Extension;	/* optional element of type ns4:ActionEngineCapabilitiesExtension */
	std::string *MaximumTriggers;	/* optional attribute */
	std::string *MaximumActions;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 279; } /* = unique type id SOAP_TYPE_ns4__ActionEngineCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__ActionEngineCapabilities() { ns4__ActionEngineCapabilities::soap_default(NULL); }
	virtual ~ns4__ActionEngineCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_ns4__ActionEngineCapabilitiesExtension
#define SOAP_TYPE_ns4__ActionEngineCapabilitiesExtension (280)
/* ns4:ActionEngineCapabilitiesExtension */
class SOAP_CMAC ns4__ActionEngineCapabilitiesExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 280; } /* = unique type id SOAP_TYPE_ns4__ActionEngineCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__ActionEngineCapabilitiesExtension() { ns4__ActionEngineCapabilitiesExtension::soap_default(NULL); }
	virtual ~ns4__ActionEngineCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns4__ActionTypeLimits
#define SOAP_TYPE_ns4__ActionTypeLimits (281)
/* ns4:ActionTypeLimits */
class SOAP_CMAC ns4__ActionTypeLimits : public xsd__anyType
{
public:
	std::vector<char * >__any;
	std::string Type;	/* required attribute */
	std::string Maximum;	/* required attribute */
	std::string InUse;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 281; } /* = unique type id SOAP_TYPE_ns4__ActionTypeLimits */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__ActionTypeLimits() { ns4__ActionTypeLimits::soap_default(NULL); }
	virtual ~ns4__ActionTypeLimits() { }
};
#endif

#ifndef SOAP_TYPE_ns4__ActionConfiguration
#define SOAP_TYPE_ns4__ActionConfiguration (282)
/* ns4:ActionConfiguration */
class SOAP_CMAC ns4__ActionConfiguration : public xsd__anyType
{
public:
	class tt__ItemList *Parameters;	/* required element of type tt:ItemList */
	std::vector<char * >__any;
	std::string Name;	/* required attribute */
	std::string Type;	/* required attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 282; } /* = unique type id SOAP_TYPE_ns4__ActionConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__ActionConfiguration() { ns4__ActionConfiguration::soap_default(NULL); }
	virtual ~ns4__ActionConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_ns4__Action
#define SOAP_TYPE_ns4__Action (283)
/* ns4:Action */
class SOAP_CMAC ns4__Action : public xsd__anyType
{
public:
	ns4__ActionConfiguration *Configuration;	/* required element of type ns4:ActionConfiguration */
	std::vector<char * >__any;
	std::string Token;	/* required attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 283; } /* = unique type id SOAP_TYPE_ns4__Action */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__Action() { ns4__Action::soap_default(NULL); }
	virtual ~ns4__Action() { }
};
#endif

#ifndef SOAP_TYPE_ns4__ActionTriggerConfiguration
#define SOAP_TYPE_ns4__ActionTriggerConfiguration (284)
/* ns4:ActionTriggerConfiguration */
class SOAP_CMAC ns4__ActionTriggerConfiguration : public xsd__anyType
{
public:
	class wsnt__TopicExpressionType *TopicExpression;	/* required element of type wsnt:TopicExpressionType */
	class wsnt__QueryExpressionType *ContentExpression;	/* optional element of type wsnt:QueryExpressionType */
	std::vector<std::string >ActionToken;	/* optional element of type tt:ReferenceToken */
	class ns4__ActionTriggerConfigurationExtension *Extension;	/* optional element of type ns4:ActionTriggerConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 284; } /* = unique type id SOAP_TYPE_ns4__ActionTriggerConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__ActionTriggerConfiguration() { ns4__ActionTriggerConfiguration::soap_default(NULL); }
	virtual ~ns4__ActionTriggerConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_ns4__ActionTriggerConfigurationExtension
#define SOAP_TYPE_ns4__ActionTriggerConfigurationExtension (285)
/* ns4:ActionTriggerConfigurationExtension */
class SOAP_CMAC ns4__ActionTriggerConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 285; } /* = unique type id SOAP_TYPE_ns4__ActionTriggerConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__ActionTriggerConfigurationExtension() { ns4__ActionTriggerConfigurationExtension::soap_default(NULL); }
	virtual ~ns4__ActionTriggerConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns4__ActionTrigger
#define SOAP_TYPE_ns4__ActionTrigger (286)
/* ns4:ActionTrigger */
class SOAP_CMAC ns4__ActionTrigger : public xsd__anyType
{
public:
	ns4__ActionTriggerConfiguration *Configuration;	/* required element of type ns4:ActionTriggerConfiguration */
	std::vector<char * >__any;
	std::string Token;	/* required attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 286; } /* = unique type id SOAP_TYPE_ns4__ActionTrigger */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__ActionTrigger() { ns4__ActionTrigger::soap_default(NULL); }
	virtual ~ns4__ActionTrigger() { }
};
#endif

#ifndef SOAP_TYPE_ns4__onvif_USCOREaction
#define SOAP_TYPE_ns4__onvif_USCOREaction (287)
/* ns4:onvif_action */
class SOAP_CMAC ns4__onvif_USCOREaction : public xsd__anyType
{
public:
	std::vector<ns4__ActionConfigDescription * >ActionDescription;	/* required element of type ns4:ActionConfigDescription */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 287; } /* = unique type id SOAP_TYPE_ns4__onvif_USCOREaction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__onvif_USCOREaction() { ns4__onvif_USCOREaction::soap_default(NULL); }
	virtual ~ns4__onvif_USCOREaction() { }
};
#endif

#ifndef SOAP_TYPE_ns4__EMailServerConfiguration
#define SOAP_TYPE_ns4__EMailServerConfiguration (288)
/* ns4:EMailServerConfiguration */
class SOAP_CMAC ns4__EMailServerConfiguration : public xsd__anyType
{
public:
	class ns4__SMTPConfig *SMTPConfig;	/* required element of type ns4:SMTPConfig */
	class ns4__POPConfig *POPConfig;	/* required element of type ns4:POPConfig */
	class ns4__AuthenticationConfig *AuthenticationConfig;	/* required element of type ns4:AuthenticationConfig */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 288; } /* = unique type id SOAP_TYPE_ns4__EMailServerConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__EMailServerConfiguration() { ns4__EMailServerConfiguration::soap_default(NULL); }
	virtual ~ns4__EMailServerConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_ns4__SMTPConfig
#define SOAP_TYPE_ns4__SMTPConfig (289)
/* ns4:SMTPConfig */
class SOAP_CMAC ns4__SMTPConfig : public xsd__anyType
{
public:
	class ns4__HostAddress *HostAddress;	/* required element of type ns4:HostAddress */
	std::vector<char * >__any;
	std::string *portNo;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 289; } /* = unique type id SOAP_TYPE_ns4__SMTPConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__SMTPConfig() { ns4__SMTPConfig::soap_default(NULL); }
	virtual ~ns4__SMTPConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns4__POPConfig
#define SOAP_TYPE_ns4__POPConfig (290)
/* ns4:POPConfig */
class SOAP_CMAC ns4__POPConfig : public xsd__anyType
{
public:
	ns4__HostAddress *HostAddress;	/* required element of type ns4:HostAddress */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 290; } /* = unique type id SOAP_TYPE_ns4__POPConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__POPConfig() { ns4__POPConfig::soap_default(NULL); }
	virtual ~ns4__POPConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns4__HostAddress
#define SOAP_TYPE_ns4__HostAddress (291)
/* ns4:HostAddress */
class SOAP_CMAC ns4__HostAddress : public xsd__anyType
{
public:
	std::string Value;	/* required element of type xsd:string */
	std::vector<char * >__any;
	enum ns4__AddressFormatType formatType;	/* required attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 291; } /* = unique type id SOAP_TYPE_ns4__HostAddress */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__HostAddress() { ns4__HostAddress::soap_default(NULL); }
	virtual ~ns4__HostAddress() { }
};
#endif

#ifndef SOAP_TYPE_ns4__UserCredentials
#define SOAP_TYPE_ns4__UserCredentials (292)
/* ns4:UserCredentials */
class SOAP_CMAC ns4__UserCredentials : public xsd__anyType
{
public:
	std::string username;	/* required element of type xsd:string */
	xsd__base64Binary *password;	/* optional element of type xsd:base64Binary */
	class ns4__UserCredentialsExtension *Extension;	/* optional element of type ns4:UserCredentialsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 292; } /* = unique type id SOAP_TYPE_ns4__UserCredentials */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__UserCredentials() { ns4__UserCredentials::soap_default(NULL); }
	virtual ~ns4__UserCredentials() { }
};
#endif

#ifndef SOAP_TYPE_ns4__UserCredentialsExtension
#define SOAP_TYPE_ns4__UserCredentialsExtension (293)
/* ns4:UserCredentialsExtension */
class SOAP_CMAC ns4__UserCredentialsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 293; } /* = unique type id SOAP_TYPE_ns4__UserCredentialsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__UserCredentialsExtension() { ns4__UserCredentialsExtension::soap_default(NULL); }
	virtual ~ns4__UserCredentialsExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns4__AuthenticationConfig
#define SOAP_TYPE_ns4__AuthenticationConfig (294)
/* ns4:AuthenticationConfig */
class SOAP_CMAC ns4__AuthenticationConfig : public xsd__anyType
{
public:
	ns4__UserCredentials *User;	/* required element of type ns4:UserCredentials */
	std::vector<char * >__any;
	enum ns4__EMailAuthenticationMode mode;	/* required attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 294; } /* = unique type id SOAP_TYPE_ns4__AuthenticationConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__AuthenticationConfig() { ns4__AuthenticationConfig::soap_default(NULL); }
	virtual ~ns4__AuthenticationConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns4__EMailReceiverConfiguration
#define SOAP_TYPE_ns4__EMailReceiverConfiguration (295)
/* ns4:EMailReceiverConfiguration */
class SOAP_CMAC ns4__EMailReceiverConfiguration : public xsd__anyType
{
public:
	std::vector<std::string >TO;	/* required element of type xsd:string */
	std::vector<std::string >CC;	/* optional element of type xsd:string */
	class ns4__EMailReceiverConfigurationExtension *Extension;	/* optional element of type ns4:EMailReceiverConfigurationExtension */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 295; } /* = unique type id SOAP_TYPE_ns4__EMailReceiverConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__EMailReceiverConfiguration() { ns4__EMailReceiverConfiguration::soap_default(NULL); }
	virtual ~ns4__EMailReceiverConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_ns4__EMailReceiverConfigurationExtension
#define SOAP_TYPE_ns4__EMailReceiverConfigurationExtension (296)
/* ns4:EMailReceiverConfigurationExtension */
class SOAP_CMAC ns4__EMailReceiverConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 296; } /* = unique type id SOAP_TYPE_ns4__EMailReceiverConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__EMailReceiverConfigurationExtension() { ns4__EMailReceiverConfigurationExtension::soap_default(NULL); }
	virtual ~ns4__EMailReceiverConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns4__EMailAttachmentConfiguration
#define SOAP_TYPE_ns4__EMailAttachmentConfiguration (297)
/* ns4:EMailAttachmentConfiguration */
class SOAP_CMAC ns4__EMailAttachmentConfiguration : public xsd__anyType
{
public:
	std::string *FileName;	/* optional element of type xsd:string */
	enum ns4__FileSuffixType *doSuffix;	/* optional element of type ns4:FileSuffixType */
	class ns4__EMailAttachmentConfigurationExtension *Extension;	/* optional element of type ns4:EMailAttachmentConfigurationExtension */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 297; } /* = unique type id SOAP_TYPE_ns4__EMailAttachmentConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__EMailAttachmentConfiguration() { ns4__EMailAttachmentConfiguration::soap_default(NULL); }
	virtual ~ns4__EMailAttachmentConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_ns4__EMailAttachmentConfigurationExtension
#define SOAP_TYPE_ns4__EMailAttachmentConfigurationExtension (298)
/* ns4:EMailAttachmentConfigurationExtension */
class SOAP_CMAC ns4__EMailAttachmentConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 298; } /* = unique type id SOAP_TYPE_ns4__EMailAttachmentConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__EMailAttachmentConfigurationExtension() { ns4__EMailAttachmentConfigurationExtension::soap_default(NULL); }
	virtual ~ns4__EMailAttachmentConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns4__EMailBodyTextConfiguration
#define SOAP_TYPE_ns4__EMailBodyTextConfiguration (299)
/* ns4:EMailBodyTextConfiguration */
class SOAP_CMAC ns4__EMailBodyTextConfiguration : public xsd__anyType
{
public:
	std::vector<char * >__any;
	bool *includeEvent;	/* optional attribute */
	std::string *type;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 299; } /* = unique type id SOAP_TYPE_ns4__EMailBodyTextConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__EMailBodyTextConfiguration() { ns4__EMailBodyTextConfiguration::soap_default(NULL); }
	virtual ~ns4__EMailBodyTextConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_ns4__MediaSource
#define SOAP_TYPE_ns4__MediaSource (300)
/* ns4:MediaSource */
class SOAP_CMAC ns4__MediaSource : public xsd__anyType
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 300; } /* = unique type id SOAP_TYPE_ns4__MediaSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__MediaSource() { ns4__MediaSource::soap_default(NULL); }
	virtual ~ns4__MediaSource() { }
};
#endif

#ifndef SOAP_TYPE_ns4__HttpHostConfigurations
#define SOAP_TYPE_ns4__HttpHostConfigurations (301)
/* ns4:HttpHostConfigurations */
class SOAP_CMAC ns4__HttpHostConfigurations : public xsd__anyType
{
public:
	std::vector<class ns4__HttpDestinationConfiguration * >HttpDestination;	/* required element of type ns4:HttpDestinationConfiguration */
	class ns4__HttpHostConfigurationsExtension *Extension;	/* optional element of type ns4:HttpHostConfigurationsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 301; } /* = unique type id SOAP_TYPE_ns4__HttpHostConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__HttpHostConfigurations() { ns4__HttpHostConfigurations::soap_default(NULL); }
	virtual ~ns4__HttpHostConfigurations() { }
};
#endif

#ifndef SOAP_TYPE_ns4__HttpHostConfigurationsExtension
#define SOAP_TYPE_ns4__HttpHostConfigurationsExtension (302)
/* ns4:HttpHostConfigurationsExtension */
class SOAP_CMAC ns4__HttpHostConfigurationsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 302; } /* = unique type id SOAP_TYPE_ns4__HttpHostConfigurationsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__HttpHostConfigurationsExtension() { ns4__HttpHostConfigurationsExtension::soap_default(NULL); }
	virtual ~ns4__HttpHostConfigurationsExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns4__HttpDestinationConfiguration
#define SOAP_TYPE_ns4__HttpDestinationConfiguration (303)
/* ns4:HttpDestinationConfiguration */
class SOAP_CMAC ns4__HttpDestinationConfiguration : public xsd__anyType
{
public:
	class ns4__HttpHostAddress *HostAddress;	/* required element of type ns4:HttpHostAddress */
	class ns4__HttpAuthenticationConfiguration *HttpAuthentication;	/* optional element of type ns4:HttpAuthenticationConfiguration */
	class ns4__HttpDestinationConfigurationExtension *Extension;	/* optional element of type ns4:HttpDestinationConfigurationExtension */
	std::string uri;	/* optional attribute */
	enum ns4__HttpProtocolType protocol;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 303; } /* = unique type id SOAP_TYPE_ns4__HttpDestinationConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__HttpDestinationConfiguration() { ns4__HttpDestinationConfiguration::soap_default(NULL); }
	virtual ~ns4__HttpDestinationConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_ns4__HttpDestinationConfigurationExtension
#define SOAP_TYPE_ns4__HttpDestinationConfigurationExtension (304)
/* ns4:HttpDestinationConfigurationExtension */
class SOAP_CMAC ns4__HttpDestinationConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 304; } /* = unique type id SOAP_TYPE_ns4__HttpDestinationConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__HttpDestinationConfigurationExtension() { ns4__HttpDestinationConfigurationExtension::soap_default(NULL); }
	virtual ~ns4__HttpDestinationConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns4__HttpAuthenticationConfiguration
#define SOAP_TYPE_ns4__HttpAuthenticationConfiguration (305)
/* ns4:HttpAuthenticationConfiguration */
class SOAP_CMAC ns4__HttpAuthenticationConfiguration : public xsd__anyType
{
public:
	ns4__UserCredentials *User;	/* optional element of type ns4:UserCredentials */
	class ns4__HttpAuthenticationConfigurationExtension *Extension;	/* optional element of type ns4:HttpAuthenticationConfigurationExtension */
	enum ns4__HttpAuthenticationMethodType method;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 305; } /* = unique type id SOAP_TYPE_ns4__HttpAuthenticationConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__HttpAuthenticationConfiguration() { ns4__HttpAuthenticationConfiguration::soap_default(NULL); }
	virtual ~ns4__HttpAuthenticationConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_ns4__HttpAuthenticationConfigurationExtension
#define SOAP_TYPE_ns4__HttpAuthenticationConfigurationExtension (306)
/* ns4:HttpAuthenticationConfigurationExtension */
class SOAP_CMAC ns4__HttpAuthenticationConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 306; } /* = unique type id SOAP_TYPE_ns4__HttpAuthenticationConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__HttpAuthenticationConfigurationExtension() { ns4__HttpAuthenticationConfigurationExtension::soap_default(NULL); }
	virtual ~ns4__HttpAuthenticationConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns4__HttpHostAddress
#define SOAP_TYPE_ns4__HttpHostAddress (307)
/* ns4:HttpHostAddress */
class SOAP_CMAC ns4__HttpHostAddress : public xsd__anyType
{
public:
	std::string Value;	/* required element of type xsd:string */
	std::vector<char * >__any;
	enum ns4__AddressFormatType formatType;	/* required attribute */
	std::string portNo;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 307; } /* = unique type id SOAP_TYPE_ns4__HttpHostAddress */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__HttpHostAddress() { ns4__HttpHostAddress::soap_default(NULL); }
	virtual ~ns4__HttpHostAddress() { }
};
#endif

#ifndef SOAP_TYPE_ns4__PostContentConfiguration
#define SOAP_TYPE_ns4__PostContentConfiguration (308)
/* ns4:PostContentConfiguration */
class SOAP_CMAC ns4__PostContentConfiguration : public xsd__anyType
{
public:
	ns4__MediaSource *MediaReference;	/* optional element of type ns4:MediaSource */
	class ns4__PostBodyConfiguration *PostBody;	/* required element of type ns4:PostBodyConfiguration */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 308; } /* = unique type id SOAP_TYPE_ns4__PostContentConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__PostContentConfiguration() { ns4__PostContentConfiguration::soap_default(NULL); }
	virtual ~ns4__PostContentConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_ns4__PostBodyConfiguration
#define SOAP_TYPE_ns4__PostBodyConfiguration (309)
/* ns4:PostBodyConfiguration */
class SOAP_CMAC ns4__PostBodyConfiguration : public xsd__anyType
{
public:
	std::vector<char * >__any;
	std::string *formData;	/* optional attribute */
	bool *includeEvent;	/* optional attribute */
	bool *includeMedia;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 309; } /* = unique type id SOAP_TYPE_ns4__PostBodyConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__PostBodyConfiguration() { ns4__PostBodyConfiguration::soap_default(NULL); }
	virtual ~ns4__PostBodyConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_ns4__FtpHostConfigurations
#define SOAP_TYPE_ns4__FtpHostConfigurations (310)
/* ns4:FtpHostConfigurations */
class SOAP_CMAC ns4__FtpHostConfigurations : public xsd__anyType
{
public:
	std::vector<class ns4__FtpDestinationConfiguration * >FtpDestination;	/* required element of type ns4:FtpDestinationConfiguration */
	class ns4__FtpHostConfigurationsExtension *Extension;	/* optional element of type ns4:FtpHostConfigurationsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 310; } /* = unique type id SOAP_TYPE_ns4__FtpHostConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__FtpHostConfigurations() { ns4__FtpHostConfigurations::soap_default(NULL); }
	virtual ~ns4__FtpHostConfigurations() { }
};
#endif

#ifndef SOAP_TYPE_ns4__FtpHostConfigurationsExtension
#define SOAP_TYPE_ns4__FtpHostConfigurationsExtension (311)
/* ns4:FtpHostConfigurationsExtension */
class SOAP_CMAC ns4__FtpHostConfigurationsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 311; } /* = unique type id SOAP_TYPE_ns4__FtpHostConfigurationsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__FtpHostConfigurationsExtension() { ns4__FtpHostConfigurationsExtension::soap_default(NULL); }
	virtual ~ns4__FtpHostConfigurationsExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns4__FtpDestinationConfiguration
#define SOAP_TYPE_ns4__FtpDestinationConfiguration (312)
/* ns4:FtpDestinationConfiguration */
class SOAP_CMAC ns4__FtpDestinationConfiguration : public xsd__anyType
{
public:
	class ns4__FtpHostAddress *HostAddress;	/* required element of type ns4:FtpHostAddress */
	std::string UploadPath;	/* required element of type xsd:string */
	class ns4__FtpAuthenticationConfiguration *FtpAuthentication;	/* required element of type ns4:FtpAuthenticationConfiguration */
	class ns4__FtpDestinationConfigurationExtension *Extension;	/* optional element of type ns4:FtpDestinationConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 312; } /* = unique type id SOAP_TYPE_ns4__FtpDestinationConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__FtpDestinationConfiguration() { ns4__FtpDestinationConfiguration::soap_default(NULL); }
	virtual ~ns4__FtpDestinationConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_ns4__FtpDestinationConfigurationExtension
#define SOAP_TYPE_ns4__FtpDestinationConfigurationExtension (313)
/* ns4:FtpDestinationConfigurationExtension */
class SOAP_CMAC ns4__FtpDestinationConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 313; } /* = unique type id SOAP_TYPE_ns4__FtpDestinationConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__FtpDestinationConfigurationExtension() { ns4__FtpDestinationConfigurationExtension::soap_default(NULL); }
	virtual ~ns4__FtpDestinationConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns4__FtpAuthenticationConfiguration
#define SOAP_TYPE_ns4__FtpAuthenticationConfiguration (314)
/* ns4:FtpAuthenticationConfiguration */
class SOAP_CMAC ns4__FtpAuthenticationConfiguration : public xsd__anyType
{
public:
	ns4__UserCredentials *User;	/* optional element of type ns4:UserCredentials */
	class ns4__FtpAuthenticationConfigurationExtension *Extension;	/* optional element of type ns4:FtpAuthenticationConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 314; } /* = unique type id SOAP_TYPE_ns4__FtpAuthenticationConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__FtpAuthenticationConfiguration() { ns4__FtpAuthenticationConfiguration::soap_default(NULL); }
	virtual ~ns4__FtpAuthenticationConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_ns4__FtpAuthenticationConfigurationExtension
#define SOAP_TYPE_ns4__FtpAuthenticationConfigurationExtension (315)
/* ns4:FtpAuthenticationConfigurationExtension */
class SOAP_CMAC ns4__FtpAuthenticationConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 315; } /* = unique type id SOAP_TYPE_ns4__FtpAuthenticationConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__FtpAuthenticationConfigurationExtension() { ns4__FtpAuthenticationConfigurationExtension::soap_default(NULL); }
	virtual ~ns4__FtpAuthenticationConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns4__FtpHostAddress
#define SOAP_TYPE_ns4__FtpHostAddress (316)
/* ns4:FtpHostAddress */
class SOAP_CMAC ns4__FtpHostAddress : public xsd__anyType
{
public:
	std::string Value;	/* required element of type xsd:string */
	std::vector<char * >__any;
	enum ns4__AddressFormatType formatType;	/* required attribute */
	std::string portNo;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 316; } /* = unique type id SOAP_TYPE_ns4__FtpHostAddress */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__FtpHostAddress() { ns4__FtpHostAddress::soap_default(NULL); }
	virtual ~ns4__FtpHostAddress() { }
};
#endif

#ifndef SOAP_TYPE_ns4__FtpContent
#define SOAP_TYPE_ns4__FtpContent (317)
/* ns4:FtpContent */
class SOAP_CMAC ns4__FtpContent : public xsd__anyType
{
public:
	class ns4__FtpContentConfiguration *FtpContentConfig;	/* required element of type ns4:FtpContentConfiguration */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 317; } /* = unique type id SOAP_TYPE_ns4__FtpContent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__FtpContent() { ns4__FtpContent::soap_default(NULL); }
	virtual ~ns4__FtpContent() { }
};
#endif

#ifndef SOAP_TYPE_ns4__FtpFileNameConfigurations
#define SOAP_TYPE_ns4__FtpFileNameConfigurations (318)
/* ns4:FtpFileNameConfigurations */
class SOAP_CMAC ns4__FtpFileNameConfigurations : public xsd__anyType
{
public:
	std::vector<char * >__any;
	std::string *file_USCOREname;	/* optional attribute */
	enum ns4__FileSuffixType suffix;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 318; } /* = unique type id SOAP_TYPE_ns4__FtpFileNameConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__FtpFileNameConfigurations() { ns4__FtpFileNameConfigurations::soap_default(NULL); }
	virtual ~ns4__FtpFileNameConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__ns4__union_FtpContentConfiguration
#define SOAP_TYPE__ns4__union_FtpContentConfiguration (2359)
/* xsd:choice */
union _ns4__union_FtpContentConfiguration
{
#define SOAP_UNION__ns4__union_FtpContentConfiguration_UploadImages	(1)
	class ns4__FtpContentConfigurationUploadImages *UploadImages;
#define SOAP_UNION__ns4__union_FtpContentConfiguration_UploadFile	(2)
	class ns4__FtpContentConfigurationUploadFile *UploadFile;
};
#endif

#ifndef SOAP_TYPE_ns4__FtpContentConfiguration
#define SOAP_TYPE_ns4__FtpContentConfiguration (319)
/* ns4:FtpContentConfiguration */
class SOAP_CMAC ns4__FtpContentConfiguration : public xsd__anyType
{
public:
	int __union_FtpContentConfiguration;	/* union discriminant (of union defined below) */
	union _ns4__union_FtpContentConfiguration union_FtpContentConfiguration;	/* required element of type xsd:choice */
	std::vector<char * >__any;
	std::string Type;	/* required attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 319; } /* = unique type id SOAP_TYPE_ns4__FtpContentConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__FtpContentConfiguration() { ns4__FtpContentConfiguration::soap_default(NULL); }
	virtual ~ns4__FtpContentConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_ns4__FtpContentConfigurationUploadImages
#define SOAP_TYPE_ns4__FtpContentConfigurationUploadImages (320)
/* ns4:FtpContentConfigurationUploadImages */
class SOAP_CMAC ns4__FtpContentConfigurationUploadImages : public xsd__anyType
{
public:
	LONG64 HowLong;	/* external */
	LONG64 SampleInterval;	/* external */
	ns4__FtpFileNameConfigurations *FileName;	/* required element of type ns4:FtpFileNameConfigurations */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 320; } /* = unique type id SOAP_TYPE_ns4__FtpContentConfigurationUploadImages */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__FtpContentConfigurationUploadImages() { ns4__FtpContentConfigurationUploadImages::soap_default(NULL); }
	virtual ~ns4__FtpContentConfigurationUploadImages() { }
};
#endif

#ifndef SOAP_TYPE_ns4__FtpContentConfigurationUploadFile
#define SOAP_TYPE_ns4__FtpContentConfigurationUploadFile (321)
/* ns4:FtpContentConfigurationUploadFile */
class SOAP_CMAC ns4__FtpContentConfigurationUploadFile : public xsd__anyType
{
public:
	std::string sourceFileName;	/* required element of type xsd:string */
	std::string destinationFileName;	/* required element of type xsd:string */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 321; } /* = unique type id SOAP_TYPE_ns4__FtpContentConfigurationUploadFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__FtpContentConfigurationUploadFile() { ns4__FtpContentConfigurationUploadFile::soap_default(NULL); }
	virtual ~ns4__FtpContentConfigurationUploadFile() { }
};
#endif

#ifndef SOAP_TYPE_ns4__SMSProviderConfiguration
#define SOAP_TYPE_ns4__SMSProviderConfiguration (322)
/* ns4:SMSProviderConfiguration */
class SOAP_CMAC ns4__SMSProviderConfiguration : public xsd__anyType
{
public:
	std::string ProviderURL;	/* required element of type xsd:anyURI */
	ns4__UserCredentials *User;	/* required element of type ns4:UserCredentials */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 322; } /* = unique type id SOAP_TYPE_ns4__SMSProviderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__SMSProviderConfiguration() { ns4__SMSProviderConfiguration::soap_default(NULL); }
	virtual ~ns4__SMSProviderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_ns4__SMSSenderConfiguration
#define SOAP_TYPE_ns4__SMSSenderConfiguration (323)
/* ns4:SMSSenderConfiguration */
class SOAP_CMAC ns4__SMSSenderConfiguration : public xsd__anyType
{
public:
	std::string EMail;	/* required element of type xsd:string */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 323; } /* = unique type id SOAP_TYPE_ns4__SMSSenderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__SMSSenderConfiguration() { ns4__SMSSenderConfiguration::soap_default(NULL); }
	virtual ~ns4__SMSSenderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_ns4__SMSMessage
#define SOAP_TYPE_ns4__SMSMessage (324)
/* ns4:SMSMessage */
class SOAP_CMAC ns4__SMSMessage : public xsd__anyType
{
public:
	std::string Text;	/* required element of type xsd:string */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 324; } /* = unique type id SOAP_TYPE_ns4__SMSMessage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__SMSMessage() { ns4__SMSMessage::soap_default(NULL); }
	virtual ~ns4__SMSMessage() { }
};
#endif

#ifndef SOAP_TYPE_ns4__TriggeredRecordingConfiguration
#define SOAP_TYPE_ns4__TriggeredRecordingConfiguration (325)
/* ns4:TriggeredRecordingConfiguration */
class SOAP_CMAC ns4__TriggeredRecordingConfiguration : public xsd__anyType
{
public:
	LONG64 PreRecordDuration;	/* external */
	LONG64 PostRecordDuration;	/* external */
	LONG64 RecordDuration;	/* external */
	std::string *RecordFrameRate;	/* optional element of type xsd:positiveInteger */
	bool DoRecordAudio;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 325; } /* = unique type id SOAP_TYPE_ns4__TriggeredRecordingConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__TriggeredRecordingConfiguration() { ns4__TriggeredRecordingConfiguration::soap_default(NULL); }
	virtual ~ns4__TriggeredRecordingConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_ns4__RecordingActionConfiguration
#define SOAP_TYPE_ns4__RecordingActionConfiguration (326)
/* ns4:RecordingActionConfiguration */
class SOAP_CMAC ns4__RecordingActionConfiguration : public xsd__anyType
{
public:
	ns4__TriggeredRecordingConfiguration *RecordConfig;	/* required element of type ns4:TriggeredRecordingConfiguration */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 326; } /* = unique type id SOAP_TYPE_ns4__RecordingActionConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__RecordingActionConfiguration() { ns4__RecordingActionConfiguration::soap_default(NULL); }
	virtual ~ns4__RecordingActionConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__ns4__GetSupportedActions
#define SOAP_TYPE__ns4__GetSupportedActions (327)
/* ns4:GetSupportedActions */
class SOAP_CMAC _ns4__GetSupportedActions
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 327; } /* = unique type id SOAP_TYPE__ns4__GetSupportedActions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__GetSupportedActions() { _ns4__GetSupportedActions::soap_default(NULL); }
	virtual ~_ns4__GetSupportedActions() { }
};
#endif

#ifndef SOAP_TYPE__ns4__GetSupportedActionsResponse
#define SOAP_TYPE__ns4__GetSupportedActionsResponse (328)
/* ns4:GetSupportedActionsResponse */
class SOAP_CMAC _ns4__GetSupportedActionsResponse
{
public:
	ns4__SupportedActions *SupportedActions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns4:SupportedActions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 328; } /* = unique type id SOAP_TYPE__ns4__GetSupportedActionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__GetSupportedActionsResponse() { _ns4__GetSupportedActionsResponse::soap_default(NULL); }
	virtual ~_ns4__GetSupportedActionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns4__GetActions
#define SOAP_TYPE__ns4__GetActions (329)
/* ns4:GetActions */
class SOAP_CMAC _ns4__GetActions
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 329; } /* = unique type id SOAP_TYPE__ns4__GetActions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__GetActions() { _ns4__GetActions::soap_default(NULL); }
	virtual ~_ns4__GetActions() { }
};
#endif

#ifndef SOAP_TYPE__ns4__GetActionsResponse
#define SOAP_TYPE__ns4__GetActionsResponse (330)
/* ns4:GetActionsResponse */
class SOAP_CMAC _ns4__GetActionsResponse
{
public:
	std::vector<ns4__Action * >Action;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:Action */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 330; } /* = unique type id SOAP_TYPE__ns4__GetActionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__GetActionsResponse() { _ns4__GetActionsResponse::soap_default(NULL); }
	virtual ~_ns4__GetActionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns4__CreateActions
#define SOAP_TYPE__ns4__CreateActions (331)
/* ns4:CreateActions */
class SOAP_CMAC _ns4__CreateActions
{
public:
	std::vector<ns4__ActionConfiguration * >Action;	/* required element of type ns4:ActionConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 331; } /* = unique type id SOAP_TYPE__ns4__CreateActions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__CreateActions() { _ns4__CreateActions::soap_default(NULL); }
	virtual ~_ns4__CreateActions() { }
};
#endif

#ifndef SOAP_TYPE__ns4__CreateActionsResponse
#define SOAP_TYPE__ns4__CreateActionsResponse (332)
/* ns4:CreateActionsResponse */
class SOAP_CMAC _ns4__CreateActionsResponse
{
public:
	std::vector<ns4__Action * >Action;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:Action */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 332; } /* = unique type id SOAP_TYPE__ns4__CreateActionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__CreateActionsResponse() { _ns4__CreateActionsResponse::soap_default(NULL); }
	virtual ~_ns4__CreateActionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns4__DeleteActions
#define SOAP_TYPE__ns4__DeleteActions (333)
/* ns4:DeleteActions */
class SOAP_CMAC _ns4__DeleteActions
{
public:
	std::vector<std::string >Token;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 333; } /* = unique type id SOAP_TYPE__ns4__DeleteActions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__DeleteActions() { _ns4__DeleteActions::soap_default(NULL); }
	virtual ~_ns4__DeleteActions() { }
};
#endif

#ifndef SOAP_TYPE__ns4__DeleteActionsResponse
#define SOAP_TYPE__ns4__DeleteActionsResponse (334)
/* ns4:DeleteActionsResponse */
class SOAP_CMAC _ns4__DeleteActionsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 334; } /* = unique type id SOAP_TYPE__ns4__DeleteActionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__DeleteActionsResponse() { _ns4__DeleteActionsResponse::soap_default(NULL); }
	virtual ~_ns4__DeleteActionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns4__ModifyActions
#define SOAP_TYPE__ns4__ModifyActions (335)
/* ns4:ModifyActions */
class SOAP_CMAC _ns4__ModifyActions
{
public:
	std::vector<ns4__Action * >Action;	/* required element of type ns4:Action */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 335; } /* = unique type id SOAP_TYPE__ns4__ModifyActions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__ModifyActions() { _ns4__ModifyActions::soap_default(NULL); }
	virtual ~_ns4__ModifyActions() { }
};
#endif

#ifndef SOAP_TYPE__ns4__ModifyActionsResponse
#define SOAP_TYPE__ns4__ModifyActionsResponse (336)
/* ns4:ModifyActionsResponse */
class SOAP_CMAC _ns4__ModifyActionsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 336; } /* = unique type id SOAP_TYPE__ns4__ModifyActionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__ModifyActionsResponse() { _ns4__ModifyActionsResponse::soap_default(NULL); }
	virtual ~_ns4__ModifyActionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns4__GetServiceCapabilities
#define SOAP_TYPE__ns4__GetServiceCapabilities (337)
/* ns4:GetServiceCapabilities */
class SOAP_CMAC _ns4__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 337; } /* = unique type id SOAP_TYPE__ns4__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__GetServiceCapabilities() { _ns4__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_ns4__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__ns4__GetServiceCapabilitiesResponse
#define SOAP_TYPE__ns4__GetServiceCapabilitiesResponse (338)
/* ns4:GetServiceCapabilitiesResponse */
class SOAP_CMAC _ns4__GetServiceCapabilitiesResponse
{
public:
	ns4__ActionEngineCapabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns4:ActionEngineCapabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 338; } /* = unique type id SOAP_TYPE__ns4__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__GetServiceCapabilitiesResponse() { _ns4__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_ns4__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns4__GetActionTriggers
#define SOAP_TYPE__ns4__GetActionTriggers (339)
/* ns4:GetActionTriggers */
class SOAP_CMAC _ns4__GetActionTriggers
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 339; } /* = unique type id SOAP_TYPE__ns4__GetActionTriggers */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__GetActionTriggers() { _ns4__GetActionTriggers::soap_default(NULL); }
	virtual ~_ns4__GetActionTriggers() { }
};
#endif

#ifndef SOAP_TYPE__ns4__GetActionTriggersResponse
#define SOAP_TYPE__ns4__GetActionTriggersResponse (340)
/* ns4:GetActionTriggersResponse */
class SOAP_CMAC _ns4__GetActionTriggersResponse
{
public:
	std::vector<ns4__ActionTrigger * >ActionTrigger;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:ActionTrigger */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 340; } /* = unique type id SOAP_TYPE__ns4__GetActionTriggersResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__GetActionTriggersResponse() { _ns4__GetActionTriggersResponse::soap_default(NULL); }
	virtual ~_ns4__GetActionTriggersResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns4__CreateActionTriggers
#define SOAP_TYPE__ns4__CreateActionTriggers (341)
/* ns4:CreateActionTriggers */
class SOAP_CMAC _ns4__CreateActionTriggers
{
public:
	std::vector<ns4__ActionTriggerConfiguration * >ActionTrigger;	/* required element of type ns4:ActionTriggerConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 341; } /* = unique type id SOAP_TYPE__ns4__CreateActionTriggers */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__CreateActionTriggers() { _ns4__CreateActionTriggers::soap_default(NULL); }
	virtual ~_ns4__CreateActionTriggers() { }
};
#endif

#ifndef SOAP_TYPE__ns4__CreateActionTriggersResponse
#define SOAP_TYPE__ns4__CreateActionTriggersResponse (342)
/* ns4:CreateActionTriggersResponse */
class SOAP_CMAC _ns4__CreateActionTriggersResponse
{
public:
	std::vector<ns4__ActionTrigger * >ActionTrigger;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:ActionTrigger */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 342; } /* = unique type id SOAP_TYPE__ns4__CreateActionTriggersResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__CreateActionTriggersResponse() { _ns4__CreateActionTriggersResponse::soap_default(NULL); }
	virtual ~_ns4__CreateActionTriggersResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns4__ModifyActionTriggers
#define SOAP_TYPE__ns4__ModifyActionTriggers (343)
/* ns4:ModifyActionTriggers */
class SOAP_CMAC _ns4__ModifyActionTriggers
{
public:
	std::vector<ns4__ActionTrigger * >ActionTrigger;	/* required element of type ns4:ActionTrigger */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 343; } /* = unique type id SOAP_TYPE__ns4__ModifyActionTriggers */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__ModifyActionTriggers() { _ns4__ModifyActionTriggers::soap_default(NULL); }
	virtual ~_ns4__ModifyActionTriggers() { }
};
#endif

#ifndef SOAP_TYPE__ns4__ModifyActionTriggersResponse
#define SOAP_TYPE__ns4__ModifyActionTriggersResponse (344)
/* ns4:ModifyActionTriggersResponse */
class SOAP_CMAC _ns4__ModifyActionTriggersResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 344; } /* = unique type id SOAP_TYPE__ns4__ModifyActionTriggersResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__ModifyActionTriggersResponse() { _ns4__ModifyActionTriggersResponse::soap_default(NULL); }
	virtual ~_ns4__ModifyActionTriggersResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns4__DeleteActionTriggers
#define SOAP_TYPE__ns4__DeleteActionTriggers (345)
/* ns4:DeleteActionTriggers */
class SOAP_CMAC _ns4__DeleteActionTriggers
{
public:
	std::vector<std::string >Token;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 345; } /* = unique type id SOAP_TYPE__ns4__DeleteActionTriggers */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__DeleteActionTriggers() { _ns4__DeleteActionTriggers::soap_default(NULL); }
	virtual ~_ns4__DeleteActionTriggers() { }
};
#endif

#ifndef SOAP_TYPE__ns4__DeleteActionTriggersResponse
#define SOAP_TYPE__ns4__DeleteActionTriggersResponse (346)
/* ns4:DeleteActionTriggersResponse */
class SOAP_CMAC _ns4__DeleteActionTriggersResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 346; } /* = unique type id SOAP_TYPE__ns4__DeleteActionTriggersResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__DeleteActionTriggersResponse() { _ns4__DeleteActionTriggersResponse::soap_default(NULL); }
	virtual ~_ns4__DeleteActionTriggersResponse() { }
};
#endif

#ifndef SOAP_TYPE_tt__DeviceEntity
#define SOAP_TYPE_tt__DeviceEntity (347)
/* Primitive tt:DeviceEntity schema type: */
class SOAP_CMAC tt__DeviceEntity : public xsd__anyType
{
public:
	std::string token;	/* required attribute */
public:
	virtual int soap_type() const { return 347; } /* = unique type id SOAP_TYPE_tt__DeviceEntity */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DeviceEntity() { tt__DeviceEntity::soap_default(NULL); }
	virtual ~tt__DeviceEntity() { }
};
#endif

#ifndef SOAP_TYPE_tt__IntRectangle
#define SOAP_TYPE_tt__IntRectangle (348)
/* Primitive tt:IntRectangle schema type: */
class SOAP_CMAC tt__IntRectangle : public xsd__anyType
{
public:
	int x;	/* required attribute */
	int y;	/* required attribute */
	int width;	/* required attribute */
	int height;	/* required attribute */
public:
	virtual int soap_type() const { return 348; } /* = unique type id SOAP_TYPE_tt__IntRectangle */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IntRectangle() { tt__IntRectangle::soap_default(NULL); }
	virtual ~tt__IntRectangle() { }
};
#endif

#ifndef SOAP_TYPE_tt__IntRectangleRange
#define SOAP_TYPE_tt__IntRectangleRange (349)
/* tt:IntRectangleRange */
class SOAP_CMAC tt__IntRectangleRange : public xsd__anyType
{
public:
	class tt__IntRange *XRange;	/* required element of type tt:IntRange */
	tt__IntRange *YRange;	/* required element of type tt:IntRange */
	tt__IntRange *WidthRange;	/* required element of type tt:IntRange */
	tt__IntRange *HeightRange;	/* required element of type tt:IntRange */
public:
	virtual int soap_type() const { return 349; } /* = unique type id SOAP_TYPE_tt__IntRectangleRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IntRectangleRange() { tt__IntRectangleRange::soap_default(NULL); }
	virtual ~tt__IntRectangleRange() { }
};
#endif

#ifndef SOAP_TYPE_tt__IntRange
#define SOAP_TYPE_tt__IntRange (350)
/* tt:IntRange */
class SOAP_CMAC tt__IntRange : public xsd__anyType
{
public:
	int Min;	/* required element of type xsd:int */
	int Max;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 350; } /* = unique type id SOAP_TYPE_tt__IntRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IntRange() { tt__IntRange::soap_default(NULL); }
	virtual ~tt__IntRange() { }
};
#endif

#ifndef SOAP_TYPE_tt__FloatRange
#define SOAP_TYPE_tt__FloatRange (351)
/* tt:FloatRange */
class SOAP_CMAC tt__FloatRange : public xsd__anyType
{
public:
	float Min;	/* required element of type xsd:float */
	float Max;	/* required element of type xsd:float */
public:
	virtual int soap_type() const { return 351; } /* = unique type id SOAP_TYPE_tt__FloatRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FloatRange() { tt__FloatRange::soap_default(NULL); }
	virtual ~tt__FloatRange() { }
};
#endif

#ifndef SOAP_TYPE_tt__DurationRange
#define SOAP_TYPE_tt__DurationRange (352)
/* tt:DurationRange */
class SOAP_CMAC tt__DurationRange : public xsd__anyType
{
public:
	LONG64 Min;	/* external */
	LONG64 Max;	/* external */
public:
	virtual int soap_type() const { return 352; } /* = unique type id SOAP_TYPE_tt__DurationRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DurationRange() { tt__DurationRange::soap_default(NULL); }
	virtual ~tt__DurationRange() { }
};
#endif

#ifndef SOAP_TYPE_tt__IntList
#define SOAP_TYPE_tt__IntList (353)
/* tt:IntList */
class SOAP_CMAC tt__IntList : public xsd__anyType
{
public:
	std::vector<int >Items;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 353; } /* = unique type id SOAP_TYPE_tt__IntList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IntList() { tt__IntList::soap_default(NULL); }
	virtual ~tt__IntList() { }
};
#endif

#ifndef SOAP_TYPE_tt__FloatList
#define SOAP_TYPE_tt__FloatList (354)
/* tt:FloatList */
class SOAP_CMAC tt__FloatList : public xsd__anyType
{
public:
	std::vector<float >Items;	/* optional element of type xsd:float */
public:
	virtual int soap_type() const { return 354; } /* = unique type id SOAP_TYPE_tt__FloatList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FloatList() { tt__FloatList::soap_default(NULL); }
	virtual ~tt__FloatList() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnyHolder
#define SOAP_TYPE_tt__AnyHolder (355)
/* tt:AnyHolder */
class SOAP_CMAC tt__AnyHolder : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 355; } /* = unique type id SOAP_TYPE_tt__AnyHolder */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnyHolder() { tt__AnyHolder::soap_default(NULL); }
	virtual ~tt__AnyHolder() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceExtension
#define SOAP_TYPE_tt__VideoSourceExtension (357)
/* tt:VideoSourceExtension */
class SOAP_CMAC tt__VideoSourceExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	class tt__ImagingSettings20 *Imaging;	/* optional element of type tt:ImagingSettings20 */
	class tt__VideoSourceExtension2 *Extension;	/* optional element of type tt:VideoSourceExtension2 */
public:
	virtual int soap_type() const { return 357; } /* = unique type id SOAP_TYPE_tt__VideoSourceExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceExtension() { tt__VideoSourceExtension::soap_default(NULL); }
	virtual ~tt__VideoSourceExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceExtension2
#define SOAP_TYPE_tt__VideoSourceExtension2 (358)
/* tt:VideoSourceExtension2 */
class SOAP_CMAC tt__VideoSourceExtension2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 358; } /* = unique type id SOAP_TYPE_tt__VideoSourceExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceExtension2() { tt__VideoSourceExtension2::soap_default(NULL); }
	virtual ~tt__VideoSourceExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__Profile
#define SOAP_TYPE_tt__Profile (360)
/* tt:Profile */
class SOAP_CMAC tt__Profile : public xsd__anyType
{
public:
	std::string Name;	/* required element of type tt:Name */
	class tt__VideoSourceConfiguration *VideoSourceConfiguration;	/* optional element of type tt:VideoSourceConfiguration */
	class tt__AudioSourceConfiguration *AudioSourceConfiguration;	/* optional element of type tt:AudioSourceConfiguration */
	class tt__VideoEncoderConfiguration *VideoEncoderConfiguration;	/* optional element of type tt:VideoEncoderConfiguration */
	class tt__AudioEncoderConfiguration *AudioEncoderConfiguration;	/* optional element of type tt:AudioEncoderConfiguration */
	class tt__VideoAnalyticsConfiguration *VideoAnalyticsConfiguration;	/* optional element of type tt:VideoAnalyticsConfiguration */
	class tt__PTZConfiguration *PTZConfiguration;	/* optional element of type tt:PTZConfiguration */
	class tt__MetadataConfiguration *MetadataConfiguration;	/* optional element of type tt:MetadataConfiguration */
	class tt__ProfileExtension *Extension;	/* optional element of type tt:ProfileExtension */
	std::string token;	/* required attribute */
	bool *fixed;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 360; } /* = unique type id SOAP_TYPE_tt__Profile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Profile() { tt__Profile::soap_default(NULL); }
	virtual ~tt__Profile() { }
};
#endif

#ifndef SOAP_TYPE_tt__ProfileExtension
#define SOAP_TYPE_tt__ProfileExtension (361)
/* tt:ProfileExtension */
class SOAP_CMAC tt__ProfileExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	class tt__AudioOutputConfiguration *AudioOutputConfiguration;	/* optional element of type tt:AudioOutputConfiguration */
	class tt__AudioDecoderConfiguration *AudioDecoderConfiguration;	/* optional element of type tt:AudioDecoderConfiguration */
	class tt__ProfileExtension2 *Extension;	/* optional element of type tt:ProfileExtension2 */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 361; } /* = unique type id SOAP_TYPE_tt__ProfileExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ProfileExtension() { tt__ProfileExtension::soap_default(NULL); }
	virtual ~tt__ProfileExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ProfileExtension2
#define SOAP_TYPE_tt__ProfileExtension2 (362)
/* tt:ProfileExtension2 */
class SOAP_CMAC tt__ProfileExtension2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 362; } /* = unique type id SOAP_TYPE_tt__ProfileExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ProfileExtension2() { tt__ProfileExtension2::soap_default(NULL); }
	virtual ~tt__ProfileExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__ConfigurationEntity
#define SOAP_TYPE_tt__ConfigurationEntity (363)
/* tt:ConfigurationEntity */
class SOAP_CMAC tt__ConfigurationEntity : public xsd__anyType
{
public:
	std::string Name;	/* required element of type tt:Name */
	int UseCount;	/* required element of type xsd:int */
	std::string token;	/* required attribute */
public:
	virtual int soap_type() const { return 363; } /* = unique type id SOAP_TYPE_tt__ConfigurationEntity */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ConfigurationEntity() { tt__ConfigurationEntity::soap_default(NULL); }
	virtual ~tt__ConfigurationEntity() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationExtension
#define SOAP_TYPE_tt__VideoSourceConfigurationExtension (365)
/* tt:VideoSourceConfigurationExtension */
class SOAP_CMAC tt__VideoSourceConfigurationExtension : public xsd__anyType
{
public:
	class tt__Rotate *Rotate;	/* optional element of type tt:Rotate */
	class tt__VideoSourceConfigurationExtension2 *Extension;	/* optional element of type tt:VideoSourceConfigurationExtension2 */
public:
	virtual int soap_type() const { return 365; } /* = unique type id SOAP_TYPE_tt__VideoSourceConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceConfigurationExtension() { tt__VideoSourceConfigurationExtension::soap_default(NULL); }
	virtual ~tt__VideoSourceConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationExtension2
#define SOAP_TYPE_tt__VideoSourceConfigurationExtension2 (366)
/* tt:VideoSourceConfigurationExtension2 */
class SOAP_CMAC tt__VideoSourceConfigurationExtension2 : public xsd__anyType
{
public:
	std::vector<class tt__LensDescription * >LensDescription;	/* optional element of type tt:LensDescription */
	class tt__SceneOrientation *SceneOrientation;	/* optional element of type tt:SceneOrientation */
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 366; } /* = unique type id SOAP_TYPE_tt__VideoSourceConfigurationExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceConfigurationExtension2() { tt__VideoSourceConfigurationExtension2::soap_default(NULL); }
	virtual ~tt__VideoSourceConfigurationExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__Rotate
#define SOAP_TYPE_tt__Rotate (367)
/* tt:Rotate */
class SOAP_CMAC tt__Rotate : public xsd__anyType
{
public:
	enum tt__RotateMode Mode;	/* required element of type tt:RotateMode */
	int *Degree;	/* optional element of type xsd:int */
	class tt__RotateExtension *Extension;	/* optional element of type tt:RotateExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 367; } /* = unique type id SOAP_TYPE_tt__Rotate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Rotate() { tt__Rotate::soap_default(NULL); }
	virtual ~tt__Rotate() { }
};
#endif

#ifndef SOAP_TYPE_tt__RotateExtension
#define SOAP_TYPE_tt__RotateExtension (368)
/* tt:RotateExtension */
class SOAP_CMAC tt__RotateExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 368; } /* = unique type id SOAP_TYPE_tt__RotateExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RotateExtension() { tt__RotateExtension::soap_default(NULL); }
	virtual ~tt__RotateExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__LensProjection
#define SOAP_TYPE_tt__LensProjection (369)
/* tt:LensProjection */
class SOAP_CMAC tt__LensProjection : public xsd__anyType
{
public:
	float Angle;	/* required element of type xsd:float */
	float Radius;	/* required element of type xsd:float */
	float *Transmittance;	/* optional element of type xsd:float */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 369; } /* = unique type id SOAP_TYPE_tt__LensProjection */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__LensProjection() { tt__LensProjection::soap_default(NULL); }
	virtual ~tt__LensProjection() { }
};
#endif

#ifndef SOAP_TYPE_tt__LensOffset
#define SOAP_TYPE_tt__LensOffset (370)
/* Primitive tt:LensOffset schema type: */
class SOAP_CMAC tt__LensOffset : public xsd__anyType
{
public:
	float *x;	/* optional attribute */
	float *y;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 370; } /* = unique type id SOAP_TYPE_tt__LensOffset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__LensOffset() { tt__LensOffset::soap_default(NULL); }
	virtual ~tt__LensOffset() { }
};
#endif

#ifndef SOAP_TYPE_tt__LensDescription
#define SOAP_TYPE_tt__LensDescription (371)
/* tt:LensDescription */
class SOAP_CMAC tt__LensDescription : public xsd__anyType
{
public:
	tt__LensOffset *Offset;	/* required element of type tt:LensOffset */
	std::vector<tt__LensProjection * >Projection;	/* required element of type tt:LensProjection */
	float XFactor;	/* required element of type xsd:float */
	std::vector<char * >__any;
	float *FocalLength;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 371; } /* = unique type id SOAP_TYPE_tt__LensDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__LensDescription() { tt__LensDescription::soap_default(NULL); }
	virtual ~tt__LensDescription() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptions
#define SOAP_TYPE_tt__VideoSourceConfigurationOptions (372)
/* tt:VideoSourceConfigurationOptions */
class SOAP_CMAC tt__VideoSourceConfigurationOptions : public xsd__anyType
{
public:
	tt__IntRectangleRange *BoundsRange;	/* required element of type tt:IntRectangleRange */
	std::vector<std::string >VideoSourceTokensAvailable;	/* required element of type tt:ReferenceToken */
	class tt__VideoSourceConfigurationOptionsExtension *Extension;	/* optional element of type tt:VideoSourceConfigurationOptionsExtension */
	int *MaximumNumberOfProfiles;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 372; } /* = unique type id SOAP_TYPE_tt__VideoSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceConfigurationOptions() { tt__VideoSourceConfigurationOptions::soap_default(NULL); }
	virtual ~tt__VideoSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension
#define SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension (373)
/* tt:VideoSourceConfigurationOptionsExtension */
class SOAP_CMAC tt__VideoSourceConfigurationOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	class tt__RotateOptions *Rotate;	/* optional element of type tt:RotateOptions */
	class tt__VideoSourceConfigurationOptionsExtension2 *Extension;	/* optional element of type tt:VideoSourceConfigurationOptionsExtension2 */
public:
	virtual int soap_type() const { return 373; } /* = unique type id SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceConfigurationOptionsExtension() { tt__VideoSourceConfigurationOptionsExtension::soap_default(NULL); }
	virtual ~tt__VideoSourceConfigurationOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2
#define SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2 (374)
/* tt:VideoSourceConfigurationOptionsExtension2 */
class SOAP_CMAC tt__VideoSourceConfigurationOptionsExtension2 : public xsd__anyType
{
public:
	std::vector<enum tt__SceneOrientationMode >SceneOrientationMode;	/* optional element of type tt:SceneOrientationMode */
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 374; } /* = unique type id SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceConfigurationOptionsExtension2() { tt__VideoSourceConfigurationOptionsExtension2::soap_default(NULL); }
	virtual ~tt__VideoSourceConfigurationOptionsExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__RotateOptions
#define SOAP_TYPE_tt__RotateOptions (375)
/* tt:RotateOptions */
class SOAP_CMAC tt__RotateOptions : public xsd__anyType
{
public:
	std::vector<enum tt__RotateMode >Mode;	/* required element of type tt:RotateMode */
	tt__IntList *DegreeList;	/* optional element of type tt:IntList */
	class tt__RotateOptionsExtension *Extension;	/* optional element of type tt:RotateOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 375; } /* = unique type id SOAP_TYPE_tt__RotateOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RotateOptions() { tt__RotateOptions::soap_default(NULL); }
	virtual ~tt__RotateOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__RotateOptionsExtension
#define SOAP_TYPE_tt__RotateOptionsExtension (376)
/* tt:RotateOptionsExtension */
class SOAP_CMAC tt__RotateOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 376; } /* = unique type id SOAP_TYPE_tt__RotateOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RotateOptionsExtension() { tt__RotateOptionsExtension::soap_default(NULL); }
	virtual ~tt__RotateOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__SceneOrientation
#define SOAP_TYPE_tt__SceneOrientation (377)
/* tt:SceneOrientation */
class SOAP_CMAC tt__SceneOrientation : public xsd__anyType
{
public:
	enum tt__SceneOrientationMode Mode;	/* required element of type tt:SceneOrientationMode */
	std::string *Orientation;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 377; } /* = unique type id SOAP_TYPE_tt__SceneOrientation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SceneOrientation() { tt__SceneOrientation::soap_default(NULL); }
	virtual ~tt__SceneOrientation() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoResolution
#define SOAP_TYPE_tt__VideoResolution (379)
/* tt:VideoResolution */
class SOAP_CMAC tt__VideoResolution : public xsd__anyType
{
public:
	int Width;	/* required element of type xsd:int */
	int Height;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 379; } /* = unique type id SOAP_TYPE_tt__VideoResolution */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoResolution() { tt__VideoResolution::soap_default(NULL); }
	virtual ~tt__VideoResolution() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoRateControl
#define SOAP_TYPE_tt__VideoRateControl (380)
/* tt:VideoRateControl */
class SOAP_CMAC tt__VideoRateControl : public xsd__anyType
{
public:
	int FrameRateLimit;	/* required element of type xsd:int */
	int EncodingInterval;	/* required element of type xsd:int */
	int BitrateLimit;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 380; } /* = unique type id SOAP_TYPE_tt__VideoRateControl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoRateControl() { tt__VideoRateControl::soap_default(NULL); }
	virtual ~tt__VideoRateControl() { }
};
#endif

#ifndef SOAP_TYPE_tt__Mpeg4Configuration
#define SOAP_TYPE_tt__Mpeg4Configuration (381)
/* tt:Mpeg4Configuration */
class SOAP_CMAC tt__Mpeg4Configuration : public xsd__anyType
{
public:
	int GovLength;	/* required element of type xsd:int */
	enum tt__Mpeg4Profile Mpeg4Profile;	/* required element of type tt:Mpeg4Profile */
public:
	virtual int soap_type() const { return 381; } /* = unique type id SOAP_TYPE_tt__Mpeg4Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Mpeg4Configuration() { tt__Mpeg4Configuration::soap_default(NULL); }
	virtual ~tt__Mpeg4Configuration() { }
};
#endif

#ifndef SOAP_TYPE_tt__H264Configuration
#define SOAP_TYPE_tt__H264Configuration (382)
/* tt:H264Configuration */
class SOAP_CMAC tt__H264Configuration : public xsd__anyType
{
public:
	int GovLength;	/* required element of type xsd:int */
	enum tt__H264Profile H264Profile;	/* required element of type tt:H264Profile */
public:
	virtual int soap_type() const { return 382; } /* = unique type id SOAP_TYPE_tt__H264Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__H264Configuration() { tt__H264Configuration::soap_default(NULL); }
	virtual ~tt__H264Configuration() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoEncoderConfigurationOptions
#define SOAP_TYPE_tt__VideoEncoderConfigurationOptions (383)
/* tt:VideoEncoderConfigurationOptions */
class SOAP_CMAC tt__VideoEncoderConfigurationOptions : public xsd__anyType
{
public:
	tt__IntRange *QualityRange;	/* required element of type tt:IntRange */
	class tt__JpegOptions *JPEG;	/* optional element of type tt:JpegOptions */
	class tt__Mpeg4Options *MPEG4;	/* optional element of type tt:Mpeg4Options */
	class tt__H264Options *H264;	/* optional element of type tt:H264Options */
	class tt__VideoEncoderOptionsExtension *Extension;	/* optional element of type tt:VideoEncoderOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 383; } /* = unique type id SOAP_TYPE_tt__VideoEncoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoEncoderConfigurationOptions() { tt__VideoEncoderConfigurationOptions::soap_default(NULL); }
	virtual ~tt__VideoEncoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoEncoderOptionsExtension
#define SOAP_TYPE_tt__VideoEncoderOptionsExtension (384)
/* tt:VideoEncoderOptionsExtension */
class SOAP_CMAC tt__VideoEncoderOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	class tt__JpegOptions2 *JPEG;	/* optional element of type tt:JpegOptions2 */
	class tt__Mpeg4Options2 *MPEG4;	/* optional element of type tt:Mpeg4Options2 */
	class tt__H264Options2 *H264;	/* optional element of type tt:H264Options2 */
	class tt__VideoEncoderOptionsExtension2 *Extension;	/* optional element of type tt:VideoEncoderOptionsExtension2 */
public:
	virtual int soap_type() const { return 384; } /* = unique type id SOAP_TYPE_tt__VideoEncoderOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoEncoderOptionsExtension() { tt__VideoEncoderOptionsExtension::soap_default(NULL); }
	virtual ~tt__VideoEncoderOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoEncoderOptionsExtension2
#define SOAP_TYPE_tt__VideoEncoderOptionsExtension2 (385)
/* tt:VideoEncoderOptionsExtension2 */
class SOAP_CMAC tt__VideoEncoderOptionsExtension2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 385; } /* = unique type id SOAP_TYPE_tt__VideoEncoderOptionsExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoEncoderOptionsExtension2() { tt__VideoEncoderOptionsExtension2::soap_default(NULL); }
	virtual ~tt__VideoEncoderOptionsExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__JpegOptions
#define SOAP_TYPE_tt__JpegOptions (386)
/* tt:JpegOptions */
class SOAP_CMAC tt__JpegOptions : public xsd__anyType
{
public:
	std::vector<tt__VideoResolution * >ResolutionsAvailable;	/* required element of type tt:VideoResolution */
	tt__IntRange *FrameRateRange;	/* required element of type tt:IntRange */
	tt__IntRange *EncodingIntervalRange;	/* required element of type tt:IntRange */
public:
	virtual int soap_type() const { return 386; } /* = unique type id SOAP_TYPE_tt__JpegOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__JpegOptions() { tt__JpegOptions::soap_default(NULL); }
	virtual ~tt__JpegOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__Mpeg4Options
#define SOAP_TYPE_tt__Mpeg4Options (388)
/* tt:Mpeg4Options */
class SOAP_CMAC tt__Mpeg4Options : public xsd__anyType
{
public:
	std::vector<tt__VideoResolution * >ResolutionsAvailable;	/* required element of type tt:VideoResolution */
	tt__IntRange *GovLengthRange;	/* required element of type tt:IntRange */
	tt__IntRange *FrameRateRange;	/* required element of type tt:IntRange */
	tt__IntRange *EncodingIntervalRange;	/* required element of type tt:IntRange */
	std::vector<enum tt__Mpeg4Profile >Mpeg4ProfilesSupported;	/* required element of type tt:Mpeg4Profile */
public:
	virtual int soap_type() const { return 388; } /* = unique type id SOAP_TYPE_tt__Mpeg4Options */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Mpeg4Options() { tt__Mpeg4Options::soap_default(NULL); }
	virtual ~tt__Mpeg4Options() { }
};
#endif

#ifndef SOAP_TYPE_tt__H264Options
#define SOAP_TYPE_tt__H264Options (390)
/* tt:H264Options */
class SOAP_CMAC tt__H264Options : public xsd__anyType
{
public:
	std::vector<tt__VideoResolution * >ResolutionsAvailable;	/* required element of type tt:VideoResolution */
	tt__IntRange *GovLengthRange;	/* required element of type tt:IntRange */
	tt__IntRange *FrameRateRange;	/* required element of type tt:IntRange */
	tt__IntRange *EncodingIntervalRange;	/* required element of type tt:IntRange */
	std::vector<enum tt__H264Profile >H264ProfilesSupported;	/* required element of type tt:H264Profile */
public:
	virtual int soap_type() const { return 390; } /* = unique type id SOAP_TYPE_tt__H264Options */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__H264Options() { tt__H264Options::soap_default(NULL); }
	virtual ~tt__H264Options() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoResolution2
#define SOAP_TYPE_tt__VideoResolution2 (393)
/* tt:VideoResolution2 */
class SOAP_CMAC tt__VideoResolution2 : public xsd__anyType
{
public:
	int Width;	/* required element of type xsd:int */
	int Height;	/* required element of type xsd:int */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 393; } /* = unique type id SOAP_TYPE_tt__VideoResolution2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoResolution2() { tt__VideoResolution2::soap_default(NULL); }
	virtual ~tt__VideoResolution2() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoRateControl2
#define SOAP_TYPE_tt__VideoRateControl2 (394)
/* tt:VideoRateControl2 */
class SOAP_CMAC tt__VideoRateControl2 : public xsd__anyType
{
public:
	float FrameRateLimit;	/* required element of type xsd:float */
	int BitrateLimit;	/* required element of type xsd:int */
	std::vector<char * >__any;
	bool *ConstantBitRate;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 394; } /* = unique type id SOAP_TYPE_tt__VideoRateControl2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoRateControl2() { tt__VideoRateControl2::soap_default(NULL); }
	virtual ~tt__VideoRateControl2() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoEncoder2ConfigurationOptions
#define SOAP_TYPE_tt__VideoEncoder2ConfigurationOptions (395)
/* tt:VideoEncoder2ConfigurationOptions */
class SOAP_CMAC tt__VideoEncoder2ConfigurationOptions : public xsd__anyType
{
public:
	std::string Encoding;	/* required element of type xsd:string */
	tt__FloatRange *QualityRange;	/* required element of type tt:FloatRange */
	std::vector<tt__VideoResolution2 * >ResolutionsAvailable;	/* required element of type tt:VideoResolution2 */
	tt__IntRange *BitrateRange;	/* required element of type tt:IntRange */
	std::vector<char * >__any;
	std::string *GovLengthRange;	/* optional attribute */
	std::string *FrameRatesSupported;	/* optional attribute */
	std::string *ProfilesSupported;	/* optional attribute */
	bool *ConstantBitRateSupported;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 395; } /* = unique type id SOAP_TYPE_tt__VideoEncoder2ConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoEncoder2ConfigurationOptions() { tt__VideoEncoder2ConfigurationOptions::soap_default(NULL); }
	virtual ~tt__VideoEncoder2ConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioSourceConfigurationOptions
#define SOAP_TYPE_tt__AudioSourceConfigurationOptions (397)
/* tt:AudioSourceConfigurationOptions */
class SOAP_CMAC tt__AudioSourceConfigurationOptions : public xsd__anyType
{
public:
	std::vector<std::string >InputTokensAvailable;	/* required element of type tt:ReferenceToken */
	class tt__AudioSourceOptionsExtension *Extension;	/* optional element of type tt:AudioSourceOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 397; } /* = unique type id SOAP_TYPE_tt__AudioSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioSourceConfigurationOptions() { tt__AudioSourceConfigurationOptions::soap_default(NULL); }
	virtual ~tt__AudioSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioSourceOptionsExtension
#define SOAP_TYPE_tt__AudioSourceOptionsExtension (398)
/* tt:AudioSourceOptionsExtension */
class SOAP_CMAC tt__AudioSourceOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 398; } /* = unique type id SOAP_TYPE_tt__AudioSourceOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioSourceOptionsExtension() { tt__AudioSourceOptionsExtension::soap_default(NULL); }
	virtual ~tt__AudioSourceOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioEncoderConfigurationOptions
#define SOAP_TYPE_tt__AudioEncoderConfigurationOptions (400)
/* tt:AudioEncoderConfigurationOptions */
class SOAP_CMAC tt__AudioEncoderConfigurationOptions : public xsd__anyType
{
public:
	std::vector<class tt__AudioEncoderConfigurationOption * >Options;	/* optional element of type tt:AudioEncoderConfigurationOption */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 400; } /* = unique type id SOAP_TYPE_tt__AudioEncoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioEncoderConfigurationOptions() { tt__AudioEncoderConfigurationOptions::soap_default(NULL); }
	virtual ~tt__AudioEncoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioEncoderConfigurationOption
#define SOAP_TYPE_tt__AudioEncoderConfigurationOption (401)
/* tt:AudioEncoderConfigurationOption */
class SOAP_CMAC tt__AudioEncoderConfigurationOption : public xsd__anyType
{
public:
	enum tt__AudioEncoding Encoding;	/* required element of type tt:AudioEncoding */
	tt__IntList *BitrateList;	/* required element of type tt:IntList */
	tt__IntList *SampleRateList;	/* required element of type tt:IntList */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 401; } /* = unique type id SOAP_TYPE_tt__AudioEncoderConfigurationOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioEncoderConfigurationOption() { tt__AudioEncoderConfigurationOption::soap_default(NULL); }
	virtual ~tt__AudioEncoderConfigurationOption() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioEncoder2ConfigurationOptions
#define SOAP_TYPE_tt__AudioEncoder2ConfigurationOptions (403)
/* tt:AudioEncoder2ConfigurationOptions */
class SOAP_CMAC tt__AudioEncoder2ConfigurationOptions : public xsd__anyType
{
public:
	std::string Encoding;	/* required element of type xsd:string */
	tt__IntList *BitrateList;	/* required element of type tt:IntList */
	tt__IntList *SampleRateList;	/* required element of type tt:IntList */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 403; } /* = unique type id SOAP_TYPE_tt__AudioEncoder2ConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioEncoder2ConfigurationOptions() { tt__AudioEncoder2ConfigurationOptions::soap_default(NULL); }
	virtual ~tt__AudioEncoder2ConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataConfigurationExtension
#define SOAP_TYPE_tt__MetadataConfigurationExtension (406)
/* tt:MetadataConfigurationExtension */
class SOAP_CMAC tt__MetadataConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 406; } /* = unique type id SOAP_TYPE_tt__MetadataConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataConfigurationExtension() { tt__MetadataConfigurationExtension::soap_default(NULL); }
	virtual ~tt__MetadataConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZFilter
#define SOAP_TYPE_tt__PTZFilter (407)
/* tt:PTZFilter */
class SOAP_CMAC tt__PTZFilter : public xsd__anyType
{
public:
	bool Status;	/* required element of type xsd:boolean */
	bool Position;	/* required element of type xsd:boolean */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 407; } /* = unique type id SOAP_TYPE_tt__PTZFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZFilter() { tt__PTZFilter::soap_default(NULL); }
	virtual ~tt__PTZFilter() { }
};
#endif

#ifndef SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy
#define SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy (2426)
/* tt:EventSubscription-SubscriptionPolicy */
class SOAP_CMAC _tt__EventSubscription_SubscriptionPolicy
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 2426; } /* = unique type id SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__EventSubscription_SubscriptionPolicy() { _tt__EventSubscription_SubscriptionPolicy::soap_default(NULL); }
	virtual ~_tt__EventSubscription_SubscriptionPolicy() { }
};
#endif

#ifndef SOAP_TYPE_tt__EventSubscription
#define SOAP_TYPE_tt__EventSubscription (408)
/* tt:EventSubscription */
class SOAP_CMAC tt__EventSubscription : public xsd__anyType
{
public:
	class wsnt__FilterType *Filter;	/* optional element of type wsnt:FilterType */
	_tt__EventSubscription_SubscriptionPolicy *SubscriptionPolicy;	/* optional element of type tt:EventSubscription-SubscriptionPolicy */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 408; } /* = unique type id SOAP_TYPE_tt__EventSubscription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EventSubscription() { tt__EventSubscription::soap_default(NULL); }
	virtual ~tt__EventSubscription() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataConfigurationOptions
#define SOAP_TYPE_tt__MetadataConfigurationOptions (409)
/* tt:MetadataConfigurationOptions */
class SOAP_CMAC tt__MetadataConfigurationOptions : public xsd__anyType
{
public:
	class tt__PTZStatusFilterOptions *PTZStatusFilterOptions;	/* required element of type tt:PTZStatusFilterOptions */
	std::vector<char * >__any;
	class tt__MetadataConfigurationOptionsExtension *Extension;	/* optional element of type tt:MetadataConfigurationOptionsExtension */
	bool *GeoLocation;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 409; } /* = unique type id SOAP_TYPE_tt__MetadataConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataConfigurationOptions() { tt__MetadataConfigurationOptions::soap_default(NULL); }
	virtual ~tt__MetadataConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataConfigurationOptionsExtension
#define SOAP_TYPE_tt__MetadataConfigurationOptionsExtension (410)
/* tt:MetadataConfigurationOptionsExtension */
class SOAP_CMAC tt__MetadataConfigurationOptionsExtension : public xsd__anyType
{
public:
	std::vector<std::string >CompressionType;	/* optional element of type xsd:string */
	class tt__MetadataConfigurationOptionsExtension2 *Extension;	/* optional element of type tt:MetadataConfigurationOptionsExtension2 */
public:
	virtual int soap_type() const { return 410; } /* = unique type id SOAP_TYPE_tt__MetadataConfigurationOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataConfigurationOptionsExtension() { tt__MetadataConfigurationOptionsExtension::soap_default(NULL); }
	virtual ~tt__MetadataConfigurationOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2
#define SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2 (411)
/* tt:MetadataConfigurationOptionsExtension2 */
class SOAP_CMAC tt__MetadataConfigurationOptionsExtension2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 411; } /* = unique type id SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataConfigurationOptionsExtension2() { tt__MetadataConfigurationOptionsExtension2::soap_default(NULL); }
	virtual ~tt__MetadataConfigurationOptionsExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZStatusFilterOptions
#define SOAP_TYPE_tt__PTZStatusFilterOptions (412)
/* tt:PTZStatusFilterOptions */
class SOAP_CMAC tt__PTZStatusFilterOptions : public xsd__anyType
{
public:
	bool PanTiltStatusSupported;	/* required element of type xsd:boolean */
	bool ZoomStatusSupported;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	bool *PanTiltPositionSupported;	/* optional element of type xsd:boolean */
	bool *ZoomPositionSupported;	/* optional element of type xsd:boolean */
	class tt__PTZStatusFilterOptionsExtension *Extension;	/* optional element of type tt:PTZStatusFilterOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 412; } /* = unique type id SOAP_TYPE_tt__PTZStatusFilterOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZStatusFilterOptions() { tt__PTZStatusFilterOptions::soap_default(NULL); }
	virtual ~tt__PTZStatusFilterOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZStatusFilterOptionsExtension
#define SOAP_TYPE_tt__PTZStatusFilterOptionsExtension (413)
/* tt:PTZStatusFilterOptionsExtension */
class SOAP_CMAC tt__PTZStatusFilterOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 413; } /* = unique type id SOAP_TYPE_tt__PTZStatusFilterOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZStatusFilterOptionsExtension() { tt__PTZStatusFilterOptionsExtension::soap_default(NULL); }
	virtual ~tt__PTZStatusFilterOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoOutputExtension
#define SOAP_TYPE_tt__VideoOutputExtension (415)
/* tt:VideoOutputExtension */
class SOAP_CMAC tt__VideoOutputExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 415; } /* = unique type id SOAP_TYPE_tt__VideoOutputExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoOutputExtension() { tt__VideoOutputExtension::soap_default(NULL); }
	virtual ~tt__VideoOutputExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoOutputConfigurationOptions
#define SOAP_TYPE_tt__VideoOutputConfigurationOptions (417)
/* tt:VideoOutputConfigurationOptions */
class SOAP_CMAC tt__VideoOutputConfigurationOptions : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 417; } /* = unique type id SOAP_TYPE_tt__VideoOutputConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoOutputConfigurationOptions() { tt__VideoOutputConfigurationOptions::soap_default(NULL); }
	virtual ~tt__VideoOutputConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoDecoderConfigurationOptions
#define SOAP_TYPE_tt__VideoDecoderConfigurationOptions (418)
/* tt:VideoDecoderConfigurationOptions */
class SOAP_CMAC tt__VideoDecoderConfigurationOptions : public xsd__anyType
{
public:
	class tt__JpegDecOptions *JpegDecOptions;	/* optional element of type tt:JpegDecOptions */
	class tt__H264DecOptions *H264DecOptions;	/* optional element of type tt:H264DecOptions */
	class tt__Mpeg4DecOptions *Mpeg4DecOptions;	/* optional element of type tt:Mpeg4DecOptions */
	class tt__VideoDecoderConfigurationOptionsExtension *Extension;	/* optional element of type tt:VideoDecoderConfigurationOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 418; } /* = unique type id SOAP_TYPE_tt__VideoDecoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoDecoderConfigurationOptions() { tt__VideoDecoderConfigurationOptions::soap_default(NULL); }
	virtual ~tt__VideoDecoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__H264DecOptions
#define SOAP_TYPE_tt__H264DecOptions (419)
/* tt:H264DecOptions */
class SOAP_CMAC tt__H264DecOptions : public xsd__anyType
{
public:
	std::vector<tt__VideoResolution * >ResolutionsAvailable;	/* required element of type tt:VideoResolution */
	std::vector<enum tt__H264Profile >SupportedH264Profiles;	/* required element of type tt:H264Profile */
	tt__IntRange *SupportedInputBitrate;	/* required element of type tt:IntRange */
	tt__IntRange *SupportedFrameRate;	/* required element of type tt:IntRange */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 419; } /* = unique type id SOAP_TYPE_tt__H264DecOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__H264DecOptions() { tt__H264DecOptions::soap_default(NULL); }
	virtual ~tt__H264DecOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__JpegDecOptions
#define SOAP_TYPE_tt__JpegDecOptions (420)
/* tt:JpegDecOptions */
class SOAP_CMAC tt__JpegDecOptions : public xsd__anyType
{
public:
	std::vector<tt__VideoResolution * >ResolutionsAvailable;	/* required element of type tt:VideoResolution */
	tt__IntRange *SupportedInputBitrate;	/* required element of type tt:IntRange */
	tt__IntRange *SupportedFrameRate;	/* required element of type tt:IntRange */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 420; } /* = unique type id SOAP_TYPE_tt__JpegDecOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__JpegDecOptions() { tt__JpegDecOptions::soap_default(NULL); }
	virtual ~tt__JpegDecOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__Mpeg4DecOptions
#define SOAP_TYPE_tt__Mpeg4DecOptions (421)
/* tt:Mpeg4DecOptions */
class SOAP_CMAC tt__Mpeg4DecOptions : public xsd__anyType
{
public:
	std::vector<tt__VideoResolution * >ResolutionsAvailable;	/* required element of type tt:VideoResolution */
	std::vector<enum tt__Mpeg4Profile >SupportedMpeg4Profiles;	/* required element of type tt:Mpeg4Profile */
	tt__IntRange *SupportedInputBitrate;	/* required element of type tt:IntRange */
	tt__IntRange *SupportedFrameRate;	/* required element of type tt:IntRange */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 421; } /* = unique type id SOAP_TYPE_tt__Mpeg4DecOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Mpeg4DecOptions() { tt__Mpeg4DecOptions::soap_default(NULL); }
	virtual ~tt__Mpeg4DecOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension
#define SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension (422)
/* tt:VideoDecoderConfigurationOptionsExtension */
class SOAP_CMAC tt__VideoDecoderConfigurationOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 422; } /* = unique type id SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoDecoderConfigurationOptionsExtension() { tt__VideoDecoderConfigurationOptionsExtension::soap_default(NULL); }
	virtual ~tt__VideoDecoderConfigurationOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioOutputConfigurationOptions
#define SOAP_TYPE_tt__AudioOutputConfigurationOptions (425)
/* tt:AudioOutputConfigurationOptions */
class SOAP_CMAC tt__AudioOutputConfigurationOptions : public xsd__anyType
{
public:
	std::vector<std::string >OutputTokensAvailable;	/* required element of type tt:ReferenceToken */
	std::vector<std::string >SendPrimacyOptions;	/* optional element of type xsd:anyURI */
	tt__IntRange *OutputLevelRange;	/* required element of type tt:IntRange */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 425; } /* = unique type id SOAP_TYPE_tt__AudioOutputConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioOutputConfigurationOptions() { tt__AudioOutputConfigurationOptions::soap_default(NULL); }
	virtual ~tt__AudioOutputConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioDecoderConfigurationOptions
#define SOAP_TYPE_tt__AudioDecoderConfigurationOptions (427)
/* tt:AudioDecoderConfigurationOptions */
class SOAP_CMAC tt__AudioDecoderConfigurationOptions : public xsd__anyType
{
public:
	class tt__AACDecOptions *AACDecOptions;	/* optional element of type tt:AACDecOptions */
	class tt__G711DecOptions *G711DecOptions;	/* optional element of type tt:G711DecOptions */
	class tt__G726DecOptions *G726DecOptions;	/* optional element of type tt:G726DecOptions */
	class tt__AudioDecoderConfigurationOptionsExtension *Extension;	/* optional element of type tt:AudioDecoderConfigurationOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 427; } /* = unique type id SOAP_TYPE_tt__AudioDecoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioDecoderConfigurationOptions() { tt__AudioDecoderConfigurationOptions::soap_default(NULL); }
	virtual ~tt__AudioDecoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__G711DecOptions
#define SOAP_TYPE_tt__G711DecOptions (428)
/* tt:G711DecOptions */
class SOAP_CMAC tt__G711DecOptions : public xsd__anyType
{
public:
	tt__IntList *Bitrate;	/* required element of type tt:IntList */
	tt__IntList *SampleRateRange;	/* required element of type tt:IntList */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 428; } /* = unique type id SOAP_TYPE_tt__G711DecOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__G711DecOptions() { tt__G711DecOptions::soap_default(NULL); }
	virtual ~tt__G711DecOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__AACDecOptions
#define SOAP_TYPE_tt__AACDecOptions (429)
/* tt:AACDecOptions */
class SOAP_CMAC tt__AACDecOptions : public xsd__anyType
{
public:
	tt__IntList *Bitrate;	/* required element of type tt:IntList */
	tt__IntList *SampleRateRange;	/* required element of type tt:IntList */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 429; } /* = unique type id SOAP_TYPE_tt__AACDecOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AACDecOptions() { tt__AACDecOptions::soap_default(NULL); }
	virtual ~tt__AACDecOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__G726DecOptions
#define SOAP_TYPE_tt__G726DecOptions (430)
/* tt:G726DecOptions */
class SOAP_CMAC tt__G726DecOptions : public xsd__anyType
{
public:
	tt__IntList *Bitrate;	/* required element of type tt:IntList */
	tt__IntList *SampleRateRange;	/* required element of type tt:IntList */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 430; } /* = unique type id SOAP_TYPE_tt__G726DecOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__G726DecOptions() { tt__G726DecOptions::soap_default(NULL); }
	virtual ~tt__G726DecOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension
#define SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension (431)
/* tt:AudioDecoderConfigurationOptionsExtension */
class SOAP_CMAC tt__AudioDecoderConfigurationOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 431; } /* = unique type id SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioDecoderConfigurationOptionsExtension() { tt__AudioDecoderConfigurationOptionsExtension::soap_default(NULL); }
	virtual ~tt__AudioDecoderConfigurationOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__MulticastConfiguration
#define SOAP_TYPE_tt__MulticastConfiguration (432)
/* tt:MulticastConfiguration */
class SOAP_CMAC tt__MulticastConfiguration : public xsd__anyType
{
public:
	class tt__IPAddress *Address;	/* required element of type tt:IPAddress */
	int Port;	/* required element of type xsd:int */
	int TTL;	/* required element of type xsd:int */
	bool AutoStart;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 432; } /* = unique type id SOAP_TYPE_tt__MulticastConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MulticastConfiguration() { tt__MulticastConfiguration::soap_default(NULL); }
	virtual ~tt__MulticastConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__StreamSetup
#define SOAP_TYPE_tt__StreamSetup (433)
/* tt:StreamSetup */
class SOAP_CMAC tt__StreamSetup : public xsd__anyType
{
public:
	enum tt__StreamType Stream;	/* required element of type tt:StreamType */
	class tt__Transport *Transport;	/* required element of type tt:Transport */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 433; } /* = unique type id SOAP_TYPE_tt__StreamSetup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__StreamSetup() { tt__StreamSetup::soap_default(NULL); }
	virtual ~tt__StreamSetup() { }
};
#endif

#ifndef SOAP_TYPE_tt__Transport
#define SOAP_TYPE_tt__Transport (434)
/* tt:Transport */
class SOAP_CMAC tt__Transport : public xsd__anyType
{
public:
	enum tt__TransportProtocol Protocol;	/* required element of type tt:TransportProtocol */
	tt__Transport *Tunnel;	/* optional element of type tt:Transport */
public:
	virtual int soap_type() const { return 434; } /* = unique type id SOAP_TYPE_tt__Transport */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Transport() { tt__Transport::soap_default(NULL); }
	virtual ~tt__Transport() { }
};
#endif

#ifndef SOAP_TYPE_tt__MediaUri
#define SOAP_TYPE_tt__MediaUri (435)
/* tt:MediaUri */
class SOAP_CMAC tt__MediaUri : public xsd__anyType
{
public:
	std::string Uri;	/* required element of type xsd:anyURI */
	bool InvalidAfterConnect;	/* required element of type xsd:boolean */
	bool InvalidAfterReboot;	/* required element of type xsd:boolean */
	LONG64 Timeout;	/* external */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 435; } /* = unique type id SOAP_TYPE_tt__MediaUri */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MediaUri() { tt__MediaUri::soap_default(NULL); }
	virtual ~tt__MediaUri() { }
};
#endif

#ifndef SOAP_TYPE_tt__Scope
#define SOAP_TYPE_tt__Scope (436)
/* tt:Scope */
class SOAP_CMAC tt__Scope : public xsd__anyType
{
public:
	enum tt__ScopeDefinition ScopeDef;	/* required element of type tt:ScopeDefinition */
	std::string ScopeItem;	/* required element of type xsd:anyURI */
public:
	virtual int soap_type() const { return 436; } /* = unique type id SOAP_TYPE_tt__Scope */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Scope() { tt__Scope::soap_default(NULL); }
	virtual ~tt__Scope() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceExtension
#define SOAP_TYPE_tt__NetworkInterfaceExtension (438)
/* tt:NetworkInterfaceExtension */
class SOAP_CMAC tt__NetworkInterfaceExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	int InterfaceType;	/* required element of type tt:IANA-IfTypes */
	std::vector<class tt__Dot3Configuration * >Dot3;	/* optional element of type tt:Dot3Configuration */
	std::vector<class tt__Dot11Configuration * >Dot11;	/* optional element of type tt:Dot11Configuration */
	class tt__NetworkInterfaceExtension2 *Extension;	/* optional element of type tt:NetworkInterfaceExtension2 */
public:
	virtual int soap_type() const { return 438; } /* = unique type id SOAP_TYPE_tt__NetworkInterfaceExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceExtension() { tt__NetworkInterfaceExtension::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot3Configuration
#define SOAP_TYPE_tt__Dot3Configuration (439)
/* tt:Dot3Configuration */
class SOAP_CMAC tt__Dot3Configuration : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 439; } /* = unique type id SOAP_TYPE_tt__Dot3Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot3Configuration() { tt__Dot3Configuration::soap_default(NULL); }
	virtual ~tt__Dot3Configuration() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceExtension2
#define SOAP_TYPE_tt__NetworkInterfaceExtension2 (440)
/* tt:NetworkInterfaceExtension2 */
class SOAP_CMAC tt__NetworkInterfaceExtension2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 440; } /* = unique type id SOAP_TYPE_tt__NetworkInterfaceExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceExtension2() { tt__NetworkInterfaceExtension2::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceLink
#define SOAP_TYPE_tt__NetworkInterfaceLink (441)
/* tt:NetworkInterfaceLink */
class SOAP_CMAC tt__NetworkInterfaceLink : public xsd__anyType
{
public:
	class tt__NetworkInterfaceConnectionSetting *AdminSettings;	/* required element of type tt:NetworkInterfaceConnectionSetting */
	tt__NetworkInterfaceConnectionSetting *OperSettings;	/* required element of type tt:NetworkInterfaceConnectionSetting */
	int InterfaceType;	/* required element of type tt:IANA-IfTypes */
public:
	virtual int soap_type() const { return 441; } /* = unique type id SOAP_TYPE_tt__NetworkInterfaceLink */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceLink() { tt__NetworkInterfaceLink::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceLink() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceConnectionSetting
#define SOAP_TYPE_tt__NetworkInterfaceConnectionSetting (442)
/* tt:NetworkInterfaceConnectionSetting */
class SOAP_CMAC tt__NetworkInterfaceConnectionSetting : public xsd__anyType
{
public:
	bool AutoNegotiation;	/* required element of type xsd:boolean */
	int Speed;	/* required element of type xsd:int */
	enum tt__Duplex Duplex;	/* required element of type tt:Duplex */
public:
	virtual int soap_type() const { return 442; } /* = unique type id SOAP_TYPE_tt__NetworkInterfaceConnectionSetting */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceConnectionSetting() { tt__NetworkInterfaceConnectionSetting::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceConnectionSetting() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceInfo
#define SOAP_TYPE_tt__NetworkInterfaceInfo (443)
/* tt:NetworkInterfaceInfo */
class SOAP_CMAC tt__NetworkInterfaceInfo : public xsd__anyType
{
public:
	std::string *Name;	/* optional element of type xsd:string */
	std::string HwAddress;	/* required element of type tt:HwAddress */
	int *MTU;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 443; } /* = unique type id SOAP_TYPE_tt__NetworkInterfaceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceInfo() { tt__NetworkInterfaceInfo::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceInfo() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPv6NetworkInterface
#define SOAP_TYPE_tt__IPv6NetworkInterface (444)
/* tt:IPv6NetworkInterface */
class SOAP_CMAC tt__IPv6NetworkInterface : public xsd__anyType
{
public:
	bool Enabled;	/* required element of type xsd:boolean */
	class tt__IPv6Configuration *Config;	/* optional element of type tt:IPv6Configuration */
public:
	virtual int soap_type() const { return 444; } /* = unique type id SOAP_TYPE_tt__IPv6NetworkInterface */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPv6NetworkInterface() { tt__IPv6NetworkInterface::soap_default(NULL); }
	virtual ~tt__IPv6NetworkInterface() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPv4NetworkInterface
#define SOAP_TYPE_tt__IPv4NetworkInterface (445)
/* tt:IPv4NetworkInterface */
class SOAP_CMAC tt__IPv4NetworkInterface : public xsd__anyType
{
public:
	bool Enabled;	/* required element of type xsd:boolean */
	class tt__IPv4Configuration *Config;	/* required element of type tt:IPv4Configuration */
public:
	virtual int soap_type() const { return 445; } /* = unique type id SOAP_TYPE_tt__IPv4NetworkInterface */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPv4NetworkInterface() { tt__IPv4NetworkInterface::soap_default(NULL); }
	virtual ~tt__IPv4NetworkInterface() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPv4Configuration
#define SOAP_TYPE_tt__IPv4Configuration (446)
/* tt:IPv4Configuration */
class SOAP_CMAC tt__IPv4Configuration : public xsd__anyType
{
public:
	std::vector<class tt__PrefixedIPv4Address * >Manual;	/* optional element of type tt:PrefixedIPv4Address */
	tt__PrefixedIPv4Address *LinkLocal;	/* optional element of type tt:PrefixedIPv4Address */
	tt__PrefixedIPv4Address *FromDHCP;	/* optional element of type tt:PrefixedIPv4Address */
	bool DHCP;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 446; } /* = unique type id SOAP_TYPE_tt__IPv4Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPv4Configuration() { tt__IPv4Configuration::soap_default(NULL); }
	virtual ~tt__IPv4Configuration() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPv6Configuration
#define SOAP_TYPE_tt__IPv6Configuration (447)
/* tt:IPv6Configuration */
class SOAP_CMAC tt__IPv6Configuration : public xsd__anyType
{
public:
	bool *AcceptRouterAdvert;	/* optional element of type xsd:boolean */
	enum tt__IPv6DHCPConfiguration DHCP;	/* required element of type tt:IPv6DHCPConfiguration */
	std::vector<class tt__PrefixedIPv6Address * >Manual;	/* optional element of type tt:PrefixedIPv6Address */
	std::vector<tt__PrefixedIPv6Address * >LinkLocal;	/* optional element of type tt:PrefixedIPv6Address */
	std::vector<tt__PrefixedIPv6Address * >FromDHCP;	/* optional element of type tt:PrefixedIPv6Address */
	std::vector<tt__PrefixedIPv6Address * >FromRA;	/* optional element of type tt:PrefixedIPv6Address */
	class tt__IPv6ConfigurationExtension *Extension;	/* optional element of type tt:IPv6ConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 447; } /* = unique type id SOAP_TYPE_tt__IPv6Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPv6Configuration() { tt__IPv6Configuration::soap_default(NULL); }
	virtual ~tt__IPv6Configuration() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPv6ConfigurationExtension
#define SOAP_TYPE_tt__IPv6ConfigurationExtension (448)
/* tt:IPv6ConfigurationExtension */
class SOAP_CMAC tt__IPv6ConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 448; } /* = unique type id SOAP_TYPE_tt__IPv6ConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPv6ConfigurationExtension() { tt__IPv6ConfigurationExtension::soap_default(NULL); }
	virtual ~tt__IPv6ConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkProtocol
#define SOAP_TYPE_tt__NetworkProtocol (449)
/* tt:NetworkProtocol */
class SOAP_CMAC tt__NetworkProtocol : public xsd__anyType
{
public:
	enum tt__NetworkProtocolType Name;	/* required element of type tt:NetworkProtocolType */
	bool Enabled;	/* required element of type xsd:boolean */
	std::vector<int >Port;	/* required element of type xsd:int */
	class tt__NetworkProtocolExtension *Extension;	/* optional element of type tt:NetworkProtocolExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 449; } /* = unique type id SOAP_TYPE_tt__NetworkProtocol */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkProtocol() { tt__NetworkProtocol::soap_default(NULL); }
	virtual ~tt__NetworkProtocol() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkProtocolExtension
#define SOAP_TYPE_tt__NetworkProtocolExtension (450)
/* tt:NetworkProtocolExtension */
class SOAP_CMAC tt__NetworkProtocolExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 450; } /* = unique type id SOAP_TYPE_tt__NetworkProtocolExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkProtocolExtension() { tt__NetworkProtocolExtension::soap_default(NULL); }
	virtual ~tt__NetworkProtocolExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkHost
#define SOAP_TYPE_tt__NetworkHost (451)
/* tt:NetworkHost */
class SOAP_CMAC tt__NetworkHost : public xsd__anyType
{
public:
	enum tt__NetworkHostType Type;	/* required element of type tt:NetworkHostType */
	std::string *IPv4Address;	/* optional element of type tt:IPv4Address */
	std::string *IPv6Address;	/* optional element of type tt:IPv6Address */
	std::string *DNSname;	/* optional element of type tt:DNSName */
	class tt__NetworkHostExtension *Extension;	/* optional element of type tt:NetworkHostExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 451; } /* = unique type id SOAP_TYPE_tt__NetworkHost */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkHost() { tt__NetworkHost::soap_default(NULL); }
	virtual ~tt__NetworkHost() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkHostExtension
#define SOAP_TYPE_tt__NetworkHostExtension (452)
/* tt:NetworkHostExtension */
class SOAP_CMAC tt__NetworkHostExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 452; } /* = unique type id SOAP_TYPE_tt__NetworkHostExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkHostExtension() { tt__NetworkHostExtension::soap_default(NULL); }
	virtual ~tt__NetworkHostExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPAddress
#define SOAP_TYPE_tt__IPAddress (453)
/* tt:IPAddress */
class SOAP_CMAC tt__IPAddress : public xsd__anyType
{
public:
	enum tt__IPType Type;	/* required element of type tt:IPType */
	std::string *IPv4Address;	/* optional element of type tt:IPv4Address */
	std::string *IPv6Address;	/* optional element of type tt:IPv6Address */
public:
	virtual int soap_type() const { return 453; } /* = unique type id SOAP_TYPE_tt__IPAddress */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPAddress() { tt__IPAddress::soap_default(NULL); }
	virtual ~tt__IPAddress() { }
};
#endif

#ifndef SOAP_TYPE_tt__PrefixedIPv4Address
#define SOAP_TYPE_tt__PrefixedIPv4Address (454)
/* tt:PrefixedIPv4Address */
class SOAP_CMAC tt__PrefixedIPv4Address : public xsd__anyType
{
public:
	std::string Address;	/* required element of type tt:IPv4Address */
	int PrefixLength;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 454; } /* = unique type id SOAP_TYPE_tt__PrefixedIPv4Address */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PrefixedIPv4Address() { tt__PrefixedIPv4Address::soap_default(NULL); }
	virtual ~tt__PrefixedIPv4Address() { }
};
#endif

#ifndef SOAP_TYPE_tt__PrefixedIPv6Address
#define SOAP_TYPE_tt__PrefixedIPv6Address (455)
/* tt:PrefixedIPv6Address */
class SOAP_CMAC tt__PrefixedIPv6Address : public xsd__anyType
{
public:
	std::string Address;	/* required element of type tt:IPv6Address */
	int PrefixLength;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 455; } /* = unique type id SOAP_TYPE_tt__PrefixedIPv6Address */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PrefixedIPv6Address() { tt__PrefixedIPv6Address::soap_default(NULL); }
	virtual ~tt__PrefixedIPv6Address() { }
};
#endif

#ifndef SOAP_TYPE_tt__HostnameInformation
#define SOAP_TYPE_tt__HostnameInformation (456)
/* tt:HostnameInformation */
class SOAP_CMAC tt__HostnameInformation : public xsd__anyType
{
public:
	bool FromDHCP;	/* required element of type xsd:boolean */
	std::string *Name;	/* optional element of type xsd:token */
	class tt__HostnameInformationExtension *Extension;	/* optional element of type tt:HostnameInformationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 456; } /* = unique type id SOAP_TYPE_tt__HostnameInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__HostnameInformation() { tt__HostnameInformation::soap_default(NULL); }
	virtual ~tt__HostnameInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__HostnameInformationExtension
#define SOAP_TYPE_tt__HostnameInformationExtension (457)
/* tt:HostnameInformationExtension */
class SOAP_CMAC tt__HostnameInformationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 457; } /* = unique type id SOAP_TYPE_tt__HostnameInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__HostnameInformationExtension() { tt__HostnameInformationExtension::soap_default(NULL); }
	virtual ~tt__HostnameInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__DNSInformation
#define SOAP_TYPE_tt__DNSInformation (458)
/* tt:DNSInformation */
class SOAP_CMAC tt__DNSInformation : public xsd__anyType
{
public:
	bool FromDHCP;	/* required element of type xsd:boolean */
	std::vector<std::string >SearchDomain;	/* optional element of type xsd:token */
	std::vector<tt__IPAddress * >DNSFromDHCP;	/* optional element of type tt:IPAddress */
	std::vector<tt__IPAddress * >DNSManual;	/* optional element of type tt:IPAddress */
	class tt__DNSInformationExtension *Extension;	/* optional element of type tt:DNSInformationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 458; } /* = unique type id SOAP_TYPE_tt__DNSInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DNSInformation() { tt__DNSInformation::soap_default(NULL); }
	virtual ~tt__DNSInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__DNSInformationExtension
#define SOAP_TYPE_tt__DNSInformationExtension (459)
/* tt:DNSInformationExtension */
class SOAP_CMAC tt__DNSInformationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 459; } /* = unique type id SOAP_TYPE_tt__DNSInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DNSInformationExtension() { tt__DNSInformationExtension::soap_default(NULL); }
	virtual ~tt__DNSInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__NTPInformation
#define SOAP_TYPE_tt__NTPInformation (460)
/* tt:NTPInformation */
class SOAP_CMAC tt__NTPInformation : public xsd__anyType
{
public:
	bool FromDHCP;	/* required element of type xsd:boolean */
	std::vector<tt__NetworkHost * >NTPFromDHCP;	/* optional element of type tt:NetworkHost */
	std::vector<tt__NetworkHost * >NTPManual;	/* optional element of type tt:NetworkHost */
	class tt__NTPInformationExtension *Extension;	/* optional element of type tt:NTPInformationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 460; } /* = unique type id SOAP_TYPE_tt__NTPInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NTPInformation() { tt__NTPInformation::soap_default(NULL); }
	virtual ~tt__NTPInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__NTPInformationExtension
#define SOAP_TYPE_tt__NTPInformationExtension (461)
/* tt:NTPInformationExtension */
class SOAP_CMAC tt__NTPInformationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 461; } /* = unique type id SOAP_TYPE_tt__NTPInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NTPInformationExtension() { tt__NTPInformationExtension::soap_default(NULL); }
	virtual ~tt__NTPInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__DynamicDNSInformation
#define SOAP_TYPE_tt__DynamicDNSInformation (462)
/* tt:DynamicDNSInformation */
class SOAP_CMAC tt__DynamicDNSInformation : public xsd__anyType
{
public:
	enum tt__DynamicDNSType Type;	/* required element of type tt:DynamicDNSType */
	std::string *Name;	/* optional element of type tt:DNSName */
	LONG64 *TTL;	/* optional element of type xsd:duration */
	class tt__DynamicDNSInformationExtension *Extension;	/* optional element of type tt:DynamicDNSInformationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 462; } /* = unique type id SOAP_TYPE_tt__DynamicDNSInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DynamicDNSInformation() { tt__DynamicDNSInformation::soap_default(NULL); }
	virtual ~tt__DynamicDNSInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__DynamicDNSInformationExtension
#define SOAP_TYPE_tt__DynamicDNSInformationExtension (463)
/* tt:DynamicDNSInformationExtension */
class SOAP_CMAC tt__DynamicDNSInformationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 463; } /* = unique type id SOAP_TYPE_tt__DynamicDNSInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DynamicDNSInformationExtension() { tt__DynamicDNSInformationExtension::soap_default(NULL); }
	virtual ~tt__DynamicDNSInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__NetworkInterfaceSetConfiguration (464)
/* tt:NetworkInterfaceSetConfiguration */
class SOAP_CMAC tt__NetworkInterfaceSetConfiguration : public xsd__anyType
{
public:
	bool *Enabled;	/* optional element of type xsd:boolean */
	tt__NetworkInterfaceConnectionSetting *Link;	/* optional element of type tt:NetworkInterfaceConnectionSetting */
	int *MTU;	/* optional element of type xsd:int */
	class tt__IPv4NetworkInterfaceSetConfiguration *IPv4;	/* optional element of type tt:IPv4NetworkInterfaceSetConfiguration */
	class tt__IPv6NetworkInterfaceSetConfiguration *IPv6;	/* optional element of type tt:IPv6NetworkInterfaceSetConfiguration */
	class tt__NetworkInterfaceSetConfigurationExtension *Extension;	/* optional element of type tt:NetworkInterfaceSetConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 464; } /* = unique type id SOAP_TYPE_tt__NetworkInterfaceSetConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceSetConfiguration() { tt__NetworkInterfaceSetConfiguration::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceSetConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension
#define SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension (465)
/* tt:NetworkInterfaceSetConfigurationExtension */
class SOAP_CMAC tt__NetworkInterfaceSetConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	std::vector<tt__Dot3Configuration * >Dot3;	/* optional element of type tt:Dot3Configuration */
	std::vector<tt__Dot11Configuration * >Dot11;	/* optional element of type tt:Dot11Configuration */
	class tt__NetworkInterfaceSetConfigurationExtension2 *Extension;	/* optional element of type tt:NetworkInterfaceSetConfigurationExtension2 */
public:
	virtual int soap_type() const { return 465; } /* = unique type id SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceSetConfigurationExtension() { tt__NetworkInterfaceSetConfigurationExtension::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceSetConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration (466)
/* tt:IPv6NetworkInterfaceSetConfiguration */
class SOAP_CMAC tt__IPv6NetworkInterfaceSetConfiguration : public xsd__anyType
{
public:
	bool *Enabled;	/* optional element of type xsd:boolean */
	bool *AcceptRouterAdvert;	/* optional element of type xsd:boolean */
	std::vector<tt__PrefixedIPv6Address * >Manual;	/* optional element of type tt:PrefixedIPv6Address */
	enum tt__IPv6DHCPConfiguration *DHCP;	/* optional element of type tt:IPv6DHCPConfiguration */
public:
	virtual int soap_type() const { return 466; } /* = unique type id SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPv6NetworkInterfaceSetConfiguration() { tt__IPv6NetworkInterfaceSetConfiguration::soap_default(NULL); }
	virtual ~tt__IPv6NetworkInterfaceSetConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration (467)
/* tt:IPv4NetworkInterfaceSetConfiguration */
class SOAP_CMAC tt__IPv4NetworkInterfaceSetConfiguration : public xsd__anyType
{
public:
	bool *Enabled;	/* optional element of type xsd:boolean */
	std::vector<tt__PrefixedIPv4Address * >Manual;	/* optional element of type tt:PrefixedIPv4Address */
	bool *DHCP;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 467; } /* = unique type id SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPv4NetworkInterfaceSetConfiguration() { tt__IPv4NetworkInterfaceSetConfiguration::soap_default(NULL); }
	virtual ~tt__IPv4NetworkInterfaceSetConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkGateway
#define SOAP_TYPE_tt__NetworkGateway (468)
/* tt:NetworkGateway */
class SOAP_CMAC tt__NetworkGateway : public xsd__anyType
{
public:
	std::vector<std::string >IPv4Address;	/* optional element of type tt:IPv4Address */
	std::vector<std::string >IPv6Address;	/* optional element of type tt:IPv6Address */
public:
	virtual int soap_type() const { return 468; } /* = unique type id SOAP_TYPE_tt__NetworkGateway */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkGateway() { tt__NetworkGateway::soap_default(NULL); }
	virtual ~tt__NetworkGateway() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkZeroConfiguration
#define SOAP_TYPE_tt__NetworkZeroConfiguration (469)
/* tt:NetworkZeroConfiguration */
class SOAP_CMAC tt__NetworkZeroConfiguration : public xsd__anyType
{
public:
	std::string InterfaceToken;	/* required element of type tt:ReferenceToken */
	bool Enabled;	/* required element of type xsd:boolean */
	std::vector<std::string >Addresses;	/* optional element of type tt:IPv4Address */
	class tt__NetworkZeroConfigurationExtension *Extension;	/* optional element of type tt:NetworkZeroConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 469; } /* = unique type id SOAP_TYPE_tt__NetworkZeroConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkZeroConfiguration() { tt__NetworkZeroConfiguration::soap_default(NULL); }
	virtual ~tt__NetworkZeroConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkZeroConfigurationExtension
#define SOAP_TYPE_tt__NetworkZeroConfigurationExtension (470)
/* tt:NetworkZeroConfigurationExtension */
class SOAP_CMAC tt__NetworkZeroConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	std::vector<tt__NetworkZeroConfiguration * >Additional;	/* optional element of type tt:NetworkZeroConfiguration */
	class tt__NetworkZeroConfigurationExtension2 *Extension;	/* optional element of type tt:NetworkZeroConfigurationExtension2 */
public:
	virtual int soap_type() const { return 470; } /* = unique type id SOAP_TYPE_tt__NetworkZeroConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkZeroConfigurationExtension() { tt__NetworkZeroConfigurationExtension::soap_default(NULL); }
	virtual ~tt__NetworkZeroConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkZeroConfigurationExtension2
#define SOAP_TYPE_tt__NetworkZeroConfigurationExtension2 (471)
/* tt:NetworkZeroConfigurationExtension2 */
class SOAP_CMAC tt__NetworkZeroConfigurationExtension2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 471; } /* = unique type id SOAP_TYPE_tt__NetworkZeroConfigurationExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkZeroConfigurationExtension2() { tt__NetworkZeroConfigurationExtension2::soap_default(NULL); }
	virtual ~tt__NetworkZeroConfigurationExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPAddressFilter
#define SOAP_TYPE_tt__IPAddressFilter (472)
/* tt:IPAddressFilter */
class SOAP_CMAC tt__IPAddressFilter : public xsd__anyType
{
public:
	enum tt__IPAddressFilterType Type;	/* required element of type tt:IPAddressFilterType */
	std::vector<tt__PrefixedIPv4Address * >IPv4Address;	/* optional element of type tt:PrefixedIPv4Address */
	std::vector<tt__PrefixedIPv6Address * >IPv6Address;	/* optional element of type tt:PrefixedIPv6Address */
	class tt__IPAddressFilterExtension *Extension;	/* optional element of type tt:IPAddressFilterExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 472; } /* = unique type id SOAP_TYPE_tt__IPAddressFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPAddressFilter() { tt__IPAddressFilter::soap_default(NULL); }
	virtual ~tt__IPAddressFilter() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPAddressFilterExtension
#define SOAP_TYPE_tt__IPAddressFilterExtension (473)
/* tt:IPAddressFilterExtension */
class SOAP_CMAC tt__IPAddressFilterExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 473; } /* = unique type id SOAP_TYPE_tt__IPAddressFilterExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPAddressFilterExtension() { tt__IPAddressFilterExtension::soap_default(NULL); }
	virtual ~tt__IPAddressFilterExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11Configuration
#define SOAP_TYPE_tt__Dot11Configuration (474)
/* tt:Dot11Configuration */
class SOAP_CMAC tt__Dot11Configuration : public xsd__anyType
{
public:
	xsd__hexBinary SSID;	/* required element of type tt:Dot11SSIDType */
	enum tt__Dot11StationMode Mode;	/* required element of type tt:Dot11StationMode */
	std::string Alias;	/* required element of type tt:Name */
	std::string Priority;	/* required element of type tt:NetworkInterfaceConfigPriority */
	class tt__Dot11SecurityConfiguration *Security;	/* required element of type tt:Dot11SecurityConfiguration */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 474; } /* = unique type id SOAP_TYPE_tt__Dot11Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11Configuration() { tt__Dot11Configuration::soap_default(NULL); }
	virtual ~tt__Dot11Configuration() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11SecurityConfiguration
#define SOAP_TYPE_tt__Dot11SecurityConfiguration (475)
/* tt:Dot11SecurityConfiguration */
class SOAP_CMAC tt__Dot11SecurityConfiguration : public xsd__anyType
{
public:
	enum tt__Dot11SecurityMode Mode;	/* required element of type tt:Dot11SecurityMode */
	enum tt__Dot11Cipher *Algorithm;	/* optional element of type tt:Dot11Cipher */
	class tt__Dot11PSKSet *PSK;	/* optional element of type tt:Dot11PSKSet */
	std::string *Dot1X;	/* optional element of type tt:ReferenceToken */
	class tt__Dot11SecurityConfigurationExtension *Extension;	/* optional element of type tt:Dot11SecurityConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 475; } /* = unique type id SOAP_TYPE_tt__Dot11SecurityConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11SecurityConfiguration() { tt__Dot11SecurityConfiguration::soap_default(NULL); }
	virtual ~tt__Dot11SecurityConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11SecurityConfigurationExtension
#define SOAP_TYPE_tt__Dot11SecurityConfigurationExtension (476)
/* tt:Dot11SecurityConfigurationExtension */
class SOAP_CMAC tt__Dot11SecurityConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 476; } /* = unique type id SOAP_TYPE_tt__Dot11SecurityConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11SecurityConfigurationExtension() { tt__Dot11SecurityConfigurationExtension::soap_default(NULL); }
	virtual ~tt__Dot11SecurityConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11PSKSet
#define SOAP_TYPE_tt__Dot11PSKSet (477)
/* tt:Dot11PSKSet */
class SOAP_CMAC tt__Dot11PSKSet : public xsd__anyType
{
public:
	xsd__hexBinary *Key;	/* optional element of type tt:Dot11PSK */
	std::string *Passphrase;	/* optional element of type tt:Dot11PSKPassphrase */
	class tt__Dot11PSKSetExtension *Extension;	/* optional element of type tt:Dot11PSKSetExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 477; } /* = unique type id SOAP_TYPE_tt__Dot11PSKSet */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11PSKSet() { tt__Dot11PSKSet::soap_default(NULL); }
	virtual ~tt__Dot11PSKSet() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11PSKSetExtension
#define SOAP_TYPE_tt__Dot11PSKSetExtension (478)
/* tt:Dot11PSKSetExtension */
class SOAP_CMAC tt__Dot11PSKSetExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 478; } /* = unique type id SOAP_TYPE_tt__Dot11PSKSetExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11PSKSetExtension() { tt__Dot11PSKSetExtension::soap_default(NULL); }
	virtual ~tt__Dot11PSKSetExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2
#define SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2 (479)
/* tt:NetworkInterfaceSetConfigurationExtension2 */
class SOAP_CMAC tt__NetworkInterfaceSetConfigurationExtension2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 479; } /* = unique type id SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceSetConfigurationExtension2() { tt__NetworkInterfaceSetConfigurationExtension2::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceSetConfigurationExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11Capabilities
#define SOAP_TYPE_tt__Dot11Capabilities (480)
/* tt:Dot11Capabilities */
class SOAP_CMAC tt__Dot11Capabilities : public xsd__anyType
{
public:
	bool TKIP;	/* required element of type xsd:boolean */
	bool ScanAvailableNetworks;	/* required element of type xsd:boolean */
	bool MultipleConfiguration;	/* required element of type xsd:boolean */
	bool AdHocStationMode;	/* required element of type xsd:boolean */
	bool WEP;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 480; } /* = unique type id SOAP_TYPE_tt__Dot11Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11Capabilities() { tt__Dot11Capabilities::soap_default(NULL); }
	virtual ~tt__Dot11Capabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11Status
#define SOAP_TYPE_tt__Dot11Status (481)
/* tt:Dot11Status */
class SOAP_CMAC tt__Dot11Status : public xsd__anyType
{
public:
	xsd__hexBinary SSID;	/* required element of type tt:Dot11SSIDType */
	std::string *BSSID;	/* optional element of type xsd:string */
	enum tt__Dot11Cipher *PairCipher;	/* optional element of type tt:Dot11Cipher */
	enum tt__Dot11Cipher *GroupCipher;	/* optional element of type tt:Dot11Cipher */
	enum tt__Dot11SignalStrength *SignalStrength;	/* optional element of type tt:Dot11SignalStrength */
	std::string ActiveConfigAlias;	/* required element of type tt:ReferenceToken */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 481; } /* = unique type id SOAP_TYPE_tt__Dot11Status */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11Status() { tt__Dot11Status::soap_default(NULL); }
	virtual ~tt__Dot11Status() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11AvailableNetworks
#define SOAP_TYPE_tt__Dot11AvailableNetworks (482)
/* tt:Dot11AvailableNetworks */
class SOAP_CMAC tt__Dot11AvailableNetworks : public xsd__anyType
{
public:
	xsd__hexBinary SSID;	/* required element of type tt:Dot11SSIDType */
	std::string *BSSID;	/* optional element of type xsd:string */
	std::vector<enum tt__Dot11AuthAndMangementSuite >AuthAndMangementSuite;	/* optional element of type tt:Dot11AuthAndMangementSuite */
	std::vector<enum tt__Dot11Cipher >PairCipher;	/* optional element of type tt:Dot11Cipher */
	std::vector<enum tt__Dot11Cipher >GroupCipher;	/* optional element of type tt:Dot11Cipher */
	enum tt__Dot11SignalStrength *SignalStrength;	/* optional element of type tt:Dot11SignalStrength */
	class tt__Dot11AvailableNetworksExtension *Extension;	/* optional element of type tt:Dot11AvailableNetworksExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 482; } /* = unique type id SOAP_TYPE_tt__Dot11AvailableNetworks */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11AvailableNetworks() { tt__Dot11AvailableNetworks::soap_default(NULL); }
	virtual ~tt__Dot11AvailableNetworks() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11AvailableNetworksExtension
#define SOAP_TYPE_tt__Dot11AvailableNetworksExtension (483)
/* tt:Dot11AvailableNetworksExtension */
class SOAP_CMAC tt__Dot11AvailableNetworksExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 483; } /* = unique type id SOAP_TYPE_tt__Dot11AvailableNetworksExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11AvailableNetworksExtension() { tt__Dot11AvailableNetworksExtension::soap_default(NULL); }
	virtual ~tt__Dot11AvailableNetworksExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Capabilities
#define SOAP_TYPE_tt__Capabilities (484)
/* tt:Capabilities */
class SOAP_CMAC tt__Capabilities : public xsd__anyType
{
public:
	class tt__AnalyticsCapabilities *Analytics;	/* optional element of type tt:AnalyticsCapabilities */
	class tt__DeviceCapabilities *Device;	/* optional element of type tt:DeviceCapabilities */
	class tt__EventCapabilities *Events;	/* optional element of type tt:EventCapabilities */
	class tt__ImagingCapabilities *Imaging;	/* optional element of type tt:ImagingCapabilities */
	class tt__MediaCapabilities *Media;	/* optional element of type tt:MediaCapabilities */
	class tt__PTZCapabilities *PTZ;	/* optional element of type tt:PTZCapabilities */
	class tt__CapabilitiesExtension *Extension;	/* optional element of type tt:CapabilitiesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 484; } /* = unique type id SOAP_TYPE_tt__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Capabilities() { tt__Capabilities::soap_default(NULL); }
	virtual ~tt__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__CapabilitiesExtension
#define SOAP_TYPE_tt__CapabilitiesExtension (485)
/* tt:CapabilitiesExtension */
class SOAP_CMAC tt__CapabilitiesExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	class tt__DeviceIOCapabilities *DeviceIO;	/* optional element of type tt:DeviceIOCapabilities */
	class tt__DisplayCapabilities *Display;	/* optional element of type tt:DisplayCapabilities */
	class tt__RecordingCapabilities *Recording;	/* optional element of type tt:RecordingCapabilities */
	class tt__SearchCapabilities *Search;	/* optional element of type tt:SearchCapabilities */
	class tt__ReplayCapabilities *Replay;	/* optional element of type tt:ReplayCapabilities */
	class tt__ReceiverCapabilities *Receiver;	/* optional element of type tt:ReceiverCapabilities */
	class tt__AnalyticsDeviceCapabilities *AnalyticsDevice;	/* optional element of type tt:AnalyticsDeviceCapabilities */
	class tt__CapabilitiesExtension2 *Extensions;	/* optional element of type tt:CapabilitiesExtension2 */
public:
	virtual int soap_type() const { return 485; } /* = unique type id SOAP_TYPE_tt__CapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CapabilitiesExtension() { tt__CapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__CapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__CapabilitiesExtension2
#define SOAP_TYPE_tt__CapabilitiesExtension2 (486)
/* tt:CapabilitiesExtension2 */
class SOAP_CMAC tt__CapabilitiesExtension2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 486; } /* = unique type id SOAP_TYPE_tt__CapabilitiesExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CapabilitiesExtension2() { tt__CapabilitiesExtension2::soap_default(NULL); }
	virtual ~tt__CapabilitiesExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsCapabilities
#define SOAP_TYPE_tt__AnalyticsCapabilities (487)
/* tt:AnalyticsCapabilities */
class SOAP_CMAC tt__AnalyticsCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	bool RuleSupport;	/* required element of type xsd:boolean */
	bool AnalyticsModuleSupport;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 487; } /* = unique type id SOAP_TYPE_tt__AnalyticsCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsCapabilities() { tt__AnalyticsCapabilities::soap_default(NULL); }
	virtual ~tt__AnalyticsCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__DeviceCapabilities
#define SOAP_TYPE_tt__DeviceCapabilities (488)
/* tt:DeviceCapabilities */
class SOAP_CMAC tt__DeviceCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	class tt__NetworkCapabilities *Network;	/* optional element of type tt:NetworkCapabilities */
	class tt__SystemCapabilities *System;	/* optional element of type tt:SystemCapabilities */
	class tt__IOCapabilities *IO;	/* optional element of type tt:IOCapabilities */
	class tt__SecurityCapabilities *Security;	/* optional element of type tt:SecurityCapabilities */
	class tt__DeviceCapabilitiesExtension *Extension;	/* optional element of type tt:DeviceCapabilitiesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 488; } /* = unique type id SOAP_TYPE_tt__DeviceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DeviceCapabilities() { tt__DeviceCapabilities::soap_default(NULL); }
	virtual ~tt__DeviceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__DeviceCapabilitiesExtension
#define SOAP_TYPE_tt__DeviceCapabilitiesExtension (489)
/* tt:DeviceCapabilitiesExtension */
class SOAP_CMAC tt__DeviceCapabilitiesExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 489; } /* = unique type id SOAP_TYPE_tt__DeviceCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DeviceCapabilitiesExtension() { tt__DeviceCapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__DeviceCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__EventCapabilities
#define SOAP_TYPE_tt__EventCapabilities (490)
/* tt:EventCapabilities */
class SOAP_CMAC tt__EventCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	bool WSSubscriptionPolicySupport;	/* required element of type xsd:boolean */
	bool WSPullPointSupport;	/* required element of type xsd:boolean */
	bool WSPausableSubscriptionManagerInterfaceSupport;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 490; } /* = unique type id SOAP_TYPE_tt__EventCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EventCapabilities() { tt__EventCapabilities::soap_default(NULL); }
	virtual ~tt__EventCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__IOCapabilities
#define SOAP_TYPE_tt__IOCapabilities (491)
/* tt:IOCapabilities */
class SOAP_CMAC tt__IOCapabilities : public xsd__anyType
{
public:
	int *InputConnectors;	/* optional element of type xsd:int */
	int *RelayOutputs;	/* optional element of type xsd:int */
	class tt__IOCapabilitiesExtension *Extension;	/* optional element of type tt:IOCapabilitiesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 491; } /* = unique type id SOAP_TYPE_tt__IOCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IOCapabilities() { tt__IOCapabilities::soap_default(NULL); }
	virtual ~tt__IOCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__IOCapabilitiesExtension
#define SOAP_TYPE_tt__IOCapabilitiesExtension (492)
/* tt:IOCapabilitiesExtension */
class SOAP_CMAC tt__IOCapabilitiesExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	bool *Auxiliary;	/* optional element of type xsd:boolean */
	std::vector<std::string >AuxiliaryCommands;	/* optional element of type tt:AuxiliaryData */
	class tt__IOCapabilitiesExtension2 *Extension;	/* required element of type tt:IOCapabilitiesExtension2 */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 492; } /* = unique type id SOAP_TYPE_tt__IOCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IOCapabilitiesExtension() { tt__IOCapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__IOCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__IOCapabilitiesExtension2
#define SOAP_TYPE_tt__IOCapabilitiesExtension2 (493)
/* tt:IOCapabilitiesExtension2 */
class SOAP_CMAC tt__IOCapabilitiesExtension2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 493; } /* = unique type id SOAP_TYPE_tt__IOCapabilitiesExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IOCapabilitiesExtension2() { tt__IOCapabilitiesExtension2::soap_default(NULL); }
	virtual ~tt__IOCapabilitiesExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__MediaCapabilities
#define SOAP_TYPE_tt__MediaCapabilities (494)
/* tt:MediaCapabilities */
class SOAP_CMAC tt__MediaCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	class tt__RealTimeStreamingCapabilities *StreamingCapabilities;	/* required element of type tt:RealTimeStreamingCapabilities */
	std::vector<char * >__any;
	class tt__MediaCapabilitiesExtension *Extension;	/* optional element of type tt:MediaCapabilitiesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 494; } /* = unique type id SOAP_TYPE_tt__MediaCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MediaCapabilities() { tt__MediaCapabilities::soap_default(NULL); }
	virtual ~tt__MediaCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__MediaCapabilitiesExtension
#define SOAP_TYPE_tt__MediaCapabilitiesExtension (495)
/* tt:MediaCapabilitiesExtension */
class SOAP_CMAC tt__MediaCapabilitiesExtension : public xsd__anyType
{
public:
	class tt__ProfileCapabilities *ProfileCapabilities;	/* required element of type tt:ProfileCapabilities */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 495; } /* = unique type id SOAP_TYPE_tt__MediaCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MediaCapabilitiesExtension() { tt__MediaCapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__MediaCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__RealTimeStreamingCapabilities
#define SOAP_TYPE_tt__RealTimeStreamingCapabilities (496)
/* tt:RealTimeStreamingCapabilities */
class SOAP_CMAC tt__RealTimeStreamingCapabilities : public xsd__anyType
{
public:
	bool *RTPMulticast;	/* optional element of type xsd:boolean */
	bool *RTP_USCORETCP;	/* optional element of type xsd:boolean */
	bool *RTP_USCORERTSP_USCORETCP;	/* optional element of type xsd:boolean */
	class tt__RealTimeStreamingCapabilitiesExtension *Extension;	/* optional element of type tt:RealTimeStreamingCapabilitiesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 496; } /* = unique type id SOAP_TYPE_tt__RealTimeStreamingCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RealTimeStreamingCapabilities() { tt__RealTimeStreamingCapabilities::soap_default(NULL); }
	virtual ~tt__RealTimeStreamingCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension
#define SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension (497)
/* tt:RealTimeStreamingCapabilitiesExtension */
class SOAP_CMAC tt__RealTimeStreamingCapabilitiesExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 497; } /* = unique type id SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RealTimeStreamingCapabilitiesExtension() { tt__RealTimeStreamingCapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__RealTimeStreamingCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ProfileCapabilities
#define SOAP_TYPE_tt__ProfileCapabilities (498)
/* tt:ProfileCapabilities */
class SOAP_CMAC tt__ProfileCapabilities : public xsd__anyType
{
public:
	int MaximumNumberOfProfiles;	/* required element of type xsd:int */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 498; } /* = unique type id SOAP_TYPE_tt__ProfileCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ProfileCapabilities() { tt__ProfileCapabilities::soap_default(NULL); }
	virtual ~tt__ProfileCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkCapabilities
#define SOAP_TYPE_tt__NetworkCapabilities (499)
/* tt:NetworkCapabilities */
class SOAP_CMAC tt__NetworkCapabilities : public xsd__anyType
{
public:
	bool *IPFilter;	/* optional element of type xsd:boolean */
	bool *ZeroConfiguration;	/* optional element of type xsd:boolean */
	bool *IPVersion6;	/* optional element of type xsd:boolean */
	bool *DynDNS;	/* optional element of type xsd:boolean */
	class tt__NetworkCapabilitiesExtension *Extension;	/* optional element of type tt:NetworkCapabilitiesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 499; } /* = unique type id SOAP_TYPE_tt__NetworkCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkCapabilities() { tt__NetworkCapabilities::soap_default(NULL); }
	virtual ~tt__NetworkCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkCapabilitiesExtension
#define SOAP_TYPE_tt__NetworkCapabilitiesExtension (500)
/* tt:NetworkCapabilitiesExtension */
class SOAP_CMAC tt__NetworkCapabilitiesExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	bool *Dot11Configuration;	/* optional element of type xsd:boolean */
	class tt__NetworkCapabilitiesExtension2 *Extension;	/* optional element of type tt:NetworkCapabilitiesExtension2 */
public:
	virtual int soap_type() const { return 500; } /* = unique type id SOAP_TYPE_tt__NetworkCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkCapabilitiesExtension() { tt__NetworkCapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__NetworkCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkCapabilitiesExtension2
#define SOAP_TYPE_tt__NetworkCapabilitiesExtension2 (501)
/* tt:NetworkCapabilitiesExtension2 */
class SOAP_CMAC tt__NetworkCapabilitiesExtension2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 501; } /* = unique type id SOAP_TYPE_tt__NetworkCapabilitiesExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkCapabilitiesExtension2() { tt__NetworkCapabilitiesExtension2::soap_default(NULL); }
	virtual ~tt__NetworkCapabilitiesExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__SecurityCapabilities
#define SOAP_TYPE_tt__SecurityCapabilities (502)
/* tt:SecurityCapabilities */
class SOAP_CMAC tt__SecurityCapabilities : public xsd__anyType
{
public:
	bool TLS1_x002e1;	/* required element of type xsd:boolean */
	bool TLS1_x002e2;	/* required element of type xsd:boolean */
	bool OnboardKeyGeneration;	/* required element of type xsd:boolean */
	bool AccessPolicyConfig;	/* required element of type xsd:boolean */
	bool X_x002e509Token;	/* required element of type xsd:boolean */
	bool SAMLToken;	/* required element of type xsd:boolean */
	bool KerberosToken;	/* required element of type xsd:boolean */
	bool RELToken;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	class tt__SecurityCapabilitiesExtension *Extension;	/* optional element of type tt:SecurityCapabilitiesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 502; } /* = unique type id SOAP_TYPE_tt__SecurityCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SecurityCapabilities() { tt__SecurityCapabilities::soap_default(NULL); }
	virtual ~tt__SecurityCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__SecurityCapabilitiesExtension
#define SOAP_TYPE_tt__SecurityCapabilitiesExtension (503)
/* tt:SecurityCapabilitiesExtension */
class SOAP_CMAC tt__SecurityCapabilitiesExtension : public xsd__anyType
{
public:
	bool TLS1_x002e0;	/* required element of type xsd:boolean */
	class tt__SecurityCapabilitiesExtension2 *Extension;	/* optional element of type tt:SecurityCapabilitiesExtension2 */
public:
	virtual int soap_type() const { return 503; } /* = unique type id SOAP_TYPE_tt__SecurityCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SecurityCapabilitiesExtension() { tt__SecurityCapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__SecurityCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__SecurityCapabilitiesExtension2
#define SOAP_TYPE_tt__SecurityCapabilitiesExtension2 (504)
/* tt:SecurityCapabilitiesExtension2 */
class SOAP_CMAC tt__SecurityCapabilitiesExtension2 : public xsd__anyType
{
public:
	bool Dot1X;	/* required element of type xsd:boolean */
	std::vector<int >SupportedEAPMethod;	/* optional element of type xsd:int */
	bool RemoteUserHandling;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 504; } /* = unique type id SOAP_TYPE_tt__SecurityCapabilitiesExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SecurityCapabilitiesExtension2() { tt__SecurityCapabilitiesExtension2::soap_default(NULL); }
	virtual ~tt__SecurityCapabilitiesExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemCapabilities
#define SOAP_TYPE_tt__SystemCapabilities (505)
/* tt:SystemCapabilities */
class SOAP_CMAC tt__SystemCapabilities : public xsd__anyType
{
public:
	bool DiscoveryResolve;	/* required element of type xsd:boolean */
	bool DiscoveryBye;	/* required element of type xsd:boolean */
	bool RemoteDiscovery;	/* required element of type xsd:boolean */
	bool SystemBackup;	/* required element of type xsd:boolean */
	bool SystemLogging;	/* required element of type xsd:boolean */
	bool FirmwareUpgrade;	/* required element of type xsd:boolean */
	std::vector<class tt__OnvifVersion * >SupportedVersions;	/* required element of type tt:OnvifVersion */
	class tt__SystemCapabilitiesExtension *Extension;	/* optional element of type tt:SystemCapabilitiesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 505; } /* = unique type id SOAP_TYPE_tt__SystemCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemCapabilities() { tt__SystemCapabilities::soap_default(NULL); }
	virtual ~tt__SystemCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemCapabilitiesExtension
#define SOAP_TYPE_tt__SystemCapabilitiesExtension (506)
/* tt:SystemCapabilitiesExtension */
class SOAP_CMAC tt__SystemCapabilitiesExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	bool *HttpFirmwareUpgrade;	/* optional element of type xsd:boolean */
	bool *HttpSystemBackup;	/* optional element of type xsd:boolean */
	bool *HttpSystemLogging;	/* optional element of type xsd:boolean */
	bool *HttpSupportInformation;	/* optional element of type xsd:boolean */
	class tt__SystemCapabilitiesExtension2 *Extension;	/* optional element of type tt:SystemCapabilitiesExtension2 */
public:
	virtual int soap_type() const { return 506; } /* = unique type id SOAP_TYPE_tt__SystemCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemCapabilitiesExtension() { tt__SystemCapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__SystemCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemCapabilitiesExtension2
#define SOAP_TYPE_tt__SystemCapabilitiesExtension2 (507)
/* tt:SystemCapabilitiesExtension2 */
class SOAP_CMAC tt__SystemCapabilitiesExtension2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 507; } /* = unique type id SOAP_TYPE_tt__SystemCapabilitiesExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemCapabilitiesExtension2() { tt__SystemCapabilitiesExtension2::soap_default(NULL); }
	virtual ~tt__SystemCapabilitiesExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__OnvifVersion
#define SOAP_TYPE_tt__OnvifVersion (508)
/* tt:OnvifVersion */
class SOAP_CMAC tt__OnvifVersion : public xsd__anyType
{
public:
	int Major;	/* required element of type xsd:int */
	int Minor;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 508; } /* = unique type id SOAP_TYPE_tt__OnvifVersion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OnvifVersion() { tt__OnvifVersion::soap_default(NULL); }
	virtual ~tt__OnvifVersion() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingCapabilities
#define SOAP_TYPE_tt__ImagingCapabilities (509)
/* tt:ImagingCapabilities */
class SOAP_CMAC tt__ImagingCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 509; } /* = unique type id SOAP_TYPE_tt__ImagingCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingCapabilities() { tt__ImagingCapabilities::soap_default(NULL); }
	virtual ~tt__ImagingCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZCapabilities
#define SOAP_TYPE_tt__PTZCapabilities (510)
/* tt:PTZCapabilities */
class SOAP_CMAC tt__PTZCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 510; } /* = unique type id SOAP_TYPE_tt__PTZCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZCapabilities() { tt__PTZCapabilities::soap_default(NULL); }
	virtual ~tt__PTZCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__DeviceIOCapabilities
#define SOAP_TYPE_tt__DeviceIOCapabilities (511)
/* tt:DeviceIOCapabilities */
class SOAP_CMAC tt__DeviceIOCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	int VideoSources;	/* required element of type xsd:int */
	int VideoOutputs;	/* required element of type xsd:int */
	int AudioSources;	/* required element of type xsd:int */
	int AudioOutputs;	/* required element of type xsd:int */
	int RelayOutputs;	/* required element of type xsd:int */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 511; } /* = unique type id SOAP_TYPE_tt__DeviceIOCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DeviceIOCapabilities() { tt__DeviceIOCapabilities::soap_default(NULL); }
	virtual ~tt__DeviceIOCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__DisplayCapabilities
#define SOAP_TYPE_tt__DisplayCapabilities (512)
/* tt:DisplayCapabilities */
class SOAP_CMAC tt__DisplayCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	bool FixedLayout;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 512; } /* = unique type id SOAP_TYPE_tt__DisplayCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DisplayCapabilities() { tt__DisplayCapabilities::soap_default(NULL); }
	virtual ~tt__DisplayCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingCapabilities
#define SOAP_TYPE_tt__RecordingCapabilities (513)
/* tt:RecordingCapabilities */
class SOAP_CMAC tt__RecordingCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	bool ReceiverSource;	/* required element of type xsd:boolean */
	bool MediaProfileSource;	/* required element of type xsd:boolean */
	bool DynamicRecordings;	/* required element of type xsd:boolean */
	bool DynamicTracks;	/* required element of type xsd:boolean */
	int MaxStringLength;	/* required element of type xsd:int */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 513; } /* = unique type id SOAP_TYPE_tt__RecordingCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingCapabilities() { tt__RecordingCapabilities::soap_default(NULL); }
	virtual ~tt__RecordingCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__SearchCapabilities
#define SOAP_TYPE_tt__SearchCapabilities (514)
/* tt:SearchCapabilities */
class SOAP_CMAC tt__SearchCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	bool MetadataSearch;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 514; } /* = unique type id SOAP_TYPE_tt__SearchCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SearchCapabilities() { tt__SearchCapabilities::soap_default(NULL); }
	virtual ~tt__SearchCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReplayCapabilities
#define SOAP_TYPE_tt__ReplayCapabilities (515)
/* tt:ReplayCapabilities */
class SOAP_CMAC tt__ReplayCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 515; } /* = unique type id SOAP_TYPE_tt__ReplayCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReplayCapabilities() { tt__ReplayCapabilities::soap_default(NULL); }
	virtual ~tt__ReplayCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReceiverCapabilities
#define SOAP_TYPE_tt__ReceiverCapabilities (516)
/* tt:ReceiverCapabilities */
class SOAP_CMAC tt__ReceiverCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	bool RTP_USCOREMulticast;	/* required element of type xsd:boolean */
	bool RTP_USCORETCP;	/* required element of type xsd:boolean */
	bool RTP_USCORERTSP_USCORETCP;	/* required element of type xsd:boolean */
	int SupportedReceivers;	/* required element of type xsd:int */
	int MaximumRTSPURILength;	/* required element of type xsd:int */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 516; } /* = unique type id SOAP_TYPE_tt__ReceiverCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReceiverCapabilities() { tt__ReceiverCapabilities::soap_default(NULL); }
	virtual ~tt__ReceiverCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsDeviceCapabilities
#define SOAP_TYPE_tt__AnalyticsDeviceCapabilities (517)
/* tt:AnalyticsDeviceCapabilities */
class SOAP_CMAC tt__AnalyticsDeviceCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	bool *RuleSupport;	/* optional element of type xsd:boolean */
	class tt__AnalyticsDeviceExtension *Extension;	/* optional element of type tt:AnalyticsDeviceExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 517; } /* = unique type id SOAP_TYPE_tt__AnalyticsDeviceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsDeviceCapabilities() { tt__AnalyticsDeviceCapabilities::soap_default(NULL); }
	virtual ~tt__AnalyticsDeviceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsDeviceExtension
#define SOAP_TYPE_tt__AnalyticsDeviceExtension (518)
/* tt:AnalyticsDeviceExtension */
class SOAP_CMAC tt__AnalyticsDeviceExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 518; } /* = unique type id SOAP_TYPE_tt__AnalyticsDeviceExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsDeviceExtension() { tt__AnalyticsDeviceExtension::soap_default(NULL); }
	virtual ~tt__AnalyticsDeviceExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemLog
#define SOAP_TYPE_tt__SystemLog (519)
/* tt:SystemLog */
class SOAP_CMAC tt__SystemLog : public xsd__anyType
{
public:
	class tt__AttachmentData *Binary;	/* optional element of type tt:AttachmentData */
	std::string *String;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 519; } /* = unique type id SOAP_TYPE_tt__SystemLog */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemLog() { tt__SystemLog::soap_default(NULL); }
	virtual ~tt__SystemLog() { }
};
#endif

#ifndef SOAP_TYPE_tt__SupportInformation
#define SOAP_TYPE_tt__SupportInformation (520)
/* tt:SupportInformation */
class SOAP_CMAC tt__SupportInformation : public xsd__anyType
{
public:
	tt__AttachmentData *Binary;	/* optional element of type tt:AttachmentData */
	std::string *String;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 520; } /* = unique type id SOAP_TYPE_tt__SupportInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SupportInformation() { tt__SupportInformation::soap_default(NULL); }
	virtual ~tt__SupportInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__BinaryData
#define SOAP_TYPE_tt__BinaryData (521)
/* tt:BinaryData */
class SOAP_CMAC tt__BinaryData : public xsd__anyType
{
public:
	xsd__base64Binary Data;	/* required element of type xsd:base64Binary */
	char *xmime__contentType;	/* optional attribute */
public:
	virtual int soap_type() const { return 521; } /* = unique type id SOAP_TYPE_tt__BinaryData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__BinaryData() { tt__BinaryData::soap_default(NULL); }
	virtual ~tt__BinaryData() { }
};
#endif

#ifndef SOAP_TYPE_tt__AttachmentData
#define SOAP_TYPE_tt__AttachmentData (522)
/* tt:AttachmentData */
class SOAP_CMAC tt__AttachmentData : public xsd__anyType
{
public:
	struct _xop__Include xop__Include;	/* required element of type xop:Include */
	char *xmime__contentType;	/* optional attribute */
public:
	virtual int soap_type() const { return 522; } /* = unique type id SOAP_TYPE_tt__AttachmentData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AttachmentData() { tt__AttachmentData::soap_default(NULL); }
	virtual ~tt__AttachmentData() { }
};
#endif

#ifndef SOAP_TYPE_tt__BackupFile
#define SOAP_TYPE_tt__BackupFile (523)
/* tt:BackupFile */
class SOAP_CMAC tt__BackupFile : public xsd__anyType
{
public:
	std::string Name;	/* required element of type xsd:string */
	tt__AttachmentData *Data;	/* required element of type tt:AttachmentData */
public:
	virtual int soap_type() const { return 523; } /* = unique type id SOAP_TYPE_tt__BackupFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__BackupFile() { tt__BackupFile::soap_default(NULL); }
	virtual ~tt__BackupFile() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemLogUriList
#define SOAP_TYPE_tt__SystemLogUriList (524)
/* tt:SystemLogUriList */
class SOAP_CMAC tt__SystemLogUriList : public xsd__anyType
{
public:
	std::vector<class tt__SystemLogUri * >SystemLog;	/* optional element of type tt:SystemLogUri */
public:
	virtual int soap_type() const { return 524; } /* = unique type id SOAP_TYPE_tt__SystemLogUriList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemLogUriList() { tt__SystemLogUriList::soap_default(NULL); }
	virtual ~tt__SystemLogUriList() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemLogUri
#define SOAP_TYPE_tt__SystemLogUri (525)
/* tt:SystemLogUri */
class SOAP_CMAC tt__SystemLogUri : public xsd__anyType
{
public:
	enum tt__SystemLogType Type;	/* required element of type tt:SystemLogType */
	std::string Uri;	/* required element of type xsd:anyURI */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 525; } /* = unique type id SOAP_TYPE_tt__SystemLogUri */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemLogUri() { tt__SystemLogUri::soap_default(NULL); }
	virtual ~tt__SystemLogUri() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemDateTime
#define SOAP_TYPE_tt__SystemDateTime (526)
/* tt:SystemDateTime */
class SOAP_CMAC tt__SystemDateTime : public xsd__anyType
{
public:
	enum tt__SetDateTimeType DateTimeType;	/* required element of type tt:SetDateTimeType */
	bool DaylightSavings;	/* required element of type xsd:boolean */
	class tt__TimeZone *TimeZone;	/* optional element of type tt:TimeZone */
	class tt__DateTime *UTCDateTime;	/* optional element of type tt:DateTime */
	tt__DateTime *LocalDateTime;	/* optional element of type tt:DateTime */
	class tt__SystemDateTimeExtension *Extension;	/* optional element of type tt:SystemDateTimeExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 526; } /* = unique type id SOAP_TYPE_tt__SystemDateTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemDateTime() { tt__SystemDateTime::soap_default(NULL); }
	virtual ~tt__SystemDateTime() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemDateTimeExtension
#define SOAP_TYPE_tt__SystemDateTimeExtension (527)
/* tt:SystemDateTimeExtension */
class SOAP_CMAC tt__SystemDateTimeExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 527; } /* = unique type id SOAP_TYPE_tt__SystemDateTimeExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemDateTimeExtension() { tt__SystemDateTimeExtension::soap_default(NULL); }
	virtual ~tt__SystemDateTimeExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__DateTime
#define SOAP_TYPE_tt__DateTime (528)
/* tt:DateTime */
class SOAP_CMAC tt__DateTime : public xsd__anyType
{
public:
	class tt__Time *Time;	/* required element of type tt:Time */
	class tt__Date *Date;	/* required element of type tt:Date */
public:
	virtual int soap_type() const { return 528; } /* = unique type id SOAP_TYPE_tt__DateTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DateTime() { tt__DateTime::soap_default(NULL); }
	virtual ~tt__DateTime() { }
};
#endif

#ifndef SOAP_TYPE_tt__Date
#define SOAP_TYPE_tt__Date (529)
/* tt:Date */
class SOAP_CMAC tt__Date : public xsd__anyType
{
public:
	int Year;	/* required element of type xsd:int */
	int Month;	/* required element of type xsd:int */
	int Day;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 529; } /* = unique type id SOAP_TYPE_tt__Date */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Date() { tt__Date::soap_default(NULL); }
	virtual ~tt__Date() { }
};
#endif

#ifndef SOAP_TYPE_tt__Time
#define SOAP_TYPE_tt__Time (530)
/* tt:Time */
class SOAP_CMAC tt__Time : public xsd__anyType
{
public:
	int Hour;	/* required element of type xsd:int */
	int Minute;	/* required element of type xsd:int */
	int Second;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 530; } /* = unique type id SOAP_TYPE_tt__Time */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Time() { tt__Time::soap_default(NULL); }
	virtual ~tt__Time() { }
};
#endif

#ifndef SOAP_TYPE_tt__TimeZone
#define SOAP_TYPE_tt__TimeZone (531)
/* tt:TimeZone */
class SOAP_CMAC tt__TimeZone : public xsd__anyType
{
public:
	std::string TZ;	/* required element of type xsd:token */
public:
	virtual int soap_type() const { return 531; } /* = unique type id SOAP_TYPE_tt__TimeZone */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TimeZone() { tt__TimeZone::soap_default(NULL); }
	virtual ~tt__TimeZone() { }
};
#endif

#ifndef SOAP_TYPE_tt__RemoteUser
#define SOAP_TYPE_tt__RemoteUser (532)
/* tt:RemoteUser */
class SOAP_CMAC tt__RemoteUser : public xsd__anyType
{
public:
	std::string Username;	/* required element of type xsd:string */
	std::string *Password;	/* optional element of type xsd:string */
	bool UseDerivedPassword;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 532; } /* = unique type id SOAP_TYPE_tt__RemoteUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RemoteUser() { tt__RemoteUser::soap_default(NULL); }
	virtual ~tt__RemoteUser() { }
};
#endif

#ifndef SOAP_TYPE_tt__User
#define SOAP_TYPE_tt__User (533)
/* tt:User */
class SOAP_CMAC tt__User : public xsd__anyType
{
public:
	std::string Username;	/* required element of type xsd:string */
	std::string *Password;	/* optional element of type xsd:string */
	enum tt__UserLevel UserLevel;	/* required element of type tt:UserLevel */
	class tt__UserExtension *Extension;	/* optional element of type tt:UserExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 533; } /* = unique type id SOAP_TYPE_tt__User */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__User() { tt__User::soap_default(NULL); }
	virtual ~tt__User() { }
};
#endif

#ifndef SOAP_TYPE_tt__UserExtension
#define SOAP_TYPE_tt__UserExtension (534)
/* tt:UserExtension */
class SOAP_CMAC tt__UserExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 534; } /* = unique type id SOAP_TYPE_tt__UserExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__UserExtension() { tt__UserExtension::soap_default(NULL); }
	virtual ~tt__UserExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__CertificateGenerationParameters
#define SOAP_TYPE_tt__CertificateGenerationParameters (535)
/* tt:CertificateGenerationParameters */
class SOAP_CMAC tt__CertificateGenerationParameters : public xsd__anyType
{
public:
	std::string *CertificateID;	/* optional element of type xsd:token */
	std::string *Subject;	/* optional element of type xsd:string */
	std::string *ValidNotBefore;	/* optional element of type xsd:token */
	std::string *ValidNotAfter;	/* optional element of type xsd:token */
	class tt__CertificateGenerationParametersExtension *Extension;	/* optional element of type tt:CertificateGenerationParametersExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 535; } /* = unique type id SOAP_TYPE_tt__CertificateGenerationParameters */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CertificateGenerationParameters() { tt__CertificateGenerationParameters::soap_default(NULL); }
	virtual ~tt__CertificateGenerationParameters() { }
};
#endif

#ifndef SOAP_TYPE_tt__CertificateGenerationParametersExtension
#define SOAP_TYPE_tt__CertificateGenerationParametersExtension (536)
/* tt:CertificateGenerationParametersExtension */
class SOAP_CMAC tt__CertificateGenerationParametersExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 536; } /* = unique type id SOAP_TYPE_tt__CertificateGenerationParametersExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CertificateGenerationParametersExtension() { tt__CertificateGenerationParametersExtension::soap_default(NULL); }
	virtual ~tt__CertificateGenerationParametersExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Certificate
#define SOAP_TYPE_tt__Certificate (537)
/* tt:Certificate */
class SOAP_CMAC tt__Certificate : public xsd__anyType
{
public:
	std::string CertificateID;	/* required element of type xsd:token */
	tt__BinaryData *Certificate;	/* required element of type tt:BinaryData */
public:
	virtual int soap_type() const { return 537; } /* = unique type id SOAP_TYPE_tt__Certificate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Certificate() { tt__Certificate::soap_default(NULL); }
	virtual ~tt__Certificate() { }
};
#endif

#ifndef SOAP_TYPE_tt__CertificateStatus
#define SOAP_TYPE_tt__CertificateStatus (538)
/* tt:CertificateStatus */
class SOAP_CMAC tt__CertificateStatus : public xsd__anyType
{
public:
	std::string CertificateID;	/* required element of type xsd:token */
	bool Status;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 538; } /* = unique type id SOAP_TYPE_tt__CertificateStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CertificateStatus() { tt__CertificateStatus::soap_default(NULL); }
	virtual ~tt__CertificateStatus() { }
};
#endif

#ifndef SOAP_TYPE_tt__CertificateWithPrivateKey
#define SOAP_TYPE_tt__CertificateWithPrivateKey (539)
/* tt:CertificateWithPrivateKey */
class SOAP_CMAC tt__CertificateWithPrivateKey : public xsd__anyType
{
public:
	std::string *CertificateID;	/* optional element of type xsd:token */
	tt__BinaryData *Certificate;	/* required element of type tt:BinaryData */
	tt__BinaryData *PrivateKey;	/* required element of type tt:BinaryData */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 539; } /* = unique type id SOAP_TYPE_tt__CertificateWithPrivateKey */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CertificateWithPrivateKey() { tt__CertificateWithPrivateKey::soap_default(NULL); }
	virtual ~tt__CertificateWithPrivateKey() { }
};
#endif

#ifndef SOAP_TYPE_tt__CertificateInformation
#define SOAP_TYPE_tt__CertificateInformation (540)
/* tt:CertificateInformation */
class SOAP_CMAC tt__CertificateInformation : public xsd__anyType
{
public:
	std::string CertificateID;	/* required element of type xsd:token */
	std::string *IssuerDN;	/* optional element of type xsd:string */
	std::string *SubjectDN;	/* optional element of type xsd:string */
	class tt__CertificateUsage *KeyUsage;	/* optional element of type tt:CertificateUsage */
	tt__CertificateUsage *ExtendedKeyUsage;	/* optional element of type tt:CertificateUsage */
	int *KeyLength;	/* optional element of type xsd:int */
	std::string *Version;	/* optional element of type xsd:string */
	std::string *SerialNum;	/* optional element of type xsd:string */
	std::string *SignatureAlgorithm;	/* optional element of type xsd:string */
	class tt__DateTimeRange *Validity;	/* optional element of type tt:DateTimeRange */
	class tt__CertificateInformationExtension *Extension;	/* optional element of type tt:CertificateInformationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 540; } /* = unique type id SOAP_TYPE_tt__CertificateInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CertificateInformation() { tt__CertificateInformation::soap_default(NULL); }
	virtual ~tt__CertificateInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__CertificateInformationExtension
#define SOAP_TYPE_tt__CertificateInformationExtension (542)
/* tt:CertificateInformationExtension */
class SOAP_CMAC tt__CertificateInformationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 542; } /* = unique type id SOAP_TYPE_tt__CertificateInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CertificateInformationExtension() { tt__CertificateInformationExtension::soap_default(NULL); }
	virtual ~tt__CertificateInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot1XConfiguration
#define SOAP_TYPE_tt__Dot1XConfiguration (543)
/* tt:Dot1XConfiguration */
class SOAP_CMAC tt__Dot1XConfiguration : public xsd__anyType
{
public:
	std::string Dot1XConfigurationToken;	/* required element of type tt:ReferenceToken */
	std::string Identity;	/* required element of type xsd:string */
	std::string *AnonymousID;	/* optional element of type xsd:string */
	int EAPMethod;	/* required element of type xsd:int */
	std::vector<std::string >CACertificateID;	/* optional element of type xsd:token */
	class tt__EAPMethodConfiguration *EAPMethodConfiguration;	/* optional element of type tt:EAPMethodConfiguration */
	class tt__Dot1XConfigurationExtension *Extension;	/* optional element of type tt:Dot1XConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 543; } /* = unique type id SOAP_TYPE_tt__Dot1XConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot1XConfiguration() { tt__Dot1XConfiguration::soap_default(NULL); }
	virtual ~tt__Dot1XConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot1XConfigurationExtension
#define SOAP_TYPE_tt__Dot1XConfigurationExtension (544)
/* tt:Dot1XConfigurationExtension */
class SOAP_CMAC tt__Dot1XConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 544; } /* = unique type id SOAP_TYPE_tt__Dot1XConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot1XConfigurationExtension() { tt__Dot1XConfigurationExtension::soap_default(NULL); }
	virtual ~tt__Dot1XConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__EAPMethodConfiguration
#define SOAP_TYPE_tt__EAPMethodConfiguration (545)
/* tt:EAPMethodConfiguration */
class SOAP_CMAC tt__EAPMethodConfiguration : public xsd__anyType
{
public:
	class tt__TLSConfiguration *TLSConfiguration;	/* optional element of type tt:TLSConfiguration */
	std::string *Password;	/* optional element of type xsd:string */
	class tt__EapMethodExtension *Extension;	/* optional element of type tt:EapMethodExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 545; } /* = unique type id SOAP_TYPE_tt__EAPMethodConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EAPMethodConfiguration() { tt__EAPMethodConfiguration::soap_default(NULL); }
	virtual ~tt__EAPMethodConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__EapMethodExtension
#define SOAP_TYPE_tt__EapMethodExtension (546)
/* tt:EapMethodExtension */
class SOAP_CMAC tt__EapMethodExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 546; } /* = unique type id SOAP_TYPE_tt__EapMethodExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EapMethodExtension() { tt__EapMethodExtension::soap_default(NULL); }
	virtual ~tt__EapMethodExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__TLSConfiguration
#define SOAP_TYPE_tt__TLSConfiguration (547)
/* tt:TLSConfiguration */
class SOAP_CMAC tt__TLSConfiguration : public xsd__anyType
{
public:
	std::string CertificateID;	/* required element of type xsd:token */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 547; } /* = unique type id SOAP_TYPE_tt__TLSConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TLSConfiguration() { tt__TLSConfiguration::soap_default(NULL); }
	virtual ~tt__TLSConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__GenericEapPwdConfigurationExtension
#define SOAP_TYPE_tt__GenericEapPwdConfigurationExtension (548)
/* tt:GenericEapPwdConfigurationExtension */
class SOAP_CMAC tt__GenericEapPwdConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 548; } /* = unique type id SOAP_TYPE_tt__GenericEapPwdConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__GenericEapPwdConfigurationExtension() { tt__GenericEapPwdConfigurationExtension::soap_default(NULL); }
	virtual ~tt__GenericEapPwdConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__RelayOutputSettings
#define SOAP_TYPE_tt__RelayOutputSettings (549)
/* tt:RelayOutputSettings */
class SOAP_CMAC tt__RelayOutputSettings : public xsd__anyType
{
public:
	enum tt__RelayMode Mode;	/* required element of type tt:RelayMode */
	LONG64 DelayTime;	/* external */
	enum tt__RelayIdleState IdleState;	/* required element of type tt:RelayIdleState */
public:
	virtual int soap_type() const { return 549; } /* = unique type id SOAP_TYPE_tt__RelayOutputSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RelayOutputSettings() { tt__RelayOutputSettings::soap_default(NULL); }
	virtual ~tt__RelayOutputSettings() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZNodeExtension
#define SOAP_TYPE_tt__PTZNodeExtension (553)
/* tt:PTZNodeExtension */
class SOAP_CMAC tt__PTZNodeExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	class tt__PTZPresetTourSupported *SupportedPresetTour;	/* optional element of type tt:PTZPresetTourSupported */
	class tt__PTZNodeExtension2 *Extension;	/* optional element of type tt:PTZNodeExtension2 */
public:
	virtual int soap_type() const { return 553; } /* = unique type id SOAP_TYPE_tt__PTZNodeExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZNodeExtension() { tt__PTZNodeExtension::soap_default(NULL); }
	virtual ~tt__PTZNodeExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZNodeExtension2
#define SOAP_TYPE_tt__PTZNodeExtension2 (554)
/* tt:PTZNodeExtension2 */
class SOAP_CMAC tt__PTZNodeExtension2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 554; } /* = unique type id SOAP_TYPE_tt__PTZNodeExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZNodeExtension2() { tt__PTZNodeExtension2::soap_default(NULL); }
	virtual ~tt__PTZNodeExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSupported
#define SOAP_TYPE_tt__PTZPresetTourSupported (555)
/* tt:PTZPresetTourSupported */
class SOAP_CMAC tt__PTZPresetTourSupported : public xsd__anyType
{
public:
	int MaximumNumberOfPresetTours;	/* required element of type xsd:int */
	std::vector<enum tt__PTZPresetTourOperation >PTZPresetTourOperation;	/* optional element of type tt:PTZPresetTourOperation */
	class tt__PTZPresetTourSupportedExtension *Extension;	/* optional element of type tt:PTZPresetTourSupportedExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 555; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourSupported() { tt__PTZPresetTourSupported::soap_default(NULL); }
	virtual ~tt__PTZPresetTourSupported() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSupportedExtension
#define SOAP_TYPE_tt__PTZPresetTourSupportedExtension (556)
/* tt:PTZPresetTourSupportedExtension */
class SOAP_CMAC tt__PTZPresetTourSupportedExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 556; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourSupportedExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourSupportedExtension() { tt__PTZPresetTourSupportedExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourSupportedExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationExtension
#define SOAP_TYPE_tt__PTZConfigurationExtension (558)
/* tt:PTZConfigurationExtension */
class SOAP_CMAC tt__PTZConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	class tt__PTControlDirection *PTControlDirection;	/* optional element of type tt:PTControlDirection */
	class tt__PTZConfigurationExtension2 *Extension;	/* optional element of type tt:PTZConfigurationExtension2 */
public:
	virtual int soap_type() const { return 558; } /* = unique type id SOAP_TYPE_tt__PTZConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZConfigurationExtension() { tt__PTZConfigurationExtension::soap_default(NULL); }
	virtual ~tt__PTZConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationExtension2
#define SOAP_TYPE_tt__PTZConfigurationExtension2 (559)
/* tt:PTZConfigurationExtension2 */
class SOAP_CMAC tt__PTZConfigurationExtension2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 559; } /* = unique type id SOAP_TYPE_tt__PTZConfigurationExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZConfigurationExtension2() { tt__PTZConfigurationExtension2::soap_default(NULL); }
	virtual ~tt__PTZConfigurationExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTControlDirection
#define SOAP_TYPE_tt__PTControlDirection (560)
/* tt:PTControlDirection */
class SOAP_CMAC tt__PTControlDirection : public xsd__anyType
{
public:
	class tt__EFlip *EFlip;	/* optional element of type tt:EFlip */
	class tt__Reverse *Reverse;	/* optional element of type tt:Reverse */
	class tt__PTControlDirectionExtension *Extension;	/* optional element of type tt:PTControlDirectionExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 560; } /* = unique type id SOAP_TYPE_tt__PTControlDirection */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTControlDirection() { tt__PTControlDirection::soap_default(NULL); }
	virtual ~tt__PTControlDirection() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTControlDirectionExtension
#define SOAP_TYPE_tt__PTControlDirectionExtension (561)
/* tt:PTControlDirectionExtension */
class SOAP_CMAC tt__PTControlDirectionExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 561; } /* = unique type id SOAP_TYPE_tt__PTControlDirectionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTControlDirectionExtension() { tt__PTControlDirectionExtension::soap_default(NULL); }
	virtual ~tt__PTControlDirectionExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__EFlip
#define SOAP_TYPE_tt__EFlip (562)
/* tt:EFlip */
class SOAP_CMAC tt__EFlip : public xsd__anyType
{
public:
	enum tt__EFlipMode Mode;	/* required element of type tt:EFlipMode */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 562; } /* = unique type id SOAP_TYPE_tt__EFlip */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EFlip() { tt__EFlip::soap_default(NULL); }
	virtual ~tt__EFlip() { }
};
#endif

#ifndef SOAP_TYPE_tt__Reverse
#define SOAP_TYPE_tt__Reverse (563)
/* tt:Reverse */
class SOAP_CMAC tt__Reverse : public xsd__anyType
{
public:
	enum tt__ReverseMode Mode;	/* required element of type tt:ReverseMode */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 563; } /* = unique type id SOAP_TYPE_tt__Reverse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Reverse() { tt__Reverse::soap_default(NULL); }
	virtual ~tt__Reverse() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationOptions
#define SOAP_TYPE_tt__PTZConfigurationOptions (564)
/* tt:PTZConfigurationOptions */
class SOAP_CMAC tt__PTZConfigurationOptions : public xsd__anyType
{
public:
	class tt__PTZSpaces *Spaces;	/* required element of type tt:PTZSpaces */
	tt__DurationRange *PTZTimeout;	/* required element of type tt:DurationRange */
	std::vector<char * >__any;
	class tt__PTControlDirectionOptions *PTControlDirection;	/* optional element of type tt:PTControlDirectionOptions */
	class tt__PTZConfigurationOptions2 *Extension;	/* optional element of type tt:PTZConfigurationOptions2 */
	std::string *PTZRamps;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 564; } /* = unique type id SOAP_TYPE_tt__PTZConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZConfigurationOptions() { tt__PTZConfigurationOptions::soap_default(NULL); }
	virtual ~tt__PTZConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationOptions2
#define SOAP_TYPE_tt__PTZConfigurationOptions2 (565)
/* tt:PTZConfigurationOptions2 */
class SOAP_CMAC tt__PTZConfigurationOptions2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 565; } /* = unique type id SOAP_TYPE_tt__PTZConfigurationOptions2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZConfigurationOptions2() { tt__PTZConfigurationOptions2::soap_default(NULL); }
	virtual ~tt__PTZConfigurationOptions2() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTControlDirectionOptions
#define SOAP_TYPE_tt__PTControlDirectionOptions (566)
/* tt:PTControlDirectionOptions */
class SOAP_CMAC tt__PTControlDirectionOptions : public xsd__anyType
{
public:
	class tt__EFlipOptions *EFlip;	/* optional element of type tt:EFlipOptions */
	class tt__ReverseOptions *Reverse;	/* optional element of type tt:ReverseOptions */
	class tt__PTControlDirectionOptionsExtension *Extension;	/* optional element of type tt:PTControlDirectionOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 566; } /* = unique type id SOAP_TYPE_tt__PTControlDirectionOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTControlDirectionOptions() { tt__PTControlDirectionOptions::soap_default(NULL); }
	virtual ~tt__PTControlDirectionOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTControlDirectionOptionsExtension
#define SOAP_TYPE_tt__PTControlDirectionOptionsExtension (567)
/* tt:PTControlDirectionOptionsExtension */
class SOAP_CMAC tt__PTControlDirectionOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 567; } /* = unique type id SOAP_TYPE_tt__PTControlDirectionOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTControlDirectionOptionsExtension() { tt__PTControlDirectionOptionsExtension::soap_default(NULL); }
	virtual ~tt__PTControlDirectionOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__EFlipOptions
#define SOAP_TYPE_tt__EFlipOptions (568)
/* tt:EFlipOptions */
class SOAP_CMAC tt__EFlipOptions : public xsd__anyType
{
public:
	std::vector<enum tt__EFlipMode >Mode;	/* optional element of type tt:EFlipMode */
	class tt__EFlipOptionsExtension *Extension;	/* optional element of type tt:EFlipOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 568; } /* = unique type id SOAP_TYPE_tt__EFlipOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EFlipOptions() { tt__EFlipOptions::soap_default(NULL); }
	virtual ~tt__EFlipOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__EFlipOptionsExtension
#define SOAP_TYPE_tt__EFlipOptionsExtension (569)
/* tt:EFlipOptionsExtension */
class SOAP_CMAC tt__EFlipOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 569; } /* = unique type id SOAP_TYPE_tt__EFlipOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EFlipOptionsExtension() { tt__EFlipOptionsExtension::soap_default(NULL); }
	virtual ~tt__EFlipOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReverseOptions
#define SOAP_TYPE_tt__ReverseOptions (570)
/* tt:ReverseOptions */
class SOAP_CMAC tt__ReverseOptions : public xsd__anyType
{
public:
	std::vector<enum tt__ReverseMode >Mode;	/* optional element of type tt:ReverseMode */
	class tt__ReverseOptionsExtension *Extension;	/* optional element of type tt:ReverseOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 570; } /* = unique type id SOAP_TYPE_tt__ReverseOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReverseOptions() { tt__ReverseOptions::soap_default(NULL); }
	virtual ~tt__ReverseOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReverseOptionsExtension
#define SOAP_TYPE_tt__ReverseOptionsExtension (571)
/* tt:ReverseOptionsExtension */
class SOAP_CMAC tt__ReverseOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 571; } /* = unique type id SOAP_TYPE_tt__ReverseOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReverseOptionsExtension() { tt__ReverseOptionsExtension::soap_default(NULL); }
	virtual ~tt__ReverseOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PanTiltLimits
#define SOAP_TYPE_tt__PanTiltLimits (572)
/* tt:PanTiltLimits */
class SOAP_CMAC tt__PanTiltLimits : public xsd__anyType
{
public:
	class tt__Space2DDescription *Range;	/* required element of type tt:Space2DDescription */
public:
	virtual int soap_type() const { return 572; } /* = unique type id SOAP_TYPE_tt__PanTiltLimits */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PanTiltLimits() { tt__PanTiltLimits::soap_default(NULL); }
	virtual ~tt__PanTiltLimits() { }
};
#endif

#ifndef SOAP_TYPE_tt__ZoomLimits
#define SOAP_TYPE_tt__ZoomLimits (573)
/* tt:ZoomLimits */
class SOAP_CMAC tt__ZoomLimits : public xsd__anyType
{
public:
	class tt__Space1DDescription *Range;	/* required element of type tt:Space1DDescription */
public:
	virtual int soap_type() const { return 573; } /* = unique type id SOAP_TYPE_tt__ZoomLimits */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ZoomLimits() { tt__ZoomLimits::soap_default(NULL); }
	virtual ~tt__ZoomLimits() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZSpaces
#define SOAP_TYPE_tt__PTZSpaces (574)
/* tt:PTZSpaces */
class SOAP_CMAC tt__PTZSpaces : public xsd__anyType
{
public:
	std::vector<tt__Space2DDescription * >AbsolutePanTiltPositionSpace;	/* optional element of type tt:Space2DDescription */
	std::vector<tt__Space1DDescription * >AbsoluteZoomPositionSpace;	/* optional element of type tt:Space1DDescription */
	std::vector<tt__Space2DDescription * >RelativePanTiltTranslationSpace;	/* optional element of type tt:Space2DDescription */
	std::vector<tt__Space1DDescription * >RelativeZoomTranslationSpace;	/* optional element of type tt:Space1DDescription */
	std::vector<tt__Space2DDescription * >ContinuousPanTiltVelocitySpace;	/* optional element of type tt:Space2DDescription */
	std::vector<tt__Space1DDescription * >ContinuousZoomVelocitySpace;	/* optional element of type tt:Space1DDescription */
	std::vector<tt__Space1DDescription * >PanTiltSpeedSpace;	/* optional element of type tt:Space1DDescription */
	std::vector<tt__Space1DDescription * >ZoomSpeedSpace;	/* optional element of type tt:Space1DDescription */
	class tt__PTZSpacesExtension *Extension;	/* optional element of type tt:PTZSpacesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 574; } /* = unique type id SOAP_TYPE_tt__PTZSpaces */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZSpaces() { tt__PTZSpaces::soap_default(NULL); }
	virtual ~tt__PTZSpaces() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZSpacesExtension
#define SOAP_TYPE_tt__PTZSpacesExtension (575)
/* tt:PTZSpacesExtension */
class SOAP_CMAC tt__PTZSpacesExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 575; } /* = unique type id SOAP_TYPE_tt__PTZSpacesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZSpacesExtension() { tt__PTZSpacesExtension::soap_default(NULL); }
	virtual ~tt__PTZSpacesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Space2DDescription
#define SOAP_TYPE_tt__Space2DDescription (576)
/* tt:Space2DDescription */
class SOAP_CMAC tt__Space2DDescription : public xsd__anyType
{
public:
	std::string URI;	/* required element of type xsd:anyURI */
	tt__FloatRange *XRange;	/* required element of type tt:FloatRange */
	tt__FloatRange *YRange;	/* required element of type tt:FloatRange */
public:
	virtual int soap_type() const { return 576; } /* = unique type id SOAP_TYPE_tt__Space2DDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Space2DDescription() { tt__Space2DDescription::soap_default(NULL); }
	virtual ~tt__Space2DDescription() { }
};
#endif

#ifndef SOAP_TYPE_tt__Space1DDescription
#define SOAP_TYPE_tt__Space1DDescription (577)
/* tt:Space1DDescription */
class SOAP_CMAC tt__Space1DDescription : public xsd__anyType
{
public:
	std::string URI;	/* required element of type xsd:anyURI */
	tt__FloatRange *XRange;	/* required element of type tt:FloatRange */
public:
	virtual int soap_type() const { return 577; } /* = unique type id SOAP_TYPE_tt__Space1DDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Space1DDescription() { tt__Space1DDescription::soap_default(NULL); }
	virtual ~tt__Space1DDescription() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZSpeed
#define SOAP_TYPE_tt__PTZSpeed (578)
/* tt:PTZSpeed */
class SOAP_CMAC tt__PTZSpeed : public xsd__anyType
{
public:
	class tt__Vector2D *PanTilt;	/* optional element of type tt:Vector2D */
	class tt__Vector1D *Zoom;	/* optional element of type tt:Vector1D */
public:
	virtual int soap_type() const { return 578; } /* = unique type id SOAP_TYPE_tt__PTZSpeed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZSpeed() { tt__PTZSpeed::soap_default(NULL); }
	virtual ~tt__PTZSpeed() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPreset
#define SOAP_TYPE_tt__PTZPreset (579)
/* tt:PTZPreset */
class SOAP_CMAC tt__PTZPreset : public xsd__anyType
{
public:
	std::string *Name;	/* optional element of type tt:Name */
	class tt__PTZVector *PTZPosition;	/* optional element of type tt:PTZVector */
	std::string *token;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 579; } /* = unique type id SOAP_TYPE_tt__PTZPreset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPreset() { tt__PTZPreset::soap_default(NULL); }
	virtual ~tt__PTZPreset() { }
};
#endif

#ifndef SOAP_TYPE_tt__PresetTour
#define SOAP_TYPE_tt__PresetTour (580)
/* tt:PresetTour */
class SOAP_CMAC tt__PresetTour : public xsd__anyType
{
public:
	std::string *Name;	/* optional element of type tt:Name */
	class tt__PTZPresetTourStatus *Status;	/* required element of type tt:PTZPresetTourStatus */
	bool AutoStart;	/* required element of type xsd:boolean */
	class tt__PTZPresetTourStartingCondition *StartingCondition;	/* required element of type tt:PTZPresetTourStartingCondition */
	std::vector<class tt__PTZPresetTourSpot * >TourSpot;	/* optional element of type tt:PTZPresetTourSpot */
	class tt__PTZPresetTourExtension *Extension;	/* optional element of type tt:PTZPresetTourExtension */
	std::string *token;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 580; } /* = unique type id SOAP_TYPE_tt__PresetTour */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PresetTour() { tt__PresetTour::soap_default(NULL); }
	virtual ~tt__PresetTour() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourExtension
#define SOAP_TYPE_tt__PTZPresetTourExtension (581)
/* tt:PTZPresetTourExtension */
class SOAP_CMAC tt__PTZPresetTourExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 581; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourExtension() { tt__PTZPresetTourExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSpot
#define SOAP_TYPE_tt__PTZPresetTourSpot (582)
/* tt:PTZPresetTourSpot */
class SOAP_CMAC tt__PTZPresetTourSpot : public xsd__anyType
{
public:
	class tt__PTZPresetTourPresetDetail *PresetDetail;	/* required element of type tt:PTZPresetTourPresetDetail */
	tt__PTZSpeed *Speed;	/* optional element of type tt:PTZSpeed */
	LONG64 *StayTime;	/* optional element of type xsd:duration */
	class tt__PTZPresetTourSpotExtension *Extension;	/* optional element of type tt:PTZPresetTourSpotExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 582; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourSpot */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourSpot() { tt__PTZPresetTourSpot::soap_default(NULL); }
	virtual ~tt__PTZPresetTourSpot() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSpotExtension
#define SOAP_TYPE_tt__PTZPresetTourSpotExtension (583)
/* tt:PTZPresetTourSpotExtension */
class SOAP_CMAC tt__PTZPresetTourSpotExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 583; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourSpotExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourSpotExtension() { tt__PTZPresetTourSpotExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourSpotExtension() { }
};
#endif

#ifndef SOAP_TYPE__tt__union_PTZPresetTourPresetDetail
#define SOAP_TYPE__tt__union_PTZPresetTourPresetDetail (2586)
/* xsd:choice */
union _tt__union_PTZPresetTourPresetDetail
{
#define SOAP_UNION__tt__union_PTZPresetTourPresetDetail_PresetToken	(1)
	std::string *PresetToken;
#define SOAP_UNION__tt__union_PTZPresetTourPresetDetail_Home	(2)
	bool Home;
#define SOAP_UNION__tt__union_PTZPresetTourPresetDetail_PTZPosition	(3)
	tt__PTZVector *PTZPosition;
#define SOAP_UNION__tt__union_PTZPresetTourPresetDetail_TypeExtension	(4)
	class tt__PTZPresetTourTypeExtension *TypeExtension;
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetail
#define SOAP_TYPE_tt__PTZPresetTourPresetDetail (584)
/* tt:PTZPresetTourPresetDetail */
class SOAP_CMAC tt__PTZPresetTourPresetDetail : public xsd__anyType
{
public:
	int __union_PTZPresetTourPresetDetail;	/* union discriminant (of union defined below) */
	union _tt__union_PTZPresetTourPresetDetail union_PTZPresetTourPresetDetail;	/* required element of type xsd:choice */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 584; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourPresetDetail */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourPresetDetail() { tt__PTZPresetTourPresetDetail::soap_default(NULL); }
	virtual ~tt__PTZPresetTourPresetDetail() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourTypeExtension
#define SOAP_TYPE_tt__PTZPresetTourTypeExtension (585)
/* tt:PTZPresetTourTypeExtension */
class SOAP_CMAC tt__PTZPresetTourTypeExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 585; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourTypeExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourTypeExtension() { tt__PTZPresetTourTypeExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourTypeExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStatus
#define SOAP_TYPE_tt__PTZPresetTourStatus (586)
/* tt:PTZPresetTourStatus */
class SOAP_CMAC tt__PTZPresetTourStatus : public xsd__anyType
{
public:
	enum tt__PTZPresetTourState State;	/* required element of type tt:PTZPresetTourState */
	tt__PTZPresetTourSpot *CurrentTourSpot;	/* optional element of type tt:PTZPresetTourSpot */
	class tt__PTZPresetTourStatusExtension *Extension;	/* optional element of type tt:PTZPresetTourStatusExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 586; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourStatus() { tt__PTZPresetTourStatus::soap_default(NULL); }
	virtual ~tt__PTZPresetTourStatus() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStatusExtension
#define SOAP_TYPE_tt__PTZPresetTourStatusExtension (587)
/* tt:PTZPresetTourStatusExtension */
class SOAP_CMAC tt__PTZPresetTourStatusExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 587; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourStatusExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourStatusExtension() { tt__PTZPresetTourStatusExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourStatusExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingCondition
#define SOAP_TYPE_tt__PTZPresetTourStartingCondition (588)
/* tt:PTZPresetTourStartingCondition */
class SOAP_CMAC tt__PTZPresetTourStartingCondition : public xsd__anyType
{
public:
	int *RecurringTime;	/* optional element of type xsd:int */
	LONG64 *RecurringDuration;	/* optional element of type xsd:duration */
	enum tt__PTZPresetTourDirection *Direction;	/* optional element of type tt:PTZPresetTourDirection */
	class tt__PTZPresetTourStartingConditionExtension *Extension;	/* optional element of type tt:PTZPresetTourStartingConditionExtension */
	bool *RandomPresetOrder;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 588; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourStartingCondition */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourStartingCondition() { tt__PTZPresetTourStartingCondition::soap_default(NULL); }
	virtual ~tt__PTZPresetTourStartingCondition() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension (589)
/* tt:PTZPresetTourStartingConditionExtension */
class SOAP_CMAC tt__PTZPresetTourStartingConditionExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 589; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourStartingConditionExtension() { tt__PTZPresetTourStartingConditionExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourStartingConditionExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourOptions
#define SOAP_TYPE_tt__PTZPresetTourOptions (590)
/* tt:PTZPresetTourOptions */
class SOAP_CMAC tt__PTZPresetTourOptions : public xsd__anyType
{
public:
	bool AutoStart;	/* required element of type xsd:boolean */
	class tt__PTZPresetTourStartingConditionOptions *StartingCondition;	/* required element of type tt:PTZPresetTourStartingConditionOptions */
	class tt__PTZPresetTourSpotOptions *TourSpot;	/* required element of type tt:PTZPresetTourSpotOptions */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 590; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourOptions() { tt__PTZPresetTourOptions::soap_default(NULL); }
	virtual ~tt__PTZPresetTourOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSpotOptions
#define SOAP_TYPE_tt__PTZPresetTourSpotOptions (591)
/* tt:PTZPresetTourSpotOptions */
class SOAP_CMAC tt__PTZPresetTourSpotOptions : public xsd__anyType
{
public:
	class tt__PTZPresetTourPresetDetailOptions *PresetDetail;	/* required element of type tt:PTZPresetTourPresetDetailOptions */
	tt__DurationRange *StayTime;	/* required element of type tt:DurationRange */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 591; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourSpotOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourSpotOptions() { tt__PTZPresetTourSpotOptions::soap_default(NULL); }
	virtual ~tt__PTZPresetTourSpotOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions
#define SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions (592)
/* tt:PTZPresetTourPresetDetailOptions */
class SOAP_CMAC tt__PTZPresetTourPresetDetailOptions : public xsd__anyType
{
public:
	std::vector<std::string >PresetToken;	/* optional element of type tt:ReferenceToken */
	bool *Home;	/* optional element of type xsd:boolean */
	tt__Space2DDescription *PanTiltPositionSpace;	/* optional element of type tt:Space2DDescription */
	tt__Space1DDescription *ZoomPositionSpace;	/* optional element of type tt:Space1DDescription */
	class tt__PTZPresetTourPresetDetailOptionsExtension *Extension;	/* optional element of type tt:PTZPresetTourPresetDetailOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 592; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourPresetDetailOptions() { tt__PTZPresetTourPresetDetailOptions::soap_default(NULL); }
	virtual ~tt__PTZPresetTourPresetDetailOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension
#define SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension (593)
/* tt:PTZPresetTourPresetDetailOptionsExtension */
class SOAP_CMAC tt__PTZPresetTourPresetDetailOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 593; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourPresetDetailOptionsExtension() { tt__PTZPresetTourPresetDetailOptionsExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourPresetDetailOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions (594)
/* tt:PTZPresetTourStartingConditionOptions */
class SOAP_CMAC tt__PTZPresetTourStartingConditionOptions : public xsd__anyType
{
public:
	tt__IntRange *RecurringTime;	/* optional element of type tt:IntRange */
	tt__DurationRange *RecurringDuration;	/* optional element of type tt:DurationRange */
	std::vector<enum tt__PTZPresetTourDirection >Direction;	/* optional element of type tt:PTZPresetTourDirection */
	class tt__PTZPresetTourStartingConditionOptionsExtension *Extension;	/* optional element of type tt:PTZPresetTourStartingConditionOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 594; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourStartingConditionOptions() { tt__PTZPresetTourStartingConditionOptions::soap_default(NULL); }
	virtual ~tt__PTZPresetTourStartingConditionOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension (595)
/* tt:PTZPresetTourStartingConditionOptionsExtension */
class SOAP_CMAC tt__PTZPresetTourStartingConditionOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 595; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourStartingConditionOptionsExtension() { tt__PTZPresetTourStartingConditionOptionsExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourStartingConditionOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingStatus
#define SOAP_TYPE_tt__ImagingStatus (596)
/* tt:ImagingStatus */
class SOAP_CMAC tt__ImagingStatus : public xsd__anyType
{
public:
	class tt__FocusStatus *FocusStatus;	/* required element of type tt:FocusStatus */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 596; } /* = unique type id SOAP_TYPE_tt__ImagingStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingStatus() { tt__ImagingStatus::soap_default(NULL); }
	virtual ~tt__ImagingStatus() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusStatus
#define SOAP_TYPE_tt__FocusStatus (597)
/* tt:FocusStatus */
class SOAP_CMAC tt__FocusStatus : public xsd__anyType
{
public:
	float Position;	/* required element of type xsd:float */
	enum tt__MoveStatus MoveStatus;	/* required element of type tt:MoveStatus */
	std::string Error;	/* required element of type xsd:string */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 597; } /* = unique type id SOAP_TYPE_tt__FocusStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusStatus() { tt__FocusStatus::soap_default(NULL); }
	virtual ~tt__FocusStatus() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusConfiguration
#define SOAP_TYPE_tt__FocusConfiguration (598)
/* tt:FocusConfiguration */
class SOAP_CMAC tt__FocusConfiguration : public xsd__anyType
{
public:
	enum tt__AutoFocusMode AutoFocusMode;	/* required element of type tt:AutoFocusMode */
	float DefaultSpeed;	/* required element of type xsd:float */
	float NearLimit;	/* required element of type xsd:float */
	float FarLimit;	/* required element of type xsd:float */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 598; } /* = unique type id SOAP_TYPE_tt__FocusConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusConfiguration() { tt__FocusConfiguration::soap_default(NULL); }
	virtual ~tt__FocusConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingSettings
#define SOAP_TYPE_tt__ImagingSettings (599)
/* tt:ImagingSettings */
class SOAP_CMAC tt__ImagingSettings : public xsd__anyType
{
public:
	class tt__BacklightCompensation *BacklightCompensation;	/* optional element of type tt:BacklightCompensation */
	float *Brightness;	/* optional element of type xsd:float */
	float *ColorSaturation;	/* optional element of type xsd:float */
	float *Contrast;	/* optional element of type xsd:float */
	class tt__Exposure *Exposure;	/* optional element of type tt:Exposure */
	tt__FocusConfiguration *Focus;	/* optional element of type tt:FocusConfiguration */
	enum tt__IrCutFilterMode *IrCutFilter;	/* optional element of type tt:IrCutFilterMode */
	float *Sharpness;	/* optional element of type xsd:float */
	class tt__WideDynamicRange *WideDynamicRange;	/* optional element of type tt:WideDynamicRange */
	class tt__WhiteBalance *WhiteBalance;	/* optional element of type tt:WhiteBalance */
	class tt__ImagingSettingsExtension *Extension;	/* optional element of type tt:ImagingSettingsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 599; } /* = unique type id SOAP_TYPE_tt__ImagingSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingSettings() { tt__ImagingSettings::soap_default(NULL); }
	virtual ~tt__ImagingSettings() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension
#define SOAP_TYPE_tt__ImagingSettingsExtension (600)
/* tt:ImagingSettingsExtension */
class SOAP_CMAC tt__ImagingSettingsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 600; } /* = unique type id SOAP_TYPE_tt__ImagingSettingsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingSettingsExtension() { tt__ImagingSettingsExtension::soap_default(NULL); }
	virtual ~tt__ImagingSettingsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Exposure
#define SOAP_TYPE_tt__Exposure (601)
/* tt:Exposure */
class SOAP_CMAC tt__Exposure : public xsd__anyType
{
public:
	enum tt__ExposureMode Mode;	/* required element of type tt:ExposureMode */
	enum tt__ExposurePriority Priority;	/* required element of type tt:ExposurePriority */
	class tt__Rectangle *Window;	/* required element of type tt:Rectangle */
	float MinExposureTime;	/* required element of type xsd:float */
	float MaxExposureTime;	/* required element of type xsd:float */
	float MinGain;	/* required element of type xsd:float */
	float MaxGain;	/* required element of type xsd:float */
	float MinIris;	/* required element of type xsd:float */
	float MaxIris;	/* required element of type xsd:float */
	float ExposureTime;	/* required element of type xsd:float */
	float Gain;	/* required element of type xsd:float */
	float Iris;	/* required element of type xsd:float */
public:
	virtual int soap_type() const { return 601; } /* = unique type id SOAP_TYPE_tt__Exposure */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Exposure() { tt__Exposure::soap_default(NULL); }
	virtual ~tt__Exposure() { }
};
#endif

#ifndef SOAP_TYPE_tt__WideDynamicRange
#define SOAP_TYPE_tt__WideDynamicRange (602)
/* tt:WideDynamicRange */
class SOAP_CMAC tt__WideDynamicRange : public xsd__anyType
{
public:
	enum tt__WideDynamicMode Mode;	/* required element of type tt:WideDynamicMode */
	float Level;	/* required element of type xsd:float */
public:
	virtual int soap_type() const { return 602; } /* = unique type id SOAP_TYPE_tt__WideDynamicRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WideDynamicRange() { tt__WideDynamicRange::soap_default(NULL); }
	virtual ~tt__WideDynamicRange() { }
};
#endif

#ifndef SOAP_TYPE_tt__BacklightCompensation
#define SOAP_TYPE_tt__BacklightCompensation (603)
/* tt:BacklightCompensation */
class SOAP_CMAC tt__BacklightCompensation : public xsd__anyType
{
public:
	enum tt__BacklightCompensationMode Mode;	/* required element of type tt:BacklightCompensationMode */
	float Level;	/* required element of type xsd:float */
public:
	virtual int soap_type() const { return 603; } /* = unique type id SOAP_TYPE_tt__BacklightCompensation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__BacklightCompensation() { tt__BacklightCompensation::soap_default(NULL); }
	virtual ~tt__BacklightCompensation() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingOptions
#define SOAP_TYPE_tt__ImagingOptions (604)
/* tt:ImagingOptions */
class SOAP_CMAC tt__ImagingOptions : public xsd__anyType
{
public:
	class tt__BacklightCompensationOptions *BacklightCompensation;	/* required element of type tt:BacklightCompensationOptions */
	tt__FloatRange *Brightness;	/* required element of type tt:FloatRange */
	tt__FloatRange *ColorSaturation;	/* required element of type tt:FloatRange */
	tt__FloatRange *Contrast;	/* required element of type tt:FloatRange */
	class tt__ExposureOptions *Exposure;	/* required element of type tt:ExposureOptions */
	class tt__FocusOptions *Focus;	/* required element of type tt:FocusOptions */
	std::vector<enum tt__IrCutFilterMode >IrCutFilterModes;	/* required element of type tt:IrCutFilterMode */
	tt__FloatRange *Sharpness;	/* required element of type tt:FloatRange */
	class tt__WideDynamicRangeOptions *WideDynamicRange;	/* required element of type tt:WideDynamicRangeOptions */
	class tt__WhiteBalanceOptions *WhiteBalance;	/* required element of type tt:WhiteBalanceOptions */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 604; } /* = unique type id SOAP_TYPE_tt__ImagingOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingOptions() { tt__ImagingOptions::soap_default(NULL); }
	virtual ~tt__ImagingOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__WideDynamicRangeOptions
#define SOAP_TYPE_tt__WideDynamicRangeOptions (605)
/* tt:WideDynamicRangeOptions */
class SOAP_CMAC tt__WideDynamicRangeOptions : public xsd__anyType
{
public:
	std::vector<enum tt__WideDynamicMode >Mode;	/* required element of type tt:WideDynamicMode */
	tt__FloatRange *Level;	/* required element of type tt:FloatRange */
public:
	virtual int soap_type() const { return 605; } /* = unique type id SOAP_TYPE_tt__WideDynamicRangeOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WideDynamicRangeOptions() { tt__WideDynamicRangeOptions::soap_default(NULL); }
	virtual ~tt__WideDynamicRangeOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__BacklightCompensationOptions
#define SOAP_TYPE_tt__BacklightCompensationOptions (606)
/* tt:BacklightCompensationOptions */
class SOAP_CMAC tt__BacklightCompensationOptions : public xsd__anyType
{
public:
	std::vector<enum tt__WideDynamicMode >Mode;	/* required element of type tt:WideDynamicMode */
	tt__FloatRange *Level;	/* required element of type tt:FloatRange */
public:
	virtual int soap_type() const { return 606; } /* = unique type id SOAP_TYPE_tt__BacklightCompensationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__BacklightCompensationOptions() { tt__BacklightCompensationOptions::soap_default(NULL); }
	virtual ~tt__BacklightCompensationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusOptions
#define SOAP_TYPE_tt__FocusOptions (607)
/* tt:FocusOptions */
class SOAP_CMAC tt__FocusOptions : public xsd__anyType
{
public:
	std::vector<enum tt__AutoFocusMode >AutoFocusModes;	/* optional element of type tt:AutoFocusMode */
	tt__FloatRange *DefaultSpeed;	/* required element of type tt:FloatRange */
	tt__FloatRange *NearLimit;	/* required element of type tt:FloatRange */
	tt__FloatRange *FarLimit;	/* required element of type tt:FloatRange */
public:
	virtual int soap_type() const { return 607; } /* = unique type id SOAP_TYPE_tt__FocusOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusOptions() { tt__FocusOptions::soap_default(NULL); }
	virtual ~tt__FocusOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__ExposureOptions
#define SOAP_TYPE_tt__ExposureOptions (608)
/* tt:ExposureOptions */
class SOAP_CMAC tt__ExposureOptions : public xsd__anyType
{
public:
	std::vector<enum tt__ExposureMode >Mode;	/* required element of type tt:ExposureMode */
	std::vector<enum tt__ExposurePriority >Priority;	/* required element of type tt:ExposurePriority */
	tt__FloatRange *MinExposureTime;	/* required element of type tt:FloatRange */
	tt__FloatRange *MaxExposureTime;	/* required element of type tt:FloatRange */
	tt__FloatRange *MinGain;	/* required element of type tt:FloatRange */
	tt__FloatRange *MaxGain;	/* required element of type tt:FloatRange */
	tt__FloatRange *MinIris;	/* required element of type tt:FloatRange */
	tt__FloatRange *MaxIris;	/* required element of type tt:FloatRange */
	tt__FloatRange *ExposureTime;	/* required element of type tt:FloatRange */
	tt__FloatRange *Gain;	/* required element of type tt:FloatRange */
	tt__FloatRange *Iris;	/* required element of type tt:FloatRange */
public:
	virtual int soap_type() const { return 608; } /* = unique type id SOAP_TYPE_tt__ExposureOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ExposureOptions() { tt__ExposureOptions::soap_default(NULL); }
	virtual ~tt__ExposureOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__WhiteBalanceOptions
#define SOAP_TYPE_tt__WhiteBalanceOptions (609)
/* tt:WhiteBalanceOptions */
class SOAP_CMAC tt__WhiteBalanceOptions : public xsd__anyType
{
public:
	std::vector<enum tt__WhiteBalanceMode >Mode;	/* required element of type tt:WhiteBalanceMode */
	tt__FloatRange *YrGain;	/* required element of type tt:FloatRange */
	tt__FloatRange *YbGain;	/* required element of type tt:FloatRange */
public:
	virtual int soap_type() const { return 609; } /* = unique type id SOAP_TYPE_tt__WhiteBalanceOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WhiteBalanceOptions() { tt__WhiteBalanceOptions::soap_default(NULL); }
	virtual ~tt__WhiteBalanceOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusMove
#define SOAP_TYPE_tt__FocusMove (610)
/* tt:FocusMove */
class SOAP_CMAC tt__FocusMove : public xsd__anyType
{
public:
	class tt__AbsoluteFocus *Absolute;	/* optional element of type tt:AbsoluteFocus */
	class tt__RelativeFocus *Relative;	/* optional element of type tt:RelativeFocus */
	class tt__ContinuousFocus *Continuous;	/* optional element of type tt:ContinuousFocus */
public:
	virtual int soap_type() const { return 610; } /* = unique type id SOAP_TYPE_tt__FocusMove */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusMove() { tt__FocusMove::soap_default(NULL); }
	virtual ~tt__FocusMove() { }
};
#endif

#ifndef SOAP_TYPE_tt__AbsoluteFocus
#define SOAP_TYPE_tt__AbsoluteFocus (611)
/* tt:AbsoluteFocus */
class SOAP_CMAC tt__AbsoluteFocus : public xsd__anyType
{
public:
	float Position;	/* required element of type xsd:float */
	float *Speed;	/* optional element of type xsd:float */
public:
	virtual int soap_type() const { return 611; } /* = unique type id SOAP_TYPE_tt__AbsoluteFocus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AbsoluteFocus() { tt__AbsoluteFocus::soap_default(NULL); }
	virtual ~tt__AbsoluteFocus() { }
};
#endif

#ifndef SOAP_TYPE_tt__RelativeFocus
#define SOAP_TYPE_tt__RelativeFocus (612)
/* tt:RelativeFocus */
class SOAP_CMAC tt__RelativeFocus : public xsd__anyType
{
public:
	float Distance;	/* required element of type xsd:float */
	float *Speed;	/* optional element of type xsd:float */
public:
	virtual int soap_type() const { return 612; } /* = unique type id SOAP_TYPE_tt__RelativeFocus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RelativeFocus() { tt__RelativeFocus::soap_default(NULL); }
	virtual ~tt__RelativeFocus() { }
};
#endif

#ifndef SOAP_TYPE_tt__ContinuousFocus
#define SOAP_TYPE_tt__ContinuousFocus (613)
/* tt:ContinuousFocus */
class SOAP_CMAC tt__ContinuousFocus : public xsd__anyType
{
public:
	float Speed;	/* required element of type xsd:float */
public:
	virtual int soap_type() const { return 613; } /* = unique type id SOAP_TYPE_tt__ContinuousFocus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ContinuousFocus() { tt__ContinuousFocus::soap_default(NULL); }
	virtual ~tt__ContinuousFocus() { }
};
#endif

#ifndef SOAP_TYPE_tt__MoveOptions
#define SOAP_TYPE_tt__MoveOptions (614)
/* tt:MoveOptions */
class SOAP_CMAC tt__MoveOptions : public xsd__anyType
{
public:
	class tt__AbsoluteFocusOptions *Absolute;	/* optional element of type tt:AbsoluteFocusOptions */
	class tt__RelativeFocusOptions *Relative;	/* optional element of type tt:RelativeFocusOptions */
	class tt__ContinuousFocusOptions *Continuous;	/* optional element of type tt:ContinuousFocusOptions */
public:
	virtual int soap_type() const { return 614; } /* = unique type id SOAP_TYPE_tt__MoveOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MoveOptions() { tt__MoveOptions::soap_default(NULL); }
	virtual ~tt__MoveOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__AbsoluteFocusOptions
#define SOAP_TYPE_tt__AbsoluteFocusOptions (615)
/* tt:AbsoluteFocusOptions */
class SOAP_CMAC tt__AbsoluteFocusOptions : public xsd__anyType
{
public:
	tt__FloatRange *Position;	/* required element of type tt:FloatRange */
	tt__FloatRange *Speed;	/* optional element of type tt:FloatRange */
public:
	virtual int soap_type() const { return 615; } /* = unique type id SOAP_TYPE_tt__AbsoluteFocusOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AbsoluteFocusOptions() { tt__AbsoluteFocusOptions::soap_default(NULL); }
	virtual ~tt__AbsoluteFocusOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__RelativeFocusOptions
#define SOAP_TYPE_tt__RelativeFocusOptions (616)
/* tt:RelativeFocusOptions */
class SOAP_CMAC tt__RelativeFocusOptions : public xsd__anyType
{
public:
	tt__FloatRange *Distance;	/* required element of type tt:FloatRange */
	tt__FloatRange *Speed;	/* required element of type tt:FloatRange */
public:
	virtual int soap_type() const { return 616; } /* = unique type id SOAP_TYPE_tt__RelativeFocusOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RelativeFocusOptions() { tt__RelativeFocusOptions::soap_default(NULL); }
	virtual ~tt__RelativeFocusOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__ContinuousFocusOptions
#define SOAP_TYPE_tt__ContinuousFocusOptions (617)
/* tt:ContinuousFocusOptions */
class SOAP_CMAC tt__ContinuousFocusOptions : public xsd__anyType
{
public:
	tt__FloatRange *Speed;	/* required element of type tt:FloatRange */
public:
	virtual int soap_type() const { return 617; } /* = unique type id SOAP_TYPE_tt__ContinuousFocusOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ContinuousFocusOptions() { tt__ContinuousFocusOptions::soap_default(NULL); }
	virtual ~tt__ContinuousFocusOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__WhiteBalance
#define SOAP_TYPE_tt__WhiteBalance (618)
/* tt:WhiteBalance */
class SOAP_CMAC tt__WhiteBalance : public xsd__anyType
{
public:
	enum tt__WhiteBalanceMode Mode;	/* required element of type tt:WhiteBalanceMode */
	float CrGain;	/* required element of type xsd:float */
	float CbGain;	/* required element of type xsd:float */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 618; } /* = unique type id SOAP_TYPE_tt__WhiteBalance */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WhiteBalance() { tt__WhiteBalance::soap_default(NULL); }
	virtual ~tt__WhiteBalance() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingStatus20
#define SOAP_TYPE_tt__ImagingStatus20 (619)
/* tt:ImagingStatus20 */
class SOAP_CMAC tt__ImagingStatus20 : public xsd__anyType
{
public:
	class tt__FocusStatus20 *FocusStatus20;	/* optional element of type tt:FocusStatus20 */
	class tt__ImagingStatus20Extension *Extension;	/* optional element of type tt:ImagingStatus20Extension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 619; } /* = unique type id SOAP_TYPE_tt__ImagingStatus20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingStatus20() { tt__ImagingStatus20::soap_default(NULL); }
	virtual ~tt__ImagingStatus20() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingStatus20Extension
#define SOAP_TYPE_tt__ImagingStatus20Extension (620)
/* tt:ImagingStatus20Extension */
class SOAP_CMAC tt__ImagingStatus20Extension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 620; } /* = unique type id SOAP_TYPE_tt__ImagingStatus20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingStatus20Extension() { tt__ImagingStatus20Extension::soap_default(NULL); }
	virtual ~tt__ImagingStatus20Extension() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusStatus20
#define SOAP_TYPE_tt__FocusStatus20 (621)
/* tt:FocusStatus20 */
class SOAP_CMAC tt__FocusStatus20 : public xsd__anyType
{
public:
	float Position;	/* required element of type xsd:float */
	enum tt__MoveStatus MoveStatus;	/* required element of type tt:MoveStatus */
	std::string *Error;	/* optional element of type xsd:string */
	class tt__FocusStatus20Extension *Extension;	/* optional element of type tt:FocusStatus20Extension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 621; } /* = unique type id SOAP_TYPE_tt__FocusStatus20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusStatus20() { tt__FocusStatus20::soap_default(NULL); }
	virtual ~tt__FocusStatus20() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusStatus20Extension
#define SOAP_TYPE_tt__FocusStatus20Extension (622)
/* tt:FocusStatus20Extension */
class SOAP_CMAC tt__FocusStatus20Extension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 622; } /* = unique type id SOAP_TYPE_tt__FocusStatus20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusStatus20Extension() { tt__FocusStatus20Extension::soap_default(NULL); }
	virtual ~tt__FocusStatus20Extension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingSettings20
#define SOAP_TYPE_tt__ImagingSettings20 (623)
/* tt:ImagingSettings20 */
class SOAP_CMAC tt__ImagingSettings20 : public xsd__anyType
{
public:
	class tt__BacklightCompensation20 *BacklightCompensation;	/* optional element of type tt:BacklightCompensation20 */
	float *Brightness;	/* optional element of type xsd:float */
	float *ColorSaturation;	/* optional element of type xsd:float */
	float *Contrast;	/* optional element of type xsd:float */
	class tt__Exposure20 *Exposure;	/* optional element of type tt:Exposure20 */
	class tt__FocusConfiguration20 *Focus;	/* optional element of type tt:FocusConfiguration20 */
	enum tt__IrCutFilterMode *IrCutFilter;	/* optional element of type tt:IrCutFilterMode */
	float *Sharpness;	/* optional element of type xsd:float */
	class tt__WideDynamicRange20 *WideDynamicRange;	/* optional element of type tt:WideDynamicRange20 */
	class tt__WhiteBalance20 *WhiteBalance;	/* optional element of type tt:WhiteBalance20 */
	class tt__ImagingSettingsExtension20 *Extension;	/* optional element of type tt:ImagingSettingsExtension20 */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 623; } /* = unique type id SOAP_TYPE_tt__ImagingSettings20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingSettings20() { tt__ImagingSettings20::soap_default(NULL); }
	virtual ~tt__ImagingSettings20() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension20
#define SOAP_TYPE_tt__ImagingSettingsExtension20 (624)
/* tt:ImagingSettingsExtension20 */
class SOAP_CMAC tt__ImagingSettingsExtension20 : public xsd__anyType
{
public:
	std::vector<char * >__any;
	class tt__ImageStabilization *ImageStabilization;	/* optional element of type tt:ImageStabilization */
	class tt__ImagingSettingsExtension202 *Extension;	/* optional element of type tt:ImagingSettingsExtension202 */
public:
	virtual int soap_type() const { return 624; } /* = unique type id SOAP_TYPE_tt__ImagingSettingsExtension20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingSettingsExtension20() { tt__ImagingSettingsExtension20::soap_default(NULL); }
	virtual ~tt__ImagingSettingsExtension20() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension202
#define SOAP_TYPE_tt__ImagingSettingsExtension202 (625)
/* tt:ImagingSettingsExtension202 */
class SOAP_CMAC tt__ImagingSettingsExtension202 : public xsd__anyType
{
public:
	std::vector<class tt__IrCutFilterAutoAdjustment * >IrCutFilterAutoAdjustment;	/* optional element of type tt:IrCutFilterAutoAdjustment */
	class tt__ImagingSettingsExtension203 *Extension;	/* optional element of type tt:ImagingSettingsExtension203 */
public:
	virtual int soap_type() const { return 625; } /* = unique type id SOAP_TYPE_tt__ImagingSettingsExtension202 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingSettingsExtension202() { tt__ImagingSettingsExtension202::soap_default(NULL); }
	virtual ~tt__ImagingSettingsExtension202() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension203
#define SOAP_TYPE_tt__ImagingSettingsExtension203 (626)
/* tt:ImagingSettingsExtension203 */
class SOAP_CMAC tt__ImagingSettingsExtension203 : public xsd__anyType
{
public:
	class tt__ToneCompensation *ToneCompensation;	/* optional element of type tt:ToneCompensation */
	class tt__Defogging *Defogging;	/* optional element of type tt:Defogging */
	class tt__NoiseReduction *NoiseReduction;	/* optional element of type tt:NoiseReduction */
	class tt__ImagingSettingsExtension204 *Extension;	/* optional element of type tt:ImagingSettingsExtension204 */
public:
	virtual int soap_type() const { return 626; } /* = unique type id SOAP_TYPE_tt__ImagingSettingsExtension203 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingSettingsExtension203() { tt__ImagingSettingsExtension203::soap_default(NULL); }
	virtual ~tt__ImagingSettingsExtension203() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension204
#define SOAP_TYPE_tt__ImagingSettingsExtension204 (627)
/* tt:ImagingSettingsExtension204 */
class SOAP_CMAC tt__ImagingSettingsExtension204 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 627; } /* = unique type id SOAP_TYPE_tt__ImagingSettingsExtension204 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingSettingsExtension204() { tt__ImagingSettingsExtension204::soap_default(NULL); }
	virtual ~tt__ImagingSettingsExtension204() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImageStabilization
#define SOAP_TYPE_tt__ImageStabilization (628)
/* tt:ImageStabilization */
class SOAP_CMAC tt__ImageStabilization : public xsd__anyType
{
public:
	enum tt__ImageStabilizationMode Mode;	/* required element of type tt:ImageStabilizationMode */
	float *Level;	/* optional element of type xsd:float */
	class tt__ImageStabilizationExtension *Extension;	/* optional element of type tt:ImageStabilizationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 628; } /* = unique type id SOAP_TYPE_tt__ImageStabilization */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImageStabilization() { tt__ImageStabilization::soap_default(NULL); }
	virtual ~tt__ImageStabilization() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImageStabilizationExtension
#define SOAP_TYPE_tt__ImageStabilizationExtension (629)
/* tt:ImageStabilizationExtension */
class SOAP_CMAC tt__ImageStabilizationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 629; } /* = unique type id SOAP_TYPE_tt__ImageStabilizationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImageStabilizationExtension() { tt__ImageStabilizationExtension::soap_default(NULL); }
	virtual ~tt__ImageStabilizationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustment
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustment (630)
/* tt:IrCutFilterAutoAdjustment */
class SOAP_CMAC tt__IrCutFilterAutoAdjustment : public xsd__anyType
{
public:
	std::string BoundaryType;	/* required element of type xsd:string */
	float *BoundaryOffset;	/* optional element of type xsd:float */
	LONG64 *ResponseTime;	/* optional element of type xsd:duration */
	class tt__IrCutFilterAutoAdjustmentExtension *Extension;	/* optional element of type tt:IrCutFilterAutoAdjustmentExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 630; } /* = unique type id SOAP_TYPE_tt__IrCutFilterAutoAdjustment */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IrCutFilterAutoAdjustment() { tt__IrCutFilterAutoAdjustment::soap_default(NULL); }
	virtual ~tt__IrCutFilterAutoAdjustment() { }
};
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension (631)
/* tt:IrCutFilterAutoAdjustmentExtension */
class SOAP_CMAC tt__IrCutFilterAutoAdjustmentExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 631; } /* = unique type id SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IrCutFilterAutoAdjustmentExtension() { tt__IrCutFilterAutoAdjustmentExtension::soap_default(NULL); }
	virtual ~tt__IrCutFilterAutoAdjustmentExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__WideDynamicRange20
#define SOAP_TYPE_tt__WideDynamicRange20 (632)
/* tt:WideDynamicRange20 */
class SOAP_CMAC tt__WideDynamicRange20 : public xsd__anyType
{
public:
	enum tt__WideDynamicMode Mode;	/* required element of type tt:WideDynamicMode */
	float *Level;	/* optional element of type xsd:float */
public:
	virtual int soap_type() const { return 632; } /* = unique type id SOAP_TYPE_tt__WideDynamicRange20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WideDynamicRange20() { tt__WideDynamicRange20::soap_default(NULL); }
	virtual ~tt__WideDynamicRange20() { }
};
#endif

#ifndef SOAP_TYPE_tt__BacklightCompensation20
#define SOAP_TYPE_tt__BacklightCompensation20 (633)
/* tt:BacklightCompensation20 */
class SOAP_CMAC tt__BacklightCompensation20 : public xsd__anyType
{
public:
	enum tt__BacklightCompensationMode Mode;	/* required element of type tt:BacklightCompensationMode */
	float *Level;	/* optional element of type xsd:float */
public:
	virtual int soap_type() const { return 633; } /* = unique type id SOAP_TYPE_tt__BacklightCompensation20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__BacklightCompensation20() { tt__BacklightCompensation20::soap_default(NULL); }
	virtual ~tt__BacklightCompensation20() { }
};
#endif

#ifndef SOAP_TYPE_tt__Exposure20
#define SOAP_TYPE_tt__Exposure20 (634)
/* tt:Exposure20 */
class SOAP_CMAC tt__Exposure20 : public xsd__anyType
{
public:
	enum tt__ExposureMode Mode;	/* required element of type tt:ExposureMode */
	enum tt__ExposurePriority *Priority;	/* optional element of type tt:ExposurePriority */
	tt__Rectangle *Window;	/* optional element of type tt:Rectangle */
	float *MinExposureTime;	/* optional element of type xsd:float */
	float *MaxExposureTime;	/* optional element of type xsd:float */
	float *MinGain;	/* optional element of type xsd:float */
	float *MaxGain;	/* optional element of type xsd:float */
	float *MinIris;	/* optional element of type xsd:float */
	float *MaxIris;	/* optional element of type xsd:float */
	float *ExposureTime;	/* optional element of type xsd:float */
	float *Gain;	/* optional element of type xsd:float */
	float *Iris;	/* optional element of type xsd:float */
public:
	virtual int soap_type() const { return 634; } /* = unique type id SOAP_TYPE_tt__Exposure20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Exposure20() { tt__Exposure20::soap_default(NULL); }
	virtual ~tt__Exposure20() { }
};
#endif

#ifndef SOAP_TYPE_tt__ToneCompensation
#define SOAP_TYPE_tt__ToneCompensation (635)
/* tt:ToneCompensation */
class SOAP_CMAC tt__ToneCompensation : public xsd__anyType
{
public:
	std::string Mode;	/* required element of type xsd:string */
	float *Level;	/* optional element of type xsd:float */
	class tt__ToneCompensationExtension *Extension;	/* optional element of type tt:ToneCompensationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 635; } /* = unique type id SOAP_TYPE_tt__ToneCompensation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ToneCompensation() { tt__ToneCompensation::soap_default(NULL); }
	virtual ~tt__ToneCompensation() { }
};
#endif

#ifndef SOAP_TYPE_tt__ToneCompensationExtension
#define SOAP_TYPE_tt__ToneCompensationExtension (636)
/* tt:ToneCompensationExtension */
class SOAP_CMAC tt__ToneCompensationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 636; } /* = unique type id SOAP_TYPE_tt__ToneCompensationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ToneCompensationExtension() { tt__ToneCompensationExtension::soap_default(NULL); }
	virtual ~tt__ToneCompensationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Defogging
#define SOAP_TYPE_tt__Defogging (637)
/* tt:Defogging */
class SOAP_CMAC tt__Defogging : public xsd__anyType
{
public:
	std::string Mode;	/* required element of type xsd:string */
	float *Level;	/* optional element of type xsd:float */
	class tt__DefoggingExtension *Extension;	/* optional element of type tt:DefoggingExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 637; } /* = unique type id SOAP_TYPE_tt__Defogging */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Defogging() { tt__Defogging::soap_default(NULL); }
	virtual ~tt__Defogging() { }
};
#endif

#ifndef SOAP_TYPE_tt__DefoggingExtension
#define SOAP_TYPE_tt__DefoggingExtension (638)
/* tt:DefoggingExtension */
class SOAP_CMAC tt__DefoggingExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 638; } /* = unique type id SOAP_TYPE_tt__DefoggingExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DefoggingExtension() { tt__DefoggingExtension::soap_default(NULL); }
	virtual ~tt__DefoggingExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__NoiseReduction
#define SOAP_TYPE_tt__NoiseReduction (639)
/* tt:NoiseReduction */
class SOAP_CMAC tt__NoiseReduction : public xsd__anyType
{
public:
	float Level;	/* required element of type xsd:float */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 639; } /* = unique type id SOAP_TYPE_tt__NoiseReduction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NoiseReduction() { tt__NoiseReduction::soap_default(NULL); }
	virtual ~tt__NoiseReduction() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingOptions20
#define SOAP_TYPE_tt__ImagingOptions20 (640)
/* tt:ImagingOptions20 */
class SOAP_CMAC tt__ImagingOptions20 : public xsd__anyType
{
public:
	class tt__BacklightCompensationOptions20 *BacklightCompensation;	/* optional element of type tt:BacklightCompensationOptions20 */
	tt__FloatRange *Brightness;	/* optional element of type tt:FloatRange */
	tt__FloatRange *ColorSaturation;	/* optional element of type tt:FloatRange */
	tt__FloatRange *Contrast;	/* optional element of type tt:FloatRange */
	class tt__ExposureOptions20 *Exposure;	/* optional element of type tt:ExposureOptions20 */
	class tt__FocusOptions20 *Focus;	/* optional element of type tt:FocusOptions20 */
	std::vector<enum tt__IrCutFilterMode >IrCutFilterModes;	/* optional element of type tt:IrCutFilterMode */
	tt__FloatRange *Sharpness;	/* optional element of type tt:FloatRange */
	class tt__WideDynamicRangeOptions20 *WideDynamicRange;	/* optional element of type tt:WideDynamicRangeOptions20 */
	class tt__WhiteBalanceOptions20 *WhiteBalance;	/* optional element of type tt:WhiteBalanceOptions20 */
	class tt__ImagingOptions20Extension *Extension;	/* optional element of type tt:ImagingOptions20Extension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 640; } /* = unique type id SOAP_TYPE_tt__ImagingOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingOptions20() { tt__ImagingOptions20::soap_default(NULL); }
	virtual ~tt__ImagingOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingOptions20Extension
#define SOAP_TYPE_tt__ImagingOptions20Extension (641)
/* tt:ImagingOptions20Extension */
class SOAP_CMAC tt__ImagingOptions20Extension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	class tt__ImageStabilizationOptions *ImageStabilization;	/* optional element of type tt:ImageStabilizationOptions */
	class tt__ImagingOptions20Extension2 *Extension;	/* optional element of type tt:ImagingOptions20Extension2 */
public:
	virtual int soap_type() const { return 641; } /* = unique type id SOAP_TYPE_tt__ImagingOptions20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingOptions20Extension() { tt__ImagingOptions20Extension::soap_default(NULL); }
	virtual ~tt__ImagingOptions20Extension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingOptions20Extension2
#define SOAP_TYPE_tt__ImagingOptions20Extension2 (642)
/* tt:ImagingOptions20Extension2 */
class SOAP_CMAC tt__ImagingOptions20Extension2 : public xsd__anyType
{
public:
	class tt__IrCutFilterAutoAdjustmentOptions *IrCutFilterAutoAdjustment;	/* optional element of type tt:IrCutFilterAutoAdjustmentOptions */
	class tt__ImagingOptions20Extension3 *Extension;	/* optional element of type tt:ImagingOptions20Extension3 */
public:
	virtual int soap_type() const { return 642; } /* = unique type id SOAP_TYPE_tt__ImagingOptions20Extension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingOptions20Extension2() { tt__ImagingOptions20Extension2::soap_default(NULL); }
	virtual ~tt__ImagingOptions20Extension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingOptions20Extension3
#define SOAP_TYPE_tt__ImagingOptions20Extension3 (643)
/* tt:ImagingOptions20Extension3 */
class SOAP_CMAC tt__ImagingOptions20Extension3 : public xsd__anyType
{
public:
	class tt__ToneCompensationOptions *ToneCompensationOptions;	/* optional element of type tt:ToneCompensationOptions */
	class tt__DefoggingOptions *DefoggingOptions;	/* optional element of type tt:DefoggingOptions */
	class tt__NoiseReductionOptions *NoiseReductionOptions;	/* optional element of type tt:NoiseReductionOptions */
	class tt__ImagingOptions20Extension4 *Extension;	/* optional element of type tt:ImagingOptions20Extension4 */
public:
	virtual int soap_type() const { return 643; } /* = unique type id SOAP_TYPE_tt__ImagingOptions20Extension3 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingOptions20Extension3() { tt__ImagingOptions20Extension3::soap_default(NULL); }
	virtual ~tt__ImagingOptions20Extension3() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingOptions20Extension4
#define SOAP_TYPE_tt__ImagingOptions20Extension4 (644)
/* tt:ImagingOptions20Extension4 */
class SOAP_CMAC tt__ImagingOptions20Extension4 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 644; } /* = unique type id SOAP_TYPE_tt__ImagingOptions20Extension4 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingOptions20Extension4() { tt__ImagingOptions20Extension4::soap_default(NULL); }
	virtual ~tt__ImagingOptions20Extension4() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImageStabilizationOptions
#define SOAP_TYPE_tt__ImageStabilizationOptions (645)
/* tt:ImageStabilizationOptions */
class SOAP_CMAC tt__ImageStabilizationOptions : public xsd__anyType
{
public:
	std::vector<enum tt__ImageStabilizationMode >Mode;	/* required element of type tt:ImageStabilizationMode */
	tt__FloatRange *Level;	/* optional element of type tt:FloatRange */
	class tt__ImageStabilizationOptionsExtension *Extension;	/* optional element of type tt:ImageStabilizationOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 645; } /* = unique type id SOAP_TYPE_tt__ImageStabilizationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImageStabilizationOptions() { tt__ImageStabilizationOptions::soap_default(NULL); }
	virtual ~tt__ImageStabilizationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImageStabilizationOptionsExtension
#define SOAP_TYPE_tt__ImageStabilizationOptionsExtension (646)
/* tt:ImageStabilizationOptionsExtension */
class SOAP_CMAC tt__ImageStabilizationOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 646; } /* = unique type id SOAP_TYPE_tt__ImageStabilizationOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImageStabilizationOptionsExtension() { tt__ImageStabilizationOptionsExtension::soap_default(NULL); }
	virtual ~tt__ImageStabilizationOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions (647)
/* tt:IrCutFilterAutoAdjustmentOptions */
class SOAP_CMAC tt__IrCutFilterAutoAdjustmentOptions : public xsd__anyType
{
public:
	std::vector<std::string >BoundaryType;	/* required element of type xsd:string */
	bool *BoundaryOffset;	/* optional element of type xsd:boolean */
	tt__DurationRange *ResponseTimeRange;	/* optional element of type tt:DurationRange */
	class tt__IrCutFilterAutoAdjustmentOptionsExtension *Extension;	/* optional element of type tt:IrCutFilterAutoAdjustmentOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 647; } /* = unique type id SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IrCutFilterAutoAdjustmentOptions() { tt__IrCutFilterAutoAdjustmentOptions::soap_default(NULL); }
	virtual ~tt__IrCutFilterAutoAdjustmentOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension (648)
/* tt:IrCutFilterAutoAdjustmentOptionsExtension */
class SOAP_CMAC tt__IrCutFilterAutoAdjustmentOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 648; } /* = unique type id SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IrCutFilterAutoAdjustmentOptionsExtension() { tt__IrCutFilterAutoAdjustmentOptionsExtension::soap_default(NULL); }
	virtual ~tt__IrCutFilterAutoAdjustmentOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__WideDynamicRangeOptions20
#define SOAP_TYPE_tt__WideDynamicRangeOptions20 (649)
/* tt:WideDynamicRangeOptions20 */
class SOAP_CMAC tt__WideDynamicRangeOptions20 : public xsd__anyType
{
public:
	std::vector<enum tt__WideDynamicMode >Mode;	/* required element of type tt:WideDynamicMode */
	tt__FloatRange *Level;	/* optional element of type tt:FloatRange */
public:
	virtual int soap_type() const { return 649; } /* = unique type id SOAP_TYPE_tt__WideDynamicRangeOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WideDynamicRangeOptions20() { tt__WideDynamicRangeOptions20::soap_default(NULL); }
	virtual ~tt__WideDynamicRangeOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__BacklightCompensationOptions20
#define SOAP_TYPE_tt__BacklightCompensationOptions20 (650)
/* tt:BacklightCompensationOptions20 */
class SOAP_CMAC tt__BacklightCompensationOptions20 : public xsd__anyType
{
public:
	std::vector<enum tt__BacklightCompensationMode >Mode;	/* required element of type tt:BacklightCompensationMode */
	tt__FloatRange *Level;	/* optional element of type tt:FloatRange */
public:
	virtual int soap_type() const { return 650; } /* = unique type id SOAP_TYPE_tt__BacklightCompensationOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__BacklightCompensationOptions20() { tt__BacklightCompensationOptions20::soap_default(NULL); }
	virtual ~tt__BacklightCompensationOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__ExposureOptions20
#define SOAP_TYPE_tt__ExposureOptions20 (651)
/* tt:ExposureOptions20 */
class SOAP_CMAC tt__ExposureOptions20 : public xsd__anyType
{
public:
	std::vector<enum tt__ExposureMode >Mode;	/* required element of type tt:ExposureMode */
	std::vector<enum tt__ExposurePriority >Priority;	/* optional element of type tt:ExposurePriority */
	tt__FloatRange *MinExposureTime;	/* optional element of type tt:FloatRange */
	tt__FloatRange *MaxExposureTime;	/* optional element of type tt:FloatRange */
	tt__FloatRange *MinGain;	/* optional element of type tt:FloatRange */
	tt__FloatRange *MaxGain;	/* optional element of type tt:FloatRange */
	tt__FloatRange *MinIris;	/* optional element of type tt:FloatRange */
	tt__FloatRange *MaxIris;	/* optional element of type tt:FloatRange */
	tt__FloatRange *ExposureTime;	/* optional element of type tt:FloatRange */
	tt__FloatRange *Gain;	/* optional element of type tt:FloatRange */
	tt__FloatRange *Iris;	/* optional element of type tt:FloatRange */
public:
	virtual int soap_type() const { return 651; } /* = unique type id SOAP_TYPE_tt__ExposureOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ExposureOptions20() { tt__ExposureOptions20::soap_default(NULL); }
	virtual ~tt__ExposureOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__MoveOptions20
#define SOAP_TYPE_tt__MoveOptions20 (652)
/* tt:MoveOptions20 */
class SOAP_CMAC tt__MoveOptions20 : public xsd__anyType
{
public:
	tt__AbsoluteFocusOptions *Absolute;	/* optional element of type tt:AbsoluteFocusOptions */
	class tt__RelativeFocusOptions20 *Relative;	/* optional element of type tt:RelativeFocusOptions20 */
	tt__ContinuousFocusOptions *Continuous;	/* optional element of type tt:ContinuousFocusOptions */
public:
	virtual int soap_type() const { return 652; } /* = unique type id SOAP_TYPE_tt__MoveOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MoveOptions20() { tt__MoveOptions20::soap_default(NULL); }
	virtual ~tt__MoveOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__RelativeFocusOptions20
#define SOAP_TYPE_tt__RelativeFocusOptions20 (653)
/* tt:RelativeFocusOptions20 */
class SOAP_CMAC tt__RelativeFocusOptions20 : public xsd__anyType
{
public:
	tt__FloatRange *Distance;	/* required element of type tt:FloatRange */
	tt__FloatRange *Speed;	/* optional element of type tt:FloatRange */
public:
	virtual int soap_type() const { return 653; } /* = unique type id SOAP_TYPE_tt__RelativeFocusOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RelativeFocusOptions20() { tt__RelativeFocusOptions20::soap_default(NULL); }
	virtual ~tt__RelativeFocusOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__WhiteBalance20
#define SOAP_TYPE_tt__WhiteBalance20 (654)
/* tt:WhiteBalance20 */
class SOAP_CMAC tt__WhiteBalance20 : public xsd__anyType
{
public:
	enum tt__WhiteBalanceMode Mode;	/* required element of type tt:WhiteBalanceMode */
	float *CrGain;	/* optional element of type xsd:float */
	float *CbGain;	/* optional element of type xsd:float */
	class tt__WhiteBalance20Extension *Extension;	/* optional element of type tt:WhiteBalance20Extension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 654; } /* = unique type id SOAP_TYPE_tt__WhiteBalance20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WhiteBalance20() { tt__WhiteBalance20::soap_default(NULL); }
	virtual ~tt__WhiteBalance20() { }
};
#endif

#ifndef SOAP_TYPE_tt__WhiteBalance20Extension
#define SOAP_TYPE_tt__WhiteBalance20Extension (655)
/* tt:WhiteBalance20Extension */
class SOAP_CMAC tt__WhiteBalance20Extension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 655; } /* = unique type id SOAP_TYPE_tt__WhiteBalance20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WhiteBalance20Extension() { tt__WhiteBalance20Extension::soap_default(NULL); }
	virtual ~tt__WhiteBalance20Extension() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusConfiguration20
#define SOAP_TYPE_tt__FocusConfiguration20 (656)
/* tt:FocusConfiguration20 */
class SOAP_CMAC tt__FocusConfiguration20 : public xsd__anyType
{
public:
	enum tt__AutoFocusMode AutoFocusMode;	/* required element of type tt:AutoFocusMode */
	float *DefaultSpeed;	/* optional element of type xsd:float */
	float *NearLimit;	/* optional element of type xsd:float */
	float *FarLimit;	/* optional element of type xsd:float */
	class tt__FocusConfiguration20Extension *Extension;	/* optional element of type tt:FocusConfiguration20Extension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 656; } /* = unique type id SOAP_TYPE_tt__FocusConfiguration20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusConfiguration20() { tt__FocusConfiguration20::soap_default(NULL); }
	virtual ~tt__FocusConfiguration20() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusConfiguration20Extension
#define SOAP_TYPE_tt__FocusConfiguration20Extension (657)
/* tt:FocusConfiguration20Extension */
class SOAP_CMAC tt__FocusConfiguration20Extension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 657; } /* = unique type id SOAP_TYPE_tt__FocusConfiguration20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusConfiguration20Extension() { tt__FocusConfiguration20Extension::soap_default(NULL); }
	virtual ~tt__FocusConfiguration20Extension() { }
};
#endif

#ifndef SOAP_TYPE_tt__WhiteBalanceOptions20
#define SOAP_TYPE_tt__WhiteBalanceOptions20 (658)
/* tt:WhiteBalanceOptions20 */
class SOAP_CMAC tt__WhiteBalanceOptions20 : public xsd__anyType
{
public:
	std::vector<enum tt__WhiteBalanceMode >Mode;	/* required element of type tt:WhiteBalanceMode */
	tt__FloatRange *YrGain;	/* optional element of type tt:FloatRange */
	tt__FloatRange *YbGain;	/* optional element of type tt:FloatRange */
	class tt__WhiteBalanceOptions20Extension *Extension;	/* optional element of type tt:WhiteBalanceOptions20Extension */
public:
	virtual int soap_type() const { return 658; } /* = unique type id SOAP_TYPE_tt__WhiteBalanceOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WhiteBalanceOptions20() { tt__WhiteBalanceOptions20::soap_default(NULL); }
	virtual ~tt__WhiteBalanceOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__WhiteBalanceOptions20Extension
#define SOAP_TYPE_tt__WhiteBalanceOptions20Extension (659)
/* tt:WhiteBalanceOptions20Extension */
class SOAP_CMAC tt__WhiteBalanceOptions20Extension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 659; } /* = unique type id SOAP_TYPE_tt__WhiteBalanceOptions20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WhiteBalanceOptions20Extension() { tt__WhiteBalanceOptions20Extension::soap_default(NULL); }
	virtual ~tt__WhiteBalanceOptions20Extension() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusOptions20
#define SOAP_TYPE_tt__FocusOptions20 (660)
/* tt:FocusOptions20 */
class SOAP_CMAC tt__FocusOptions20 : public xsd__anyType
{
public:
	std::vector<enum tt__AutoFocusMode >AutoFocusModes;	/* optional element of type tt:AutoFocusMode */
	tt__FloatRange *DefaultSpeed;	/* optional element of type tt:FloatRange */
	tt__FloatRange *NearLimit;	/* optional element of type tt:FloatRange */
	tt__FloatRange *FarLimit;	/* optional element of type tt:FloatRange */
	class tt__FocusOptions20Extension *Extension;	/* optional element of type tt:FocusOptions20Extension */
public:
	virtual int soap_type() const { return 660; } /* = unique type id SOAP_TYPE_tt__FocusOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusOptions20() { tt__FocusOptions20::soap_default(NULL); }
	virtual ~tt__FocusOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusOptions20Extension
#define SOAP_TYPE_tt__FocusOptions20Extension (661)
/* tt:FocusOptions20Extension */
class SOAP_CMAC tt__FocusOptions20Extension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 661; } /* = unique type id SOAP_TYPE_tt__FocusOptions20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusOptions20Extension() { tt__FocusOptions20Extension::soap_default(NULL); }
	virtual ~tt__FocusOptions20Extension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ToneCompensationOptions
#define SOAP_TYPE_tt__ToneCompensationOptions (662)
/* tt:ToneCompensationOptions */
class SOAP_CMAC tt__ToneCompensationOptions : public xsd__anyType
{
public:
	std::vector<std::string >Mode;	/* required element of type xsd:string */
	bool Level;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 662; } /* = unique type id SOAP_TYPE_tt__ToneCompensationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ToneCompensationOptions() { tt__ToneCompensationOptions::soap_default(NULL); }
	virtual ~tt__ToneCompensationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__DefoggingOptions
#define SOAP_TYPE_tt__DefoggingOptions (663)
/* tt:DefoggingOptions */
class SOAP_CMAC tt__DefoggingOptions : public xsd__anyType
{
public:
	std::vector<std::string >Mode;	/* required element of type xsd:string */
	bool Level;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 663; } /* = unique type id SOAP_TYPE_tt__DefoggingOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DefoggingOptions() { tt__DefoggingOptions::soap_default(NULL); }
	virtual ~tt__DefoggingOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__NoiseReductionOptions
#define SOAP_TYPE_tt__NoiseReductionOptions (664)
/* tt:NoiseReductionOptions */
class SOAP_CMAC tt__NoiseReductionOptions : public xsd__anyType
{
public:
	bool Level;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 664; } /* = unique type id SOAP_TYPE_tt__NoiseReductionOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NoiseReductionOptions() { tt__NoiseReductionOptions::soap_default(NULL); }
	virtual ~tt__NoiseReductionOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__MessageExtension
#define SOAP_TYPE_tt__MessageExtension (665)
/* tt:MessageExtension */
class SOAP_CMAC tt__MessageExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 665; } /* = unique type id SOAP_TYPE_tt__MessageExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MessageExtension() { tt__MessageExtension::soap_default(NULL); }
	virtual ~tt__MessageExtension() { }
};
#endif

#ifndef SOAP_TYPE__tt__ItemList_SimpleItem
#define SOAP_TYPE__tt__ItemList_SimpleItem (2668)
/* tt:ItemList-SimpleItem */
class SOAP_CMAC _tt__ItemList_SimpleItem
{
public:
	std::string Name;	/* required attribute */
	std::string Value;	/* required attribute */
public:
	virtual int soap_type() const { return 2668; } /* = unique type id SOAP_TYPE__tt__ItemList_SimpleItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__ItemList_SimpleItem() { _tt__ItemList_SimpleItem::soap_default(NULL); }
	virtual ~_tt__ItemList_SimpleItem() { }
};
#endif

#ifndef SOAP_TYPE__tt__ItemList_ElementItem
#define SOAP_TYPE__tt__ItemList_ElementItem (2671)
/* tt:ItemList-ElementItem */
class SOAP_CMAC _tt__ItemList_ElementItem
{
public:
	char *__any;
	std::string Name;	/* required attribute */
public:
	virtual int soap_type() const { return 2671; } /* = unique type id SOAP_TYPE__tt__ItemList_ElementItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__ItemList_ElementItem() { _tt__ItemList_ElementItem::soap_default(NULL); }
	virtual ~_tt__ItemList_ElementItem() { }
};
#endif

#ifndef SOAP_TYPE_tt__ItemList
#define SOAP_TYPE_tt__ItemList (666)
/* tt:ItemList */
class SOAP_CMAC tt__ItemList : public xsd__anyType
{
public:
	std::vector<_tt__ItemList_SimpleItem >*SimpleItem;	/* optional element of type tt:ItemList-SimpleItem */
	std::vector<_tt__ItemList_ElementItem >*ElementItem;	/* optional element of type tt:ItemList-ElementItem */
	class tt__ItemListExtension *Extension;	/* optional element of type tt:ItemListExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 666; } /* = unique type id SOAP_TYPE_tt__ItemList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ItemList() { tt__ItemList::soap_default(NULL); }
	virtual ~tt__ItemList() { }
};
#endif

#ifndef SOAP_TYPE_tt__ItemListExtension
#define SOAP_TYPE_tt__ItemListExtension (667)
/* tt:ItemListExtension */
class SOAP_CMAC tt__ItemListExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 667; } /* = unique type id SOAP_TYPE_tt__ItemListExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ItemListExtension() { tt__ItemListExtension::soap_default(NULL); }
	virtual ~tt__ItemListExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__MessageDescription
#define SOAP_TYPE_tt__MessageDescription (668)
/* tt:MessageDescription */
class SOAP_CMAC tt__MessageDescription : public xsd__anyType
{
public:
	tt__ItemListDescription *Source;	/* optional element of type tt:ItemListDescription */
	tt__ItemListDescription *Key;	/* optional element of type tt:ItemListDescription */
	tt__ItemListDescription *Data;	/* optional element of type tt:ItemListDescription */
	class tt__MessageDescriptionExtension *Extension;	/* optional element of type tt:MessageDescriptionExtension */
	bool *IsProperty;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 668; } /* = unique type id SOAP_TYPE_tt__MessageDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MessageDescription() { tt__MessageDescription::soap_default(NULL); }
	virtual ~tt__MessageDescription() { }
};
#endif

#ifndef SOAP_TYPE_tt__MessageDescriptionExtension
#define SOAP_TYPE_tt__MessageDescriptionExtension (669)
/* tt:MessageDescriptionExtension */
class SOAP_CMAC tt__MessageDescriptionExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 669; } /* = unique type id SOAP_TYPE_tt__MessageDescriptionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MessageDescriptionExtension() { tt__MessageDescriptionExtension::soap_default(NULL); }
	virtual ~tt__MessageDescriptionExtension() { }
};
#endif

#ifndef SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription
#define SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription (2676)
/* tt:ItemListDescription-SimpleItemDescription */
class SOAP_CMAC _tt__ItemListDescription_SimpleItemDescription
{
public:
	std::string Name;	/* required attribute */
	std::string Type;	/* required attribute */
public:
	virtual int soap_type() const { return 2676; } /* = unique type id SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__ItemListDescription_SimpleItemDescription() { _tt__ItemListDescription_SimpleItemDescription::soap_default(NULL); }
	virtual ~_tt__ItemListDescription_SimpleItemDescription() { }
};
#endif

#ifndef SOAP_TYPE__tt__ItemListDescription_ElementItemDescription
#define SOAP_TYPE__tt__ItemListDescription_ElementItemDescription (2679)
/* tt:ItemListDescription-ElementItemDescription */
class SOAP_CMAC _tt__ItemListDescription_ElementItemDescription
{
public:
	std::string Name;	/* required attribute */
	std::string Type;	/* required attribute */
public:
	virtual int soap_type() const { return 2679; } /* = unique type id SOAP_TYPE__tt__ItemListDescription_ElementItemDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__ItemListDescription_ElementItemDescription() { _tt__ItemListDescription_ElementItemDescription::soap_default(NULL); }
	virtual ~_tt__ItemListDescription_ElementItemDescription() { }
};
#endif

#ifndef SOAP_TYPE_tt__ItemListDescription
#define SOAP_TYPE_tt__ItemListDescription (670)
/* tt:ItemListDescription */
class SOAP_CMAC tt__ItemListDescription : public xsd__anyType
{
public:
	std::vector<_tt__ItemListDescription_SimpleItemDescription >*SimpleItemDescription;	/* optional element of type tt:ItemListDescription-SimpleItemDescription */
	std::vector<_tt__ItemListDescription_ElementItemDescription >*ElementItemDescription;	/* optional element of type tt:ItemListDescription-ElementItemDescription */
	class tt__ItemListDescriptionExtension *Extension;	/* optional element of type tt:ItemListDescriptionExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 670; } /* = unique type id SOAP_TYPE_tt__ItemListDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ItemListDescription() { tt__ItemListDescription::soap_default(NULL); }
	virtual ~tt__ItemListDescription() { }
};
#endif

#ifndef SOAP_TYPE_tt__ItemListDescriptionExtension
#define SOAP_TYPE_tt__ItemListDescriptionExtension (671)
/* tt:ItemListDescriptionExtension */
class SOAP_CMAC tt__ItemListDescriptionExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 671; } /* = unique type id SOAP_TYPE_tt__ItemListDescriptionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ItemListDescriptionExtension() { tt__ItemListDescriptionExtension::soap_default(NULL); }
	virtual ~tt__ItemListDescriptionExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Polyline
#define SOAP_TYPE_tt__Polyline (672)
/* tt:Polyline */
class SOAP_CMAC tt__Polyline : public xsd__anyType
{
public:
	std::vector<class tt__Vector * >Point;	/* required element of type tt:Vector */
public:
	virtual int soap_type() const { return 672; } /* = unique type id SOAP_TYPE_tt__Polyline */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Polyline() { tt__Polyline::soap_default(NULL); }
	virtual ~tt__Polyline() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineConfiguration
#define SOAP_TYPE_tt__AnalyticsEngineConfiguration (673)
/* tt:AnalyticsEngineConfiguration */
class SOAP_CMAC tt__AnalyticsEngineConfiguration : public xsd__anyType
{
public:
	std::vector<class tt__Config * >AnalyticsModule;	/* optional element of type tt:Config */
	class tt__AnalyticsEngineConfigurationExtension *Extension;	/* optional element of type tt:AnalyticsEngineConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 673; } /* = unique type id SOAP_TYPE_tt__AnalyticsEngineConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsEngineConfiguration() { tt__AnalyticsEngineConfiguration::soap_default(NULL); }
	virtual ~tt__AnalyticsEngineConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension
#define SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension (674)
/* tt:AnalyticsEngineConfigurationExtension */
class SOAP_CMAC tt__AnalyticsEngineConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 674; } /* = unique type id SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsEngineConfigurationExtension() { tt__AnalyticsEngineConfigurationExtension::soap_default(NULL); }
	virtual ~tt__AnalyticsEngineConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__RuleEngineConfiguration
#define SOAP_TYPE_tt__RuleEngineConfiguration (675)
/* tt:RuleEngineConfiguration */
class SOAP_CMAC tt__RuleEngineConfiguration : public xsd__anyType
{
public:
	std::vector<tt__Config * >Rule;	/* optional element of type tt:Config */
	class tt__RuleEngineConfigurationExtension *Extension;	/* optional element of type tt:RuleEngineConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 675; } /* = unique type id SOAP_TYPE_tt__RuleEngineConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RuleEngineConfiguration() { tt__RuleEngineConfiguration::soap_default(NULL); }
	virtual ~tt__RuleEngineConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__RuleEngineConfigurationExtension
#define SOAP_TYPE_tt__RuleEngineConfigurationExtension (676)
/* tt:RuleEngineConfigurationExtension */
class SOAP_CMAC tt__RuleEngineConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 676; } /* = unique type id SOAP_TYPE_tt__RuleEngineConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RuleEngineConfigurationExtension() { tt__RuleEngineConfigurationExtension::soap_default(NULL); }
	virtual ~tt__RuleEngineConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Config
#define SOAP_TYPE_tt__Config (677)
/* tt:Config */
class SOAP_CMAC tt__Config : public xsd__anyType
{
public:
	tt__ItemList *Parameters;	/* required element of type tt:ItemList */
	std::string Name;	/* required attribute */
	std::string Type;	/* required attribute */
public:
	virtual int soap_type() const { return 677; } /* = unique type id SOAP_TYPE_tt__Config */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Config() { tt__Config::soap_default(NULL); }
	virtual ~tt__Config() { }
};
#endif

#ifndef SOAP_TYPE__tt__ConfigDescription_Messages
#define SOAP_TYPE__tt__ConfigDescription_Messages (2689)
/* tt:ConfigDescription-Messages */
class SOAP_CMAC _tt__ConfigDescription_Messages
{
public:
	tt__ItemListDescription *Source;	/* optional element of type tt:ItemListDescription */
	tt__ItemListDescription *Key;	/* optional element of type tt:ItemListDescription */
	tt__ItemListDescription *Data;	/* optional element of type tt:ItemListDescription */
	tt__MessageDescriptionExtension *Extension;	/* optional element of type tt:MessageDescriptionExtension */
	bool *IsProperty;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
	std::string ParentTopic;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2689; } /* = unique type id SOAP_TYPE__tt__ConfigDescription_Messages */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__ConfigDescription_Messages() { _tt__ConfigDescription_Messages::soap_default(NULL); }
	virtual ~_tt__ConfigDescription_Messages() { }
};
#endif

#ifndef SOAP_TYPE_tt__ConfigDescription
#define SOAP_TYPE_tt__ConfigDescription (678)
/* tt:ConfigDescription */
class SOAP_CMAC tt__ConfigDescription : public xsd__anyType
{
public:
	tt__ItemListDescription *Parameters;	/* required element of type tt:ItemListDescription */
	std::vector<_tt__ConfigDescription_Messages >*Messages;	/* optional element of type tt:ConfigDescription-Messages */
	class tt__ConfigDescriptionExtension *Extension;	/* optional element of type tt:ConfigDescriptionExtension */
	std::string Name;	/* required attribute */
	bool *fixed;	/* optional attribute */
	std::string *maxInstances;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 678; } /* = unique type id SOAP_TYPE_tt__ConfigDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ConfigDescription() { tt__ConfigDescription::soap_default(NULL); }
	virtual ~tt__ConfigDescription() { }
};
#endif

#ifndef SOAP_TYPE_tt__ConfigDescriptionExtension
#define SOAP_TYPE_tt__ConfigDescriptionExtension (679)
/* tt:ConfigDescriptionExtension */
class SOAP_CMAC tt__ConfigDescriptionExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 679; } /* = unique type id SOAP_TYPE_tt__ConfigDescriptionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ConfigDescriptionExtension() { tt__ConfigDescriptionExtension::soap_default(NULL); }
	virtual ~tt__ConfigDescriptionExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__SupportedRules
#define SOAP_TYPE_tt__SupportedRules (680)
/* tt:SupportedRules */
class SOAP_CMAC tt__SupportedRules : public xsd__anyType
{
public:
	std::vector<std::string >RuleContentSchemaLocation;	/* optional element of type xsd:anyURI */
	std::vector<tt__ConfigDescription * >RuleDescription;	/* optional element of type tt:ConfigDescription */
	class tt__SupportedRulesExtension *Extension;	/* optional element of type tt:SupportedRulesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 680; } /* = unique type id SOAP_TYPE_tt__SupportedRules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SupportedRules() { tt__SupportedRules::soap_default(NULL); }
	virtual ~tt__SupportedRules() { }
};
#endif

#ifndef SOAP_TYPE_tt__SupportedRulesExtension
#define SOAP_TYPE_tt__SupportedRulesExtension (681)
/* tt:SupportedRulesExtension */
class SOAP_CMAC tt__SupportedRulesExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 681; } /* = unique type id SOAP_TYPE_tt__SupportedRulesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SupportedRulesExtension() { tt__SupportedRulesExtension::soap_default(NULL); }
	virtual ~tt__SupportedRulesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__SupportedAnalyticsModules
#define SOAP_TYPE_tt__SupportedAnalyticsModules (682)
/* tt:SupportedAnalyticsModules */
class SOAP_CMAC tt__SupportedAnalyticsModules : public xsd__anyType
{
public:
	std::vector<std::string >AnalyticsModuleContentSchemaLocation;	/* optional element of type xsd:anyURI */
	std::vector<tt__ConfigDescription * >AnalyticsModuleDescription;	/* optional element of type tt:ConfigDescription */
	class tt__SupportedAnalyticsModulesExtension *Extension;	/* optional element of type tt:SupportedAnalyticsModulesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 682; } /* = unique type id SOAP_TYPE_tt__SupportedAnalyticsModules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SupportedAnalyticsModules() { tt__SupportedAnalyticsModules::soap_default(NULL); }
	virtual ~tt__SupportedAnalyticsModules() { }
};
#endif

#ifndef SOAP_TYPE_tt__SupportedAnalyticsModulesExtension
#define SOAP_TYPE_tt__SupportedAnalyticsModulesExtension (683)
/* tt:SupportedAnalyticsModulesExtension */
class SOAP_CMAC tt__SupportedAnalyticsModulesExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 683; } /* = unique type id SOAP_TYPE_tt__SupportedAnalyticsModulesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SupportedAnalyticsModulesExtension() { tt__SupportedAnalyticsModulesExtension::soap_default(NULL); }
	virtual ~tt__SupportedAnalyticsModulesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PolygonConfiguration
#define SOAP_TYPE_tt__PolygonConfiguration (684)
/* tt:PolygonConfiguration */
class SOAP_CMAC tt__PolygonConfiguration : public xsd__anyType
{
public:
	class tt__Polygon *Polygon;	/* required element of type tt:Polygon */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 684; } /* = unique type id SOAP_TYPE_tt__PolygonConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PolygonConfiguration() { tt__PolygonConfiguration::soap_default(NULL); }
	virtual ~tt__PolygonConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__PolylineArray
#define SOAP_TYPE_tt__PolylineArray (685)
/* tt:PolylineArray */
class SOAP_CMAC tt__PolylineArray : public xsd__anyType
{
public:
	std::vector<tt__Polyline * >Segment;	/* required element of type tt:Polyline */
	class tt__PolylineArrayExtension *Extension;	/* optional element of type tt:PolylineArrayExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 685; } /* = unique type id SOAP_TYPE_tt__PolylineArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PolylineArray() { tt__PolylineArray::soap_default(NULL); }
	virtual ~tt__PolylineArray() { }
};
#endif

#ifndef SOAP_TYPE_tt__PolylineArrayExtension
#define SOAP_TYPE_tt__PolylineArrayExtension (686)
/* tt:PolylineArrayExtension */
class SOAP_CMAC tt__PolylineArrayExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 686; } /* = unique type id SOAP_TYPE_tt__PolylineArrayExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PolylineArrayExtension() { tt__PolylineArrayExtension::soap_default(NULL); }
	virtual ~tt__PolylineArrayExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PolylineArrayConfiguration
#define SOAP_TYPE_tt__PolylineArrayConfiguration (687)
/* tt:PolylineArrayConfiguration */
class SOAP_CMAC tt__PolylineArrayConfiguration : public xsd__anyType
{
public:
	tt__PolylineArray *PolylineArray;	/* required element of type tt:PolylineArray */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 687; } /* = unique type id SOAP_TYPE_tt__PolylineArrayConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PolylineArrayConfiguration() { tt__PolylineArrayConfiguration::soap_default(NULL); }
	virtual ~tt__PolylineArrayConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__MotionExpression
#define SOAP_TYPE_tt__MotionExpression (688)
/* tt:MotionExpression */
class SOAP_CMAC tt__MotionExpression : public xsd__anyType
{
public:
	std::string Expression;	/* required element of type xsd:string */
	std::vector<char * >__any;
	std::string *Type;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 688; } /* = unique type id SOAP_TYPE_tt__MotionExpression */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MotionExpression() { tt__MotionExpression::soap_default(NULL); }
	virtual ~tt__MotionExpression() { }
};
#endif

#ifndef SOAP_TYPE_tt__MotionExpressionConfiguration
#define SOAP_TYPE_tt__MotionExpressionConfiguration (689)
/* tt:MotionExpressionConfiguration */
class SOAP_CMAC tt__MotionExpressionConfiguration : public xsd__anyType
{
public:
	tt__MotionExpression *MotionExpression;	/* required element of type tt:MotionExpression */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 689; } /* = unique type id SOAP_TYPE_tt__MotionExpressionConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MotionExpressionConfiguration() { tt__MotionExpressionConfiguration::soap_default(NULL); }
	virtual ~tt__MotionExpressionConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__CellLayout
#define SOAP_TYPE_tt__CellLayout (690)
/* tt:CellLayout */
class SOAP_CMAC tt__CellLayout : public xsd__anyType
{
public:
	class tt__Transformation *Transformation;	/* required element of type tt:Transformation */
	std::vector<char * >__any;
	std::string Columns;	/* required attribute */
	std::string Rows;	/* required attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 690; } /* = unique type id SOAP_TYPE_tt__CellLayout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CellLayout() { tt__CellLayout::soap_default(NULL); }
	virtual ~tt__CellLayout() { }
};
#endif

#ifndef SOAP_TYPE_tt__PaneConfiguration
#define SOAP_TYPE_tt__PaneConfiguration (691)
/* tt:PaneConfiguration */
class SOAP_CMAC tt__PaneConfiguration : public xsd__anyType
{
public:
	std::string *PaneName;	/* optional element of type xsd:string */
	std::string *AudioOutputToken;	/* optional element of type tt:ReferenceToken */
	std::string *AudioSourceToken;	/* optional element of type tt:ReferenceToken */
	tt__AudioEncoderConfiguration *AudioEncoderConfiguration;	/* optional element of type tt:AudioEncoderConfiguration */
	std::string *ReceiverToken;	/* optional element of type tt:ReferenceToken */
	std::string Token;	/* required element of type tt:ReferenceToken */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 691; } /* = unique type id SOAP_TYPE_tt__PaneConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PaneConfiguration() { tt__PaneConfiguration::soap_default(NULL); }
	virtual ~tt__PaneConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__PaneLayout
#define SOAP_TYPE_tt__PaneLayout (692)
/* tt:PaneLayout */
class SOAP_CMAC tt__PaneLayout : public xsd__anyType
{
public:
	std::string Pane;	/* required element of type tt:ReferenceToken */
	tt__Rectangle *Area;	/* required element of type tt:Rectangle */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 692; } /* = unique type id SOAP_TYPE_tt__PaneLayout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PaneLayout() { tt__PaneLayout::soap_default(NULL); }
	virtual ~tt__PaneLayout() { }
};
#endif

#ifndef SOAP_TYPE_tt__Layout
#define SOAP_TYPE_tt__Layout (693)
/* tt:Layout */
class SOAP_CMAC tt__Layout : public xsd__anyType
{
public:
	std::vector<tt__PaneLayout * >PaneLayout;	/* required element of type tt:PaneLayout */
	class tt__LayoutExtension *Extension;	/* optional element of type tt:LayoutExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 693; } /* = unique type id SOAP_TYPE_tt__Layout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Layout() { tt__Layout::soap_default(NULL); }
	virtual ~tt__Layout() { }
};
#endif

#ifndef SOAP_TYPE_tt__LayoutExtension
#define SOAP_TYPE_tt__LayoutExtension (694)
/* tt:LayoutExtension */
class SOAP_CMAC tt__LayoutExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 694; } /* = unique type id SOAP_TYPE_tt__LayoutExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__LayoutExtension() { tt__LayoutExtension::soap_default(NULL); }
	virtual ~tt__LayoutExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__CodingCapabilities
#define SOAP_TYPE_tt__CodingCapabilities (695)
/* tt:CodingCapabilities */
class SOAP_CMAC tt__CodingCapabilities : public xsd__anyType
{
public:
	tt__AudioEncoderConfigurationOptions *AudioEncodingCapabilities;	/* optional element of type tt:AudioEncoderConfigurationOptions */
	tt__AudioDecoderConfigurationOptions *AudioDecodingCapabilities;	/* optional element of type tt:AudioDecoderConfigurationOptions */
	tt__VideoDecoderConfigurationOptions *VideoDecodingCapabilities;	/* required element of type tt:VideoDecoderConfigurationOptions */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 695; } /* = unique type id SOAP_TYPE_tt__CodingCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CodingCapabilities() { tt__CodingCapabilities::soap_default(NULL); }
	virtual ~tt__CodingCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__LayoutOptions
#define SOAP_TYPE_tt__LayoutOptions (696)
/* tt:LayoutOptions */
class SOAP_CMAC tt__LayoutOptions : public xsd__anyType
{
public:
	std::vector<class tt__PaneLayoutOptions * >PaneLayoutOptions;	/* required element of type tt:PaneLayoutOptions */
	class tt__LayoutOptionsExtension *Extension;	/* optional element of type tt:LayoutOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 696; } /* = unique type id SOAP_TYPE_tt__LayoutOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__LayoutOptions() { tt__LayoutOptions::soap_default(NULL); }
	virtual ~tt__LayoutOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__LayoutOptionsExtension
#define SOAP_TYPE_tt__LayoutOptionsExtension (697)
/* tt:LayoutOptionsExtension */
class SOAP_CMAC tt__LayoutOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 697; } /* = unique type id SOAP_TYPE_tt__LayoutOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__LayoutOptionsExtension() { tt__LayoutOptionsExtension::soap_default(NULL); }
	virtual ~tt__LayoutOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PaneLayoutOptions
#define SOAP_TYPE_tt__PaneLayoutOptions (698)
/* tt:PaneLayoutOptions */
class SOAP_CMAC tt__PaneLayoutOptions : public xsd__anyType
{
public:
	std::vector<tt__Rectangle * >Area;	/* required element of type tt:Rectangle */
	class tt__PaneOptionExtension *Extension;	/* optional element of type tt:PaneOptionExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 698; } /* = unique type id SOAP_TYPE_tt__PaneLayoutOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PaneLayoutOptions() { tt__PaneLayoutOptions::soap_default(NULL); }
	virtual ~tt__PaneLayoutOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PaneOptionExtension
#define SOAP_TYPE_tt__PaneOptionExtension (699)
/* tt:PaneOptionExtension */
class SOAP_CMAC tt__PaneOptionExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 699; } /* = unique type id SOAP_TYPE_tt__PaneOptionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PaneOptionExtension() { tt__PaneOptionExtension::soap_default(NULL); }
	virtual ~tt__PaneOptionExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Receiver
#define SOAP_TYPE_tt__Receiver (700)
/* tt:Receiver */
class SOAP_CMAC tt__Receiver : public xsd__anyType
{
public:
	std::string Token;	/* required element of type tt:ReferenceToken */
	class tt__ReceiverConfiguration *Configuration;	/* required element of type tt:ReceiverConfiguration */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 700; } /* = unique type id SOAP_TYPE_tt__Receiver */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Receiver() { tt__Receiver::soap_default(NULL); }
	virtual ~tt__Receiver() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReceiverConfiguration
#define SOAP_TYPE_tt__ReceiverConfiguration (701)
/* tt:ReceiverConfiguration */
class SOAP_CMAC tt__ReceiverConfiguration : public xsd__anyType
{
public:
	enum tt__ReceiverMode Mode;	/* required element of type tt:ReceiverMode */
	std::string MediaUri;	/* required element of type xsd:anyURI */
	tt__StreamSetup *StreamSetup;	/* required element of type tt:StreamSetup */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 701; } /* = unique type id SOAP_TYPE_tt__ReceiverConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReceiverConfiguration() { tt__ReceiverConfiguration::soap_default(NULL); }
	virtual ~tt__ReceiverConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReceiverStateInformation
#define SOAP_TYPE_tt__ReceiverStateInformation (702)
/* tt:ReceiverStateInformation */
class SOAP_CMAC tt__ReceiverStateInformation : public xsd__anyType
{
public:
	enum tt__ReceiverState State;	/* required element of type tt:ReceiverState */
	bool AutoCreated;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 702; } /* = unique type id SOAP_TYPE_tt__ReceiverStateInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReceiverStateInformation() { tt__ReceiverStateInformation::soap_default(NULL); }
	virtual ~tt__ReceiverStateInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__SourceReference
#define SOAP_TYPE_tt__SourceReference (703)
/* tt:SourceReference */
class SOAP_CMAC tt__SourceReference : public xsd__anyType
{
public:
	std::string Token;	/* required element of type tt:ReferenceToken */
	std::vector<char * >__any;
	std::string Type;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 703; } /* = unique type id SOAP_TYPE_tt__SourceReference */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SourceReference() { tt__SourceReference::soap_default(NULL); }
	virtual ~tt__SourceReference() { }
};
#endif

#ifndef SOAP_TYPE_tt__DateTimeRange
#define SOAP_TYPE_tt__DateTimeRange (704)
/* tt:DateTimeRange */
class SOAP_CMAC tt__DateTimeRange : public xsd__anyType
{
public:
	time_t From;	/* required element of type xsd:dateTime */
	time_t Until;	/* required element of type xsd:dateTime */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 704; } /* = unique type id SOAP_TYPE_tt__DateTimeRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DateTimeRange() { tt__DateTimeRange::soap_default(NULL); }
	virtual ~tt__DateTimeRange() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingSummary
#define SOAP_TYPE_tt__RecordingSummary (705)
/* tt:RecordingSummary */
class SOAP_CMAC tt__RecordingSummary : public xsd__anyType
{
public:
	time_t DataFrom;	/* required element of type xsd:dateTime */
	time_t DataUntil;	/* required element of type xsd:dateTime */
	int NumberRecordings;	/* required element of type xsd:int */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 705; } /* = unique type id SOAP_TYPE_tt__RecordingSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingSummary() { tt__RecordingSummary::soap_default(NULL); }
	virtual ~tt__RecordingSummary() { }
};
#endif

#ifndef SOAP_TYPE_tt__SearchScope
#define SOAP_TYPE_tt__SearchScope (706)
/* tt:SearchScope */
class SOAP_CMAC tt__SearchScope : public xsd__anyType
{
public:
	std::vector<tt__SourceReference * >IncludedSources;	/* optional element of type tt:SourceReference */
	std::vector<std::string >IncludedRecordings;	/* optional element of type tt:RecordingReference */
	std::string *RecordingInformationFilter;	/* optional element of type tt:XPathExpression */
	class tt__SearchScopeExtension *Extension;	/* optional element of type tt:SearchScopeExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 706; } /* = unique type id SOAP_TYPE_tt__SearchScope */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SearchScope() { tt__SearchScope::soap_default(NULL); }
	virtual ~tt__SearchScope() { }
};
#endif

#ifndef SOAP_TYPE_tt__SearchScopeExtension
#define SOAP_TYPE_tt__SearchScopeExtension (707)
/* tt:SearchScopeExtension */
class SOAP_CMAC tt__SearchScopeExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 707; } /* = unique type id SOAP_TYPE_tt__SearchScopeExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SearchScopeExtension() { tt__SearchScopeExtension::soap_default(NULL); }
	virtual ~tt__SearchScopeExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPositionFilter
#define SOAP_TYPE_tt__PTZPositionFilter (709)
/* tt:PTZPositionFilter */
class SOAP_CMAC tt__PTZPositionFilter : public xsd__anyType
{
public:
	tt__PTZVector *MinPosition;	/* required element of type tt:PTZVector */
	tt__PTZVector *MaxPosition;	/* required element of type tt:PTZVector */
	bool EnterOrExit;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 709; } /* = unique type id SOAP_TYPE_tt__PTZPositionFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPositionFilter() { tt__PTZPositionFilter::soap_default(NULL); }
	virtual ~tt__PTZPositionFilter() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataFilter
#define SOAP_TYPE_tt__MetadataFilter (710)
/* tt:MetadataFilter */
class SOAP_CMAC tt__MetadataFilter : public xsd__anyType
{
public:
	std::string MetadataStreamFilter;	/* required element of type tt:XPathExpression */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 710; } /* = unique type id SOAP_TYPE_tt__MetadataFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataFilter() { tt__MetadataFilter::soap_default(NULL); }
	virtual ~tt__MetadataFilter() { }
};
#endif

#ifndef SOAP_TYPE_tt__FindRecordingResultList
#define SOAP_TYPE_tt__FindRecordingResultList (711)
/* tt:FindRecordingResultList */
class SOAP_CMAC tt__FindRecordingResultList : public xsd__anyType
{
public:
	enum tt__SearchState SearchState;	/* required element of type tt:SearchState */
	std::vector<class tt__RecordingInformation * >RecordingInformation;	/* optional element of type tt:RecordingInformation */
public:
	virtual int soap_type() const { return 711; } /* = unique type id SOAP_TYPE_tt__FindRecordingResultList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FindRecordingResultList() { tt__FindRecordingResultList::soap_default(NULL); }
	virtual ~tt__FindRecordingResultList() { }
};
#endif

#ifndef SOAP_TYPE_tt__FindEventResultList
#define SOAP_TYPE_tt__FindEventResultList (712)
/* tt:FindEventResultList */
class SOAP_CMAC tt__FindEventResultList : public xsd__anyType
{
public:
	enum tt__SearchState SearchState;	/* required element of type tt:SearchState */
	std::vector<class tt__FindEventResult * >Result;	/* optional element of type tt:FindEventResult */
public:
	virtual int soap_type() const { return 712; } /* = unique type id SOAP_TYPE_tt__FindEventResultList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FindEventResultList() { tt__FindEventResultList::soap_default(NULL); }
	virtual ~tt__FindEventResultList() { }
};
#endif

#ifndef SOAP_TYPE_tt__FindEventResult
#define SOAP_TYPE_tt__FindEventResult (713)
/* tt:FindEventResult */
class SOAP_CMAC tt__FindEventResult : public xsd__anyType
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	std::string TrackToken;	/* required element of type tt:TrackReference */
	time_t Time;	/* required element of type xsd:dateTime */
	class wsnt__NotificationMessageHolderType *Event;	/* required element of type wsnt:NotificationMessageHolderType */
	bool StartStateEvent;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 713; } /* = unique type id SOAP_TYPE_tt__FindEventResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FindEventResult() { tt__FindEventResult::soap_default(NULL); }
	virtual ~tt__FindEventResult() { }
};
#endif

#ifndef SOAP_TYPE_tt__FindPTZPositionResultList
#define SOAP_TYPE_tt__FindPTZPositionResultList (714)
/* tt:FindPTZPositionResultList */
class SOAP_CMAC tt__FindPTZPositionResultList : public xsd__anyType
{
public:
	enum tt__SearchState SearchState;	/* required element of type tt:SearchState */
	std::vector<class tt__FindPTZPositionResult * >Result;	/* optional element of type tt:FindPTZPositionResult */
public:
	virtual int soap_type() const { return 714; } /* = unique type id SOAP_TYPE_tt__FindPTZPositionResultList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FindPTZPositionResultList() { tt__FindPTZPositionResultList::soap_default(NULL); }
	virtual ~tt__FindPTZPositionResultList() { }
};
#endif

#ifndef SOAP_TYPE_tt__FindPTZPositionResult
#define SOAP_TYPE_tt__FindPTZPositionResult (715)
/* tt:FindPTZPositionResult */
class SOAP_CMAC tt__FindPTZPositionResult : public xsd__anyType
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	std::string TrackToken;	/* required element of type tt:TrackReference */
	time_t Time;	/* required element of type xsd:dateTime */
	tt__PTZVector *Position;	/* required element of type tt:PTZVector */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 715; } /* = unique type id SOAP_TYPE_tt__FindPTZPositionResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FindPTZPositionResult() { tt__FindPTZPositionResult::soap_default(NULL); }
	virtual ~tt__FindPTZPositionResult() { }
};
#endif

#ifndef SOAP_TYPE_tt__FindMetadataResultList
#define SOAP_TYPE_tt__FindMetadataResultList (716)
/* tt:FindMetadataResultList */
class SOAP_CMAC tt__FindMetadataResultList : public xsd__anyType
{
public:
	enum tt__SearchState SearchState;	/* required element of type tt:SearchState */
	std::vector<class tt__FindMetadataResult * >Result;	/* optional element of type tt:FindMetadataResult */
public:
	virtual int soap_type() const { return 716; } /* = unique type id SOAP_TYPE_tt__FindMetadataResultList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FindMetadataResultList() { tt__FindMetadataResultList::soap_default(NULL); }
	virtual ~tt__FindMetadataResultList() { }
};
#endif

#ifndef SOAP_TYPE_tt__FindMetadataResult
#define SOAP_TYPE_tt__FindMetadataResult (717)
/* tt:FindMetadataResult */
class SOAP_CMAC tt__FindMetadataResult : public xsd__anyType
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	std::string TrackToken;	/* required element of type tt:TrackReference */
	time_t Time;	/* required element of type xsd:dateTime */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 717; } /* = unique type id SOAP_TYPE_tt__FindMetadataResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FindMetadataResult() { tt__FindMetadataResult::soap_default(NULL); }
	virtual ~tt__FindMetadataResult() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingInformation
#define SOAP_TYPE_tt__RecordingInformation (718)
/* tt:RecordingInformation */
class SOAP_CMAC tt__RecordingInformation : public xsd__anyType
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	class tt__RecordingSourceInformation *Source;	/* required element of type tt:RecordingSourceInformation */
	time_t *EarliestRecording;	/* optional element of type xsd:dateTime */
	time_t *LatestRecording;	/* optional element of type xsd:dateTime */
	std::string Content;	/* required element of type tt:Description */
	std::vector<class tt__TrackInformation * >Track;	/* optional element of type tt:TrackInformation */
	enum tt__RecordingStatus RecordingStatus;	/* required element of type tt:RecordingStatus */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 718; } /* = unique type id SOAP_TYPE_tt__RecordingInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingInformation() { tt__RecordingInformation::soap_default(NULL); }
	virtual ~tt__RecordingInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingSourceInformation
#define SOAP_TYPE_tt__RecordingSourceInformation (719)
/* tt:RecordingSourceInformation */
class SOAP_CMAC tt__RecordingSourceInformation : public xsd__anyType
{
public:
	std::string SourceId;	/* required element of type xsd:anyURI */
	std::string Name;	/* required element of type tt:Name */
	std::string Location;	/* required element of type tt:Description */
	std::string Description;	/* required element of type tt:Description */
	std::string Address;	/* required element of type xsd:anyURI */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 719; } /* = unique type id SOAP_TYPE_tt__RecordingSourceInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingSourceInformation() { tt__RecordingSourceInformation::soap_default(NULL); }
	virtual ~tt__RecordingSourceInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__TrackInformation
#define SOAP_TYPE_tt__TrackInformation (720)
/* tt:TrackInformation */
class SOAP_CMAC tt__TrackInformation : public xsd__anyType
{
public:
	std::string TrackToken;	/* required element of type tt:TrackReference */
	enum tt__TrackType TrackType;	/* required element of type tt:TrackType */
	std::string Description;	/* required element of type tt:Description */
	time_t DataFrom;	/* required element of type xsd:dateTime */
	time_t DataTo;	/* required element of type xsd:dateTime */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 720; } /* = unique type id SOAP_TYPE_tt__TrackInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TrackInformation() { tt__TrackInformation::soap_default(NULL); }
	virtual ~tt__TrackInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__MediaAttributes
#define SOAP_TYPE_tt__MediaAttributes (721)
/* tt:MediaAttributes */
class SOAP_CMAC tt__MediaAttributes : public xsd__anyType
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	std::vector<class tt__TrackAttributes * >TrackAttributes;	/* optional element of type tt:TrackAttributes */
	time_t From;	/* required element of type xsd:dateTime */
	time_t Until;	/* required element of type xsd:dateTime */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 721; } /* = unique type id SOAP_TYPE_tt__MediaAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MediaAttributes() { tt__MediaAttributes::soap_default(NULL); }
	virtual ~tt__MediaAttributes() { }
};
#endif

#ifndef SOAP_TYPE_tt__TrackAttributes
#define SOAP_TYPE_tt__TrackAttributes (722)
/* tt:TrackAttributes */
class SOAP_CMAC tt__TrackAttributes : public xsd__anyType
{
public:
	tt__TrackInformation *TrackInformation;	/* required element of type tt:TrackInformation */
	class tt__VideoAttributes *VideoAttributes;	/* optional element of type tt:VideoAttributes */
	class tt__AudioAttributes *AudioAttributes;	/* optional element of type tt:AudioAttributes */
	class tt__MetadataAttributes *MetadataAttributes;	/* optional element of type tt:MetadataAttributes */
	class tt__TrackAttributesExtension *Extension;	/* optional element of type tt:TrackAttributesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 722; } /* = unique type id SOAP_TYPE_tt__TrackAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TrackAttributes() { tt__TrackAttributes::soap_default(NULL); }
	virtual ~tt__TrackAttributes() { }
};
#endif

#ifndef SOAP_TYPE_tt__TrackAttributesExtension
#define SOAP_TYPE_tt__TrackAttributesExtension (723)
/* tt:TrackAttributesExtension */
class SOAP_CMAC tt__TrackAttributesExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 723; } /* = unique type id SOAP_TYPE_tt__TrackAttributesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TrackAttributesExtension() { tt__TrackAttributesExtension::soap_default(NULL); }
	virtual ~tt__TrackAttributesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoAttributes
#define SOAP_TYPE_tt__VideoAttributes (724)
/* tt:VideoAttributes */
class SOAP_CMAC tt__VideoAttributes : public xsd__anyType
{
public:
	int *Bitrate;	/* optional element of type xsd:int */
	int Width;	/* required element of type xsd:int */
	int Height;	/* required element of type xsd:int */
	std::string Encoding;	/* required element of type xsd:string */
	float Framerate;	/* required element of type xsd:float */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 724; } /* = unique type id SOAP_TYPE_tt__VideoAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoAttributes() { tt__VideoAttributes::soap_default(NULL); }
	virtual ~tt__VideoAttributes() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioAttributes
#define SOAP_TYPE_tt__AudioAttributes (725)
/* tt:AudioAttributes */
class SOAP_CMAC tt__AudioAttributes : public xsd__anyType
{
public:
	int *Bitrate;	/* optional element of type xsd:int */
	std::string Encoding;	/* required element of type xsd:string */
	int Samplerate;	/* required element of type xsd:int */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 725; } /* = unique type id SOAP_TYPE_tt__AudioAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioAttributes() { tt__AudioAttributes::soap_default(NULL); }
	virtual ~tt__AudioAttributes() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataAttributes
#define SOAP_TYPE_tt__MetadataAttributes (726)
/* tt:MetadataAttributes */
class SOAP_CMAC tt__MetadataAttributes : public xsd__anyType
{
public:
	bool CanContainPTZ;	/* required element of type xsd:boolean */
	bool CanContainAnalytics;	/* required element of type xsd:boolean */
	bool CanContainNotifications;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	std::string *PtzSpaces;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 726; } /* = unique type id SOAP_TYPE_tt__MetadataAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataAttributes() { tt__MetadataAttributes::soap_default(NULL); }
	virtual ~tt__MetadataAttributes() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingConfiguration
#define SOAP_TYPE_tt__RecordingConfiguration (727)
/* tt:RecordingConfiguration */
class SOAP_CMAC tt__RecordingConfiguration : public xsd__anyType
{
public:
	tt__RecordingSourceInformation *Source;	/* required element of type tt:RecordingSourceInformation */
	std::string Content;	/* required element of type tt:Description */
	LONG64 MaximumRetentionTime;	/* external */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 727; } /* = unique type id SOAP_TYPE_tt__RecordingConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingConfiguration() { tt__RecordingConfiguration::soap_default(NULL); }
	virtual ~tt__RecordingConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__TrackConfiguration
#define SOAP_TYPE_tt__TrackConfiguration (728)
/* tt:TrackConfiguration */
class SOAP_CMAC tt__TrackConfiguration : public xsd__anyType
{
public:
	enum tt__TrackType TrackType;	/* required element of type tt:TrackType */
	std::string Description;	/* required element of type tt:Description */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 728; } /* = unique type id SOAP_TYPE_tt__TrackConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TrackConfiguration() { tt__TrackConfiguration::soap_default(NULL); }
	virtual ~tt__TrackConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__GetRecordingsResponseItem
#define SOAP_TYPE_tt__GetRecordingsResponseItem (729)
/* tt:GetRecordingsResponseItem */
class SOAP_CMAC tt__GetRecordingsResponseItem : public xsd__anyType
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	tt__RecordingConfiguration *Configuration;	/* required element of type tt:RecordingConfiguration */
	class tt__GetTracksResponseList *Tracks;	/* required element of type tt:GetTracksResponseList */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 729; } /* = unique type id SOAP_TYPE_tt__GetRecordingsResponseItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__GetRecordingsResponseItem() { tt__GetRecordingsResponseItem::soap_default(NULL); }
	virtual ~tt__GetRecordingsResponseItem() { }
};
#endif

#ifndef SOAP_TYPE_tt__GetTracksResponseList
#define SOAP_TYPE_tt__GetTracksResponseList (730)
/* tt:GetTracksResponseList */
class SOAP_CMAC tt__GetTracksResponseList : public xsd__anyType
{
public:
	std::vector<class tt__GetTracksResponseItem * >Track;	/* optional element of type tt:GetTracksResponseItem */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 730; } /* = unique type id SOAP_TYPE_tt__GetTracksResponseList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__GetTracksResponseList() { tt__GetTracksResponseList::soap_default(NULL); }
	virtual ~tt__GetTracksResponseList() { }
};
#endif

#ifndef SOAP_TYPE_tt__GetTracksResponseItem
#define SOAP_TYPE_tt__GetTracksResponseItem (731)
/* tt:GetTracksResponseItem */
class SOAP_CMAC tt__GetTracksResponseItem : public xsd__anyType
{
public:
	std::string TrackToken;	/* required element of type tt:TrackReference */
	tt__TrackConfiguration *Configuration;	/* required element of type tt:TrackConfiguration */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 731; } /* = unique type id SOAP_TYPE_tt__GetTracksResponseItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__GetTracksResponseItem() { tt__GetTracksResponseItem::soap_default(NULL); }
	virtual ~tt__GetTracksResponseItem() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobConfiguration
#define SOAP_TYPE_tt__RecordingJobConfiguration (732)
/* tt:RecordingJobConfiguration */
class SOAP_CMAC tt__RecordingJobConfiguration : public xsd__anyType
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	std::string Mode;	/* required element of type tt:RecordingJobMode */
	int Priority;	/* required element of type xsd:int */
	std::vector<class tt__RecordingJobSource * >Source;	/* optional element of type tt:RecordingJobSource */
	class tt__RecordingJobConfigurationExtension *Extension;	/* optional element of type tt:RecordingJobConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 732; } /* = unique type id SOAP_TYPE_tt__RecordingJobConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobConfiguration() { tt__RecordingJobConfiguration::soap_default(NULL); }
	virtual ~tt__RecordingJobConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobConfigurationExtension
#define SOAP_TYPE_tt__RecordingJobConfigurationExtension (733)
/* tt:RecordingJobConfigurationExtension */
class SOAP_CMAC tt__RecordingJobConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 733; } /* = unique type id SOAP_TYPE_tt__RecordingJobConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobConfigurationExtension() { tt__RecordingJobConfigurationExtension::soap_default(NULL); }
	virtual ~tt__RecordingJobConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobSource
#define SOAP_TYPE_tt__RecordingJobSource (734)
/* tt:RecordingJobSource */
class SOAP_CMAC tt__RecordingJobSource : public xsd__anyType
{
public:
	tt__SourceReference *SourceToken;	/* optional element of type tt:SourceReference */
	bool *AutoCreateReceiver;	/* optional element of type xsd:boolean */
	std::vector<class tt__RecordingJobTrack * >Tracks;	/* optional element of type tt:RecordingJobTrack */
	class tt__RecordingJobSourceExtension *Extension;	/* optional element of type tt:RecordingJobSourceExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 734; } /* = unique type id SOAP_TYPE_tt__RecordingJobSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobSource() { tt__RecordingJobSource::soap_default(NULL); }
	virtual ~tt__RecordingJobSource() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobSourceExtension
#define SOAP_TYPE_tt__RecordingJobSourceExtension (735)
/* tt:RecordingJobSourceExtension */
class SOAP_CMAC tt__RecordingJobSourceExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 735; } /* = unique type id SOAP_TYPE_tt__RecordingJobSourceExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobSourceExtension() { tt__RecordingJobSourceExtension::soap_default(NULL); }
	virtual ~tt__RecordingJobSourceExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobTrack
#define SOAP_TYPE_tt__RecordingJobTrack (736)
/* tt:RecordingJobTrack */
class SOAP_CMAC tt__RecordingJobTrack : public xsd__anyType
{
public:
	std::string SourceTag;	/* required element of type xsd:string */
	std::string Destination;	/* required element of type tt:TrackReference */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 736; } /* = unique type id SOAP_TYPE_tt__RecordingJobTrack */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobTrack() { tt__RecordingJobTrack::soap_default(NULL); }
	virtual ~tt__RecordingJobTrack() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobStateInformation
#define SOAP_TYPE_tt__RecordingJobStateInformation (737)
/* tt:RecordingJobStateInformation */
class SOAP_CMAC tt__RecordingJobStateInformation : public xsd__anyType
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	std::string State;	/* required element of type tt:RecordingJobState */
	std::vector<class tt__RecordingJobStateSource * >Sources;	/* optional element of type tt:RecordingJobStateSource */
	class tt__RecordingJobStateInformationExtension *Extension;	/* optional element of type tt:RecordingJobStateInformationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 737; } /* = unique type id SOAP_TYPE_tt__RecordingJobStateInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobStateInformation() { tt__RecordingJobStateInformation::soap_default(NULL); }
	virtual ~tt__RecordingJobStateInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobStateInformationExtension
#define SOAP_TYPE_tt__RecordingJobStateInformationExtension (738)
/* tt:RecordingJobStateInformationExtension */
class SOAP_CMAC tt__RecordingJobStateInformationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 738; } /* = unique type id SOAP_TYPE_tt__RecordingJobStateInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobStateInformationExtension() { tt__RecordingJobStateInformationExtension::soap_default(NULL); }
	virtual ~tt__RecordingJobStateInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobStateSource
#define SOAP_TYPE_tt__RecordingJobStateSource (739)
/* tt:RecordingJobStateSource */
class SOAP_CMAC tt__RecordingJobStateSource : public xsd__anyType
{
public:
	tt__SourceReference *SourceToken;	/* required element of type tt:SourceReference */
	std::string State;	/* required element of type tt:RecordingJobState */
	class tt__RecordingJobStateTracks *Tracks;	/* required element of type tt:RecordingJobStateTracks */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 739; } /* = unique type id SOAP_TYPE_tt__RecordingJobStateSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobStateSource() { tt__RecordingJobStateSource::soap_default(NULL); }
	virtual ~tt__RecordingJobStateSource() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobStateTracks
#define SOAP_TYPE_tt__RecordingJobStateTracks (740)
/* tt:RecordingJobStateTracks */
class SOAP_CMAC tt__RecordingJobStateTracks : public xsd__anyType
{
public:
	std::vector<class tt__RecordingJobStateTrack * >Track;	/* optional element of type tt:RecordingJobStateTrack */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 740; } /* = unique type id SOAP_TYPE_tt__RecordingJobStateTracks */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobStateTracks() { tt__RecordingJobStateTracks::soap_default(NULL); }
	virtual ~tt__RecordingJobStateTracks() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobStateTrack
#define SOAP_TYPE_tt__RecordingJobStateTrack (741)
/* tt:RecordingJobStateTrack */
class SOAP_CMAC tt__RecordingJobStateTrack : public xsd__anyType
{
public:
	std::string SourceTag;	/* required element of type xsd:string */
	std::string Destination;	/* required element of type tt:TrackReference */
	std::string *Error;	/* optional element of type xsd:string */
	std::string State;	/* required element of type tt:RecordingJobState */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 741; } /* = unique type id SOAP_TYPE_tt__RecordingJobStateTrack */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobStateTrack() { tt__RecordingJobStateTrack::soap_default(NULL); }
	virtual ~tt__RecordingJobStateTrack() { }
};
#endif

#ifndef SOAP_TYPE_tt__GetRecordingJobsResponseItem
#define SOAP_TYPE_tt__GetRecordingJobsResponseItem (742)
/* tt:GetRecordingJobsResponseItem */
class SOAP_CMAC tt__GetRecordingJobsResponseItem : public xsd__anyType
{
public:
	std::string JobToken;	/* required element of type tt:RecordingJobReference */
	tt__RecordingJobConfiguration *JobConfiguration;	/* required element of type tt:RecordingJobConfiguration */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 742; } /* = unique type id SOAP_TYPE_tt__GetRecordingJobsResponseItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__GetRecordingJobsResponseItem() { tt__GetRecordingJobsResponseItem::soap_default(NULL); }
	virtual ~tt__GetRecordingJobsResponseItem() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReplayConfiguration
#define SOAP_TYPE_tt__ReplayConfiguration (743)
/* tt:ReplayConfiguration */
class SOAP_CMAC tt__ReplayConfiguration : public xsd__anyType
{
public:
	LONG64 SessionTimeout;	/* external */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 743; } /* = unique type id SOAP_TYPE_tt__ReplayConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReplayConfiguration() { tt__ReplayConfiguration::soap_default(NULL); }
	virtual ~tt__ReplayConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration
#define SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration (745)
/* tt:AnalyticsDeviceEngineConfiguration */
class SOAP_CMAC tt__AnalyticsDeviceEngineConfiguration : public xsd__anyType
{
public:
	std::vector<class tt__EngineConfiguration * >EngineConfiguration;	/* required element of type tt:EngineConfiguration */
	class tt__AnalyticsDeviceEngineConfigurationExtension *Extension;	/* optional element of type tt:AnalyticsDeviceEngineConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 745; } /* = unique type id SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsDeviceEngineConfiguration() { tt__AnalyticsDeviceEngineConfiguration::soap_default(NULL); }
	virtual ~tt__AnalyticsDeviceEngineConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension
#define SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension (746)
/* tt:AnalyticsDeviceEngineConfigurationExtension */
class SOAP_CMAC tt__AnalyticsDeviceEngineConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 746; } /* = unique type id SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsDeviceEngineConfigurationExtension() { tt__AnalyticsDeviceEngineConfigurationExtension::soap_default(NULL); }
	virtual ~tt__AnalyticsDeviceEngineConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__EngineConfiguration
#define SOAP_TYPE_tt__EngineConfiguration (747)
/* tt:EngineConfiguration */
class SOAP_CMAC tt__EngineConfiguration : public xsd__anyType
{
public:
	tt__VideoAnalyticsConfiguration *VideoAnalyticsConfiguration;	/* required element of type tt:VideoAnalyticsConfiguration */
	class tt__AnalyticsEngineInputInfo *AnalyticsEngineInputInfo;	/* required element of type tt:AnalyticsEngineInputInfo */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 747; } /* = unique type id SOAP_TYPE_tt__EngineConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EngineConfiguration() { tt__EngineConfiguration::soap_default(NULL); }
	virtual ~tt__EngineConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineInputInfo
#define SOAP_TYPE_tt__AnalyticsEngineInputInfo (748)
/* tt:AnalyticsEngineInputInfo */
class SOAP_CMAC tt__AnalyticsEngineInputInfo : public xsd__anyType
{
public:
	tt__Config *InputInfo;	/* optional element of type tt:Config */
	class tt__AnalyticsEngineInputInfoExtension *Extension;	/* optional element of type tt:AnalyticsEngineInputInfoExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 748; } /* = unique type id SOAP_TYPE_tt__AnalyticsEngineInputInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsEngineInputInfo() { tt__AnalyticsEngineInputInfo::soap_default(NULL); }
	virtual ~tt__AnalyticsEngineInputInfo() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension
#define SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension (749)
/* tt:AnalyticsEngineInputInfoExtension */
class SOAP_CMAC tt__AnalyticsEngineInputInfoExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 749; } /* = unique type id SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsEngineInputInfoExtension() { tt__AnalyticsEngineInputInfoExtension::soap_default(NULL); }
	virtual ~tt__AnalyticsEngineInputInfoExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__SourceIdentification
#define SOAP_TYPE_tt__SourceIdentification (751)
/* tt:SourceIdentification */
class SOAP_CMAC tt__SourceIdentification : public xsd__anyType
{
public:
	std::string Name;	/* required element of type xsd:string */
	std::vector<std::string >Token;	/* required element of type tt:ReferenceToken */
	class tt__SourceIdentificationExtension *Extension;	/* optional element of type tt:SourceIdentificationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 751; } /* = unique type id SOAP_TYPE_tt__SourceIdentification */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SourceIdentification() { tt__SourceIdentification::soap_default(NULL); }
	virtual ~tt__SourceIdentification() { }
};
#endif

#ifndef SOAP_TYPE_tt__SourceIdentificationExtension
#define SOAP_TYPE_tt__SourceIdentificationExtension (752)
/* tt:SourceIdentificationExtension */
class SOAP_CMAC tt__SourceIdentificationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 752; } /* = unique type id SOAP_TYPE_tt__SourceIdentificationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SourceIdentificationExtension() { tt__SourceIdentificationExtension::soap_default(NULL); }
	virtual ~tt__SourceIdentificationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataInput
#define SOAP_TYPE_tt__MetadataInput (753)
/* tt:MetadataInput */
class SOAP_CMAC tt__MetadataInput : public xsd__anyType
{
public:
	std::vector<tt__Config * >MetadataConfig;	/* optional element of type tt:Config */
	class tt__MetadataInputExtension *Extension;	/* optional element of type tt:MetadataInputExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 753; } /* = unique type id SOAP_TYPE_tt__MetadataInput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataInput() { tt__MetadataInput::soap_default(NULL); }
	virtual ~tt__MetadataInput() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataInputExtension
#define SOAP_TYPE_tt__MetadataInputExtension (754)
/* tt:MetadataInputExtension */
class SOAP_CMAC tt__MetadataInputExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 754; } /* = unique type id SOAP_TYPE_tt__MetadataInputExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataInputExtension() { tt__MetadataInputExtension::soap_default(NULL); }
	virtual ~tt__MetadataInputExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsStateInformation
#define SOAP_TYPE_tt__AnalyticsStateInformation (756)
/* tt:AnalyticsStateInformation */
class SOAP_CMAC tt__AnalyticsStateInformation : public xsd__anyType
{
public:
	std::string AnalyticsEngineControlToken;	/* required element of type tt:ReferenceToken */
	class tt__AnalyticsState *State;	/* required element of type tt:AnalyticsState */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 756; } /* = unique type id SOAP_TYPE_tt__AnalyticsStateInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsStateInformation() { tt__AnalyticsStateInformation::soap_default(NULL); }
	virtual ~tt__AnalyticsStateInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsState
#define SOAP_TYPE_tt__AnalyticsState (757)
/* tt:AnalyticsState */
class SOAP_CMAC tt__AnalyticsState : public xsd__anyType
{
public:
	std::string *Error;	/* optional element of type xsd:string */
	std::string State;	/* required element of type xsd:string */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 757; } /* = unique type id SOAP_TYPE_tt__AnalyticsState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsState() { tt__AnalyticsState::soap_default(NULL); }
	virtual ~tt__AnalyticsState() { }
};
#endif

#ifndef SOAP_TYPE_tt__ActionEngineEventPayload
#define SOAP_TYPE_tt__ActionEngineEventPayload (758)
/* tt:ActionEngineEventPayload */
class SOAP_CMAC tt__ActionEngineEventPayload : public xsd__anyType
{
public:
	struct SOAP_ENV__Envelope *RequestInfo;	/* optional element of type SOAP-ENV:Envelope */
	struct SOAP_ENV__Envelope *ResponseInfo;	/* optional element of type SOAP-ENV:Envelope */
	struct SOAP_ENV__Fault *Fault;	/* optional element of type SOAP-ENV:Fault */
	class tt__ActionEngineEventPayloadExtension *Extension;	/* optional element of type tt:ActionEngineEventPayloadExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 758; } /* = unique type id SOAP_TYPE_tt__ActionEngineEventPayload */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ActionEngineEventPayload() { tt__ActionEngineEventPayload::soap_default(NULL); }
	virtual ~tt__ActionEngineEventPayload() { }
};
#endif

#ifndef SOAP_TYPE_tt__ActionEngineEventPayloadExtension
#define SOAP_TYPE_tt__ActionEngineEventPayloadExtension (759)
/* tt:ActionEngineEventPayloadExtension */
class SOAP_CMAC tt__ActionEngineEventPayloadExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 759; } /* = unique type id SOAP_TYPE_tt__ActionEngineEventPayloadExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ActionEngineEventPayloadExtension() { tt__ActionEngineEventPayloadExtension::soap_default(NULL); }
	virtual ~tt__ActionEngineEventPayloadExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioClassCandidate
#define SOAP_TYPE_tt__AudioClassCandidate (760)
/* tt:AudioClassCandidate */
class SOAP_CMAC tt__AudioClassCandidate : public xsd__anyType
{
public:
	std::string Type;	/* required element of type tt:AudioClassType */
	float Likelihood;	/* required element of type xsd:float */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 760; } /* = unique type id SOAP_TYPE_tt__AudioClassCandidate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioClassCandidate() { tt__AudioClassCandidate::soap_default(NULL); }
	virtual ~tt__AudioClassCandidate() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioClassDescriptor
#define SOAP_TYPE_tt__AudioClassDescriptor (761)
/* tt:AudioClassDescriptor */
class SOAP_CMAC tt__AudioClassDescriptor : public xsd__anyType
{
public:
	std::vector<tt__AudioClassCandidate * >ClassCandidate;	/* optional element of type tt:AudioClassCandidate */
	class tt__AudioClassDescriptorExtension *Extension;	/* optional element of type tt:AudioClassDescriptorExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 761; } /* = unique type id SOAP_TYPE_tt__AudioClassDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioClassDescriptor() { tt__AudioClassDescriptor::soap_default(NULL); }
	virtual ~tt__AudioClassDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioClassDescriptorExtension
#define SOAP_TYPE_tt__AudioClassDescriptorExtension (762)
/* tt:AudioClassDescriptorExtension */
class SOAP_CMAC tt__AudioClassDescriptorExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 762; } /* = unique type id SOAP_TYPE_tt__AudioClassDescriptorExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioClassDescriptorExtension() { tt__AudioClassDescriptorExtension::soap_default(NULL); }
	virtual ~tt__AudioClassDescriptorExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ActiveConnection
#define SOAP_TYPE_tt__ActiveConnection (763)
/* tt:ActiveConnection */
class SOAP_CMAC tt__ActiveConnection : public xsd__anyType
{
public:
	float CurrentBitrate;	/* required element of type xsd:float */
	float CurrentFps;	/* required element of type xsd:float */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 763; } /* = unique type id SOAP_TYPE_tt__ActiveConnection */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ActiveConnection() { tt__ActiveConnection::soap_default(NULL); }
	virtual ~tt__ActiveConnection() { }
};
#endif

#ifndef SOAP_TYPE_tt__ProfileStatus
#define SOAP_TYPE_tt__ProfileStatus (764)
/* tt:ProfileStatus */
class SOAP_CMAC tt__ProfileStatus : public xsd__anyType
{
public:
	std::vector<tt__ActiveConnection * >ActiveConnections;	/* optional element of type tt:ActiveConnection */
	class tt__ProfileStatusExtension *Extension;	/* optional element of type tt:ProfileStatusExtension */
public:
	virtual int soap_type() const { return 764; } /* = unique type id SOAP_TYPE_tt__ProfileStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ProfileStatus() { tt__ProfileStatus::soap_default(NULL); }
	virtual ~tt__ProfileStatus() { }
};
#endif

#ifndef SOAP_TYPE_tt__ProfileStatusExtension
#define SOAP_TYPE_tt__ProfileStatusExtension (765)
/* tt:ProfileStatusExtension */
class SOAP_CMAC tt__ProfileStatusExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 765; } /* = unique type id SOAP_TYPE_tt__ProfileStatusExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ProfileStatusExtension() { tt__ProfileStatusExtension::soap_default(NULL); }
	virtual ~tt__ProfileStatusExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDPosConfiguration
#define SOAP_TYPE_tt__OSDPosConfiguration (767)
/* tt:OSDPosConfiguration */
class SOAP_CMAC tt__OSDPosConfiguration : public xsd__anyType
{
public:
	std::string Type;	/* required element of type xsd:string */
	tt__Vector *Pos;	/* optional element of type tt:Vector */
	class tt__OSDPosConfigurationExtension *Extension;	/* optional element of type tt:OSDPosConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 767; } /* = unique type id SOAP_TYPE_tt__OSDPosConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDPosConfiguration() { tt__OSDPosConfiguration::soap_default(NULL); }
	virtual ~tt__OSDPosConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDPosConfigurationExtension
#define SOAP_TYPE_tt__OSDPosConfigurationExtension (768)
/* tt:OSDPosConfigurationExtension */
class SOAP_CMAC tt__OSDPosConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 768; } /* = unique type id SOAP_TYPE_tt__OSDPosConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDPosConfigurationExtension() { tt__OSDPosConfigurationExtension::soap_default(NULL); }
	virtual ~tt__OSDPosConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDColor
#define SOAP_TYPE_tt__OSDColor (769)
/* tt:OSDColor */
class SOAP_CMAC tt__OSDColor : public xsd__anyType
{
public:
	class tt__Color *Color;	/* required element of type tt:Color */
	int *Transparent;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 769; } /* = unique type id SOAP_TYPE_tt__OSDColor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDColor() { tt__OSDColor::soap_default(NULL); }
	virtual ~tt__OSDColor() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDTextConfiguration
#define SOAP_TYPE_tt__OSDTextConfiguration (770)
/* tt:OSDTextConfiguration */
class SOAP_CMAC tt__OSDTextConfiguration : public xsd__anyType
{
public:
	std::string Type;	/* required element of type xsd:string */
	std::string *DateFormat;	/* optional element of type xsd:string */
	std::string *TimeFormat;	/* optional element of type xsd:string */
	int *FontSize;	/* optional element of type xsd:int */
	tt__OSDColor *FontColor;	/* optional element of type tt:OSDColor */
	tt__OSDColor *BackgroundColor;	/* optional element of type tt:OSDColor */
	std::string *PlainText;	/* optional element of type xsd:string */
	class tt__OSDTextConfigurationExtension *Extension;	/* optional element of type tt:OSDTextConfigurationExtension */
	bool *IsPersistentText;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 770; } /* = unique type id SOAP_TYPE_tt__OSDTextConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDTextConfiguration() { tt__OSDTextConfiguration::soap_default(NULL); }
	virtual ~tt__OSDTextConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDTextConfigurationExtension
#define SOAP_TYPE_tt__OSDTextConfigurationExtension (771)
/* tt:OSDTextConfigurationExtension */
class SOAP_CMAC tt__OSDTextConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 771; } /* = unique type id SOAP_TYPE_tt__OSDTextConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDTextConfigurationExtension() { tt__OSDTextConfigurationExtension::soap_default(NULL); }
	virtual ~tt__OSDTextConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDImgConfiguration
#define SOAP_TYPE_tt__OSDImgConfiguration (772)
/* tt:OSDImgConfiguration */
class SOAP_CMAC tt__OSDImgConfiguration : public xsd__anyType
{
public:
	std::string ImgPath;	/* required element of type xsd:anyURI */
	class tt__OSDImgConfigurationExtension *Extension;	/* optional element of type tt:OSDImgConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 772; } /* = unique type id SOAP_TYPE_tt__OSDImgConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDImgConfiguration() { tt__OSDImgConfiguration::soap_default(NULL); }
	virtual ~tt__OSDImgConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDImgConfigurationExtension
#define SOAP_TYPE_tt__OSDImgConfigurationExtension (773)
/* tt:OSDImgConfigurationExtension */
class SOAP_CMAC tt__OSDImgConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 773; } /* = unique type id SOAP_TYPE_tt__OSDImgConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDImgConfigurationExtension() { tt__OSDImgConfigurationExtension::soap_default(NULL); }
	virtual ~tt__OSDImgConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ColorspaceRange
#define SOAP_TYPE_tt__ColorspaceRange (774)
/* tt:ColorspaceRange */
class SOAP_CMAC tt__ColorspaceRange : public xsd__anyType
{
public:
	tt__FloatRange *X;	/* required element of type tt:FloatRange */
	tt__FloatRange *Y;	/* required element of type tt:FloatRange */
	tt__FloatRange *Z;	/* required element of type tt:FloatRange */
	std::string Colorspace;	/* required element of type xsd:anyURI */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 774; } /* = unique type id SOAP_TYPE_tt__ColorspaceRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ColorspaceRange() { tt__ColorspaceRange::soap_default(NULL); }
	virtual ~tt__ColorspaceRange() { }
};
#endif

#ifndef SOAP_TYPE__tt__union_ColorOptions
#define SOAP_TYPE__tt__union_ColorOptions (2787)
/* xsd:choice */
union _tt__union_ColorOptions
{
#define SOAP_UNION__tt__union_ColorOptions_ColorList	(1)
	std::vector<tt__Color * >*ColorList;
#define SOAP_UNION__tt__union_ColorOptions_ColorspaceRange	(2)
	std::vector<tt__ColorspaceRange * >*ColorspaceRange;
};
#endif

#ifndef SOAP_TYPE_tt__ColorOptions
#define SOAP_TYPE_tt__ColorOptions (775)
/* tt:ColorOptions */
class SOAP_CMAC tt__ColorOptions : public xsd__anyType
{
public:
	int __union_ColorOptions;	/* union discriminant (of union defined below) */
	union _tt__union_ColorOptions union_ColorOptions;	/* required element of type xsd:choice */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 775; } /* = unique type id SOAP_TYPE_tt__ColorOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ColorOptions() { tt__ColorOptions::soap_default(NULL); }
	virtual ~tt__ColorOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDColorOptions
#define SOAP_TYPE_tt__OSDColorOptions (776)
/* tt:OSDColorOptions */
class SOAP_CMAC tt__OSDColorOptions : public xsd__anyType
{
public:
	tt__ColorOptions *Color;	/* optional element of type tt:ColorOptions */
	tt__IntRange *Transparent;	/* optional element of type tt:IntRange */
	class tt__OSDColorOptionsExtension *Extension;	/* optional element of type tt:OSDColorOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 776; } /* = unique type id SOAP_TYPE_tt__OSDColorOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDColorOptions() { tt__OSDColorOptions::soap_default(NULL); }
	virtual ~tt__OSDColorOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDColorOptionsExtension
#define SOAP_TYPE_tt__OSDColorOptionsExtension (777)
/* tt:OSDColorOptionsExtension */
class SOAP_CMAC tt__OSDColorOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 777; } /* = unique type id SOAP_TYPE_tt__OSDColorOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDColorOptionsExtension() { tt__OSDColorOptionsExtension::soap_default(NULL); }
	virtual ~tt__OSDColorOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDTextOptions
#define SOAP_TYPE_tt__OSDTextOptions (778)
/* tt:OSDTextOptions */
class SOAP_CMAC tt__OSDTextOptions : public xsd__anyType
{
public:
	std::vector<std::string >Type;	/* required element of type xsd:string */
	tt__IntRange *FontSizeRange;	/* optional element of type tt:IntRange */
	std::vector<std::string >DateFormat;	/* optional element of type xsd:string */
	std::vector<std::string >TimeFormat;	/* optional element of type xsd:string */
	tt__OSDColorOptions *FontColor;	/* optional element of type tt:OSDColorOptions */
	tt__OSDColorOptions *BackgroundColor;	/* optional element of type tt:OSDColorOptions */
	class tt__OSDTextOptionsExtension *Extension;	/* optional element of type tt:OSDTextOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 778; } /* = unique type id SOAP_TYPE_tt__OSDTextOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDTextOptions() { tt__OSDTextOptions::soap_default(NULL); }
	virtual ~tt__OSDTextOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDTextOptionsExtension
#define SOAP_TYPE_tt__OSDTextOptionsExtension (779)
/* tt:OSDTextOptionsExtension */
class SOAP_CMAC tt__OSDTextOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 779; } /* = unique type id SOAP_TYPE_tt__OSDTextOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDTextOptionsExtension() { tt__OSDTextOptionsExtension::soap_default(NULL); }
	virtual ~tt__OSDTextOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDImgOptions
#define SOAP_TYPE_tt__OSDImgOptions (780)
/* tt:OSDImgOptions */
class SOAP_CMAC tt__OSDImgOptions : public xsd__anyType
{
public:
	std::vector<std::string >ImagePath;	/* required element of type xsd:anyURI */
	class tt__OSDImgOptionsExtension *Extension;	/* optional element of type tt:OSDImgOptionsExtension */
	std::string *FormatsSupported;	/* optional attribute */
	int *MaxSize;	/* optional attribute */
	int *MaxWidth;	/* optional attribute */
	int *MaxHeight;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 780; } /* = unique type id SOAP_TYPE_tt__OSDImgOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDImgOptions() { tt__OSDImgOptions::soap_default(NULL); }
	virtual ~tt__OSDImgOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDImgOptionsExtension
#define SOAP_TYPE_tt__OSDImgOptionsExtension (781)
/* tt:OSDImgOptionsExtension */
class SOAP_CMAC tt__OSDImgOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 781; } /* = unique type id SOAP_TYPE_tt__OSDImgOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDImgOptionsExtension() { tt__OSDImgOptionsExtension::soap_default(NULL); }
	virtual ~tt__OSDImgOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDConfigurationExtension
#define SOAP_TYPE_tt__OSDConfigurationExtension (783)
/* tt:OSDConfigurationExtension */
class SOAP_CMAC tt__OSDConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 783; } /* = unique type id SOAP_TYPE_tt__OSDConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDConfigurationExtension() { tt__OSDConfigurationExtension::soap_default(NULL); }
	virtual ~tt__OSDConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__MaximumNumberOfOSDs
#define SOAP_TYPE_tt__MaximumNumberOfOSDs (784)
/* Primitive tt:MaximumNumberOfOSDs schema type: */
class SOAP_CMAC tt__MaximumNumberOfOSDs : public xsd__anyType
{
public:
	int Total;	/* required attribute */
	int *Image;	/* optional attribute */
	int *PlainText;	/* optional attribute */
	int *Date;	/* optional attribute */
	int *Time;	/* optional attribute */
	int *DateAndTime;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 784; } /* = unique type id SOAP_TYPE_tt__MaximumNumberOfOSDs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MaximumNumberOfOSDs() { tt__MaximumNumberOfOSDs::soap_default(NULL); }
	virtual ~tt__MaximumNumberOfOSDs() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDConfigurationOptions
#define SOAP_TYPE_tt__OSDConfigurationOptions (785)
/* tt:OSDConfigurationOptions */
class SOAP_CMAC tt__OSDConfigurationOptions : public xsd__anyType
{
public:
	tt__MaximumNumberOfOSDs *MaximumNumberOfOSDs;	/* required element of type tt:MaximumNumberOfOSDs */
	std::vector<enum tt__OSDType >Type;	/* required element of type tt:OSDType */
	std::vector<std::string >PositionOption;	/* required element of type xsd:string */
	tt__OSDTextOptions *TextOption;	/* optional element of type tt:OSDTextOptions */
	tt__OSDImgOptions *ImageOption;	/* optional element of type tt:OSDImgOptions */
	class tt__OSDConfigurationOptionsExtension *Extension;	/* optional element of type tt:OSDConfigurationOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 785; } /* = unique type id SOAP_TYPE_tt__OSDConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDConfigurationOptions() { tt__OSDConfigurationOptions::soap_default(NULL); }
	virtual ~tt__OSDConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDConfigurationOptionsExtension
#define SOAP_TYPE_tt__OSDConfigurationOptionsExtension (786)
/* tt:OSDConfigurationOptionsExtension */
class SOAP_CMAC tt__OSDConfigurationOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 786; } /* = unique type id SOAP_TYPE_tt__OSDConfigurationOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDConfigurationOptionsExtension() { tt__OSDConfigurationOptionsExtension::soap_default(NULL); }
	virtual ~tt__OSDConfigurationOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__FileProgress
#define SOAP_TYPE_tt__FileProgress (787)
/* tt:FileProgress */
class SOAP_CMAC tt__FileProgress : public xsd__anyType
{
public:
	std::string FileName;	/* required element of type xsd:string */
	float Progress;	/* required element of type xsd:float */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 787; } /* = unique type id SOAP_TYPE_tt__FileProgress */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FileProgress() { tt__FileProgress::soap_default(NULL); }
	virtual ~tt__FileProgress() { }
};
#endif

#ifndef SOAP_TYPE_tt__ArrayOfFileProgress
#define SOAP_TYPE_tt__ArrayOfFileProgress (788)
/* tt:ArrayOfFileProgress */
class SOAP_CMAC tt__ArrayOfFileProgress : public xsd__anyType
{
public:
	std::vector<tt__FileProgress * >FileProgress;	/* optional element of type tt:FileProgress */
	class tt__ArrayOfFileProgressExtension *Extension;	/* optional element of type tt:ArrayOfFileProgressExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 788; } /* = unique type id SOAP_TYPE_tt__ArrayOfFileProgress */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ArrayOfFileProgress() { tt__ArrayOfFileProgress::soap_default(NULL); }
	virtual ~tt__ArrayOfFileProgress() { }
};
#endif

#ifndef SOAP_TYPE_tt__ArrayOfFileProgressExtension
#define SOAP_TYPE_tt__ArrayOfFileProgressExtension (789)
/* tt:ArrayOfFileProgressExtension */
class SOAP_CMAC tt__ArrayOfFileProgressExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 789; } /* = unique type id SOAP_TYPE_tt__ArrayOfFileProgressExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ArrayOfFileProgressExtension() { tt__ArrayOfFileProgressExtension::soap_default(NULL); }
	virtual ~tt__ArrayOfFileProgressExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__StorageReferencePath
#define SOAP_TYPE_tt__StorageReferencePath (790)
/* tt:StorageReferencePath */
class SOAP_CMAC tt__StorageReferencePath : public xsd__anyType
{
public:
	std::string StorageToken;	/* required element of type tt:ReferenceToken */
	std::string *RelativePath;	/* optional element of type xsd:string */
	class tt__StorageReferencePathExtension *Extension;	/* optional element of type tt:StorageReferencePathExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 790; } /* = unique type id SOAP_TYPE_tt__StorageReferencePath */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__StorageReferencePath() { tt__StorageReferencePath::soap_default(NULL); }
	virtual ~tt__StorageReferencePath() { }
};
#endif

#ifndef SOAP_TYPE_tt__StorageReferencePathExtension
#define SOAP_TYPE_tt__StorageReferencePathExtension (791)
/* tt:StorageReferencePathExtension */
class SOAP_CMAC tt__StorageReferencePathExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 791; } /* = unique type id SOAP_TYPE_tt__StorageReferencePathExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__StorageReferencePathExtension() { tt__StorageReferencePathExtension::soap_default(NULL); }
	virtual ~tt__StorageReferencePathExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Vector2D
#define SOAP_TYPE_tt__Vector2D (792)
/* Primitive tt:Vector2D schema type: */
class SOAP_CMAC tt__Vector2D : public xsd__anyType
{
public:
	float x;	/* required attribute */
	float y;	/* required attribute */
	std::string *space;	/* optional attribute */
public:
	virtual int soap_type() const { return 792; } /* = unique type id SOAP_TYPE_tt__Vector2D */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Vector2D() { tt__Vector2D::soap_default(NULL); }
	virtual ~tt__Vector2D() { }
};
#endif

#ifndef SOAP_TYPE_tt__Vector1D
#define SOAP_TYPE_tt__Vector1D (793)
/* Primitive tt:Vector1D schema type: */
class SOAP_CMAC tt__Vector1D : public xsd__anyType
{
public:
	float x;	/* required attribute */
	std::string *space;	/* optional attribute */
public:
	virtual int soap_type() const { return 793; } /* = unique type id SOAP_TYPE_tt__Vector1D */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Vector1D() { tt__Vector1D::soap_default(NULL); }
	virtual ~tt__Vector1D() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZVector
#define SOAP_TYPE_tt__PTZVector (794)
/* tt:PTZVector */
class SOAP_CMAC tt__PTZVector : public xsd__anyType
{
public:
	tt__Vector2D *PanTilt;	/* optional element of type tt:Vector2D */
	tt__Vector1D *Zoom;	/* optional element of type tt:Vector1D */
public:
	virtual int soap_type() const { return 794; } /* = unique type id SOAP_TYPE_tt__PTZVector */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZVector() { tt__PTZVector::soap_default(NULL); }
	virtual ~tt__PTZVector() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZStatus
#define SOAP_TYPE_tt__PTZStatus (795)
/* tt:PTZStatus */
class SOAP_CMAC tt__PTZStatus : public xsd__anyType
{
public:
	tt__PTZVector *Position;	/* optional element of type tt:PTZVector */
	class tt__PTZMoveStatus *MoveStatus;	/* optional element of type tt:PTZMoveStatus */
	std::string *Error;	/* optional element of type xsd:string */
	time_t UtcTime;	/* required element of type xsd:dateTime */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 795; } /* = unique type id SOAP_TYPE_tt__PTZStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZStatus() { tt__PTZStatus::soap_default(NULL); }
	virtual ~tt__PTZStatus() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZMoveStatus
#define SOAP_TYPE_tt__PTZMoveStatus (796)
/* tt:PTZMoveStatus */
class SOAP_CMAC tt__PTZMoveStatus : public xsd__anyType
{
public:
	enum tt__MoveStatus *PanTilt;	/* optional element of type tt:MoveStatus */
	enum tt__MoveStatus *Zoom;	/* optional element of type tt:MoveStatus */
public:
	virtual int soap_type() const { return 796; } /* = unique type id SOAP_TYPE_tt__PTZMoveStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZMoveStatus() { tt__PTZMoveStatus::soap_default(NULL); }
	virtual ~tt__PTZMoveStatus() { }
};
#endif

#ifndef SOAP_TYPE_tt__Vector
#define SOAP_TYPE_tt__Vector (797)
/* Primitive tt:Vector schema type: */
class SOAP_CMAC tt__Vector : public xsd__anyType
{
public:
	float *x;	/* optional attribute */
	float *y;	/* optional attribute */
public:
	virtual int soap_type() const { return 797; } /* = unique type id SOAP_TYPE_tt__Vector */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Vector() { tt__Vector::soap_default(NULL); }
	virtual ~tt__Vector() { }
};
#endif

#ifndef SOAP_TYPE_tt__Rectangle
#define SOAP_TYPE_tt__Rectangle (798)
/* Primitive tt:Rectangle schema type: */
class SOAP_CMAC tt__Rectangle : public xsd__anyType
{
public:
	float *bottom;	/* optional attribute */
	float *top;	/* optional attribute */
	float *right;	/* optional attribute */
	float *left;	/* optional attribute */
public:
	virtual int soap_type() const { return 798; } /* = unique type id SOAP_TYPE_tt__Rectangle */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Rectangle() { tt__Rectangle::soap_default(NULL); }
	virtual ~tt__Rectangle() { }
};
#endif

#ifndef SOAP_TYPE_tt__Polygon
#define SOAP_TYPE_tt__Polygon (799)
/* tt:Polygon */
class SOAP_CMAC tt__Polygon : public xsd__anyType
{
public:
	std::vector<tt__Vector * >Point;	/* required element of type tt:Vector */
public:
	virtual int soap_type() const { return 799; } /* = unique type id SOAP_TYPE_tt__Polygon */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Polygon() { tt__Polygon::soap_default(NULL); }
	virtual ~tt__Polygon() { }
};
#endif

#ifndef SOAP_TYPE_tt__Color
#define SOAP_TYPE_tt__Color (800)
/* Primitive tt:Color schema type: */
class SOAP_CMAC tt__Color : public xsd__anyType
{
public:
	float X;	/* required attribute */
	float Y;	/* required attribute */
	float Z;	/* required attribute */
	std::string *Colorspace;	/* optional attribute */
public:
	virtual int soap_type() const { return 800; } /* = unique type id SOAP_TYPE_tt__Color */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Color() { tt__Color::soap_default(NULL); }
	virtual ~tt__Color() { }
};
#endif

#ifndef SOAP_TYPE_tt__ColorCovariance
#define SOAP_TYPE_tt__ColorCovariance (801)
/* Primitive tt:ColorCovariance schema type: */
class SOAP_CMAC tt__ColorCovariance : public xsd__anyType
{
public:
	float XX;	/* required attribute */
	float YY;	/* required attribute */
	float ZZ;	/* required attribute */
	float *XY;	/* optional attribute */
	float *XZ;	/* optional attribute */
	float *YZ;	/* optional attribute */
	std::string *Colorspace;	/* optional attribute */
public:
	virtual int soap_type() const { return 801; } /* = unique type id SOAP_TYPE_tt__ColorCovariance */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ColorCovariance() { tt__ColorCovariance::soap_default(NULL); }
	virtual ~tt__ColorCovariance() { }
};
#endif

#ifndef SOAP_TYPE_tt__Transformation
#define SOAP_TYPE_tt__Transformation (802)
/* tt:Transformation */
class SOAP_CMAC tt__Transformation : public xsd__anyType
{
public:
	tt__Vector *Translate;	/* optional element of type tt:Vector */
	tt__Vector *Scale;	/* optional element of type tt:Vector */
	class tt__TransformationExtension *Extension;	/* optional element of type tt:TransformationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 802; } /* = unique type id SOAP_TYPE_tt__Transformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Transformation() { tt__Transformation::soap_default(NULL); }
	virtual ~tt__Transformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__TransformationExtension
#define SOAP_TYPE_tt__TransformationExtension (803)
/* tt:TransformationExtension */
class SOAP_CMAC tt__TransformationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 803; } /* = unique type id SOAP_TYPE_tt__TransformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TransformationExtension() { tt__TransformationExtension::soap_default(NULL); }
	virtual ~tt__TransformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__GeoLocation
#define SOAP_TYPE_tt__GeoLocation (804)
/* tt:GeoLocation */
class SOAP_CMAC tt__GeoLocation : public xsd__anyType
{
public:
	std::vector<char * >__any;
	double *lon;	/* optional attribute */
	double *lat;	/* optional attribute */
	float *elevation;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 804; } /* = unique type id SOAP_TYPE_tt__GeoLocation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__GeoLocation() { tt__GeoLocation::soap_default(NULL); }
	virtual ~tt__GeoLocation() { }
};
#endif

#ifndef SOAP_TYPE_tt__GeoOrientation
#define SOAP_TYPE_tt__GeoOrientation (805)
/* tt:GeoOrientation */
class SOAP_CMAC tt__GeoOrientation : public xsd__anyType
{
public:
	std::vector<char * >__any;
	float *roll;	/* optional attribute */
	float *pitch;	/* optional attribute */
	float *yaw;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 805; } /* = unique type id SOAP_TYPE_tt__GeoOrientation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__GeoOrientation() { tt__GeoOrientation::soap_default(NULL); }
	virtual ~tt__GeoOrientation() { }
};
#endif

#ifndef SOAP_TYPE_tt__LocalLocation
#define SOAP_TYPE_tt__LocalLocation (806)
/* tt:LocalLocation */
class SOAP_CMAC tt__LocalLocation : public xsd__anyType
{
public:
	std::vector<char * >__any;
	float *x;	/* optional attribute */
	float *y;	/* optional attribute */
	float *z;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 806; } /* = unique type id SOAP_TYPE_tt__LocalLocation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__LocalLocation() { tt__LocalLocation::soap_default(NULL); }
	virtual ~tt__LocalLocation() { }
};
#endif

#ifndef SOAP_TYPE_tt__LocalOrientation
#define SOAP_TYPE_tt__LocalOrientation (807)
/* tt:LocalOrientation */
class SOAP_CMAC tt__LocalOrientation : public xsd__anyType
{
public:
	std::vector<char * >__any;
	float *pan;	/* optional attribute */
	float *tilt;	/* optional attribute */
	float *roll;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 807; } /* = unique type id SOAP_TYPE_tt__LocalOrientation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__LocalOrientation() { tt__LocalOrientation::soap_default(NULL); }
	virtual ~tt__LocalOrientation() { }
};
#endif

#ifndef SOAP_TYPE_tt__LocationEntity
#define SOAP_TYPE_tt__LocationEntity (808)
/* tt:LocationEntity */
class SOAP_CMAC tt__LocationEntity : public xsd__anyType
{
public:
	tt__GeoLocation *GeoLocation;	/* optional element of type tt:GeoLocation */
	tt__GeoOrientation *GeoOrientation;	/* optional element of type tt:GeoOrientation */
	tt__LocalLocation *LocalLocation;	/* optional element of type tt:LocalLocation */
	tt__LocalOrientation *LocalOrientation;	/* optional element of type tt:LocalOrientation */
	std::string *Entity;	/* optional attribute */
	std::string *Token;	/* optional attribute */
	bool *Fixed;	/* optional attribute */
	std::string *GeoSource;	/* optional attribute */
	bool *AutoGeo;	/* optional attribute */
public:
	virtual int soap_type() const { return 808; } /* = unique type id SOAP_TYPE_tt__LocationEntity */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__LocationEntity() { tt__LocationEntity::soap_default(NULL); }
	virtual ~tt__LocationEntity() { }
};
#endif

#ifndef SOAP_TYPE__tt__Message
#define SOAP_TYPE__tt__Message (809)
/* tt:Message */
class SOAP_CMAC _tt__Message
{
public:
	tt__ItemList *Source;	/* optional element of type tt:ItemList */
	tt__ItemList *Key;	/* optional element of type tt:ItemList */
	tt__ItemList *Data;	/* optional element of type tt:ItemList */
	tt__MessageExtension *Extension;	/* optional element of type tt:MessageExtension */
	time_t UtcTime;	/* required attribute */
	enum tt__PropertyOperation *PropertyOperation;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 809; } /* = unique type id SOAP_TYPE__tt__Message */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__Message() { _tt__Message::soap_default(NULL); }
	virtual ~_tt__Message() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__QueryExpressionType
#define SOAP_TYPE_wsnt__QueryExpressionType (810)
/* wsnt:QueryExpressionType */
class SOAP_CMAC wsnt__QueryExpressionType : public xsd__anyType
{
public:
	char *__any;
	std::string Dialect;	/* required attribute */
	char *__mixed;
public:
	virtual int soap_type() const { return 810; } /* = unique type id SOAP_TYPE_wsnt__QueryExpressionType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__QueryExpressionType() { wsnt__QueryExpressionType::soap_default(NULL); }
	virtual ~wsnt__QueryExpressionType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__TopicExpressionType
#define SOAP_TYPE_wsnt__TopicExpressionType (811)
/* wsnt:TopicExpressionType */
class SOAP_CMAC wsnt__TopicExpressionType : public xsd__anyType
{
public:
	char *__any;
	std::string Dialect;	/* required attribute */
	char *__anyAttribute;	/* optional attribute */
	char *__mixed;
public:
	virtual int soap_type() const { return 811; } /* = unique type id SOAP_TYPE_wsnt__TopicExpressionType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__TopicExpressionType() { wsnt__TopicExpressionType::soap_default(NULL); }
	virtual ~wsnt__TopicExpressionType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__FilterType
#define SOAP_TYPE_wsnt__FilterType (812)
/* wsnt:FilterType */
class SOAP_CMAC wsnt__FilterType : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 812; } /* = unique type id SOAP_TYPE_wsnt__FilterType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__FilterType() { wsnt__FilterType::soap_default(NULL); }
	virtual ~wsnt__FilterType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__SubscriptionPolicyType
#define SOAP_TYPE_wsnt__SubscriptionPolicyType (813)
/* wsnt:SubscriptionPolicyType */
class SOAP_CMAC wsnt__SubscriptionPolicyType : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 813; } /* = unique type id SOAP_TYPE_wsnt__SubscriptionPolicyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__SubscriptionPolicyType() { wsnt__SubscriptionPolicyType::soap_default(NULL); }
	virtual ~wsnt__SubscriptionPolicyType() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__NotificationMessageHolderType_Message
#define SOAP_TYPE__wsnt__NotificationMessageHolderType_Message (2814)
/* wsnt:NotificationMessageHolderType-Message */
class SOAP_CMAC _wsnt__NotificationMessageHolderType_Message
{
public:
	char *__any;
public:
	virtual int soap_type() const { return 2814; } /* = unique type id SOAP_TYPE__wsnt__NotificationMessageHolderType_Message */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__NotificationMessageHolderType_Message() { _wsnt__NotificationMessageHolderType_Message::soap_default(NULL); }
	virtual ~_wsnt__NotificationMessageHolderType_Message() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__NotificationMessageHolderType
#define SOAP_TYPE_wsnt__NotificationMessageHolderType (814)
/* wsnt:NotificationMessageHolderType */
class SOAP_CMAC wsnt__NotificationMessageHolderType : public xsd__anyType
{
public:
	struct wsa5__EndpointReferenceType *SubscriptionReference;	/* optional element of type wsa5:EndpointReferenceType */
	wsnt__TopicExpressionType *Topic;	/* optional element of type wsnt:TopicExpressionType */
	struct wsa5__EndpointReferenceType *ProducerReference;	/* optional element of type wsa5:EndpointReferenceType */
	_wsnt__NotificationMessageHolderType_Message Message;	/* required element of type wsnt:NotificationMessageHolderType-Message */
public:
	virtual int soap_type() const { return 814; } /* = unique type id SOAP_TYPE_wsnt__NotificationMessageHolderType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__NotificationMessageHolderType() { wsnt__NotificationMessageHolderType::soap_default(NULL); }
	virtual ~wsnt__NotificationMessageHolderType() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__NotificationProducerRP
#define SOAP_TYPE__wsnt__NotificationProducerRP (835)
/* wsnt:NotificationProducerRP */
class SOAP_CMAC _wsnt__NotificationProducerRP
{
public:
	std::vector<wsnt__TopicExpressionType * >TopicExpression;	/* optional element of type wsnt:TopicExpressionType */
	bool *FixedTopicSet;	/* optional element of type xsd:boolean */
	std::vector<std::string >TopicExpressionDialect;	/* optional element of type xsd:anyURI */
	class wstop__TopicSetType *wstop__TopicSet;	/* optional element of type wstop:TopicSetType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 835; } /* = unique type id SOAP_TYPE__wsnt__NotificationProducerRP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__NotificationProducerRP() { _wsnt__NotificationProducerRP::soap_default(NULL); }
	virtual ~_wsnt__NotificationProducerRP() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__SubscriptionManagerRP
#define SOAP_TYPE__wsnt__SubscriptionManagerRP (836)
/* wsnt:SubscriptionManagerRP */
class SOAP_CMAC _wsnt__SubscriptionManagerRP
{
public:
	struct wsa5__EndpointReferenceType ConsumerReference;	/* required element of type wsa5:EndpointReferenceType */
	wsnt__FilterType *Filter;	/* optional element of type wsnt:FilterType */
	wsnt__SubscriptionPolicyType *SubscriptionPolicy;	/* optional element of type wsnt:SubscriptionPolicyType */
	time_t *CreationTime;	/* optional element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 836; } /* = unique type id SOAP_TYPE__wsnt__SubscriptionManagerRP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__SubscriptionManagerRP() { _wsnt__SubscriptionManagerRP::soap_default(NULL); }
	virtual ~_wsnt__SubscriptionManagerRP() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__Notify
#define SOAP_TYPE__wsnt__Notify (837)
/* wsnt:Notify */
class SOAP_CMAC _wsnt__Notify
{
public:
	std::vector<wsnt__NotificationMessageHolderType * >NotificationMessage;	/* required element of type wsnt:NotificationMessageHolderType */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 837; } /* = unique type id SOAP_TYPE__wsnt__Notify */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__Notify() { _wsnt__Notify::soap_default(NULL); }
	virtual ~_wsnt__Notify() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__UseRaw
#define SOAP_TYPE__wsnt__UseRaw (838)
/* wsnt:UseRaw */
class SOAP_CMAC _wsnt__UseRaw
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 838; } /* = unique type id SOAP_TYPE__wsnt__UseRaw */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__UseRaw() { _wsnt__UseRaw::soap_default(NULL); }
	virtual ~_wsnt__UseRaw() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy
#define SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy (2820)
/* wsnt:Subscribe-SubscriptionPolicy */
class SOAP_CMAC _wsnt__Subscribe_SubscriptionPolicy
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 2820; } /* = unique type id SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__Subscribe_SubscriptionPolicy() { _wsnt__Subscribe_SubscriptionPolicy::soap_default(NULL); }
	virtual ~_wsnt__Subscribe_SubscriptionPolicy() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__Subscribe
#define SOAP_TYPE__wsnt__Subscribe (839)
/* wsnt:Subscribe */
class SOAP_CMAC _wsnt__Subscribe
{
public:
	struct wsa5__EndpointReferenceType ConsumerReference;	/* required element of type wsa5:EndpointReferenceType */
	wsnt__FilterType *Filter;	/* optional element of type wsnt:FilterType */
	std::string *InitialTerminationTime;	/* optional element of type wsnt:AbsoluteOrRelativeTimeType */
	_wsnt__Subscribe_SubscriptionPolicy *SubscriptionPolicy;	/* optional element of type wsnt:Subscribe-SubscriptionPolicy */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 839; } /* = unique type id SOAP_TYPE__wsnt__Subscribe */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__Subscribe() { _wsnt__Subscribe::soap_default(NULL); }
	virtual ~_wsnt__Subscribe() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__SubscribeResponse
#define SOAP_TYPE__wsnt__SubscribeResponse (840)
/* wsnt:SubscribeResponse */
class SOAP_CMAC _wsnt__SubscribeResponse
{
public:
	struct wsa5__EndpointReferenceType SubscriptionReference;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type wsa5:EndpointReferenceType */
	time_t *CurrentTime;	/* optional element of type xsd:dateTime */
	time_t *TerminationTime;	/* optional element of type xsd:dateTime */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 840; } /* = unique type id SOAP_TYPE__wsnt__SubscribeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__SubscribeResponse() { _wsnt__SubscribeResponse::soap_default(NULL); }
	virtual ~_wsnt__SubscribeResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__GetCurrentMessage
#define SOAP_TYPE__wsnt__GetCurrentMessage (841)
/* wsnt:GetCurrentMessage */
class SOAP_CMAC _wsnt__GetCurrentMessage
{
public:
	wsnt__TopicExpressionType *Topic;	/* required element of type wsnt:TopicExpressionType */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 841; } /* = unique type id SOAP_TYPE__wsnt__GetCurrentMessage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__GetCurrentMessage() { _wsnt__GetCurrentMessage::soap_default(NULL); }
	virtual ~_wsnt__GetCurrentMessage() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__GetCurrentMessageResponse
#define SOAP_TYPE__wsnt__GetCurrentMessageResponse (842)
/* wsnt:GetCurrentMessageResponse */
class SOAP_CMAC _wsnt__GetCurrentMessageResponse
{
public:
	std::vector<char * >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 842; } /* = unique type id SOAP_TYPE__wsnt__GetCurrentMessageResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__GetCurrentMessageResponse() { _wsnt__GetCurrentMessageResponse::soap_default(NULL); }
	virtual ~_wsnt__GetCurrentMessageResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__GetMessages
#define SOAP_TYPE__wsnt__GetMessages (843)
/* wsnt:GetMessages */
class SOAP_CMAC _wsnt__GetMessages
{
public:
	std::string *MaximumNumber;	/* optional element of type xsd:nonNegativeInteger */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 843; } /* = unique type id SOAP_TYPE__wsnt__GetMessages */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__GetMessages() { _wsnt__GetMessages::soap_default(NULL); }
	virtual ~_wsnt__GetMessages() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__GetMessagesResponse
#define SOAP_TYPE__wsnt__GetMessagesResponse (844)
/* wsnt:GetMessagesResponse */
class SOAP_CMAC _wsnt__GetMessagesResponse
{
public:
	std::vector<wsnt__NotificationMessageHolderType * >NotificationMessage;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type wsnt:NotificationMessageHolderType */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 844; } /* = unique type id SOAP_TYPE__wsnt__GetMessagesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__GetMessagesResponse() { _wsnt__GetMessagesResponse::soap_default(NULL); }
	virtual ~_wsnt__GetMessagesResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__DestroyPullPoint
#define SOAP_TYPE__wsnt__DestroyPullPoint (845)
/* wsnt:DestroyPullPoint */
class SOAP_CMAC _wsnt__DestroyPullPoint
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 845; } /* = unique type id SOAP_TYPE__wsnt__DestroyPullPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__DestroyPullPoint() { _wsnt__DestroyPullPoint::soap_default(NULL); }
	virtual ~_wsnt__DestroyPullPoint() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__DestroyPullPointResponse
#define SOAP_TYPE__wsnt__DestroyPullPointResponse (846)
/* wsnt:DestroyPullPointResponse */
class SOAP_CMAC _wsnt__DestroyPullPointResponse
{
public:
	std::vector<char * >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	char *__anyAttribute;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 846; } /* = unique type id SOAP_TYPE__wsnt__DestroyPullPointResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__DestroyPullPointResponse() { _wsnt__DestroyPullPointResponse::soap_default(NULL); }
	virtual ~_wsnt__DestroyPullPointResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__CreatePullPoint
#define SOAP_TYPE__wsnt__CreatePullPoint (847)
/* wsnt:CreatePullPoint */
class SOAP_CMAC _wsnt__CreatePullPoint
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 847; } /* = unique type id SOAP_TYPE__wsnt__CreatePullPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__CreatePullPoint() { _wsnt__CreatePullPoint::soap_default(NULL); }
	virtual ~_wsnt__CreatePullPoint() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__CreatePullPointResponse
#define SOAP_TYPE__wsnt__CreatePullPointResponse (848)
/* wsnt:CreatePullPointResponse */
class SOAP_CMAC _wsnt__CreatePullPointResponse
{
public:
	struct wsa5__EndpointReferenceType PullPoint;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type wsa5:EndpointReferenceType */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 848; } /* = unique type id SOAP_TYPE__wsnt__CreatePullPointResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__CreatePullPointResponse() { _wsnt__CreatePullPointResponse::soap_default(NULL); }
	virtual ~_wsnt__CreatePullPointResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__Renew
#define SOAP_TYPE__wsnt__Renew (849)
/* wsnt:Renew */
class SOAP_CMAC _wsnt__Renew
{
public:
	std::string *TerminationTime;	/* required element of type wsnt:AbsoluteOrRelativeTimeType */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 849; } /* = unique type id SOAP_TYPE__wsnt__Renew */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__Renew() { _wsnt__Renew::soap_default(NULL); }
	virtual ~_wsnt__Renew() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__RenewResponse
#define SOAP_TYPE__wsnt__RenewResponse (850)
/* wsnt:RenewResponse */
class SOAP_CMAC _wsnt__RenewResponse
{
public:
	time_t TerminationTime;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:dateTime */
	time_t *CurrentTime;	/* optional element of type xsd:dateTime */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 850; } /* = unique type id SOAP_TYPE__wsnt__RenewResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__RenewResponse() { _wsnt__RenewResponse::soap_default(NULL); }
	virtual ~_wsnt__RenewResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__Unsubscribe
#define SOAP_TYPE__wsnt__Unsubscribe (851)
/* wsnt:Unsubscribe */
class SOAP_CMAC _wsnt__Unsubscribe
{
public:
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 851; } /* = unique type id SOAP_TYPE__wsnt__Unsubscribe */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__Unsubscribe() { _wsnt__Unsubscribe::soap_default(NULL); }
	virtual ~_wsnt__Unsubscribe() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__UnsubscribeResponse
#define SOAP_TYPE__wsnt__UnsubscribeResponse (852)
/* wsnt:UnsubscribeResponse */
class SOAP_CMAC _wsnt__UnsubscribeResponse
{
public:
	std::vector<char * >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 852; } /* = unique type id SOAP_TYPE__wsnt__UnsubscribeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__UnsubscribeResponse() { _wsnt__UnsubscribeResponse::soap_default(NULL); }
	virtual ~_wsnt__UnsubscribeResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__PauseSubscription
#define SOAP_TYPE__wsnt__PauseSubscription (853)
/* wsnt:PauseSubscription */
class SOAP_CMAC _wsnt__PauseSubscription
{
public:
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 853; } /* = unique type id SOAP_TYPE__wsnt__PauseSubscription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__PauseSubscription() { _wsnt__PauseSubscription::soap_default(NULL); }
	virtual ~_wsnt__PauseSubscription() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__PauseSubscriptionResponse
#define SOAP_TYPE__wsnt__PauseSubscriptionResponse (854)
/* wsnt:PauseSubscriptionResponse */
class SOAP_CMAC _wsnt__PauseSubscriptionResponse
{
public:
	std::vector<char * >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 854; } /* = unique type id SOAP_TYPE__wsnt__PauseSubscriptionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__PauseSubscriptionResponse() { _wsnt__PauseSubscriptionResponse::soap_default(NULL); }
	virtual ~_wsnt__PauseSubscriptionResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__ResumeSubscription
#define SOAP_TYPE__wsnt__ResumeSubscription (855)
/* wsnt:ResumeSubscription */
class SOAP_CMAC _wsnt__ResumeSubscription
{
public:
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 855; } /* = unique type id SOAP_TYPE__wsnt__ResumeSubscription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__ResumeSubscription() { _wsnt__ResumeSubscription::soap_default(NULL); }
	virtual ~_wsnt__ResumeSubscription() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__ResumeSubscriptionResponse
#define SOAP_TYPE__wsnt__ResumeSubscriptionResponse (856)
/* wsnt:ResumeSubscriptionResponse */
class SOAP_CMAC _wsnt__ResumeSubscriptionResponse
{
public:
	std::vector<char * >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 856; } /* = unique type id SOAP_TYPE__wsnt__ResumeSubscriptionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__ResumeSubscriptionResponse() { _wsnt__ResumeSubscriptionResponse::soap_default(NULL); }
	virtual ~_wsnt__ResumeSubscriptionResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode
#define SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode (2823)
/* wsrfbf:BaseFaultType-ErrorCode */
class SOAP_CMAC _wsrfbf__BaseFaultType_ErrorCode
{
public:
	std::string dialect;	/* required attribute */
public:
	virtual int soap_type() const { return 2823; } /* = unique type id SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsrfbf__BaseFaultType_ErrorCode() { _wsrfbf__BaseFaultType_ErrorCode::soap_default(NULL); }
	virtual ~_wsrfbf__BaseFaultType_ErrorCode() { }
};
#endif

#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_Description
#define SOAP_TYPE__wsrfbf__BaseFaultType_Description (2825)
/* Primitive wsrfbf:BaseFaultType-Description schema type: */
class SOAP_CMAC _wsrfbf__BaseFaultType_Description
{
public:
	std::string __item;
	std::string *xml__lang;	/* optional attribute */
public:
	virtual int soap_type() const { return 2825; } /* = unique type id SOAP_TYPE__wsrfbf__BaseFaultType_Description */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsrfbf__BaseFaultType_Description() { _wsrfbf__BaseFaultType_Description::soap_default(NULL); }
	virtual ~_wsrfbf__BaseFaultType_Description() { }
};
#endif

#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause
#define SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause (2829)
/* wsrfbf:BaseFaultType-FaultCause */
class SOAP_CMAC _wsrfbf__BaseFaultType_FaultCause
{
public:
	char *__any;
public:
	virtual int soap_type() const { return 2829; } /* = unique type id SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsrfbf__BaseFaultType_FaultCause() { _wsrfbf__BaseFaultType_FaultCause::soap_default(NULL); }
	virtual ~_wsrfbf__BaseFaultType_FaultCause() { }
};
#endif

#ifndef SOAP_TYPE_wsrfbf__BaseFaultType
#define SOAP_TYPE_wsrfbf__BaseFaultType (857)
/* wsrfbf:BaseFaultType */
class SOAP_CMAC wsrfbf__BaseFaultType : public xsd__anyType
{
public:
	std::vector<char * >__any;
	time_t Timestamp;	/* required element of type xsd:dateTime */
	struct wsa5__EndpointReferenceType *Originator;	/* optional element of type wsa5:EndpointReferenceType */
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode;	/* optional element of type wsrfbf:BaseFaultType-ErrorCode */
	std::vector<_wsrfbf__BaseFaultType_Description >*Description;	/* optional element of type wsrfbf:BaseFaultType-Description */
	_wsrfbf__BaseFaultType_FaultCause *FaultCause;	/* optional element of type wsrfbf:BaseFaultType-FaultCause */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 857; } /* = unique type id SOAP_TYPE_wsrfbf__BaseFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsrfbf__BaseFaultType() { wsrfbf__BaseFaultType::soap_default(NULL); }
	virtual ~wsrfbf__BaseFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wstop__Documentation
#define SOAP_TYPE_wstop__Documentation (858)
/* wstop:Documentation */
class SOAP_CMAC wstop__Documentation : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__mixed;
public:
	virtual int soap_type() const { return 858; } /* = unique type id SOAP_TYPE_wstop__Documentation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__Documentation() { wstop__Documentation::soap_default(NULL); }
	virtual ~wstop__Documentation() { }
};
#endif

#ifndef SOAP_TYPE_wstop__ExtensibleDocumented
#define SOAP_TYPE_wstop__ExtensibleDocumented (859)
/* wstop:ExtensibleDocumented */
class SOAP_CMAC wstop__ExtensibleDocumented : public xsd__anyType
{
public:
	wstop__Documentation *documentation;	/* optional element of type wstop:Documentation */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 859; } /* = unique type id SOAP_TYPE_wstop__ExtensibleDocumented */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__ExtensibleDocumented() { wstop__ExtensibleDocumented::soap_default(NULL); }
	virtual ~wstop__ExtensibleDocumented() { }
};
#endif

#ifndef SOAP_TYPE_wstop__QueryExpressionType
#define SOAP_TYPE_wstop__QueryExpressionType (860)
/* wstop:QueryExpressionType */
class SOAP_CMAC wstop__QueryExpressionType : public xsd__anyType
{
public:
	char *__any;
	std::string Dialect;	/* required attribute */
	char *__mixed;
public:
	virtual int soap_type() const { return 860; } /* = unique type id SOAP_TYPE_wstop__QueryExpressionType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__QueryExpressionType() { wstop__QueryExpressionType::soap_default(NULL); }
	virtual ~wstop__QueryExpressionType() { }
};
#endif

#ifndef SOAP_TYPE__ns5__KeyAttribute_Extension
#define SOAP_TYPE__ns5__KeyAttribute_Extension (2832)
/* ns5:KeyAttribute-Extension */
class SOAP_CMAC _ns5__KeyAttribute_Extension
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 2832; } /* = unique type id SOAP_TYPE__ns5__KeyAttribute_Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__KeyAttribute_Extension() { _ns5__KeyAttribute_Extension::soap_default(NULL); }
	virtual ~_ns5__KeyAttribute_Extension() { }
};
#endif

#ifndef SOAP_TYPE_ns5__KeyAttribute
#define SOAP_TYPE_ns5__KeyAttribute (864)
/* ns5:KeyAttribute */
class SOAP_CMAC ns5__KeyAttribute : public xsd__anyType
{
public:
	std::string KeyID;	/* required element of type ns5:KeyID */
	std::string *Alias;	/* optional element of type xsd:string */
	bool *hasPrivateKey;	/* optional element of type xsd:boolean */
	std::string KeyStatus;	/* required element of type xsd:string */
	std::vector<char * >__any;
	bool *externallyGenerated;	/* optional element of type xsd:boolean */
	bool *securelyStored;	/* optional element of type xsd:boolean */
	_ns5__KeyAttribute_Extension *Extension;	/* optional element of type ns5:KeyAttribute-Extension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 864; } /* = unique type id SOAP_TYPE_ns5__KeyAttribute */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__KeyAttribute() { ns5__KeyAttribute::soap_default(NULL); }
	virtual ~ns5__KeyAttribute() { }
};
#endif

#ifndef SOAP_TYPE_ns5__DNAttributeTypeAndValue
#define SOAP_TYPE_ns5__DNAttributeTypeAndValue (865)
/* ns5:DNAttributeTypeAndValue */
class SOAP_CMAC ns5__DNAttributeTypeAndValue : public xsd__anyType
{
public:
	std::string Type;	/* required element of type ns5:DNAttributeType */
	std::string Value;	/* required element of type ns5:DNAttributeValue */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 865; } /* = unique type id SOAP_TYPE_ns5__DNAttributeTypeAndValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__DNAttributeTypeAndValue() { ns5__DNAttributeTypeAndValue::soap_default(NULL); }
	virtual ~ns5__DNAttributeTypeAndValue() { }
};
#endif

#ifndef SOAP_TYPE_ns5__MultiValuedRDN
#define SOAP_TYPE_ns5__MultiValuedRDN (866)
/* ns5:MultiValuedRDN */
class SOAP_CMAC ns5__MultiValuedRDN : public xsd__anyType
{
public:
	std::vector<ns5__DNAttributeTypeAndValue * >Attribute;	/* optional element of type ns5:DNAttributeTypeAndValue */
public:
	virtual int soap_type() const { return 866; } /* = unique type id SOAP_TYPE_ns5__MultiValuedRDN */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__MultiValuedRDN() { ns5__MultiValuedRDN::soap_default(NULL); }
	virtual ~ns5__MultiValuedRDN() { }
};
#endif

#ifndef SOAP_TYPE__ns5__DistinguishedName_anyAttribute
#define SOAP_TYPE__ns5__DistinguishedName_anyAttribute (2839)
/* ns5:DistinguishedName-anyAttribute */
class SOAP_CMAC _ns5__DistinguishedName_anyAttribute
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 2839; } /* = unique type id SOAP_TYPE__ns5__DistinguishedName_anyAttribute */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__DistinguishedName_anyAttribute() { _ns5__DistinguishedName_anyAttribute::soap_default(NULL); }
	virtual ~_ns5__DistinguishedName_anyAttribute() { }
};
#endif

#ifndef SOAP_TYPE_ns5__DistinguishedName
#define SOAP_TYPE_ns5__DistinguishedName (867)
/* ns5:DistinguishedName */
class SOAP_CMAC ns5__DistinguishedName : public xsd__anyType
{
public:
	std::vector<std::string >Country;	/* optional element of type ns5:DNAttributeValue */
	std::vector<std::string >Organization;	/* optional element of type ns5:DNAttributeValue */
	std::vector<std::string >OrganizationalUnit;	/* optional element of type ns5:DNAttributeValue */
	std::vector<std::string >DistinguishedNameQualifier;	/* optional element of type ns5:DNAttributeValue */
	std::vector<std::string >StateOrProvinceName;	/* optional element of type ns5:DNAttributeValue */
	std::vector<std::string >CommonName;	/* optional element of type ns5:DNAttributeValue */
	std::vector<std::string >SerialNumber;	/* optional element of type ns5:DNAttributeValue */
	std::vector<std::string >Locality;	/* optional element of type ns5:DNAttributeValue */
	std::vector<std::string >Title;	/* optional element of type ns5:DNAttributeValue */
	std::vector<std::string >Surname;	/* optional element of type ns5:DNAttributeValue */
	std::vector<std::string >GivenName;	/* optional element of type ns5:DNAttributeValue */
	std::vector<std::string >Initials;	/* optional element of type ns5:DNAttributeValue */
	std::vector<std::string >Pseudonym;	/* optional element of type ns5:DNAttributeValue */
	std::vector<std::string >GenerationQualifier;	/* optional element of type ns5:DNAttributeValue */
	std::vector<ns5__DNAttributeTypeAndValue * >GenericAttribute;	/* optional element of type ns5:DNAttributeTypeAndValue */
	std::vector<ns5__MultiValuedRDN * >MultiValuedRDN;	/* optional element of type ns5:MultiValuedRDN */
	_ns5__DistinguishedName_anyAttribute *anyAttribute;	/* optional element of type ns5:DistinguishedName-anyAttribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 867; } /* = unique type id SOAP_TYPE_ns5__DistinguishedName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__DistinguishedName() { ns5__DistinguishedName::soap_default(NULL); }
	virtual ~ns5__DistinguishedName() { }
};
#endif

#ifndef SOAP_TYPE__ns5__AlgorithmIdentifier_anyParameters
#define SOAP_TYPE__ns5__AlgorithmIdentifier_anyParameters (2842)
/* ns5:AlgorithmIdentifier-anyParameters */
class SOAP_CMAC _ns5__AlgorithmIdentifier_anyParameters
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 2842; } /* = unique type id SOAP_TYPE__ns5__AlgorithmIdentifier_anyParameters */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__AlgorithmIdentifier_anyParameters() { _ns5__AlgorithmIdentifier_anyParameters::soap_default(NULL); }
	virtual ~_ns5__AlgorithmIdentifier_anyParameters() { }
};
#endif

#ifndef SOAP_TYPE_ns5__AlgorithmIdentifier
#define SOAP_TYPE_ns5__AlgorithmIdentifier (868)
/* ns5:AlgorithmIdentifier */
class SOAP_CMAC ns5__AlgorithmIdentifier : public xsd__anyType
{
public:
	std::string algorithm;	/* required element of type ns5:DotDecimalOID */
	xsd__base64Binary *parameters;	/* optional element of type ns5:Base64DERencodedASN1Value */
	_ns5__AlgorithmIdentifier_anyParameters *anyParameters;	/* optional element of type ns5:AlgorithmIdentifier-anyParameters */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 868; } /* = unique type id SOAP_TYPE_ns5__AlgorithmIdentifier */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__AlgorithmIdentifier() { ns5__AlgorithmIdentifier::soap_default(NULL); }
	virtual ~ns5__AlgorithmIdentifier() { }
};
#endif

#ifndef SOAP_TYPE_ns5__BasicRequestAttribute
#define SOAP_TYPE_ns5__BasicRequestAttribute (869)
/* ns5:BasicRequestAttribute */
class SOAP_CMAC ns5__BasicRequestAttribute : public xsd__anyType
{
public:
	std::string OID;	/* required element of type ns5:DotDecimalOID */
	xsd__base64Binary value;	/* required element of type ns5:Base64DERencodedASN1Value */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 869; } /* = unique type id SOAP_TYPE_ns5__BasicRequestAttribute */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__BasicRequestAttribute() { ns5__BasicRequestAttribute::soap_default(NULL); }
	virtual ~ns5__BasicRequestAttribute() { }
};
#endif

#ifndef SOAP_TYPE__ns5__CSRAttribute_anyAttribute
#define SOAP_TYPE__ns5__CSRAttribute_anyAttribute (2846)
/* ns5:CSRAttribute-anyAttribute */
class SOAP_CMAC _ns5__CSRAttribute_anyAttribute
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 2846; } /* = unique type id SOAP_TYPE__ns5__CSRAttribute_anyAttribute */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__CSRAttribute_anyAttribute() { _ns5__CSRAttribute_anyAttribute::soap_default(NULL); }
	virtual ~_ns5__CSRAttribute_anyAttribute() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_CSRAttribute
#define SOAP_TYPE__ns5__union_CSRAttribute (2848)
/* xsd:choice */
union _ns5__union_CSRAttribute
{
#define SOAP_UNION__ns5__union_CSRAttribute_X509v3Extension	(1)
	class ns5__X509v3Extension *X509v3Extension;
#define SOAP_UNION__ns5__union_CSRAttribute_BasicRequestAttribute	(2)
	ns5__BasicRequestAttribute *BasicRequestAttribute;
#define SOAP_UNION__ns5__union_CSRAttribute_anyAttribute	(3)
	_ns5__CSRAttribute_anyAttribute *anyAttribute;
};
#endif

#ifndef SOAP_TYPE_ns5__CSRAttribute
#define SOAP_TYPE_ns5__CSRAttribute (870)
/* ns5:CSRAttribute */
class SOAP_CMAC ns5__CSRAttribute : public xsd__anyType
{
public:
	int __union_CSRAttribute;	/* union discriminant (of union defined below) */
	union _ns5__union_CSRAttribute union_CSRAttribute;	/* required element of type xsd:choice */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 870; } /* = unique type id SOAP_TYPE_ns5__CSRAttribute */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__CSRAttribute() { ns5__CSRAttribute::soap_default(NULL); }
	virtual ~ns5__CSRAttribute() { }
};
#endif

#ifndef SOAP_TYPE_ns5__X509v3Extension
#define SOAP_TYPE_ns5__X509v3Extension (871)
/* ns5:X509v3Extension */
class SOAP_CMAC ns5__X509v3Extension : public xsd__anyType
{
public:
	std::string extnOID;	/* required element of type ns5:DotDecimalOID */
	bool critical;	/* optional element of type xsd:boolean */
	xsd__base64Binary extnValue;	/* required element of type ns5:Base64DERencodedASN1Value */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 871; } /* = unique type id SOAP_TYPE_ns5__X509v3Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__X509v3Extension() { ns5__X509v3Extension::soap_default(NULL); }
	virtual ~ns5__X509v3Extension() { }
};
#endif

#ifndef SOAP_TYPE_ns5__X509Certificate
#define SOAP_TYPE_ns5__X509Certificate (872)
/* ns5:X509Certificate */
class SOAP_CMAC ns5__X509Certificate : public xsd__anyType
{
public:
	std::string CertificateID;	/* required element of type ns5:CertificateID */
	std::string KeyID;	/* required element of type ns5:KeyID */
	std::string *Alias;	/* optional element of type xsd:string */
	xsd__base64Binary CertificateContent;	/* required element of type ns5:Base64DERencodedASN1Value */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 872; } /* = unique type id SOAP_TYPE_ns5__X509Certificate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__X509Certificate() { ns5__X509Certificate::soap_default(NULL); }
	virtual ~ns5__X509Certificate() { }
};
#endif

#ifndef SOAP_TYPE_ns5__CertificateIDs
#define SOAP_TYPE_ns5__CertificateIDs (873)
/* ns5:CertificateIDs */
class SOAP_CMAC ns5__CertificateIDs : public xsd__anyType
{
public:
	std::vector<std::string >CertificateID;	/* required element of type ns5:CertificateID */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 873; } /* = unique type id SOAP_TYPE_ns5__CertificateIDs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__CertificateIDs() { ns5__CertificateIDs::soap_default(NULL); }
	virtual ~ns5__CertificateIDs() { }
};
#endif

#ifndef SOAP_TYPE__ns5__CertificationPath_anyElement
#define SOAP_TYPE__ns5__CertificationPath_anyElement (2850)
/* ns5:CertificationPath-anyElement */
class SOAP_CMAC _ns5__CertificationPath_anyElement
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 2850; } /* = unique type id SOAP_TYPE__ns5__CertificationPath_anyElement */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__CertificationPath_anyElement() { _ns5__CertificationPath_anyElement::soap_default(NULL); }
	virtual ~_ns5__CertificationPath_anyElement() { }
};
#endif

#ifndef SOAP_TYPE_ns5__CertificationPath
#define SOAP_TYPE_ns5__CertificationPath (874)
/* ns5:CertificationPath */
class SOAP_CMAC ns5__CertificationPath : public xsd__anyType
{
public:
	std::vector<std::string >CertificateID;	/* required element of type ns5:CertificateID */
	std::string *Alias;	/* optional element of type xsd:string */
	_ns5__CertificationPath_anyElement *anyElement;	/* optional element of type ns5:CertificationPath-anyElement */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 874; } /* = unique type id SOAP_TYPE_ns5__CertificationPath */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__CertificationPath() { ns5__CertificationPath::soap_default(NULL); }
	virtual ~ns5__CertificationPath() { }
};
#endif

#ifndef SOAP_TYPE_ns5__PassphraseAttribute
#define SOAP_TYPE_ns5__PassphraseAttribute (875)
/* ns5:PassphraseAttribute */
class SOAP_CMAC ns5__PassphraseAttribute : public xsd__anyType
{
public:
	std::string PassphraseID;	/* required element of type ns5:PassphraseID */
	std::string *Alias;	/* optional element of type xsd:string */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 875; } /* = unique type id SOAP_TYPE_ns5__PassphraseAttribute */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__PassphraseAttribute() { ns5__PassphraseAttribute::soap_default(NULL); }
	virtual ~ns5__PassphraseAttribute() { }
};
#endif

#ifndef SOAP_TYPE_ns5__Dot1XCapabilities
#define SOAP_TYPE_ns5__Dot1XCapabilities (876)
/* ns5:Dot1XCapabilities */
class SOAP_CMAC ns5__Dot1XCapabilities : public xsd__anyType
{
public:
	std::vector<char * >__any;
	std::string *MaximumNumberOfDot1XConfigurations;	/* optional attribute */
	std::string *Dot1XMethods;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 876; } /* = unique type id SOAP_TYPE_ns5__Dot1XCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__Dot1XCapabilities() { ns5__Dot1XCapabilities::soap_default(NULL); }
	virtual ~ns5__Dot1XCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_ns5__Dot1XStage
#define SOAP_TYPE_ns5__Dot1XStage (877)
/* ns5:Dot1XStage */
class SOAP_CMAC ns5__Dot1XStage : public xsd__anyType
{
public:
	std::string *Identity;	/* optional element of type xsd:string */
	std::string *CertificationPathID;	/* optional element of type ns5:CertificationPathID */
	std::string *PassphraseID;	/* optional element of type ns5:PassphraseID */
	ns5__Dot1XStage *Inner;	/* optional element of type ns5:Dot1XStage */
	class ns5__Dot1XStageExtension *Extension;	/* optional element of type ns5:Dot1XStageExtension */
	std::string Method;	/* required attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 877; } /* = unique type id SOAP_TYPE_ns5__Dot1XStage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__Dot1XStage() { ns5__Dot1XStage::soap_default(NULL); }
	virtual ~ns5__Dot1XStage() { }
};
#endif

#ifndef SOAP_TYPE_ns5__Dot1XStageExtension
#define SOAP_TYPE_ns5__Dot1XStageExtension (878)
/* ns5:Dot1XStageExtension */
class SOAP_CMAC ns5__Dot1XStageExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 878; } /* = unique type id SOAP_TYPE_ns5__Dot1XStageExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__Dot1XStageExtension() { ns5__Dot1XStageExtension::soap_default(NULL); }
	virtual ~ns5__Dot1XStageExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns5__Dot1XConfiguration
#define SOAP_TYPE_ns5__Dot1XConfiguration (879)
/* ns5:Dot1XConfiguration */
class SOAP_CMAC ns5__Dot1XConfiguration : public xsd__anyType
{
public:
	std::string *Dot1XID;	/* optional element of type ns5:Dot1XID */
	std::string *Alias;	/* optional element of type xsd:string */
	ns5__Dot1XStage *Outer;	/* required element of type ns5:Dot1XStage */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 879; } /* = unique type id SOAP_TYPE_ns5__Dot1XConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__Dot1XConfiguration() { ns5__Dot1XConfiguration::soap_default(NULL); }
	virtual ~ns5__Dot1XConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_ns5__CRL
#define SOAP_TYPE_ns5__CRL (880)
/* ns5:CRL */
class SOAP_CMAC ns5__CRL : public xsd__anyType
{
public:
	std::string CRLID;	/* required element of type ns5:CRLID */
	std::string Alias;	/* required element of type xsd:string */
	xsd__base64Binary CRLContent;	/* required element of type ns5:Base64DERencodedASN1Value */
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 880; } /* = unique type id SOAP_TYPE_ns5__CRL */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__CRL() { ns5__CRL::soap_default(NULL); }
	virtual ~ns5__CRL() { }
};
#endif

#ifndef SOAP_TYPE__ns5__CertPathValidationParameters_anyParameters
#define SOAP_TYPE__ns5__CertPathValidationParameters_anyParameters (2858)
/* ns5:CertPathValidationParameters-anyParameters */
class SOAP_CMAC _ns5__CertPathValidationParameters_anyParameters
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 2858; } /* = unique type id SOAP_TYPE__ns5__CertPathValidationParameters_anyParameters */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__CertPathValidationParameters_anyParameters() { _ns5__CertPathValidationParameters_anyParameters::soap_default(NULL); }
	virtual ~_ns5__CertPathValidationParameters_anyParameters() { }
};
#endif

#ifndef SOAP_TYPE_ns5__CertPathValidationParameters
#define SOAP_TYPE_ns5__CertPathValidationParameters (881)
/* ns5:CertPathValidationParameters */
class SOAP_CMAC ns5__CertPathValidationParameters : public xsd__anyType
{
public:
	bool RequireTLSWWWClientAuthExtendedKeyUsage;	/* optional element of type xsd:boolean */
	bool UseDeltaCRLs;	/* optional element of type xsd:boolean */
	_ns5__CertPathValidationParameters_anyParameters *anyParameters;	/* optional element of type ns5:CertPathValidationParameters-anyParameters */
public:
	virtual int soap_type() const { return 881; } /* = unique type id SOAP_TYPE_ns5__CertPathValidationParameters */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__CertPathValidationParameters() { ns5__CertPathValidationParameters::soap_default(NULL); }
	virtual ~ns5__CertPathValidationParameters() { }
};
#endif

#ifndef SOAP_TYPE_ns5__TrustAnchor
#define SOAP_TYPE_ns5__TrustAnchor (882)
/* ns5:TrustAnchor */
class SOAP_CMAC ns5__TrustAnchor : public xsd__anyType
{
public:
	std::string CertificateID;	/* required element of type ns5:CertificateID */
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 882; } /* = unique type id SOAP_TYPE_ns5__TrustAnchor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__TrustAnchor() { ns5__TrustAnchor::soap_default(NULL); }
	virtual ~ns5__TrustAnchor() { }
};
#endif

#ifndef SOAP_TYPE__ns5__CertPathValidationPolicy_anyParameters
#define SOAP_TYPE__ns5__CertPathValidationPolicy_anyParameters (2863)
/* ns5:CertPathValidationPolicy-anyParameters */
class SOAP_CMAC _ns5__CertPathValidationPolicy_anyParameters
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 2863; } /* = unique type id SOAP_TYPE__ns5__CertPathValidationPolicy_anyParameters */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__CertPathValidationPolicy_anyParameters() { _ns5__CertPathValidationPolicy_anyParameters::soap_default(NULL); }
	virtual ~_ns5__CertPathValidationPolicy_anyParameters() { }
};
#endif

#ifndef SOAP_TYPE_ns5__CertPathValidationPolicy
#define SOAP_TYPE_ns5__CertPathValidationPolicy (883)
/* ns5:CertPathValidationPolicy */
class SOAP_CMAC ns5__CertPathValidationPolicy : public xsd__anyType
{
public:
	std::string CertPathValidationPolicyID;	/* required element of type ns5:CertPathValidationPolicyID */
	std::string *Alias;	/* optional element of type xsd:string */
	ns5__CertPathValidationParameters *Parameters;	/* required element of type ns5:CertPathValidationParameters */
	std::vector<ns5__TrustAnchor * >TrustAnchor;	/* required element of type ns5:TrustAnchor */
	_ns5__CertPathValidationPolicy_anyParameters *anyParameters;	/* optional element of type ns5:CertPathValidationPolicy-anyParameters */
public:
	virtual int soap_type() const { return 883; } /* = unique type id SOAP_TYPE_ns5__CertPathValidationPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__CertPathValidationPolicy() { ns5__CertPathValidationPolicy::soap_default(NULL); }
	virtual ~ns5__CertPathValidationPolicy() { }
};
#endif

#ifndef SOAP_TYPE__ns5__KeystoreCapabilities_anyElement
#define SOAP_TYPE__ns5__KeystoreCapabilities_anyElement (2867)
/* ns5:KeystoreCapabilities-anyElement */
class SOAP_CMAC _ns5__KeystoreCapabilities_anyElement
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 2867; } /* = unique type id SOAP_TYPE__ns5__KeystoreCapabilities_anyElement */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__KeystoreCapabilities_anyElement() { _ns5__KeystoreCapabilities_anyElement::soap_default(NULL); }
	virtual ~_ns5__KeystoreCapabilities_anyElement() { }
};
#endif

#ifndef SOAP_TYPE_ns5__KeystoreCapabilities
#define SOAP_TYPE_ns5__KeystoreCapabilities (884)
/* ns5:KeystoreCapabilities */
class SOAP_CMAC ns5__KeystoreCapabilities : public xsd__anyType
{
public:
	std::vector<ns5__AlgorithmIdentifier * >SignatureAlgorithms;	/* optional element of type ns5:AlgorithmIdentifier */
	_ns5__KeystoreCapabilities_anyElement *anyElement;	/* optional element of type ns5:KeystoreCapabilities-anyElement */
	std::string *MaximumNumberOfKeys;	/* optional attribute */
	std::string *MaximumNumberOfCertificates;	/* optional attribute */
	std::string *MaximumNumberOfCertificationPaths;	/* optional attribute */
	bool *RSAKeyPairGeneration;	/* optional attribute */
	std::string *RSAKeyLengths;	/* optional attribute */
	bool *PKCS10ExternalCertificationWithRSA;	/* optional attribute */
	bool *SelfSignedCertificateCreationWithRSA;	/* optional attribute */
	std::string *X509Versions;	/* optional attribute */
	std::string *MaximumNumberOfPassphrases;	/* optional attribute */
	bool *PKCS8RSAKeyPairUpload;	/* optional attribute */
	bool *PKCS12CertificateWithRSAPrivateKeyUpload;	/* optional attribute */
	std::string *PasswordBasedEncryptionAlgorithms;	/* optional attribute */
	std::string *PasswordBasedMACAlgorithms;	/* optional attribute */
	std::string *MaximumNumberOfCRLs;	/* optional attribute */
	std::string *MaximumNumberOfCertificationPathValidationPolicies;	/* optional attribute */
	bool *EnforceTLSWebClientAuthExtKeyUsage;	/* optional attribute */
	bool *NoPrivateKeySharing;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 884; } /* = unique type id SOAP_TYPE_ns5__KeystoreCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__KeystoreCapabilities() { ns5__KeystoreCapabilities::soap_default(NULL); }
	virtual ~ns5__KeystoreCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_ns5__TLSServerCapabilities
#define SOAP_TYPE_ns5__TLSServerCapabilities (885)
/* ns5:TLSServerCapabilities */
class SOAP_CMAC ns5__TLSServerCapabilities : public xsd__anyType
{
public:
	std::vector<char * >__any;
	std::string *TLSServerSupported;	/* optional attribute */
	std::string *MaximumNumberOfTLSCertificationPaths;	/* optional attribute */
	bool *TLSClientAuthSupported;	/* optional attribute */
	std::string *MaximumNumberOfTLSCertificationPathValidationPolicies;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 885; } /* = unique type id SOAP_TYPE_ns5__TLSServerCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__TLSServerCapabilities() { ns5__TLSServerCapabilities::soap_default(NULL); }
	virtual ~ns5__TLSServerCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_ns5__Capabilities
#define SOAP_TYPE_ns5__Capabilities (886)
/* ns5:Capabilities */
class SOAP_CMAC ns5__Capabilities : public xsd__anyType
{
public:
	ns5__KeystoreCapabilities *KeystoreCapabilities;	/* required element of type ns5:KeystoreCapabilities */
	ns5__TLSServerCapabilities *TLSServerCapabilities;	/* required element of type ns5:TLSServerCapabilities */
	ns5__Dot1XCapabilities *Dot1XCapabilities;	/* optional element of type ns5:Dot1XCapabilities */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 886; } /* = unique type id SOAP_TYPE_ns5__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__Capabilities() { ns5__Capabilities::soap_default(NULL); }
	virtual ~ns5__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetServiceCapabilities
#define SOAP_TYPE__ns5__GetServiceCapabilities (887)
/* ns5:GetServiceCapabilities */
class SOAP_CMAC _ns5__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 887; } /* = unique type id SOAP_TYPE__ns5__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetServiceCapabilities() { _ns5__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_ns5__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetServiceCapabilitiesResponse
#define SOAP_TYPE__ns5__GetServiceCapabilitiesResponse (888)
/* ns5:GetServiceCapabilitiesResponse */
class SOAP_CMAC _ns5__GetServiceCapabilitiesResponse
{
public:
	ns5__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 888; } /* = unique type id SOAP_TYPE__ns5__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetServiceCapabilitiesResponse() { _ns5__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_ns5__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__CreateRSAKeyPair
#define SOAP_TYPE__ns5__CreateRSAKeyPair (889)
/* ns5:CreateRSAKeyPair */
class SOAP_CMAC _ns5__CreateRSAKeyPair
{
public:
	std::string KeyLength;	/* required element of type xsd:nonNegativeInteger */
	std::string *Alias;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 889; } /* = unique type id SOAP_TYPE__ns5__CreateRSAKeyPair */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__CreateRSAKeyPair() { _ns5__CreateRSAKeyPair::soap_default(NULL); }
	virtual ~_ns5__CreateRSAKeyPair() { }
};
#endif

#ifndef SOAP_TYPE__ns5__CreateRSAKeyPairResponse
#define SOAP_TYPE__ns5__CreateRSAKeyPairResponse (890)
/* ns5:CreateRSAKeyPairResponse */
class SOAP_CMAC _ns5__CreateRSAKeyPairResponse
{
public:
	std::string KeyID;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:KeyID */
	LONG64 EstimatedCreationTime;	/* external */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 890; } /* = unique type id SOAP_TYPE__ns5__CreateRSAKeyPairResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__CreateRSAKeyPairResponse() { _ns5__CreateRSAKeyPairResponse::soap_default(NULL); }
	virtual ~_ns5__CreateRSAKeyPairResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__UploadKeyPairInPKCS8
#define SOAP_TYPE__ns5__UploadKeyPairInPKCS8 (891)
/* ns5:UploadKeyPairInPKCS8 */
class SOAP_CMAC _ns5__UploadKeyPairInPKCS8
{
public:
	xsd__base64Binary KeyPair;	/* required element of type ns5:Base64DERencodedASN1Value */
	std::string *Alias;	/* optional element of type xsd:string */
	std::string *EncryptionPassphraseID;	/* optional element of type ns5:PassphraseID */
	std::string *EncryptionPassphrase;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 891; } /* = unique type id SOAP_TYPE__ns5__UploadKeyPairInPKCS8 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__UploadKeyPairInPKCS8() { _ns5__UploadKeyPairInPKCS8::soap_default(NULL); }
	virtual ~_ns5__UploadKeyPairInPKCS8() { }
};
#endif

#ifndef SOAP_TYPE__ns5__UploadKeyPairInPKCS8Response
#define SOAP_TYPE__ns5__UploadKeyPairInPKCS8Response (892)
/* ns5:UploadKeyPairInPKCS8Response */
class SOAP_CMAC _ns5__UploadKeyPairInPKCS8Response
{
public:
	std::string KeyID;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:KeyID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 892; } /* = unique type id SOAP_TYPE__ns5__UploadKeyPairInPKCS8Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__UploadKeyPairInPKCS8Response() { _ns5__UploadKeyPairInPKCS8Response::soap_default(NULL); }
	virtual ~_ns5__UploadKeyPairInPKCS8Response() { }
};
#endif

#ifndef SOAP_TYPE__ns5__UploadCertificateWithPrivateKeyInPKCS12
#define SOAP_TYPE__ns5__UploadCertificateWithPrivateKeyInPKCS12 (893)
/* ns5:UploadCertificateWithPrivateKeyInPKCS12 */
class SOAP_CMAC _ns5__UploadCertificateWithPrivateKeyInPKCS12
{
public:
	xsd__base64Binary CertWithPrivateKey;	/* required element of type ns5:Base64DERencodedASN1Value */
	std::string *CertificationPathAlias;	/* optional element of type xsd:string */
	std::string *KeyAlias;	/* optional element of type xsd:string */
	bool IgnoreAdditionalCertificates;	/* optional element of type xsd:boolean */
	std::string *IntegrityPassphraseID;	/* optional element of type ns5:PassphraseID */
	std::string *EncryptionPassphraseID;	/* optional element of type ns5:PassphraseID */
	std::string *Passphrase;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 893; } /* = unique type id SOAP_TYPE__ns5__UploadCertificateWithPrivateKeyInPKCS12 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__UploadCertificateWithPrivateKeyInPKCS12() { _ns5__UploadCertificateWithPrivateKeyInPKCS12::soap_default(NULL); }
	virtual ~_ns5__UploadCertificateWithPrivateKeyInPKCS12() { }
};
#endif

#ifndef SOAP_TYPE__ns5__UploadCertificateWithPrivateKeyInPKCS12Response
#define SOAP_TYPE__ns5__UploadCertificateWithPrivateKeyInPKCS12Response (894)
/* ns5:UploadCertificateWithPrivateKeyInPKCS12Response */
class SOAP_CMAC _ns5__UploadCertificateWithPrivateKeyInPKCS12Response
{
public:
	std::string CertificationPathID;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:CertificationPathID */
	std::string KeyID;	/* required element of type ns5:KeyID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 894; } /* = unique type id SOAP_TYPE__ns5__UploadCertificateWithPrivateKeyInPKCS12Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__UploadCertificateWithPrivateKeyInPKCS12Response() { _ns5__UploadCertificateWithPrivateKeyInPKCS12Response::soap_default(NULL); }
	virtual ~_ns5__UploadCertificateWithPrivateKeyInPKCS12Response() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetKeyStatus
#define SOAP_TYPE__ns5__GetKeyStatus (895)
/* ns5:GetKeyStatus */
class SOAP_CMAC _ns5__GetKeyStatus
{
public:
	std::string KeyID;	/* required element of type ns5:KeyID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 895; } /* = unique type id SOAP_TYPE__ns5__GetKeyStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetKeyStatus() { _ns5__GetKeyStatus::soap_default(NULL); }
	virtual ~_ns5__GetKeyStatus() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetKeyStatusResponse
#define SOAP_TYPE__ns5__GetKeyStatusResponse (896)
/* ns5:GetKeyStatusResponse */
class SOAP_CMAC _ns5__GetKeyStatusResponse
{
public:
	std::string KeyStatus;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 896; } /* = unique type id SOAP_TYPE__ns5__GetKeyStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetKeyStatusResponse() { _ns5__GetKeyStatusResponse::soap_default(NULL); }
	virtual ~_ns5__GetKeyStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetPrivateKeyStatus
#define SOAP_TYPE__ns5__GetPrivateKeyStatus (897)
/* ns5:GetPrivateKeyStatus */
class SOAP_CMAC _ns5__GetPrivateKeyStatus
{
public:
	std::string KeyID;	/* required element of type ns5:KeyID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 897; } /* = unique type id SOAP_TYPE__ns5__GetPrivateKeyStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetPrivateKeyStatus() { _ns5__GetPrivateKeyStatus::soap_default(NULL); }
	virtual ~_ns5__GetPrivateKeyStatus() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetPrivateKeyStatusResponse
#define SOAP_TYPE__ns5__GetPrivateKeyStatusResponse (898)
/* ns5:GetPrivateKeyStatusResponse */
class SOAP_CMAC _ns5__GetPrivateKeyStatusResponse
{
public:
	bool hasPrivateKey;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 898; } /* = unique type id SOAP_TYPE__ns5__GetPrivateKeyStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetPrivateKeyStatusResponse() { _ns5__GetPrivateKeyStatusResponse::soap_default(NULL); }
	virtual ~_ns5__GetPrivateKeyStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetAllKeys
#define SOAP_TYPE__ns5__GetAllKeys (899)
/* ns5:GetAllKeys */
class SOAP_CMAC _ns5__GetAllKeys
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 899; } /* = unique type id SOAP_TYPE__ns5__GetAllKeys */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetAllKeys() { _ns5__GetAllKeys::soap_default(NULL); }
	virtual ~_ns5__GetAllKeys() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetAllKeysResponse
#define SOAP_TYPE__ns5__GetAllKeysResponse (900)
/* ns5:GetAllKeysResponse */
class SOAP_CMAC _ns5__GetAllKeysResponse
{
public:
	std::vector<ns5__KeyAttribute * >KeyAttribute;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:KeyAttribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 900; } /* = unique type id SOAP_TYPE__ns5__GetAllKeysResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetAllKeysResponse() { _ns5__GetAllKeysResponse::soap_default(NULL); }
	virtual ~_ns5__GetAllKeysResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__DeleteKey
#define SOAP_TYPE__ns5__DeleteKey (901)
/* ns5:DeleteKey */
class SOAP_CMAC _ns5__DeleteKey
{
public:
	std::string KeyID;	/* required element of type ns5:KeyID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 901; } /* = unique type id SOAP_TYPE__ns5__DeleteKey */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__DeleteKey() { _ns5__DeleteKey::soap_default(NULL); }
	virtual ~_ns5__DeleteKey() { }
};
#endif

#ifndef SOAP_TYPE__ns5__DeleteKeyResponse
#define SOAP_TYPE__ns5__DeleteKeyResponse (902)
/* ns5:DeleteKeyResponse */
class SOAP_CMAC _ns5__DeleteKeyResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 902; } /* = unique type id SOAP_TYPE__ns5__DeleteKeyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__DeleteKeyResponse() { _ns5__DeleteKeyResponse::soap_default(NULL); }
	virtual ~_ns5__DeleteKeyResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__CreatePKCS10CSR
#define SOAP_TYPE__ns5__CreatePKCS10CSR (903)
/* ns5:CreatePKCS10CSR */
class SOAP_CMAC _ns5__CreatePKCS10CSR
{
public:
	ns5__DistinguishedName *Subject;	/* required element of type ns5:DistinguishedName */
	std::string KeyID;	/* required element of type ns5:KeyID */
	std::vector<ns5__CSRAttribute * >CSRAttribute;	/* optional element of type ns5:CSRAttribute */
	ns5__AlgorithmIdentifier *SignatureAlgorithm;	/* required element of type ns5:AlgorithmIdentifier */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 903; } /* = unique type id SOAP_TYPE__ns5__CreatePKCS10CSR */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__CreatePKCS10CSR() { _ns5__CreatePKCS10CSR::soap_default(NULL); }
	virtual ~_ns5__CreatePKCS10CSR() { }
};
#endif

#ifndef SOAP_TYPE__ns5__CreatePKCS10CSRResponse
#define SOAP_TYPE__ns5__CreatePKCS10CSRResponse (904)
/* ns5:CreatePKCS10CSRResponse */
class SOAP_CMAC _ns5__CreatePKCS10CSRResponse
{
public:
	xsd__base64Binary PKCS10CSR;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:Base64DERencodedASN1Value */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 904; } /* = unique type id SOAP_TYPE__ns5__CreatePKCS10CSRResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__CreatePKCS10CSRResponse() { _ns5__CreatePKCS10CSRResponse::soap_default(NULL); }
	virtual ~_ns5__CreatePKCS10CSRResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__CreateSelfSignedCertificate
#define SOAP_TYPE__ns5__CreateSelfSignedCertificate (905)
/* ns5:CreateSelfSignedCertificate */
class SOAP_CMAC _ns5__CreateSelfSignedCertificate
{
public:
	std::string *X509Version;	/* optional element of type xsd:positiveInteger */
	ns5__DistinguishedName *Subject;	/* required element of type ns5:DistinguishedName */
	std::string KeyID;	/* required element of type ns5:KeyID */
	std::string *Alias;	/* optional element of type xsd:string */
	time_t *notValidBefore;	/* optional element of type xsd:dateTime */
	time_t *notValidAfter;	/* optional element of type xsd:dateTime */
	ns5__AlgorithmIdentifier *SignatureAlgorithm;	/* required element of type ns5:AlgorithmIdentifier */
	std::vector<ns5__X509v3Extension * >Extension;	/* optional element of type ns5:X509v3Extension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 905; } /* = unique type id SOAP_TYPE__ns5__CreateSelfSignedCertificate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__CreateSelfSignedCertificate() { _ns5__CreateSelfSignedCertificate::soap_default(NULL); }
	virtual ~_ns5__CreateSelfSignedCertificate() { }
};
#endif

#ifndef SOAP_TYPE__ns5__CreateSelfSignedCertificateResponse
#define SOAP_TYPE__ns5__CreateSelfSignedCertificateResponse (906)
/* ns5:CreateSelfSignedCertificateResponse */
class SOAP_CMAC _ns5__CreateSelfSignedCertificateResponse
{
public:
	std::string CertificateID;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:CertificateID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 906; } /* = unique type id SOAP_TYPE__ns5__CreateSelfSignedCertificateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__CreateSelfSignedCertificateResponse() { _ns5__CreateSelfSignedCertificateResponse::soap_default(NULL); }
	virtual ~_ns5__CreateSelfSignedCertificateResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__UploadCertificate
#define SOAP_TYPE__ns5__UploadCertificate (907)
/* ns5:UploadCertificate */
class SOAP_CMAC _ns5__UploadCertificate
{
public:
	xsd__base64Binary Certificate;	/* required element of type ns5:Base64DERencodedASN1Value */
	std::string *Alias;	/* optional element of type xsd:string */
	std::string *KeyAlias;	/* optional element of type xsd:string */
	bool PrivateKeyRequired;	/* optional element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 907; } /* = unique type id SOAP_TYPE__ns5__UploadCertificate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__UploadCertificate() { _ns5__UploadCertificate::soap_default(NULL); }
	virtual ~_ns5__UploadCertificate() { }
};
#endif

#ifndef SOAP_TYPE__ns5__UploadCertificateResponse
#define SOAP_TYPE__ns5__UploadCertificateResponse (908)
/* ns5:UploadCertificateResponse */
class SOAP_CMAC _ns5__UploadCertificateResponse
{
public:
	std::string CertificateID;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:CertificateID */
	std::string KeyID;	/* required element of type ns5:KeyID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 908; } /* = unique type id SOAP_TYPE__ns5__UploadCertificateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__UploadCertificateResponse() { _ns5__UploadCertificateResponse::soap_default(NULL); }
	virtual ~_ns5__UploadCertificateResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetCertificate
#define SOAP_TYPE__ns5__GetCertificate (909)
/* ns5:GetCertificate */
class SOAP_CMAC _ns5__GetCertificate
{
public:
	std::string CertificateID;	/* required element of type ns5:CertificateID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 909; } /* = unique type id SOAP_TYPE__ns5__GetCertificate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetCertificate() { _ns5__GetCertificate::soap_default(NULL); }
	virtual ~_ns5__GetCertificate() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetCertificateResponse
#define SOAP_TYPE__ns5__GetCertificateResponse (910)
/* ns5:GetCertificateResponse */
class SOAP_CMAC _ns5__GetCertificateResponse
{
public:
	ns5__X509Certificate *Certificate;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:X509Certificate */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 910; } /* = unique type id SOAP_TYPE__ns5__GetCertificateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetCertificateResponse() { _ns5__GetCertificateResponse::soap_default(NULL); }
	virtual ~_ns5__GetCertificateResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetAllCertificates
#define SOAP_TYPE__ns5__GetAllCertificates (911)
/* ns5:GetAllCertificates */
class SOAP_CMAC _ns5__GetAllCertificates
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 911; } /* = unique type id SOAP_TYPE__ns5__GetAllCertificates */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetAllCertificates() { _ns5__GetAllCertificates::soap_default(NULL); }
	virtual ~_ns5__GetAllCertificates() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetAllCertificatesResponse
#define SOAP_TYPE__ns5__GetAllCertificatesResponse (912)
/* ns5:GetAllCertificatesResponse */
class SOAP_CMAC _ns5__GetAllCertificatesResponse
{
public:
	std::vector<ns5__X509Certificate * >Certificate;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:X509Certificate */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 912; } /* = unique type id SOAP_TYPE__ns5__GetAllCertificatesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetAllCertificatesResponse() { _ns5__GetAllCertificatesResponse::soap_default(NULL); }
	virtual ~_ns5__GetAllCertificatesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__DeleteCertificate
#define SOAP_TYPE__ns5__DeleteCertificate (913)
/* ns5:DeleteCertificate */
class SOAP_CMAC _ns5__DeleteCertificate
{
public:
	std::string CertificateID;	/* required element of type ns5:CertificateID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 913; } /* = unique type id SOAP_TYPE__ns5__DeleteCertificate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__DeleteCertificate() { _ns5__DeleteCertificate::soap_default(NULL); }
	virtual ~_ns5__DeleteCertificate() { }
};
#endif

#ifndef SOAP_TYPE__ns5__DeleteCertificateResponse
#define SOAP_TYPE__ns5__DeleteCertificateResponse (914)
/* ns5:DeleteCertificateResponse */
class SOAP_CMAC _ns5__DeleteCertificateResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 914; } /* = unique type id SOAP_TYPE__ns5__DeleteCertificateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__DeleteCertificateResponse() { _ns5__DeleteCertificateResponse::soap_default(NULL); }
	virtual ~_ns5__DeleteCertificateResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__CreateCertificationPath
#define SOAP_TYPE__ns5__CreateCertificationPath (915)
/* ns5:CreateCertificationPath */
class SOAP_CMAC _ns5__CreateCertificationPath
{
public:
	ns5__CertificateIDs *CertificateIDs;	/* required element of type ns5:CertificateIDs */
	std::string *Alias;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 915; } /* = unique type id SOAP_TYPE__ns5__CreateCertificationPath */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__CreateCertificationPath() { _ns5__CreateCertificationPath::soap_default(NULL); }
	virtual ~_ns5__CreateCertificationPath() { }
};
#endif

#ifndef SOAP_TYPE__ns5__CreateCertificationPathResponse
#define SOAP_TYPE__ns5__CreateCertificationPathResponse (916)
/* ns5:CreateCertificationPathResponse */
class SOAP_CMAC _ns5__CreateCertificationPathResponse
{
public:
	std::string CertificationPathID;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:CertificationPathID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 916; } /* = unique type id SOAP_TYPE__ns5__CreateCertificationPathResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__CreateCertificationPathResponse() { _ns5__CreateCertificationPathResponse::soap_default(NULL); }
	virtual ~_ns5__CreateCertificationPathResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetCertificationPath
#define SOAP_TYPE__ns5__GetCertificationPath (917)
/* ns5:GetCertificationPath */
class SOAP_CMAC _ns5__GetCertificationPath
{
public:
	std::string CertificationPathID;	/* required element of type ns5:CertificationPathID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 917; } /* = unique type id SOAP_TYPE__ns5__GetCertificationPath */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetCertificationPath() { _ns5__GetCertificationPath::soap_default(NULL); }
	virtual ~_ns5__GetCertificationPath() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetCertificationPathResponse
#define SOAP_TYPE__ns5__GetCertificationPathResponse (918)
/* ns5:GetCertificationPathResponse */
class SOAP_CMAC _ns5__GetCertificationPathResponse
{
public:
	ns5__CertificationPath *CertificationPath;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:CertificationPath */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 918; } /* = unique type id SOAP_TYPE__ns5__GetCertificationPathResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetCertificationPathResponse() { _ns5__GetCertificationPathResponse::soap_default(NULL); }
	virtual ~_ns5__GetCertificationPathResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetAllCertificationPaths
#define SOAP_TYPE__ns5__GetAllCertificationPaths (919)
/* ns5:GetAllCertificationPaths */
class SOAP_CMAC _ns5__GetAllCertificationPaths
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 919; } /* = unique type id SOAP_TYPE__ns5__GetAllCertificationPaths */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetAllCertificationPaths() { _ns5__GetAllCertificationPaths::soap_default(NULL); }
	virtual ~_ns5__GetAllCertificationPaths() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetAllCertificationPathsResponse
#define SOAP_TYPE__ns5__GetAllCertificationPathsResponse (920)
/* ns5:GetAllCertificationPathsResponse */
class SOAP_CMAC _ns5__GetAllCertificationPathsResponse
{
public:
	std::vector<std::string >CertificationPathID;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:CertificationPathID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 920; } /* = unique type id SOAP_TYPE__ns5__GetAllCertificationPathsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetAllCertificationPathsResponse() { _ns5__GetAllCertificationPathsResponse::soap_default(NULL); }
	virtual ~_ns5__GetAllCertificationPathsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__DeleteCertificationPath
#define SOAP_TYPE__ns5__DeleteCertificationPath (921)
/* ns5:DeleteCertificationPath */
class SOAP_CMAC _ns5__DeleteCertificationPath
{
public:
	std::string CertificationPathID;	/* required element of type ns5:CertificationPathID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 921; } /* = unique type id SOAP_TYPE__ns5__DeleteCertificationPath */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__DeleteCertificationPath() { _ns5__DeleteCertificationPath::soap_default(NULL); }
	virtual ~_ns5__DeleteCertificationPath() { }
};
#endif

#ifndef SOAP_TYPE__ns5__DeleteCertificationPathResponse
#define SOAP_TYPE__ns5__DeleteCertificationPathResponse (922)
/* ns5:DeleteCertificationPathResponse */
class SOAP_CMAC _ns5__DeleteCertificationPathResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 922; } /* = unique type id SOAP_TYPE__ns5__DeleteCertificationPathResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__DeleteCertificationPathResponse() { _ns5__DeleteCertificationPathResponse::soap_default(NULL); }
	virtual ~_ns5__DeleteCertificationPathResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__UploadPassphrase
#define SOAP_TYPE__ns5__UploadPassphrase (923)
/* ns5:UploadPassphrase */
class SOAP_CMAC _ns5__UploadPassphrase
{
public:
	std::string Passphrase;	/* required element of type xsd:string */
	std::string *PassphraseAlias;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 923; } /* = unique type id SOAP_TYPE__ns5__UploadPassphrase */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__UploadPassphrase() { _ns5__UploadPassphrase::soap_default(NULL); }
	virtual ~_ns5__UploadPassphrase() { }
};
#endif

#ifndef SOAP_TYPE__ns5__UploadPassphraseResponse
#define SOAP_TYPE__ns5__UploadPassphraseResponse (924)
/* ns5:UploadPassphraseResponse */
class SOAP_CMAC _ns5__UploadPassphraseResponse
{
public:
	std::string PassphraseID;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:PassphraseID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 924; } /* = unique type id SOAP_TYPE__ns5__UploadPassphraseResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__UploadPassphraseResponse() { _ns5__UploadPassphraseResponse::soap_default(NULL); }
	virtual ~_ns5__UploadPassphraseResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetAllPassphrases
#define SOAP_TYPE__ns5__GetAllPassphrases (925)
/* ns5:GetAllPassphrases */
class SOAP_CMAC _ns5__GetAllPassphrases
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 925; } /* = unique type id SOAP_TYPE__ns5__GetAllPassphrases */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetAllPassphrases() { _ns5__GetAllPassphrases::soap_default(NULL); }
	virtual ~_ns5__GetAllPassphrases() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetAllPassphrasesResponse
#define SOAP_TYPE__ns5__GetAllPassphrasesResponse (926)
/* ns5:GetAllPassphrasesResponse */
class SOAP_CMAC _ns5__GetAllPassphrasesResponse
{
public:
	std::vector<ns5__PassphraseAttribute * >PassphraseAttribute;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:PassphraseAttribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 926; } /* = unique type id SOAP_TYPE__ns5__GetAllPassphrasesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetAllPassphrasesResponse() { _ns5__GetAllPassphrasesResponse::soap_default(NULL); }
	virtual ~_ns5__GetAllPassphrasesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__DeletePassphrase
#define SOAP_TYPE__ns5__DeletePassphrase (927)
/* ns5:DeletePassphrase */
class SOAP_CMAC _ns5__DeletePassphrase
{
public:
	std::string PassphraseID;	/* required element of type ns5:PassphraseID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 927; } /* = unique type id SOAP_TYPE__ns5__DeletePassphrase */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__DeletePassphrase() { _ns5__DeletePassphrase::soap_default(NULL); }
	virtual ~_ns5__DeletePassphrase() { }
};
#endif

#ifndef SOAP_TYPE__ns5__DeletePassphraseResponse
#define SOAP_TYPE__ns5__DeletePassphraseResponse (928)
/* ns5:DeletePassphraseResponse */
class SOAP_CMAC _ns5__DeletePassphraseResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 928; } /* = unique type id SOAP_TYPE__ns5__DeletePassphraseResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__DeletePassphraseResponse() { _ns5__DeletePassphraseResponse::soap_default(NULL); }
	virtual ~_ns5__DeletePassphraseResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__AddServerCertificateAssignment
#define SOAP_TYPE__ns5__AddServerCertificateAssignment (929)
/* ns5:AddServerCertificateAssignment */
class SOAP_CMAC _ns5__AddServerCertificateAssignment
{
public:
	std::string CertificationPathID;	/* required element of type ns5:CertificationPathID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 929; } /* = unique type id SOAP_TYPE__ns5__AddServerCertificateAssignment */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__AddServerCertificateAssignment() { _ns5__AddServerCertificateAssignment::soap_default(NULL); }
	virtual ~_ns5__AddServerCertificateAssignment() { }
};
#endif

#ifndef SOAP_TYPE__ns5__AddServerCertificateAssignmentResponse
#define SOAP_TYPE__ns5__AddServerCertificateAssignmentResponse (930)
/* ns5:AddServerCertificateAssignmentResponse */
class SOAP_CMAC _ns5__AddServerCertificateAssignmentResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 930; } /* = unique type id SOAP_TYPE__ns5__AddServerCertificateAssignmentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__AddServerCertificateAssignmentResponse() { _ns5__AddServerCertificateAssignmentResponse::soap_default(NULL); }
	virtual ~_ns5__AddServerCertificateAssignmentResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__RemoveServerCertificateAssignment
#define SOAP_TYPE__ns5__RemoveServerCertificateAssignment (931)
/* ns5:RemoveServerCertificateAssignment */
class SOAP_CMAC _ns5__RemoveServerCertificateAssignment
{
public:
	std::string CertificationPathID;	/* required element of type ns5:CertificationPathID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 931; } /* = unique type id SOAP_TYPE__ns5__RemoveServerCertificateAssignment */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__RemoveServerCertificateAssignment() { _ns5__RemoveServerCertificateAssignment::soap_default(NULL); }
	virtual ~_ns5__RemoveServerCertificateAssignment() { }
};
#endif

#ifndef SOAP_TYPE__ns5__RemoveServerCertificateAssignmentResponse
#define SOAP_TYPE__ns5__RemoveServerCertificateAssignmentResponse (932)
/* ns5:RemoveServerCertificateAssignmentResponse */
class SOAP_CMAC _ns5__RemoveServerCertificateAssignmentResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 932; } /* = unique type id SOAP_TYPE__ns5__RemoveServerCertificateAssignmentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__RemoveServerCertificateAssignmentResponse() { _ns5__RemoveServerCertificateAssignmentResponse::soap_default(NULL); }
	virtual ~_ns5__RemoveServerCertificateAssignmentResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__ReplaceServerCertificateAssignment
#define SOAP_TYPE__ns5__ReplaceServerCertificateAssignment (933)
/* ns5:ReplaceServerCertificateAssignment */
class SOAP_CMAC _ns5__ReplaceServerCertificateAssignment
{
public:
	std::string OldCertificationPathID;	/* required element of type ns5:CertificationPathID */
	std::string NewCertificationPathID;	/* required element of type ns5:CertificationPathID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 933; } /* = unique type id SOAP_TYPE__ns5__ReplaceServerCertificateAssignment */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__ReplaceServerCertificateAssignment() { _ns5__ReplaceServerCertificateAssignment::soap_default(NULL); }
	virtual ~_ns5__ReplaceServerCertificateAssignment() { }
};
#endif

#ifndef SOAP_TYPE__ns5__ReplaceServerCertificateAssignmentResponse
#define SOAP_TYPE__ns5__ReplaceServerCertificateAssignmentResponse (934)
/* ns5:ReplaceServerCertificateAssignmentResponse */
class SOAP_CMAC _ns5__ReplaceServerCertificateAssignmentResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 934; } /* = unique type id SOAP_TYPE__ns5__ReplaceServerCertificateAssignmentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__ReplaceServerCertificateAssignmentResponse() { _ns5__ReplaceServerCertificateAssignmentResponse::soap_default(NULL); }
	virtual ~_ns5__ReplaceServerCertificateAssignmentResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetAssignedServerCertificates
#define SOAP_TYPE__ns5__GetAssignedServerCertificates (935)
/* ns5:GetAssignedServerCertificates */
class SOAP_CMAC _ns5__GetAssignedServerCertificates
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 935; } /* = unique type id SOAP_TYPE__ns5__GetAssignedServerCertificates */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetAssignedServerCertificates() { _ns5__GetAssignedServerCertificates::soap_default(NULL); }
	virtual ~_ns5__GetAssignedServerCertificates() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetAssignedServerCertificatesResponse
#define SOAP_TYPE__ns5__GetAssignedServerCertificatesResponse (936)
/* ns5:GetAssignedServerCertificatesResponse */
class SOAP_CMAC _ns5__GetAssignedServerCertificatesResponse
{
public:
	std::vector<std::string >CertificationPathID;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:CertificationPathID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 936; } /* = unique type id SOAP_TYPE__ns5__GetAssignedServerCertificatesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetAssignedServerCertificatesResponse() { _ns5__GetAssignedServerCertificatesResponse::soap_default(NULL); }
	virtual ~_ns5__GetAssignedServerCertificatesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__UploadCRL_anyParameters
#define SOAP_TYPE__ns5__UploadCRL_anyParameters (2891)
/* ns5:UploadCRL-anyParameters */
class SOAP_CMAC _ns5__UploadCRL_anyParameters
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 2891; } /* = unique type id SOAP_TYPE__ns5__UploadCRL_anyParameters */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__UploadCRL_anyParameters() { _ns5__UploadCRL_anyParameters::soap_default(NULL); }
	virtual ~_ns5__UploadCRL_anyParameters() { }
};
#endif

#ifndef SOAP_TYPE__ns5__UploadCRL
#define SOAP_TYPE__ns5__UploadCRL (937)
/* ns5:UploadCRL */
class SOAP_CMAC _ns5__UploadCRL
{
public:
	xsd__base64Binary Crl;	/* required element of type ns5:Base64DERencodedASN1Value */
	std::string *Alias;	/* optional element of type xsd:string */
	_ns5__UploadCRL_anyParameters *anyParameters;	/* optional element of type ns5:UploadCRL-anyParameters */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 937; } /* = unique type id SOAP_TYPE__ns5__UploadCRL */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__UploadCRL() { _ns5__UploadCRL::soap_default(NULL); }
	virtual ~_ns5__UploadCRL() { }
};
#endif

#ifndef SOAP_TYPE__ns5__UploadCRLResponse
#define SOAP_TYPE__ns5__UploadCRLResponse (938)
/* ns5:UploadCRLResponse */
class SOAP_CMAC _ns5__UploadCRLResponse
{
public:
	std::string CrlID;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:CRLID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 938; } /* = unique type id SOAP_TYPE__ns5__UploadCRLResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__UploadCRLResponse() { _ns5__UploadCRLResponse::soap_default(NULL); }
	virtual ~_ns5__UploadCRLResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetCRL
#define SOAP_TYPE__ns5__GetCRL (939)
/* ns5:GetCRL */
class SOAP_CMAC _ns5__GetCRL
{
public:
	std::string CrlID;	/* required element of type ns5:CRLID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 939; } /* = unique type id SOAP_TYPE__ns5__GetCRL */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetCRL() { _ns5__GetCRL::soap_default(NULL); }
	virtual ~_ns5__GetCRL() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetCRLResponse
#define SOAP_TYPE__ns5__GetCRLResponse (940)
/* ns5:GetCRLResponse */
class SOAP_CMAC _ns5__GetCRLResponse
{
public:
	ns5__CRL *Crl;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:CRL */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 940; } /* = unique type id SOAP_TYPE__ns5__GetCRLResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetCRLResponse() { _ns5__GetCRLResponse::soap_default(NULL); }
	virtual ~_ns5__GetCRLResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetAllCRLs
#define SOAP_TYPE__ns5__GetAllCRLs (941)
/* ns5:GetAllCRLs */
class SOAP_CMAC _ns5__GetAllCRLs
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 941; } /* = unique type id SOAP_TYPE__ns5__GetAllCRLs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetAllCRLs() { _ns5__GetAllCRLs::soap_default(NULL); }
	virtual ~_ns5__GetAllCRLs() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetAllCRLsResponse
#define SOAP_TYPE__ns5__GetAllCRLsResponse (942)
/* ns5:GetAllCRLsResponse */
class SOAP_CMAC _ns5__GetAllCRLsResponse
{
public:
	std::vector<ns5__CRL * >Crl;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:CRL */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 942; } /* = unique type id SOAP_TYPE__ns5__GetAllCRLsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetAllCRLsResponse() { _ns5__GetAllCRLsResponse::soap_default(NULL); }
	virtual ~_ns5__GetAllCRLsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__DeleteCRL
#define SOAP_TYPE__ns5__DeleteCRL (943)
/* ns5:DeleteCRL */
class SOAP_CMAC _ns5__DeleteCRL
{
public:
	std::string CrlID;	/* required element of type ns5:CRLID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 943; } /* = unique type id SOAP_TYPE__ns5__DeleteCRL */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__DeleteCRL() { _ns5__DeleteCRL::soap_default(NULL); }
	virtual ~_ns5__DeleteCRL() { }
};
#endif

#ifndef SOAP_TYPE__ns5__DeleteCRLResponse
#define SOAP_TYPE__ns5__DeleteCRLResponse (944)
/* ns5:DeleteCRLResponse */
class SOAP_CMAC _ns5__DeleteCRLResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 944; } /* = unique type id SOAP_TYPE__ns5__DeleteCRLResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__DeleteCRLResponse() { _ns5__DeleteCRLResponse::soap_default(NULL); }
	virtual ~_ns5__DeleteCRLResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__CreateCertPathValidationPolicy_anyParameters
#define SOAP_TYPE__ns5__CreateCertPathValidationPolicy_anyParameters (2895)
/* ns5:CreateCertPathValidationPolicy-anyParameters */
class SOAP_CMAC _ns5__CreateCertPathValidationPolicy_anyParameters
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 2895; } /* = unique type id SOAP_TYPE__ns5__CreateCertPathValidationPolicy_anyParameters */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__CreateCertPathValidationPolicy_anyParameters() { _ns5__CreateCertPathValidationPolicy_anyParameters::soap_default(NULL); }
	virtual ~_ns5__CreateCertPathValidationPolicy_anyParameters() { }
};
#endif

#ifndef SOAP_TYPE__ns5__CreateCertPathValidationPolicy
#define SOAP_TYPE__ns5__CreateCertPathValidationPolicy (945)
/* ns5:CreateCertPathValidationPolicy */
class SOAP_CMAC _ns5__CreateCertPathValidationPolicy
{
public:
	std::string *Alias;	/* optional element of type xsd:string */
	ns5__CertPathValidationParameters *Parameters;	/* required element of type ns5:CertPathValidationParameters */
	std::vector<ns5__TrustAnchor * >TrustAnchor;	/* required element of type ns5:TrustAnchor */
	_ns5__CreateCertPathValidationPolicy_anyParameters *anyParameters;	/* optional element of type ns5:CreateCertPathValidationPolicy-anyParameters */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 945; } /* = unique type id SOAP_TYPE__ns5__CreateCertPathValidationPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__CreateCertPathValidationPolicy() { _ns5__CreateCertPathValidationPolicy::soap_default(NULL); }
	virtual ~_ns5__CreateCertPathValidationPolicy() { }
};
#endif

#ifndef SOAP_TYPE__ns5__CreateCertPathValidationPolicyResponse
#define SOAP_TYPE__ns5__CreateCertPathValidationPolicyResponse (946)
/* ns5:CreateCertPathValidationPolicyResponse */
class SOAP_CMAC _ns5__CreateCertPathValidationPolicyResponse
{
public:
	std::string CertPathValidationPolicyID;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:CertPathValidationPolicyID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 946; } /* = unique type id SOAP_TYPE__ns5__CreateCertPathValidationPolicyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__CreateCertPathValidationPolicyResponse() { _ns5__CreateCertPathValidationPolicyResponse::soap_default(NULL); }
	virtual ~_ns5__CreateCertPathValidationPolicyResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetCertPathValidationPolicy
#define SOAP_TYPE__ns5__GetCertPathValidationPolicy (947)
/* ns5:GetCertPathValidationPolicy */
class SOAP_CMAC _ns5__GetCertPathValidationPolicy
{
public:
	std::string CertPathValidationPolicyID;	/* required element of type ns5:CertPathValidationPolicyID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 947; } /* = unique type id SOAP_TYPE__ns5__GetCertPathValidationPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetCertPathValidationPolicy() { _ns5__GetCertPathValidationPolicy::soap_default(NULL); }
	virtual ~_ns5__GetCertPathValidationPolicy() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetCertPathValidationPolicyResponse
#define SOAP_TYPE__ns5__GetCertPathValidationPolicyResponse (948)
/* ns5:GetCertPathValidationPolicyResponse */
class SOAP_CMAC _ns5__GetCertPathValidationPolicyResponse
{
public:
	ns5__CertPathValidationPolicy *CertPathValidationPolicy;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:CertPathValidationPolicy */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 948; } /* = unique type id SOAP_TYPE__ns5__GetCertPathValidationPolicyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetCertPathValidationPolicyResponse() { _ns5__GetCertPathValidationPolicyResponse::soap_default(NULL); }
	virtual ~_ns5__GetCertPathValidationPolicyResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetAllCertPathValidationPolicies
#define SOAP_TYPE__ns5__GetAllCertPathValidationPolicies (949)
/* ns5:GetAllCertPathValidationPolicies */
class SOAP_CMAC _ns5__GetAllCertPathValidationPolicies
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 949; } /* = unique type id SOAP_TYPE__ns5__GetAllCertPathValidationPolicies */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetAllCertPathValidationPolicies() { _ns5__GetAllCertPathValidationPolicies::soap_default(NULL); }
	virtual ~_ns5__GetAllCertPathValidationPolicies() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetAllCertPathValidationPoliciesResponse
#define SOAP_TYPE__ns5__GetAllCertPathValidationPoliciesResponse (950)
/* ns5:GetAllCertPathValidationPoliciesResponse */
class SOAP_CMAC _ns5__GetAllCertPathValidationPoliciesResponse
{
public:
	std::vector<ns5__CertPathValidationPolicy * >CertPathValidationPolicy;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:CertPathValidationPolicy */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 950; } /* = unique type id SOAP_TYPE__ns5__GetAllCertPathValidationPoliciesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetAllCertPathValidationPoliciesResponse() { _ns5__GetAllCertPathValidationPoliciesResponse::soap_default(NULL); }
	virtual ~_ns5__GetAllCertPathValidationPoliciesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__DeleteCertPathValidationPolicy
#define SOAP_TYPE__ns5__DeleteCertPathValidationPolicy (951)
/* ns5:DeleteCertPathValidationPolicy */
class SOAP_CMAC _ns5__DeleteCertPathValidationPolicy
{
public:
	std::string CertPathValidationPolicyID;	/* required element of type ns5:CertPathValidationPolicyID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 951; } /* = unique type id SOAP_TYPE__ns5__DeleteCertPathValidationPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__DeleteCertPathValidationPolicy() { _ns5__DeleteCertPathValidationPolicy::soap_default(NULL); }
	virtual ~_ns5__DeleteCertPathValidationPolicy() { }
};
#endif

#ifndef SOAP_TYPE__ns5__DeleteCertPathValidationPolicyResponse
#define SOAP_TYPE__ns5__DeleteCertPathValidationPolicyResponse (952)
/* ns5:DeleteCertPathValidationPolicyResponse */
class SOAP_CMAC _ns5__DeleteCertPathValidationPolicyResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 952; } /* = unique type id SOAP_TYPE__ns5__DeleteCertPathValidationPolicyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__DeleteCertPathValidationPolicyResponse() { _ns5__DeleteCertPathValidationPolicyResponse::soap_default(NULL); }
	virtual ~_ns5__DeleteCertPathValidationPolicyResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__SetClientAuthenticationRequired
#define SOAP_TYPE__ns5__SetClientAuthenticationRequired (953)
/* ns5:SetClientAuthenticationRequired */
class SOAP_CMAC _ns5__SetClientAuthenticationRequired
{
public:
	bool clientAuthenticationRequired;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 953; } /* = unique type id SOAP_TYPE__ns5__SetClientAuthenticationRequired */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__SetClientAuthenticationRequired() { _ns5__SetClientAuthenticationRequired::soap_default(NULL); }
	virtual ~_ns5__SetClientAuthenticationRequired() { }
};
#endif

#ifndef SOAP_TYPE__ns5__SetClientAuthenticationRequiredResponse
#define SOAP_TYPE__ns5__SetClientAuthenticationRequiredResponse (954)
/* ns5:SetClientAuthenticationRequiredResponse */
class SOAP_CMAC _ns5__SetClientAuthenticationRequiredResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 954; } /* = unique type id SOAP_TYPE__ns5__SetClientAuthenticationRequiredResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__SetClientAuthenticationRequiredResponse() { _ns5__SetClientAuthenticationRequiredResponse::soap_default(NULL); }
	virtual ~_ns5__SetClientAuthenticationRequiredResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetClientAuthenticationRequired
#define SOAP_TYPE__ns5__GetClientAuthenticationRequired (955)
/* ns5:GetClientAuthenticationRequired */
class SOAP_CMAC _ns5__GetClientAuthenticationRequired
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 955; } /* = unique type id SOAP_TYPE__ns5__GetClientAuthenticationRequired */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetClientAuthenticationRequired() { _ns5__GetClientAuthenticationRequired::soap_default(NULL); }
	virtual ~_ns5__GetClientAuthenticationRequired() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetClientAuthenticationRequiredResponse
#define SOAP_TYPE__ns5__GetClientAuthenticationRequiredResponse (956)
/* ns5:GetClientAuthenticationRequiredResponse */
class SOAP_CMAC _ns5__GetClientAuthenticationRequiredResponse
{
public:
	bool clientAuthenticationRequired;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 956; } /* = unique type id SOAP_TYPE__ns5__GetClientAuthenticationRequiredResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetClientAuthenticationRequiredResponse() { _ns5__GetClientAuthenticationRequiredResponse::soap_default(NULL); }
	virtual ~_ns5__GetClientAuthenticationRequiredResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__AddCertPathValidationPolicyAssignment
#define SOAP_TYPE__ns5__AddCertPathValidationPolicyAssignment (957)
/* ns5:AddCertPathValidationPolicyAssignment */
class SOAP_CMAC _ns5__AddCertPathValidationPolicyAssignment
{
public:
	std::string CertPathValidationPolicyID;	/* required element of type ns5:CertPathValidationPolicyID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 957; } /* = unique type id SOAP_TYPE__ns5__AddCertPathValidationPolicyAssignment */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__AddCertPathValidationPolicyAssignment() { _ns5__AddCertPathValidationPolicyAssignment::soap_default(NULL); }
	virtual ~_ns5__AddCertPathValidationPolicyAssignment() { }
};
#endif

#ifndef SOAP_TYPE__ns5__AddCertPathValidationPolicyAssignmentResponse
#define SOAP_TYPE__ns5__AddCertPathValidationPolicyAssignmentResponse (958)
/* ns5:AddCertPathValidationPolicyAssignmentResponse */
class SOAP_CMAC _ns5__AddCertPathValidationPolicyAssignmentResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 958; } /* = unique type id SOAP_TYPE__ns5__AddCertPathValidationPolicyAssignmentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__AddCertPathValidationPolicyAssignmentResponse() { _ns5__AddCertPathValidationPolicyAssignmentResponse::soap_default(NULL); }
	virtual ~_ns5__AddCertPathValidationPolicyAssignmentResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__RemoveCertPathValidationPolicyAssignment
#define SOAP_TYPE__ns5__RemoveCertPathValidationPolicyAssignment (959)
/* ns5:RemoveCertPathValidationPolicyAssignment */
class SOAP_CMAC _ns5__RemoveCertPathValidationPolicyAssignment
{
public:
	std::string CertPathValidationPolicyID;	/* required element of type ns5:CertPathValidationPolicyID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 959; } /* = unique type id SOAP_TYPE__ns5__RemoveCertPathValidationPolicyAssignment */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__RemoveCertPathValidationPolicyAssignment() { _ns5__RemoveCertPathValidationPolicyAssignment::soap_default(NULL); }
	virtual ~_ns5__RemoveCertPathValidationPolicyAssignment() { }
};
#endif

#ifndef SOAP_TYPE__ns5__RemoveCertPathValidationPolicyAssignmentResponse
#define SOAP_TYPE__ns5__RemoveCertPathValidationPolicyAssignmentResponse (960)
/* ns5:RemoveCertPathValidationPolicyAssignmentResponse */
class SOAP_CMAC _ns5__RemoveCertPathValidationPolicyAssignmentResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 960; } /* = unique type id SOAP_TYPE__ns5__RemoveCertPathValidationPolicyAssignmentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__RemoveCertPathValidationPolicyAssignmentResponse() { _ns5__RemoveCertPathValidationPolicyAssignmentResponse::soap_default(NULL); }
	virtual ~_ns5__RemoveCertPathValidationPolicyAssignmentResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__ReplaceCertPathValidationPolicyAssignment
#define SOAP_TYPE__ns5__ReplaceCertPathValidationPolicyAssignment (961)
/* ns5:ReplaceCertPathValidationPolicyAssignment */
class SOAP_CMAC _ns5__ReplaceCertPathValidationPolicyAssignment
{
public:
	std::string OldCertPathValidationPolicyID;	/* required element of type ns5:CertPathValidationPolicyID */
	std::string NewCertPathValidationPolicyID;	/* required element of type ns5:CertPathValidationPolicyID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 961; } /* = unique type id SOAP_TYPE__ns5__ReplaceCertPathValidationPolicyAssignment */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__ReplaceCertPathValidationPolicyAssignment() { _ns5__ReplaceCertPathValidationPolicyAssignment::soap_default(NULL); }
	virtual ~_ns5__ReplaceCertPathValidationPolicyAssignment() { }
};
#endif

#ifndef SOAP_TYPE__ns5__ReplaceCertPathValidationPolicyAssignmentResponse
#define SOAP_TYPE__ns5__ReplaceCertPathValidationPolicyAssignmentResponse (962)
/* ns5:ReplaceCertPathValidationPolicyAssignmentResponse */
class SOAP_CMAC _ns5__ReplaceCertPathValidationPolicyAssignmentResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 962; } /* = unique type id SOAP_TYPE__ns5__ReplaceCertPathValidationPolicyAssignmentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__ReplaceCertPathValidationPolicyAssignmentResponse() { _ns5__ReplaceCertPathValidationPolicyAssignmentResponse::soap_default(NULL); }
	virtual ~_ns5__ReplaceCertPathValidationPolicyAssignmentResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetAssignedCertPathValidationPolicies
#define SOAP_TYPE__ns5__GetAssignedCertPathValidationPolicies (963)
/* ns5:GetAssignedCertPathValidationPolicies */
class SOAP_CMAC _ns5__GetAssignedCertPathValidationPolicies
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 963; } /* = unique type id SOAP_TYPE__ns5__GetAssignedCertPathValidationPolicies */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetAssignedCertPathValidationPolicies() { _ns5__GetAssignedCertPathValidationPolicies::soap_default(NULL); }
	virtual ~_ns5__GetAssignedCertPathValidationPolicies() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetAssignedCertPathValidationPoliciesResponse
#define SOAP_TYPE__ns5__GetAssignedCertPathValidationPoliciesResponse (964)
/* ns5:GetAssignedCertPathValidationPoliciesResponse */
class SOAP_CMAC _ns5__GetAssignedCertPathValidationPoliciesResponse
{
public:
	std::vector<std::string >CertPathValidationPolicyID;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:CertPathValidationPolicyID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 964; } /* = unique type id SOAP_TYPE__ns5__GetAssignedCertPathValidationPoliciesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetAssignedCertPathValidationPoliciesResponse() { _ns5__GetAssignedCertPathValidationPoliciesResponse::soap_default(NULL); }
	virtual ~_ns5__GetAssignedCertPathValidationPoliciesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__AddDot1XConfiguration
#define SOAP_TYPE__ns5__AddDot1XConfiguration (965)
/* ns5:AddDot1XConfiguration */
class SOAP_CMAC _ns5__AddDot1XConfiguration
{
public:
	ns5__Dot1XConfiguration *Dot1XConfiguration;	/* required element of type ns5:Dot1XConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 965; } /* = unique type id SOAP_TYPE__ns5__AddDot1XConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__AddDot1XConfiguration() { _ns5__AddDot1XConfiguration::soap_default(NULL); }
	virtual ~_ns5__AddDot1XConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__ns5__AddDot1XConfigurationResponse
#define SOAP_TYPE__ns5__AddDot1XConfigurationResponse (966)
/* ns5:AddDot1XConfigurationResponse */
class SOAP_CMAC _ns5__AddDot1XConfigurationResponse
{
public:
	std::string Dot1XID;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:Dot1XID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 966; } /* = unique type id SOAP_TYPE__ns5__AddDot1XConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__AddDot1XConfigurationResponse() { _ns5__AddDot1XConfigurationResponse::soap_default(NULL); }
	virtual ~_ns5__AddDot1XConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetAllDot1XConfigurations
#define SOAP_TYPE__ns5__GetAllDot1XConfigurations (967)
/* ns5:GetAllDot1XConfigurations */
class SOAP_CMAC _ns5__GetAllDot1XConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 967; } /* = unique type id SOAP_TYPE__ns5__GetAllDot1XConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetAllDot1XConfigurations() { _ns5__GetAllDot1XConfigurations::soap_default(NULL); }
	virtual ~_ns5__GetAllDot1XConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetAllDot1XConfigurationsResponse
#define SOAP_TYPE__ns5__GetAllDot1XConfigurationsResponse (968)
/* ns5:GetAllDot1XConfigurationsResponse */
class SOAP_CMAC _ns5__GetAllDot1XConfigurationsResponse
{
public:
	std::vector<ns5__Dot1XConfiguration * >Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:Dot1XConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 968; } /* = unique type id SOAP_TYPE__ns5__GetAllDot1XConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetAllDot1XConfigurationsResponse() { _ns5__GetAllDot1XConfigurationsResponse::soap_default(NULL); }
	virtual ~_ns5__GetAllDot1XConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetDot1XConfiguration
#define SOAP_TYPE__ns5__GetDot1XConfiguration (969)
/* ns5:GetDot1XConfiguration */
class SOAP_CMAC _ns5__GetDot1XConfiguration
{
public:
	std::string Dot1XID;	/* required element of type ns5:Dot1XID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 969; } /* = unique type id SOAP_TYPE__ns5__GetDot1XConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetDot1XConfiguration() { _ns5__GetDot1XConfiguration::soap_default(NULL); }
	virtual ~_ns5__GetDot1XConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetDot1XConfigurationResponse
#define SOAP_TYPE__ns5__GetDot1XConfigurationResponse (970)
/* ns5:GetDot1XConfigurationResponse */
class SOAP_CMAC _ns5__GetDot1XConfigurationResponse
{
public:
	ns5__Dot1XConfiguration *Dot1XConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:Dot1XConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 970; } /* = unique type id SOAP_TYPE__ns5__GetDot1XConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetDot1XConfigurationResponse() { _ns5__GetDot1XConfigurationResponse::soap_default(NULL); }
	virtual ~_ns5__GetDot1XConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__DeleteDot1XConfiguration
#define SOAP_TYPE__ns5__DeleteDot1XConfiguration (971)
/* ns5:DeleteDot1XConfiguration */
class SOAP_CMAC _ns5__DeleteDot1XConfiguration
{
public:
	std::string Dot1XID;	/* required element of type ns5:Dot1XID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 971; } /* = unique type id SOAP_TYPE__ns5__DeleteDot1XConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__DeleteDot1XConfiguration() { _ns5__DeleteDot1XConfiguration::soap_default(NULL); }
	virtual ~_ns5__DeleteDot1XConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__ns5__DeleteDot1XConfigurationResponse
#define SOAP_TYPE__ns5__DeleteDot1XConfigurationResponse (972)
/* ns5:DeleteDot1XConfigurationResponse */
class SOAP_CMAC _ns5__DeleteDot1XConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 972; } /* = unique type id SOAP_TYPE__ns5__DeleteDot1XConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__DeleteDot1XConfigurationResponse() { _ns5__DeleteDot1XConfigurationResponse::soap_default(NULL); }
	virtual ~_ns5__DeleteDot1XConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__SetNetworkInterfaceDot1XConfiguration
#define SOAP_TYPE__ns5__SetNetworkInterfaceDot1XConfiguration (973)
/* ns5:SetNetworkInterfaceDot1XConfiguration */
class SOAP_CMAC _ns5__SetNetworkInterfaceDot1XConfiguration
{
public:
	std::string token;	/* required element of type xsd:string */
	std::string Dot1XID;	/* required element of type ns5:Dot1XID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 973; } /* = unique type id SOAP_TYPE__ns5__SetNetworkInterfaceDot1XConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__SetNetworkInterfaceDot1XConfiguration() { _ns5__SetNetworkInterfaceDot1XConfiguration::soap_default(NULL); }
	virtual ~_ns5__SetNetworkInterfaceDot1XConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__ns5__SetNetworkInterfaceDot1XConfigurationResponse
#define SOAP_TYPE__ns5__SetNetworkInterfaceDot1XConfigurationResponse (974)
/* ns5:SetNetworkInterfaceDot1XConfigurationResponse */
class SOAP_CMAC _ns5__SetNetworkInterfaceDot1XConfigurationResponse
{
public:
	bool RebootNeeded;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 974; } /* = unique type id SOAP_TYPE__ns5__SetNetworkInterfaceDot1XConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__SetNetworkInterfaceDot1XConfigurationResponse() { _ns5__SetNetworkInterfaceDot1XConfigurationResponse::soap_default(NULL); }
	virtual ~_ns5__SetNetworkInterfaceDot1XConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetNetworkInterfaceDot1XConfiguration
#define SOAP_TYPE__ns5__GetNetworkInterfaceDot1XConfiguration (975)
/* ns5:GetNetworkInterfaceDot1XConfiguration */
class SOAP_CMAC _ns5__GetNetworkInterfaceDot1XConfiguration
{
public:
	std::string token;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 975; } /* = unique type id SOAP_TYPE__ns5__GetNetworkInterfaceDot1XConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetNetworkInterfaceDot1XConfiguration() { _ns5__GetNetworkInterfaceDot1XConfiguration::soap_default(NULL); }
	virtual ~_ns5__GetNetworkInterfaceDot1XConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__ns5__GetNetworkInterfaceDot1XConfigurationResponse
#define SOAP_TYPE__ns5__GetNetworkInterfaceDot1XConfigurationResponse (976)
/* ns5:GetNetworkInterfaceDot1XConfigurationResponse */
class SOAP_CMAC _ns5__GetNetworkInterfaceDot1XConfigurationResponse
{
public:
	std::string *Dot1XID;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:Dot1XID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 976; } /* = unique type id SOAP_TYPE__ns5__GetNetworkInterfaceDot1XConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetNetworkInterfaceDot1XConfigurationResponse() { _ns5__GetNetworkInterfaceDot1XConfigurationResponse::soap_default(NULL); }
	virtual ~_ns5__GetNetworkInterfaceDot1XConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__DeleteNetworkInterfaceDot1XConfiguration
#define SOAP_TYPE__ns5__DeleteNetworkInterfaceDot1XConfiguration (977)
/* ns5:DeleteNetworkInterfaceDot1XConfiguration */
class SOAP_CMAC _ns5__DeleteNetworkInterfaceDot1XConfiguration
{
public:
	std::string token;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 977; } /* = unique type id SOAP_TYPE__ns5__DeleteNetworkInterfaceDot1XConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__DeleteNetworkInterfaceDot1XConfiguration() { _ns5__DeleteNetworkInterfaceDot1XConfiguration::soap_default(NULL); }
	virtual ~_ns5__DeleteNetworkInterfaceDot1XConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__ns5__DeleteNetworkInterfaceDot1XConfigurationResponse
#define SOAP_TYPE__ns5__DeleteNetworkInterfaceDot1XConfigurationResponse (978)
/* ns5:DeleteNetworkInterfaceDot1XConfigurationResponse */
class SOAP_CMAC _ns5__DeleteNetworkInterfaceDot1XConfigurationResponse
{
public:
	bool RebootNeeded;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 978; } /* = unique type id SOAP_TYPE__ns5__DeleteNetworkInterfaceDot1XConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__DeleteNetworkInterfaceDot1XConfigurationResponse() { _ns5__DeleteNetworkInterfaceDot1XConfigurationResponse::soap_default(NULL); }
	virtual ~_ns5__DeleteNetworkInterfaceDot1XConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_tan__Capabilities
#define SOAP_TYPE_tan__Capabilities (979)
/* tan:Capabilities */
class SOAP_CMAC tan__Capabilities : public xsd__anyType
{
public:
	std::vector<char * >__any;
	bool *RuleSupport;	/* optional attribute */
	bool *AnalyticsModuleSupport;	/* optional attribute */
	bool *CellBasedSceneDescriptionSupported;	/* optional attribute */
	bool *RuleOptionsSupported;	/* optional attribute */
	bool *AnalyticsModuleOptionsSupported;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 979; } /* = unique type id SOAP_TYPE_tan__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tan__Capabilities() { tan__Capabilities::soap_default(NULL); }
	virtual ~tan__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE_tan__ConfigOptions
#define SOAP_TYPE_tan__ConfigOptions (980)
/* tan:ConfigOptions */
class SOAP_CMAC tan__ConfigOptions : public xsd__anyType
{
public:
	char *__any;
	std::string *RuleType;	/* optional attribute */
	std::string Name;	/* required attribute */
	std::string Type;	/* required attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 980; } /* = unique type id SOAP_TYPE_tan__ConfigOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tan__ConfigOptions() { tan__ConfigOptions::soap_default(NULL); }
	virtual ~tan__ConfigOptions() { }
};
#endif

#ifndef SOAP_TYPE_tan__AnalyticsModuleConfigOptions
#define SOAP_TYPE_tan__AnalyticsModuleConfigOptions (981)
/* tan:AnalyticsModuleConfigOptions */
class SOAP_CMAC tan__AnalyticsModuleConfigOptions : public xsd__anyType
{
public:
	char *__any;
	std::string Type;	/* required attribute */
	std::string *Name;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 981; } /* = unique type id SOAP_TYPE_tan__AnalyticsModuleConfigOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tan__AnalyticsModuleConfigOptions() { tan__AnalyticsModuleConfigOptions::soap_default(NULL); }
	virtual ~tan__AnalyticsModuleConfigOptions() { }
};
#endif

#ifndef SOAP_TYPE__tan__GetServiceCapabilities
#define SOAP_TYPE__tan__GetServiceCapabilities (982)
/* tan:GetServiceCapabilities */
class SOAP_CMAC _tan__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 982; } /* = unique type id SOAP_TYPE__tan__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__GetServiceCapabilities() { _tan__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_tan__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__tan__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tan__GetServiceCapabilitiesResponse (983)
/* tan:GetServiceCapabilitiesResponse */
class SOAP_CMAC _tan__GetServiceCapabilitiesResponse
{
public:
	tan__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tan:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 983; } /* = unique type id SOAP_TYPE__tan__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__GetServiceCapabilitiesResponse() { _tan__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_tan__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tan__GetSupportedRules
#define SOAP_TYPE__tan__GetSupportedRules (984)
/* tan:GetSupportedRules */
class SOAP_CMAC _tan__GetSupportedRules
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 984; } /* = unique type id SOAP_TYPE__tan__GetSupportedRules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__GetSupportedRules() { _tan__GetSupportedRules::soap_default(NULL); }
	virtual ~_tan__GetSupportedRules() { }
};
#endif

#ifndef SOAP_TYPE__tan__GetSupportedRulesResponse
#define SOAP_TYPE__tan__GetSupportedRulesResponse (985)
/* tan:GetSupportedRulesResponse */
class SOAP_CMAC _tan__GetSupportedRulesResponse
{
public:
	tt__SupportedRules *SupportedRules;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:SupportedRules */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 985; } /* = unique type id SOAP_TYPE__tan__GetSupportedRulesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__GetSupportedRulesResponse() { _tan__GetSupportedRulesResponse::soap_default(NULL); }
	virtual ~_tan__GetSupportedRulesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tan__CreateRules
#define SOAP_TYPE__tan__CreateRules (986)
/* tan:CreateRules */
class SOAP_CMAC _tan__CreateRules
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	std::vector<tt__Config * >Rule;	/* required element of type tt:Config */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 986; } /* = unique type id SOAP_TYPE__tan__CreateRules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__CreateRules() { _tan__CreateRules::soap_default(NULL); }
	virtual ~_tan__CreateRules() { }
};
#endif

#ifndef SOAP_TYPE__tan__CreateRulesResponse
#define SOAP_TYPE__tan__CreateRulesResponse (987)
/* tan:CreateRulesResponse */
class SOAP_CMAC _tan__CreateRulesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 987; } /* = unique type id SOAP_TYPE__tan__CreateRulesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__CreateRulesResponse() { _tan__CreateRulesResponse::soap_default(NULL); }
	virtual ~_tan__CreateRulesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tan__DeleteRules
#define SOAP_TYPE__tan__DeleteRules (988)
/* tan:DeleteRules */
class SOAP_CMAC _tan__DeleteRules
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	std::vector<std::string >RuleName;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 988; } /* = unique type id SOAP_TYPE__tan__DeleteRules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__DeleteRules() { _tan__DeleteRules::soap_default(NULL); }
	virtual ~_tan__DeleteRules() { }
};
#endif

#ifndef SOAP_TYPE__tan__DeleteRulesResponse
#define SOAP_TYPE__tan__DeleteRulesResponse (989)
/* tan:DeleteRulesResponse */
class SOAP_CMAC _tan__DeleteRulesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 989; } /* = unique type id SOAP_TYPE__tan__DeleteRulesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__DeleteRulesResponse() { _tan__DeleteRulesResponse::soap_default(NULL); }
	virtual ~_tan__DeleteRulesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tan__ModifyRules
#define SOAP_TYPE__tan__ModifyRules (990)
/* tan:ModifyRules */
class SOAP_CMAC _tan__ModifyRules
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	std::vector<tt__Config * >Rule;	/* required element of type tt:Config */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 990; } /* = unique type id SOAP_TYPE__tan__ModifyRules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__ModifyRules() { _tan__ModifyRules::soap_default(NULL); }
	virtual ~_tan__ModifyRules() { }
};
#endif

#ifndef SOAP_TYPE__tan__ModifyRulesResponse
#define SOAP_TYPE__tan__ModifyRulesResponse (991)
/* tan:ModifyRulesResponse */
class SOAP_CMAC _tan__ModifyRulesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 991; } /* = unique type id SOAP_TYPE__tan__ModifyRulesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__ModifyRulesResponse() { _tan__ModifyRulesResponse::soap_default(NULL); }
	virtual ~_tan__ModifyRulesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tan__GetRules
#define SOAP_TYPE__tan__GetRules (992)
/* tan:GetRules */
class SOAP_CMAC _tan__GetRules
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 992; } /* = unique type id SOAP_TYPE__tan__GetRules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__GetRules() { _tan__GetRules::soap_default(NULL); }
	virtual ~_tan__GetRules() { }
};
#endif

#ifndef SOAP_TYPE__tan__GetRulesResponse
#define SOAP_TYPE__tan__GetRulesResponse (993)
/* tan:GetRulesResponse */
class SOAP_CMAC _tan__GetRulesResponse
{
public:
	std::vector<tt__Config * >Rule;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:Config */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 993; } /* = unique type id SOAP_TYPE__tan__GetRulesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__GetRulesResponse() { _tan__GetRulesResponse::soap_default(NULL); }
	virtual ~_tan__GetRulesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tan__GetRuleOptions
#define SOAP_TYPE__tan__GetRuleOptions (994)
/* tan:GetRuleOptions */
class SOAP_CMAC _tan__GetRuleOptions
{
public:
	std::string *RuleType;	/* optional element of type xsd:QName */
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 994; } /* = unique type id SOAP_TYPE__tan__GetRuleOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__GetRuleOptions() { _tan__GetRuleOptions::soap_default(NULL); }
	virtual ~_tan__GetRuleOptions() { }
};
#endif

#ifndef SOAP_TYPE__tan__GetRuleOptionsResponse
#define SOAP_TYPE__tan__GetRuleOptionsResponse (995)
/* tan:GetRuleOptionsResponse */
class SOAP_CMAC _tan__GetRuleOptionsResponse
{
public:
	std::vector<tan__ConfigOptions * >RuleOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tan:ConfigOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 995; } /* = unique type id SOAP_TYPE__tan__GetRuleOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__GetRuleOptionsResponse() { _tan__GetRuleOptionsResponse::soap_default(NULL); }
	virtual ~_tan__GetRuleOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tan__GetSupportedAnalyticsModules
#define SOAP_TYPE__tan__GetSupportedAnalyticsModules (996)
/* tan:GetSupportedAnalyticsModules */
class SOAP_CMAC _tan__GetSupportedAnalyticsModules
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 996; } /* = unique type id SOAP_TYPE__tan__GetSupportedAnalyticsModules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__GetSupportedAnalyticsModules() { _tan__GetSupportedAnalyticsModules::soap_default(NULL); }
	virtual ~_tan__GetSupportedAnalyticsModules() { }
};
#endif

#ifndef SOAP_TYPE__tan__GetSupportedAnalyticsModulesResponse
#define SOAP_TYPE__tan__GetSupportedAnalyticsModulesResponse (997)
/* tan:GetSupportedAnalyticsModulesResponse */
class SOAP_CMAC _tan__GetSupportedAnalyticsModulesResponse
{
public:
	tt__SupportedAnalyticsModules *SupportedAnalyticsModules;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:SupportedAnalyticsModules */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 997; } /* = unique type id SOAP_TYPE__tan__GetSupportedAnalyticsModulesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__GetSupportedAnalyticsModulesResponse() { _tan__GetSupportedAnalyticsModulesResponse::soap_default(NULL); }
	virtual ~_tan__GetSupportedAnalyticsModulesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tan__CreateAnalyticsModules
#define SOAP_TYPE__tan__CreateAnalyticsModules (998)
/* tan:CreateAnalyticsModules */
class SOAP_CMAC _tan__CreateAnalyticsModules
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	std::vector<tt__Config * >AnalyticsModule;	/* required element of type tt:Config */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 998; } /* = unique type id SOAP_TYPE__tan__CreateAnalyticsModules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__CreateAnalyticsModules() { _tan__CreateAnalyticsModules::soap_default(NULL); }
	virtual ~_tan__CreateAnalyticsModules() { }
};
#endif

#ifndef SOAP_TYPE__tan__CreateAnalyticsModulesResponse
#define SOAP_TYPE__tan__CreateAnalyticsModulesResponse (999)
/* tan:CreateAnalyticsModulesResponse */
class SOAP_CMAC _tan__CreateAnalyticsModulesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 999; } /* = unique type id SOAP_TYPE__tan__CreateAnalyticsModulesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__CreateAnalyticsModulesResponse() { _tan__CreateAnalyticsModulesResponse::soap_default(NULL); }
	virtual ~_tan__CreateAnalyticsModulesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tan__DeleteAnalyticsModules
#define SOAP_TYPE__tan__DeleteAnalyticsModules (1000)
/* tan:DeleteAnalyticsModules */
class SOAP_CMAC _tan__DeleteAnalyticsModules
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	std::vector<std::string >AnalyticsModuleName;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1000; } /* = unique type id SOAP_TYPE__tan__DeleteAnalyticsModules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__DeleteAnalyticsModules() { _tan__DeleteAnalyticsModules::soap_default(NULL); }
	virtual ~_tan__DeleteAnalyticsModules() { }
};
#endif

#ifndef SOAP_TYPE__tan__DeleteAnalyticsModulesResponse
#define SOAP_TYPE__tan__DeleteAnalyticsModulesResponse (1001)
/* tan:DeleteAnalyticsModulesResponse */
class SOAP_CMAC _tan__DeleteAnalyticsModulesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1001; } /* = unique type id SOAP_TYPE__tan__DeleteAnalyticsModulesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__DeleteAnalyticsModulesResponse() { _tan__DeleteAnalyticsModulesResponse::soap_default(NULL); }
	virtual ~_tan__DeleteAnalyticsModulesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tan__ModifyAnalyticsModules
#define SOAP_TYPE__tan__ModifyAnalyticsModules (1002)
/* tan:ModifyAnalyticsModules */
class SOAP_CMAC _tan__ModifyAnalyticsModules
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	std::vector<tt__Config * >AnalyticsModule;	/* required element of type tt:Config */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1002; } /* = unique type id SOAP_TYPE__tan__ModifyAnalyticsModules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__ModifyAnalyticsModules() { _tan__ModifyAnalyticsModules::soap_default(NULL); }
	virtual ~_tan__ModifyAnalyticsModules() { }
};
#endif

#ifndef SOAP_TYPE__tan__ModifyAnalyticsModulesResponse
#define SOAP_TYPE__tan__ModifyAnalyticsModulesResponse (1003)
/* tan:ModifyAnalyticsModulesResponse */
class SOAP_CMAC _tan__ModifyAnalyticsModulesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1003; } /* = unique type id SOAP_TYPE__tan__ModifyAnalyticsModulesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__ModifyAnalyticsModulesResponse() { _tan__ModifyAnalyticsModulesResponse::soap_default(NULL); }
	virtual ~_tan__ModifyAnalyticsModulesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tan__GetAnalyticsModules
#define SOAP_TYPE__tan__GetAnalyticsModules (1004)
/* tan:GetAnalyticsModules */
class SOAP_CMAC _tan__GetAnalyticsModules
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1004; } /* = unique type id SOAP_TYPE__tan__GetAnalyticsModules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__GetAnalyticsModules() { _tan__GetAnalyticsModules::soap_default(NULL); }
	virtual ~_tan__GetAnalyticsModules() { }
};
#endif

#ifndef SOAP_TYPE__tan__GetAnalyticsModulesResponse
#define SOAP_TYPE__tan__GetAnalyticsModulesResponse (1005)
/* tan:GetAnalyticsModulesResponse */
class SOAP_CMAC _tan__GetAnalyticsModulesResponse
{
public:
	std::vector<tt__Config * >AnalyticsModule;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:Config */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1005; } /* = unique type id SOAP_TYPE__tan__GetAnalyticsModulesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__GetAnalyticsModulesResponse() { _tan__GetAnalyticsModulesResponse::soap_default(NULL); }
	virtual ~_tan__GetAnalyticsModulesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tan__GetAnalyticsModuleOptions
#define SOAP_TYPE__tan__GetAnalyticsModuleOptions (1006)
/* tan:GetAnalyticsModuleOptions */
class SOAP_CMAC _tan__GetAnalyticsModuleOptions
{
public:
	std::string Type;	/* required element of type xsd:QName */
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1006; } /* = unique type id SOAP_TYPE__tan__GetAnalyticsModuleOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__GetAnalyticsModuleOptions() { _tan__GetAnalyticsModuleOptions::soap_default(NULL); }
	virtual ~_tan__GetAnalyticsModuleOptions() { }
};
#endif

#ifndef SOAP_TYPE__tan__GetAnalyticsModuleOptionsResponse
#define SOAP_TYPE__tan__GetAnalyticsModuleOptionsResponse (1007)
/* tan:GetAnalyticsModuleOptionsResponse */
class SOAP_CMAC _tan__GetAnalyticsModuleOptionsResponse
{
public:
	std::vector<tan__AnalyticsModuleConfigOptions * >Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tan:AnalyticsModuleConfigOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1007; } /* = unique type id SOAP_TYPE__tan__GetAnalyticsModuleOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__GetAnalyticsModuleOptionsResponse() { _tan__GetAnalyticsModuleOptionsResponse::soap_default(NULL); }
	virtual ~_tan__GetAnalyticsModuleOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE_tad__Capabilities
#define SOAP_TYPE_tad__Capabilities (1008)
/* tad:Capabilities */
class SOAP_CMAC tad__Capabilities : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1008; } /* = unique type id SOAP_TYPE_tad__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tad__Capabilities() { tad__Capabilities::soap_default(NULL); }
	virtual ~tad__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE__tad__GetServiceCapabilities
#define SOAP_TYPE__tad__GetServiceCapabilities (1009)
/* tad:GetServiceCapabilities */
class SOAP_CMAC _tad__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1009; } /* = unique type id SOAP_TYPE__tad__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__GetServiceCapabilities() { _tad__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_tad__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__tad__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tad__GetServiceCapabilitiesResponse (1010)
/* tad:GetServiceCapabilitiesResponse */
class SOAP_CMAC _tad__GetServiceCapabilitiesResponse
{
public:
	tad__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tad:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1010; } /* = unique type id SOAP_TYPE__tad__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__GetServiceCapabilitiesResponse() { _tad__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_tad__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tad__DeleteAnalyticsEngineControl
#define SOAP_TYPE__tad__DeleteAnalyticsEngineControl (1011)
/* tad:DeleteAnalyticsEngineControl */
class SOAP_CMAC _tad__DeleteAnalyticsEngineControl
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1011; } /* = unique type id SOAP_TYPE__tad__DeleteAnalyticsEngineControl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__DeleteAnalyticsEngineControl() { _tad__DeleteAnalyticsEngineControl::soap_default(NULL); }
	virtual ~_tad__DeleteAnalyticsEngineControl() { }
};
#endif

#ifndef SOAP_TYPE__tad__DeleteAnalyticsEngineControlResponse
#define SOAP_TYPE__tad__DeleteAnalyticsEngineControlResponse (1012)
/* tad:DeleteAnalyticsEngineControlResponse */
class SOAP_CMAC _tad__DeleteAnalyticsEngineControlResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1012; } /* = unique type id SOAP_TYPE__tad__DeleteAnalyticsEngineControlResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__DeleteAnalyticsEngineControlResponse() { _tad__DeleteAnalyticsEngineControlResponse::soap_default(NULL); }
	virtual ~_tad__DeleteAnalyticsEngineControlResponse() { }
};
#endif

#ifndef SOAP_TYPE__tad__CreateAnalyticsEngineInputs
#define SOAP_TYPE__tad__CreateAnalyticsEngineInputs (1013)
/* tad:CreateAnalyticsEngineInputs */
class SOAP_CMAC _tad__CreateAnalyticsEngineInputs
{
public:
	std::vector<class tt__AnalyticsEngineInput * >Configuration;	/* required element of type tt:AnalyticsEngineInput */
	std::vector<bool >ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1013; } /* = unique type id SOAP_TYPE__tad__CreateAnalyticsEngineInputs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__CreateAnalyticsEngineInputs() { _tad__CreateAnalyticsEngineInputs::soap_default(NULL); }
	virtual ~_tad__CreateAnalyticsEngineInputs() { }
};
#endif

#ifndef SOAP_TYPE__tad__CreateAnalyticsEngineInputsResponse
#define SOAP_TYPE__tad__CreateAnalyticsEngineInputsResponse (1014)
/* tad:CreateAnalyticsEngineInputsResponse */
class SOAP_CMAC _tad__CreateAnalyticsEngineInputsResponse
{
public:
	std::vector<tt__AnalyticsEngineInput * >Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AnalyticsEngineInput */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1014; } /* = unique type id SOAP_TYPE__tad__CreateAnalyticsEngineInputsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__CreateAnalyticsEngineInputsResponse() { _tad__CreateAnalyticsEngineInputsResponse::soap_default(NULL); }
	virtual ~_tad__CreateAnalyticsEngineInputsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tad__CreateAnalyticsEngineControl
#define SOAP_TYPE__tad__CreateAnalyticsEngineControl (1015)
/* tad:CreateAnalyticsEngineControl */
class SOAP_CMAC _tad__CreateAnalyticsEngineControl
{
public:
	class tt__AnalyticsEngineControl *Configuration;	/* required element of type tt:AnalyticsEngineControl */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1015; } /* = unique type id SOAP_TYPE__tad__CreateAnalyticsEngineControl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__CreateAnalyticsEngineControl() { _tad__CreateAnalyticsEngineControl::soap_default(NULL); }
	virtual ~_tad__CreateAnalyticsEngineControl() { }
};
#endif

#ifndef SOAP_TYPE__tad__CreateAnalyticsEngineControlResponse
#define SOAP_TYPE__tad__CreateAnalyticsEngineControlResponse (1016)
/* tad:CreateAnalyticsEngineControlResponse */
class SOAP_CMAC _tad__CreateAnalyticsEngineControlResponse
{
public:
	std::vector<tt__AnalyticsEngineInput * >Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AnalyticsEngineInput */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1016; } /* = unique type id SOAP_TYPE__tad__CreateAnalyticsEngineControlResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__CreateAnalyticsEngineControlResponse() { _tad__CreateAnalyticsEngineControlResponse::soap_default(NULL); }
	virtual ~_tad__CreateAnalyticsEngineControlResponse() { }
};
#endif

#ifndef SOAP_TYPE__tad__SetAnalyticsEngineControl
#define SOAP_TYPE__tad__SetAnalyticsEngineControl (1017)
/* tad:SetAnalyticsEngineControl */
class SOAP_CMAC _tad__SetAnalyticsEngineControl
{
public:
	tt__AnalyticsEngineControl *Configuration;	/* required element of type tt:AnalyticsEngineControl */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1017; } /* = unique type id SOAP_TYPE__tad__SetAnalyticsEngineControl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__SetAnalyticsEngineControl() { _tad__SetAnalyticsEngineControl::soap_default(NULL); }
	virtual ~_tad__SetAnalyticsEngineControl() { }
};
#endif

#ifndef SOAP_TYPE__tad__SetAnalyticsEngineControlResponse
#define SOAP_TYPE__tad__SetAnalyticsEngineControlResponse (1018)
/* tad:SetAnalyticsEngineControlResponse */
class SOAP_CMAC _tad__SetAnalyticsEngineControlResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1018; } /* = unique type id SOAP_TYPE__tad__SetAnalyticsEngineControlResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__SetAnalyticsEngineControlResponse() { _tad__SetAnalyticsEngineControlResponse::soap_default(NULL); }
	virtual ~_tad__SetAnalyticsEngineControlResponse() { }
};
#endif

#ifndef SOAP_TYPE__tad__GetAnalyticsEngineControl
#define SOAP_TYPE__tad__GetAnalyticsEngineControl (1019)
/* tad:GetAnalyticsEngineControl */
class SOAP_CMAC _tad__GetAnalyticsEngineControl
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1019; } /* = unique type id SOAP_TYPE__tad__GetAnalyticsEngineControl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__GetAnalyticsEngineControl() { _tad__GetAnalyticsEngineControl::soap_default(NULL); }
	virtual ~_tad__GetAnalyticsEngineControl() { }
};
#endif

#ifndef SOAP_TYPE__tad__GetAnalyticsEngineControlResponse
#define SOAP_TYPE__tad__GetAnalyticsEngineControlResponse (1020)
/* tad:GetAnalyticsEngineControlResponse */
class SOAP_CMAC _tad__GetAnalyticsEngineControlResponse
{
public:
	tt__AnalyticsEngineControl *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AnalyticsEngineControl */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1020; } /* = unique type id SOAP_TYPE__tad__GetAnalyticsEngineControlResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__GetAnalyticsEngineControlResponse() { _tad__GetAnalyticsEngineControlResponse::soap_default(NULL); }
	virtual ~_tad__GetAnalyticsEngineControlResponse() { }
};
#endif

#ifndef SOAP_TYPE__tad__GetAnalyticsEngineControls
#define SOAP_TYPE__tad__GetAnalyticsEngineControls (1021)
/* tad:GetAnalyticsEngineControls */
class SOAP_CMAC _tad__GetAnalyticsEngineControls
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1021; } /* = unique type id SOAP_TYPE__tad__GetAnalyticsEngineControls */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__GetAnalyticsEngineControls() { _tad__GetAnalyticsEngineControls::soap_default(NULL); }
	virtual ~_tad__GetAnalyticsEngineControls() { }
};
#endif

#ifndef SOAP_TYPE__tad__GetAnalyticsEngineControlsResponse
#define SOAP_TYPE__tad__GetAnalyticsEngineControlsResponse (1022)
/* tad:GetAnalyticsEngineControlsResponse */
class SOAP_CMAC _tad__GetAnalyticsEngineControlsResponse
{
public:
	std::vector<tt__AnalyticsEngineControl * >AnalyticsEngineControls;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AnalyticsEngineControl */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1022; } /* = unique type id SOAP_TYPE__tad__GetAnalyticsEngineControlsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__GetAnalyticsEngineControlsResponse() { _tad__GetAnalyticsEngineControlsResponse::soap_default(NULL); }
	virtual ~_tad__GetAnalyticsEngineControlsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tad__GetAnalyticsEngine
#define SOAP_TYPE__tad__GetAnalyticsEngine (1023)
/* tad:GetAnalyticsEngine */
class SOAP_CMAC _tad__GetAnalyticsEngine
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1023; } /* = unique type id SOAP_TYPE__tad__GetAnalyticsEngine */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__GetAnalyticsEngine() { _tad__GetAnalyticsEngine::soap_default(NULL); }
	virtual ~_tad__GetAnalyticsEngine() { }
};
#endif

#ifndef SOAP_TYPE__tad__GetAnalyticsEngineResponse
#define SOAP_TYPE__tad__GetAnalyticsEngineResponse (1024)
/* tad:GetAnalyticsEngineResponse */
class SOAP_CMAC _tad__GetAnalyticsEngineResponse
{
public:
	class tt__AnalyticsEngine *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AnalyticsEngine */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1024; } /* = unique type id SOAP_TYPE__tad__GetAnalyticsEngineResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__GetAnalyticsEngineResponse() { _tad__GetAnalyticsEngineResponse::soap_default(NULL); }
	virtual ~_tad__GetAnalyticsEngineResponse() { }
};
#endif

#ifndef SOAP_TYPE__tad__GetAnalyticsEngines
#define SOAP_TYPE__tad__GetAnalyticsEngines (1025)
/* tad:GetAnalyticsEngines */
class SOAP_CMAC _tad__GetAnalyticsEngines
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1025; } /* = unique type id SOAP_TYPE__tad__GetAnalyticsEngines */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__GetAnalyticsEngines() { _tad__GetAnalyticsEngines::soap_default(NULL); }
	virtual ~_tad__GetAnalyticsEngines() { }
};
#endif

#ifndef SOAP_TYPE__tad__GetAnalyticsEnginesResponse
#define SOAP_TYPE__tad__GetAnalyticsEnginesResponse (1026)
/* tad:GetAnalyticsEnginesResponse */
class SOAP_CMAC _tad__GetAnalyticsEnginesResponse
{
public:
	std::vector<tt__AnalyticsEngine * >Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AnalyticsEngine */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1026; } /* = unique type id SOAP_TYPE__tad__GetAnalyticsEnginesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__GetAnalyticsEnginesResponse() { _tad__GetAnalyticsEnginesResponse::soap_default(NULL); }
	virtual ~_tad__GetAnalyticsEnginesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tad__SetVideoAnalyticsConfiguration
#define SOAP_TYPE__tad__SetVideoAnalyticsConfiguration (1027)
/* tad:SetVideoAnalyticsConfiguration */
class SOAP_CMAC _tad__SetVideoAnalyticsConfiguration
{
public:
	tt__VideoAnalyticsConfiguration *Configuration;	/* required element of type tt:VideoAnalyticsConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1027; } /* = unique type id SOAP_TYPE__tad__SetVideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__SetVideoAnalyticsConfiguration() { _tad__SetVideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~_tad__SetVideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tad__SetVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__tad__SetVideoAnalyticsConfigurationResponse (1028)
/* tad:SetVideoAnalyticsConfigurationResponse */
class SOAP_CMAC _tad__SetVideoAnalyticsConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1028; } /* = unique type id SOAP_TYPE__tad__SetVideoAnalyticsConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__SetVideoAnalyticsConfigurationResponse() { _tad__SetVideoAnalyticsConfigurationResponse::soap_default(NULL); }
	virtual ~_tad__SetVideoAnalyticsConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tad__SetAnalyticsEngineInput
#define SOAP_TYPE__tad__SetAnalyticsEngineInput (1029)
/* tad:SetAnalyticsEngineInput */
class SOAP_CMAC _tad__SetAnalyticsEngineInput
{
public:
	tt__AnalyticsEngineInput *Configuration;	/* required element of type tt:AnalyticsEngineInput */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1029; } /* = unique type id SOAP_TYPE__tad__SetAnalyticsEngineInput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__SetAnalyticsEngineInput() { _tad__SetAnalyticsEngineInput::soap_default(NULL); }
	virtual ~_tad__SetAnalyticsEngineInput() { }
};
#endif

#ifndef SOAP_TYPE__tad__SetAnalyticsEngineInputResponse
#define SOAP_TYPE__tad__SetAnalyticsEngineInputResponse (1030)
/* tad:SetAnalyticsEngineInputResponse */
class SOAP_CMAC _tad__SetAnalyticsEngineInputResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1030; } /* = unique type id SOAP_TYPE__tad__SetAnalyticsEngineInputResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__SetAnalyticsEngineInputResponse() { _tad__SetAnalyticsEngineInputResponse::soap_default(NULL); }
	virtual ~_tad__SetAnalyticsEngineInputResponse() { }
};
#endif

#ifndef SOAP_TYPE__tad__GetAnalyticsEngineInput
#define SOAP_TYPE__tad__GetAnalyticsEngineInput (1031)
/* tad:GetAnalyticsEngineInput */
class SOAP_CMAC _tad__GetAnalyticsEngineInput
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1031; } /* = unique type id SOAP_TYPE__tad__GetAnalyticsEngineInput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__GetAnalyticsEngineInput() { _tad__GetAnalyticsEngineInput::soap_default(NULL); }
	virtual ~_tad__GetAnalyticsEngineInput() { }
};
#endif

#ifndef SOAP_TYPE__tad__GetAnalyticsEngineInputResponse
#define SOAP_TYPE__tad__GetAnalyticsEngineInputResponse (1032)
/* tad:GetAnalyticsEngineInputResponse */
class SOAP_CMAC _tad__GetAnalyticsEngineInputResponse
{
public:
	tt__AnalyticsEngineInput *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AnalyticsEngineInput */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1032; } /* = unique type id SOAP_TYPE__tad__GetAnalyticsEngineInputResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__GetAnalyticsEngineInputResponse() { _tad__GetAnalyticsEngineInputResponse::soap_default(NULL); }
	virtual ~_tad__GetAnalyticsEngineInputResponse() { }
};
#endif

#ifndef SOAP_TYPE__tad__GetAnalyticsEngineInputs
#define SOAP_TYPE__tad__GetAnalyticsEngineInputs (1033)
/* tad:GetAnalyticsEngineInputs */
class SOAP_CMAC _tad__GetAnalyticsEngineInputs
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1033; } /* = unique type id SOAP_TYPE__tad__GetAnalyticsEngineInputs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__GetAnalyticsEngineInputs() { _tad__GetAnalyticsEngineInputs::soap_default(NULL); }
	virtual ~_tad__GetAnalyticsEngineInputs() { }
};
#endif

#ifndef SOAP_TYPE__tad__GetAnalyticsEngineInputsResponse
#define SOAP_TYPE__tad__GetAnalyticsEngineInputsResponse (1034)
/* tad:GetAnalyticsEngineInputsResponse */
class SOAP_CMAC _tad__GetAnalyticsEngineInputsResponse
{
public:
	std::vector<tt__AnalyticsEngineInput * >Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AnalyticsEngineInput */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1034; } /* = unique type id SOAP_TYPE__tad__GetAnalyticsEngineInputsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__GetAnalyticsEngineInputsResponse() { _tad__GetAnalyticsEngineInputsResponse::soap_default(NULL); }
	virtual ~_tad__GetAnalyticsEngineInputsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tad__GetAnalyticsDeviceStreamUri
#define SOAP_TYPE__tad__GetAnalyticsDeviceStreamUri (1035)
/* tad:GetAnalyticsDeviceStreamUri */
class SOAP_CMAC _tad__GetAnalyticsDeviceStreamUri
{
public:
	tt__StreamSetup *StreamSetup;	/* required element of type tt:StreamSetup */
	std::string AnalyticsEngineControlToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1035; } /* = unique type id SOAP_TYPE__tad__GetAnalyticsDeviceStreamUri */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__GetAnalyticsDeviceStreamUri() { _tad__GetAnalyticsDeviceStreamUri::soap_default(NULL); }
	virtual ~_tad__GetAnalyticsDeviceStreamUri() { }
};
#endif

#ifndef SOAP_TYPE__tad__GetAnalyticsDeviceStreamUriResponse
#define SOAP_TYPE__tad__GetAnalyticsDeviceStreamUriResponse (1036)
/* tad:GetAnalyticsDeviceStreamUriResponse */
class SOAP_CMAC _tad__GetAnalyticsDeviceStreamUriResponse
{
public:
	std::string Uri;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1036; } /* = unique type id SOAP_TYPE__tad__GetAnalyticsDeviceStreamUriResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__GetAnalyticsDeviceStreamUriResponse() { _tad__GetAnalyticsDeviceStreamUriResponse::soap_default(NULL); }
	virtual ~_tad__GetAnalyticsDeviceStreamUriResponse() { }
};
#endif

#ifndef SOAP_TYPE__tad__GetVideoAnalyticsConfiguration
#define SOAP_TYPE__tad__GetVideoAnalyticsConfiguration (1037)
/* tad:GetVideoAnalyticsConfiguration */
class SOAP_CMAC _tad__GetVideoAnalyticsConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1037; } /* = unique type id SOAP_TYPE__tad__GetVideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__GetVideoAnalyticsConfiguration() { _tad__GetVideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~_tad__GetVideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tad__GetVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__tad__GetVideoAnalyticsConfigurationResponse (1038)
/* tad:GetVideoAnalyticsConfigurationResponse */
class SOAP_CMAC _tad__GetVideoAnalyticsConfigurationResponse
{
public:
	tt__VideoAnalyticsConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoAnalyticsConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1038; } /* = unique type id SOAP_TYPE__tad__GetVideoAnalyticsConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__GetVideoAnalyticsConfigurationResponse() { _tad__GetVideoAnalyticsConfigurationResponse::soap_default(NULL); }
	virtual ~_tad__GetVideoAnalyticsConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tad__DeleteAnalyticsEngineInputs
#define SOAP_TYPE__tad__DeleteAnalyticsEngineInputs (1039)
/* tad:DeleteAnalyticsEngineInputs */
class SOAP_CMAC _tad__DeleteAnalyticsEngineInputs
{
public:
	std::vector<std::string >ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1039; } /* = unique type id SOAP_TYPE__tad__DeleteAnalyticsEngineInputs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__DeleteAnalyticsEngineInputs() { _tad__DeleteAnalyticsEngineInputs::soap_default(NULL); }
	virtual ~_tad__DeleteAnalyticsEngineInputs() { }
};
#endif

#ifndef SOAP_TYPE__tad__DeleteAnalyticsEngineInputsResponse
#define SOAP_TYPE__tad__DeleteAnalyticsEngineInputsResponse (1040)
/* tad:DeleteAnalyticsEngineInputsResponse */
class SOAP_CMAC _tad__DeleteAnalyticsEngineInputsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1040; } /* = unique type id SOAP_TYPE__tad__DeleteAnalyticsEngineInputsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__DeleteAnalyticsEngineInputsResponse() { _tad__DeleteAnalyticsEngineInputsResponse::soap_default(NULL); }
	virtual ~_tad__DeleteAnalyticsEngineInputsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tad__GetAnalyticsState
#define SOAP_TYPE__tad__GetAnalyticsState (1041)
/* tad:GetAnalyticsState */
class SOAP_CMAC _tad__GetAnalyticsState
{
public:
	std::string AnalyticsEngineControlToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1041; } /* = unique type id SOAP_TYPE__tad__GetAnalyticsState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__GetAnalyticsState() { _tad__GetAnalyticsState::soap_default(NULL); }
	virtual ~_tad__GetAnalyticsState() { }
};
#endif

#ifndef SOAP_TYPE__tad__GetAnalyticsStateResponse
#define SOAP_TYPE__tad__GetAnalyticsStateResponse (1042)
/* tad:GetAnalyticsStateResponse */
class SOAP_CMAC _tad__GetAnalyticsStateResponse
{
public:
	tt__AnalyticsStateInformation *State;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AnalyticsStateInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1042; } /* = unique type id SOAP_TYPE__tad__GetAnalyticsStateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tad__GetAnalyticsStateResponse() { _tad__GetAnalyticsStateResponse::soap_default(NULL); }
	virtual ~_tad__GetAnalyticsStateResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns6__ServiceCapabilities
#define SOAP_TYPE_ns6__ServiceCapabilities (1043)
/* ns6:ServiceCapabilities */
class SOAP_CMAC ns6__ServiceCapabilities : public xsd__anyType
{
public:
	std::vector<char * >__any;
	unsigned int MaxLimit;	/* required attribute */
	unsigned int MaxAuthenticationProfiles;	/* required attribute */
	unsigned int MaxPoliciesPerAuthenticationProfile;	/* required attribute */
	unsigned int MaxSecurityLevels;	/* required attribute */
	unsigned int MaxRecognitionGroupsPerSecurityLevel;	/* required attribute */
	unsigned int MaxRecognitionMethodsPerRecognitionGroup;	/* required attribute */
	bool ClientSuppliedTokenSupported;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1043; } /* = unique type id SOAP_TYPE_ns6__ServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__ServiceCapabilities() { ns6__ServiceCapabilities::soap_default(NULL); }
	virtual ~ns6__ServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_ns6__AuthenticationProfileExtension
#define SOAP_TYPE_ns6__AuthenticationProfileExtension (1046)
/* ns6:AuthenticationProfileExtension */
class SOAP_CMAC ns6__AuthenticationProfileExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1046; } /* = unique type id SOAP_TYPE_ns6__AuthenticationProfileExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__AuthenticationProfileExtension() { ns6__AuthenticationProfileExtension::soap_default(NULL); }
	virtual ~ns6__AuthenticationProfileExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns6__AuthenticationPolicy
#define SOAP_TYPE_ns6__AuthenticationPolicy (1047)
/* ns6:AuthenticationPolicy */
class SOAP_CMAC ns6__AuthenticationPolicy : public xsd__anyType
{
public:
	std::string ScheduleToken;	/* required element of type ns2:ReferenceToken */
	std::vector<class ns6__SecurityLevelConstraint * >SecurityLevelConstraint;	/* required element of type ns6:SecurityLevelConstraint */
	class ns6__AuthenticationPolicyExtension *Extension;	/* optional element of type ns6:AuthenticationPolicyExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1047; } /* = unique type id SOAP_TYPE_ns6__AuthenticationPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__AuthenticationPolicy() { ns6__AuthenticationPolicy::soap_default(NULL); }
	virtual ~ns6__AuthenticationPolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns6__AuthenticationPolicyExtension
#define SOAP_TYPE_ns6__AuthenticationPolicyExtension (1048)
/* ns6:AuthenticationPolicyExtension */
class SOAP_CMAC ns6__AuthenticationPolicyExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1048; } /* = unique type id SOAP_TYPE_ns6__AuthenticationPolicyExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__AuthenticationPolicyExtension() { ns6__AuthenticationPolicyExtension::soap_default(NULL); }
	virtual ~ns6__AuthenticationPolicyExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns6__SecurityLevelConstraint
#define SOAP_TYPE_ns6__SecurityLevelConstraint (1049)
/* ns6:SecurityLevelConstraint */
class SOAP_CMAC ns6__SecurityLevelConstraint : public xsd__anyType
{
public:
	bool ActiveRegularSchedule;	/* required element of type xsd:boolean */
	bool ActiveSpecialDaySchedule;	/* required element of type xsd:boolean */
	std::vector<std::string >AuthenticationMode;	/* optional element of type ns2:Name */
	std::string SecurityLevelToken;	/* required element of type ns2:ReferenceToken */
	class ns6__SecurityLevelConstraintExtension *Extension;	/* optional element of type ns6:SecurityLevelConstraintExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1049; } /* = unique type id SOAP_TYPE_ns6__SecurityLevelConstraint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__SecurityLevelConstraint() { ns6__SecurityLevelConstraint::soap_default(NULL); }
	virtual ~ns6__SecurityLevelConstraint() { }
};
#endif

#ifndef SOAP_TYPE_ns6__SecurityLevelConstraintExtension
#define SOAP_TYPE_ns6__SecurityLevelConstraintExtension (1050)
/* ns6:SecurityLevelConstraintExtension */
class SOAP_CMAC ns6__SecurityLevelConstraintExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1050; } /* = unique type id SOAP_TYPE_ns6__SecurityLevelConstraintExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__SecurityLevelConstraintExtension() { ns6__SecurityLevelConstraintExtension::soap_default(NULL); }
	virtual ~ns6__SecurityLevelConstraintExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns6__RecognitionMethod
#define SOAP_TYPE_ns6__RecognitionMethod (1051)
/* ns6:RecognitionMethod */
class SOAP_CMAC ns6__RecognitionMethod : public xsd__anyType
{
public:
	std::string RecognitionType;	/* required element of type xsd:string */
	int Order;	/* required element of type xsd:int */
	class ns6__RecognitionMethodExtension *Extension;	/* optional element of type ns6:RecognitionMethodExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1051; } /* = unique type id SOAP_TYPE_ns6__RecognitionMethod */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__RecognitionMethod() { ns6__RecognitionMethod::soap_default(NULL); }
	virtual ~ns6__RecognitionMethod() { }
};
#endif

#ifndef SOAP_TYPE_ns6__RecognitionMethodExtension
#define SOAP_TYPE_ns6__RecognitionMethodExtension (1052)
/* ns6:RecognitionMethodExtension */
class SOAP_CMAC ns6__RecognitionMethodExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1052; } /* = unique type id SOAP_TYPE_ns6__RecognitionMethodExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__RecognitionMethodExtension() { ns6__RecognitionMethodExtension::soap_default(NULL); }
	virtual ~ns6__RecognitionMethodExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns6__RecognitionGroup
#define SOAP_TYPE_ns6__RecognitionGroup (1053)
/* ns6:RecognitionGroup */
class SOAP_CMAC ns6__RecognitionGroup : public xsd__anyType
{
public:
	std::vector<ns6__RecognitionMethod * >RecognitionMethod;	/* optional element of type ns6:RecognitionMethod */
	class ns6__RecognitionGroupExtension *Extension;	/* optional element of type ns6:RecognitionGroupExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1053; } /* = unique type id SOAP_TYPE_ns6__RecognitionGroup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__RecognitionGroup() { ns6__RecognitionGroup::soap_default(NULL); }
	virtual ~ns6__RecognitionGroup() { }
};
#endif

#ifndef SOAP_TYPE_ns6__RecognitionGroupExtension
#define SOAP_TYPE_ns6__RecognitionGroupExtension (1054)
/* ns6:RecognitionGroupExtension */
class SOAP_CMAC ns6__RecognitionGroupExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1054; } /* = unique type id SOAP_TYPE_ns6__RecognitionGroupExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__RecognitionGroupExtension() { ns6__RecognitionGroupExtension::soap_default(NULL); }
	virtual ~ns6__RecognitionGroupExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns6__SecurityLevelExtension
#define SOAP_TYPE_ns6__SecurityLevelExtension (1057)
/* ns6:SecurityLevelExtension */
class SOAP_CMAC ns6__SecurityLevelExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1057; } /* = unique type id SOAP_TYPE_ns6__SecurityLevelExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__SecurityLevelExtension() { ns6__SecurityLevelExtension::soap_default(NULL); }
	virtual ~ns6__SecurityLevelExtension() { }
};
#endif

#ifndef SOAP_TYPE__ns6__GetServiceCapabilities
#define SOAP_TYPE__ns6__GetServiceCapabilities (1058)
/* ns6:GetServiceCapabilities */
class SOAP_CMAC _ns6__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1058; } /* = unique type id SOAP_TYPE__ns6__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__GetServiceCapabilities() { _ns6__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_ns6__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__ns6__GetServiceCapabilitiesResponse
#define SOAP_TYPE__ns6__GetServiceCapabilitiesResponse (1059)
/* ns6:GetServiceCapabilitiesResponse */
class SOAP_CMAC _ns6__GetServiceCapabilitiesResponse
{
public:
	ns6__ServiceCapabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns6:ServiceCapabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1059; } /* = unique type id SOAP_TYPE__ns6__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__GetServiceCapabilitiesResponse() { _ns6__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_ns6__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns6__GetAuthenticationProfileInfo
#define SOAP_TYPE__ns6__GetAuthenticationProfileInfo (1060)
/* ns6:GetAuthenticationProfileInfo */
class SOAP_CMAC _ns6__GetAuthenticationProfileInfo
{
public:
	std::vector<std::string >Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1060; } /* = unique type id SOAP_TYPE__ns6__GetAuthenticationProfileInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__GetAuthenticationProfileInfo() { _ns6__GetAuthenticationProfileInfo::soap_default(NULL); }
	virtual ~_ns6__GetAuthenticationProfileInfo() { }
};
#endif

#ifndef SOAP_TYPE__ns6__GetAuthenticationProfileInfoResponse
#define SOAP_TYPE__ns6__GetAuthenticationProfileInfoResponse (1061)
/* ns6:GetAuthenticationProfileInfoResponse */
class SOAP_CMAC _ns6__GetAuthenticationProfileInfoResponse
{
public:
	std::vector<class ns6__AuthenticationProfileInfo * >AuthenticationProfileInfo;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns6:AuthenticationProfileInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1061; } /* = unique type id SOAP_TYPE__ns6__GetAuthenticationProfileInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__GetAuthenticationProfileInfoResponse() { _ns6__GetAuthenticationProfileInfoResponse::soap_default(NULL); }
	virtual ~_ns6__GetAuthenticationProfileInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns6__GetAuthenticationProfileInfoList
#define SOAP_TYPE__ns6__GetAuthenticationProfileInfoList (1062)
/* ns6:GetAuthenticationProfileInfoList */
class SOAP_CMAC _ns6__GetAuthenticationProfileInfoList
{
public:
	int *Limit;	/* optional element of type xsd:int */
	std::string *StartReference;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1062; } /* = unique type id SOAP_TYPE__ns6__GetAuthenticationProfileInfoList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__GetAuthenticationProfileInfoList() { _ns6__GetAuthenticationProfileInfoList::soap_default(NULL); }
	virtual ~_ns6__GetAuthenticationProfileInfoList() { }
};
#endif

#ifndef SOAP_TYPE__ns6__GetAuthenticationProfileInfoListResponse
#define SOAP_TYPE__ns6__GetAuthenticationProfileInfoListResponse (1063)
/* ns6:GetAuthenticationProfileInfoListResponse */
class SOAP_CMAC _ns6__GetAuthenticationProfileInfoListResponse
{
public:
	std::string *NextStartReference;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	std::vector<ns6__AuthenticationProfileInfo * >AuthenticationProfileInfo;	/* optional element of type ns6:AuthenticationProfileInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1063; } /* = unique type id SOAP_TYPE__ns6__GetAuthenticationProfileInfoListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__GetAuthenticationProfileInfoListResponse() { _ns6__GetAuthenticationProfileInfoListResponse::soap_default(NULL); }
	virtual ~_ns6__GetAuthenticationProfileInfoListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns6__GetAuthenticationProfiles
#define SOAP_TYPE__ns6__GetAuthenticationProfiles (1064)
/* ns6:GetAuthenticationProfiles */
class SOAP_CMAC _ns6__GetAuthenticationProfiles
{
public:
	std::vector<std::string >Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1064; } /* = unique type id SOAP_TYPE__ns6__GetAuthenticationProfiles */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__GetAuthenticationProfiles() { _ns6__GetAuthenticationProfiles::soap_default(NULL); }
	virtual ~_ns6__GetAuthenticationProfiles() { }
};
#endif

#ifndef SOAP_TYPE__ns6__GetAuthenticationProfilesResponse
#define SOAP_TYPE__ns6__GetAuthenticationProfilesResponse (1065)
/* ns6:GetAuthenticationProfilesResponse */
class SOAP_CMAC _ns6__GetAuthenticationProfilesResponse
{
public:
	std::vector<class ns6__AuthenticationProfile * >AuthenticationProfile;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns6:AuthenticationProfile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1065; } /* = unique type id SOAP_TYPE__ns6__GetAuthenticationProfilesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__GetAuthenticationProfilesResponse() { _ns6__GetAuthenticationProfilesResponse::soap_default(NULL); }
	virtual ~_ns6__GetAuthenticationProfilesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns6__GetAuthenticationProfileList
#define SOAP_TYPE__ns6__GetAuthenticationProfileList (1066)
/* ns6:GetAuthenticationProfileList */
class SOAP_CMAC _ns6__GetAuthenticationProfileList
{
public:
	int *Limit;	/* optional element of type xsd:int */
	std::string *StartReference;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1066; } /* = unique type id SOAP_TYPE__ns6__GetAuthenticationProfileList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__GetAuthenticationProfileList() { _ns6__GetAuthenticationProfileList::soap_default(NULL); }
	virtual ~_ns6__GetAuthenticationProfileList() { }
};
#endif

#ifndef SOAP_TYPE__ns6__GetAuthenticationProfileListResponse
#define SOAP_TYPE__ns6__GetAuthenticationProfileListResponse (1067)
/* ns6:GetAuthenticationProfileListResponse */
class SOAP_CMAC _ns6__GetAuthenticationProfileListResponse
{
public:
	std::string *NextStartReference;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	std::vector<ns6__AuthenticationProfile * >AuthenticationProfile;	/* optional element of type ns6:AuthenticationProfile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1067; } /* = unique type id SOAP_TYPE__ns6__GetAuthenticationProfileListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__GetAuthenticationProfileListResponse() { _ns6__GetAuthenticationProfileListResponse::soap_default(NULL); }
	virtual ~_ns6__GetAuthenticationProfileListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns6__CreateAuthenticationProfile
#define SOAP_TYPE__ns6__CreateAuthenticationProfile (1068)
/* ns6:CreateAuthenticationProfile */
class SOAP_CMAC _ns6__CreateAuthenticationProfile
{
public:
	ns6__AuthenticationProfile *AuthenticationProfile;	/* required element of type ns6:AuthenticationProfile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1068; } /* = unique type id SOAP_TYPE__ns6__CreateAuthenticationProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__CreateAuthenticationProfile() { _ns6__CreateAuthenticationProfile::soap_default(NULL); }
	virtual ~_ns6__CreateAuthenticationProfile() { }
};
#endif

#ifndef SOAP_TYPE__ns6__CreateAuthenticationProfileResponse
#define SOAP_TYPE__ns6__CreateAuthenticationProfileResponse (1069)
/* ns6:CreateAuthenticationProfileResponse */
class SOAP_CMAC _ns6__CreateAuthenticationProfileResponse
{
public:
	std::string Token;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1069; } /* = unique type id SOAP_TYPE__ns6__CreateAuthenticationProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__CreateAuthenticationProfileResponse() { _ns6__CreateAuthenticationProfileResponse::soap_default(NULL); }
	virtual ~_ns6__CreateAuthenticationProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns6__SetAuthenticationProfile
#define SOAP_TYPE__ns6__SetAuthenticationProfile (1070)
/* ns6:SetAuthenticationProfile */
class SOAP_CMAC _ns6__SetAuthenticationProfile
{
public:
	ns6__AuthenticationProfile *AuthenticationProfile;	/* required element of type ns6:AuthenticationProfile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1070; } /* = unique type id SOAP_TYPE__ns6__SetAuthenticationProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__SetAuthenticationProfile() { _ns6__SetAuthenticationProfile::soap_default(NULL); }
	virtual ~_ns6__SetAuthenticationProfile() { }
};
#endif

#ifndef SOAP_TYPE__ns6__SetAuthenticationProfileResponse
#define SOAP_TYPE__ns6__SetAuthenticationProfileResponse (1071)
/* ns6:SetAuthenticationProfileResponse */
class SOAP_CMAC _ns6__SetAuthenticationProfileResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1071; } /* = unique type id SOAP_TYPE__ns6__SetAuthenticationProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__SetAuthenticationProfileResponse() { _ns6__SetAuthenticationProfileResponse::soap_default(NULL); }
	virtual ~_ns6__SetAuthenticationProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns6__ModifyAuthenticationProfile
#define SOAP_TYPE__ns6__ModifyAuthenticationProfile (1072)
/* ns6:ModifyAuthenticationProfile */
class SOAP_CMAC _ns6__ModifyAuthenticationProfile
{
public:
	ns6__AuthenticationProfile *AuthenticationProfile;	/* required element of type ns6:AuthenticationProfile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1072; } /* = unique type id SOAP_TYPE__ns6__ModifyAuthenticationProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__ModifyAuthenticationProfile() { _ns6__ModifyAuthenticationProfile::soap_default(NULL); }
	virtual ~_ns6__ModifyAuthenticationProfile() { }
};
#endif

#ifndef SOAP_TYPE__ns6__ModifyAuthenticationProfileResponse
#define SOAP_TYPE__ns6__ModifyAuthenticationProfileResponse (1073)
/* ns6:ModifyAuthenticationProfileResponse */
class SOAP_CMAC _ns6__ModifyAuthenticationProfileResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1073; } /* = unique type id SOAP_TYPE__ns6__ModifyAuthenticationProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__ModifyAuthenticationProfileResponse() { _ns6__ModifyAuthenticationProfileResponse::soap_default(NULL); }
	virtual ~_ns6__ModifyAuthenticationProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns6__DeleteAuthenticationProfile
#define SOAP_TYPE__ns6__DeleteAuthenticationProfile (1074)
/* ns6:DeleteAuthenticationProfile */
class SOAP_CMAC _ns6__DeleteAuthenticationProfile
{
public:
	std::string Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1074; } /* = unique type id SOAP_TYPE__ns6__DeleteAuthenticationProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__DeleteAuthenticationProfile() { _ns6__DeleteAuthenticationProfile::soap_default(NULL); }
	virtual ~_ns6__DeleteAuthenticationProfile() { }
};
#endif

#ifndef SOAP_TYPE__ns6__DeleteAuthenticationProfileResponse
#define SOAP_TYPE__ns6__DeleteAuthenticationProfileResponse (1075)
/* ns6:DeleteAuthenticationProfileResponse */
class SOAP_CMAC _ns6__DeleteAuthenticationProfileResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1075; } /* = unique type id SOAP_TYPE__ns6__DeleteAuthenticationProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__DeleteAuthenticationProfileResponse() { _ns6__DeleteAuthenticationProfileResponse::soap_default(NULL); }
	virtual ~_ns6__DeleteAuthenticationProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns6__GetSecurityLevelInfo
#define SOAP_TYPE__ns6__GetSecurityLevelInfo (1076)
/* ns6:GetSecurityLevelInfo */
class SOAP_CMAC _ns6__GetSecurityLevelInfo
{
public:
	std::vector<std::string >Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1076; } /* = unique type id SOAP_TYPE__ns6__GetSecurityLevelInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__GetSecurityLevelInfo() { _ns6__GetSecurityLevelInfo::soap_default(NULL); }
	virtual ~_ns6__GetSecurityLevelInfo() { }
};
#endif

#ifndef SOAP_TYPE__ns6__GetSecurityLevelInfoResponse
#define SOAP_TYPE__ns6__GetSecurityLevelInfoResponse (1077)
/* ns6:GetSecurityLevelInfoResponse */
class SOAP_CMAC _ns6__GetSecurityLevelInfoResponse
{
public:
	std::vector<class ns6__SecurityLevelInfo * >SecurityLevelInfo;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns6:SecurityLevelInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1077; } /* = unique type id SOAP_TYPE__ns6__GetSecurityLevelInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__GetSecurityLevelInfoResponse() { _ns6__GetSecurityLevelInfoResponse::soap_default(NULL); }
	virtual ~_ns6__GetSecurityLevelInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns6__GetSecurityLevelInfoList
#define SOAP_TYPE__ns6__GetSecurityLevelInfoList (1078)
/* ns6:GetSecurityLevelInfoList */
class SOAP_CMAC _ns6__GetSecurityLevelInfoList
{
public:
	int *Limit;	/* optional element of type xsd:int */
	std::string *StartReference;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1078; } /* = unique type id SOAP_TYPE__ns6__GetSecurityLevelInfoList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__GetSecurityLevelInfoList() { _ns6__GetSecurityLevelInfoList::soap_default(NULL); }
	virtual ~_ns6__GetSecurityLevelInfoList() { }
};
#endif

#ifndef SOAP_TYPE__ns6__GetSecurityLevelInfoListResponse
#define SOAP_TYPE__ns6__GetSecurityLevelInfoListResponse (1079)
/* ns6:GetSecurityLevelInfoListResponse */
class SOAP_CMAC _ns6__GetSecurityLevelInfoListResponse
{
public:
	std::string *NextStartReference;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	std::vector<ns6__SecurityLevelInfo * >SecurityLevelInfo;	/* optional element of type ns6:SecurityLevelInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1079; } /* = unique type id SOAP_TYPE__ns6__GetSecurityLevelInfoListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__GetSecurityLevelInfoListResponse() { _ns6__GetSecurityLevelInfoListResponse::soap_default(NULL); }
	virtual ~_ns6__GetSecurityLevelInfoListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns6__GetSecurityLevels
#define SOAP_TYPE__ns6__GetSecurityLevels (1080)
/* ns6:GetSecurityLevels */
class SOAP_CMAC _ns6__GetSecurityLevels
{
public:
	std::vector<std::string >Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1080; } /* = unique type id SOAP_TYPE__ns6__GetSecurityLevels */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__GetSecurityLevels() { _ns6__GetSecurityLevels::soap_default(NULL); }
	virtual ~_ns6__GetSecurityLevels() { }
};
#endif

#ifndef SOAP_TYPE__ns6__GetSecurityLevelsResponse
#define SOAP_TYPE__ns6__GetSecurityLevelsResponse (1081)
/* ns6:GetSecurityLevelsResponse */
class SOAP_CMAC _ns6__GetSecurityLevelsResponse
{
public:
	std::vector<class ns6__SecurityLevel * >SecurityLevel;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns6:SecurityLevel */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1081; } /* = unique type id SOAP_TYPE__ns6__GetSecurityLevelsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__GetSecurityLevelsResponse() { _ns6__GetSecurityLevelsResponse::soap_default(NULL); }
	virtual ~_ns6__GetSecurityLevelsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns6__GetSecurityLevelList
#define SOAP_TYPE__ns6__GetSecurityLevelList (1082)
/* ns6:GetSecurityLevelList */
class SOAP_CMAC _ns6__GetSecurityLevelList
{
public:
	int *Limit;	/* optional element of type xsd:int */
	std::string *StartReference;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1082; } /* = unique type id SOAP_TYPE__ns6__GetSecurityLevelList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__GetSecurityLevelList() { _ns6__GetSecurityLevelList::soap_default(NULL); }
	virtual ~_ns6__GetSecurityLevelList() { }
};
#endif

#ifndef SOAP_TYPE__ns6__GetSecurityLevelListResponse
#define SOAP_TYPE__ns6__GetSecurityLevelListResponse (1083)
/* ns6:GetSecurityLevelListResponse */
class SOAP_CMAC _ns6__GetSecurityLevelListResponse
{
public:
	std::string *NextStartReference;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	std::vector<ns6__SecurityLevel * >SecurityLevel;	/* optional element of type ns6:SecurityLevel */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1083; } /* = unique type id SOAP_TYPE__ns6__GetSecurityLevelListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__GetSecurityLevelListResponse() { _ns6__GetSecurityLevelListResponse::soap_default(NULL); }
	virtual ~_ns6__GetSecurityLevelListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns6__CreateSecurityLevel
#define SOAP_TYPE__ns6__CreateSecurityLevel (1084)
/* ns6:CreateSecurityLevel */
class SOAP_CMAC _ns6__CreateSecurityLevel
{
public:
	ns6__SecurityLevel *SecurityLevel;	/* required element of type ns6:SecurityLevel */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1084; } /* = unique type id SOAP_TYPE__ns6__CreateSecurityLevel */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__CreateSecurityLevel() { _ns6__CreateSecurityLevel::soap_default(NULL); }
	virtual ~_ns6__CreateSecurityLevel() { }
};
#endif

#ifndef SOAP_TYPE__ns6__CreateSecurityLevelResponse
#define SOAP_TYPE__ns6__CreateSecurityLevelResponse (1085)
/* ns6:CreateSecurityLevelResponse */
class SOAP_CMAC _ns6__CreateSecurityLevelResponse
{
public:
	std::string Token;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1085; } /* = unique type id SOAP_TYPE__ns6__CreateSecurityLevelResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__CreateSecurityLevelResponse() { _ns6__CreateSecurityLevelResponse::soap_default(NULL); }
	virtual ~_ns6__CreateSecurityLevelResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns6__SetSecurityLevel
#define SOAP_TYPE__ns6__SetSecurityLevel (1086)
/* ns6:SetSecurityLevel */
class SOAP_CMAC _ns6__SetSecurityLevel
{
public:
	ns6__SecurityLevel *SecurityLevel;	/* required element of type ns6:SecurityLevel */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1086; } /* = unique type id SOAP_TYPE__ns6__SetSecurityLevel */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__SetSecurityLevel() { _ns6__SetSecurityLevel::soap_default(NULL); }
	virtual ~_ns6__SetSecurityLevel() { }
};
#endif

#ifndef SOAP_TYPE__ns6__SetSecurityLevelResponse
#define SOAP_TYPE__ns6__SetSecurityLevelResponse (1087)
/* ns6:SetSecurityLevelResponse */
class SOAP_CMAC _ns6__SetSecurityLevelResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1087; } /* = unique type id SOAP_TYPE__ns6__SetSecurityLevelResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__SetSecurityLevelResponse() { _ns6__SetSecurityLevelResponse::soap_default(NULL); }
	virtual ~_ns6__SetSecurityLevelResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns6__ModifySecurityLevel
#define SOAP_TYPE__ns6__ModifySecurityLevel (1088)
/* ns6:ModifySecurityLevel */
class SOAP_CMAC _ns6__ModifySecurityLevel
{
public:
	ns6__SecurityLevel *SecurityLevel;	/* required element of type ns6:SecurityLevel */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1088; } /* = unique type id SOAP_TYPE__ns6__ModifySecurityLevel */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__ModifySecurityLevel() { _ns6__ModifySecurityLevel::soap_default(NULL); }
	virtual ~_ns6__ModifySecurityLevel() { }
};
#endif

#ifndef SOAP_TYPE__ns6__ModifySecurityLevelResponse
#define SOAP_TYPE__ns6__ModifySecurityLevelResponse (1089)
/* ns6:ModifySecurityLevelResponse */
class SOAP_CMAC _ns6__ModifySecurityLevelResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1089; } /* = unique type id SOAP_TYPE__ns6__ModifySecurityLevelResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__ModifySecurityLevelResponse() { _ns6__ModifySecurityLevelResponse::soap_default(NULL); }
	virtual ~_ns6__ModifySecurityLevelResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns6__DeleteSecurityLevel
#define SOAP_TYPE__ns6__DeleteSecurityLevel (1090)
/* ns6:DeleteSecurityLevel */
class SOAP_CMAC _ns6__DeleteSecurityLevel
{
public:
	std::string Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1090; } /* = unique type id SOAP_TYPE__ns6__DeleteSecurityLevel */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__DeleteSecurityLevel() { _ns6__DeleteSecurityLevel::soap_default(NULL); }
	virtual ~_ns6__DeleteSecurityLevel() { }
};
#endif

#ifndef SOAP_TYPE__ns6__DeleteSecurityLevelResponse
#define SOAP_TYPE__ns6__DeleteSecurityLevelResponse (1091)
/* ns6:DeleteSecurityLevelResponse */
class SOAP_CMAC _ns6__DeleteSecurityLevelResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1091; } /* = unique type id SOAP_TYPE__ns6__DeleteSecurityLevelResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__DeleteSecurityLevelResponse() { _ns6__DeleteSecurityLevelResponse::soap_default(NULL); }
	virtual ~_ns6__DeleteSecurityLevelResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns7__ServiceCapabilities
#define SOAP_TYPE_ns7__ServiceCapabilities (1092)
/* ns7:ServiceCapabilities */
class SOAP_CMAC ns7__ServiceCapabilities : public xsd__anyType
{
public:
	std::vector<std::string >SupportedIdentifierType;	/* required element of type ns2:Name */
	class ns7__ServiceCapabilitiesExtension *Extension;	/* optional element of type ns7:ServiceCapabilitiesExtension */
	unsigned int MaxLimit;	/* required attribute */
	bool CredentialValiditySupported;	/* required attribute */
	bool CredentialAccessProfileValiditySupported;	/* required attribute */
	bool ValiditySupportsTimeValue;	/* required attribute */
	unsigned int MaxCredentials;	/* required attribute */
	unsigned int MaxAccessProfilesPerCredential;	/* required attribute */
	bool ResetAntipassbackSupported;	/* required attribute */
	bool ClientSuppliedTokenSupported;	/* optional attribute */
	std::string DefaultCredentialSuspensionDuration;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1092; } /* = unique type id SOAP_TYPE_ns7__ServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__ServiceCapabilities() { ns7__ServiceCapabilities::soap_default(NULL); }
	virtual ~ns7__ServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_ns7__ServiceCapabilitiesExtension
#define SOAP_TYPE_ns7__ServiceCapabilitiesExtension (1093)
/* ns7:ServiceCapabilitiesExtension */
class SOAP_CMAC ns7__ServiceCapabilitiesExtension : public xsd__anyType
{
public:
	std::vector<std::string >SupportedExemptionType;	/* optional element of type ns2:Name */
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1093; } /* = unique type id SOAP_TYPE_ns7__ServiceCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__ServiceCapabilitiesExtension() { ns7__ServiceCapabilitiesExtension::soap_default(NULL); }
	virtual ~ns7__ServiceCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns7__CredentialExtension
#define SOAP_TYPE_ns7__CredentialExtension (1096)
/* ns7:CredentialExtension */
class SOAP_CMAC ns7__CredentialExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1096; } /* = unique type id SOAP_TYPE_ns7__CredentialExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__CredentialExtension() { ns7__CredentialExtension::soap_default(NULL); }
	virtual ~ns7__CredentialExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns7__CredentialIdentifier
#define SOAP_TYPE_ns7__CredentialIdentifier (1097)
/* ns7:CredentialIdentifier */
class SOAP_CMAC ns7__CredentialIdentifier : public xsd__anyType
{
public:
	class ns7__CredentialIdentifierType *Type;	/* required element of type ns7:CredentialIdentifierType */
	bool ExemptedFromAuthentication;	/* required element of type xsd:boolean */
	xsd__hexBinary Value;	/* required element of type xsd:hexBinary */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1097; } /* = unique type id SOAP_TYPE_ns7__CredentialIdentifier */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__CredentialIdentifier() { ns7__CredentialIdentifier::soap_default(NULL); }
	virtual ~ns7__CredentialIdentifier() { }
};
#endif

#ifndef SOAP_TYPE_ns7__CredentialIdentifierType
#define SOAP_TYPE_ns7__CredentialIdentifierType (1098)
/* ns7:CredentialIdentifierType */
class SOAP_CMAC ns7__CredentialIdentifierType : public xsd__anyType
{
public:
	std::string Name;	/* required element of type ns2:Name */
	std::string FormatType;	/* required element of type xsd:string */
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1098; } /* = unique type id SOAP_TYPE_ns7__CredentialIdentifierType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__CredentialIdentifierType() { ns7__CredentialIdentifierType::soap_default(NULL); }
	virtual ~ns7__CredentialIdentifierType() { }
};
#endif

#ifndef SOAP_TYPE_ns7__CredentialAccessProfile
#define SOAP_TYPE_ns7__CredentialAccessProfile (1099)
/* ns7:CredentialAccessProfile */
class SOAP_CMAC ns7__CredentialAccessProfile : public xsd__anyType
{
public:
	std::string AccessProfileToken;	/* required element of type ns2:ReferenceToken */
	time_t *ValidFrom;	/* optional element of type xsd:dateTime */
	time_t *ValidTo;	/* optional element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 1099; } /* = unique type id SOAP_TYPE_ns7__CredentialAccessProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__CredentialAccessProfile() { ns7__CredentialAccessProfile::soap_default(NULL); }
	virtual ~ns7__CredentialAccessProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns7__CredentialState
#define SOAP_TYPE_ns7__CredentialState (1100)
/* ns7:CredentialState */
class SOAP_CMAC ns7__CredentialState : public xsd__anyType
{
public:
	bool Enabled;	/* required element of type xsd:boolean */
	std::string *Reason;	/* optional element of type ns2:Name */
	class ns7__AntipassbackState *AntipassbackState;	/* optional element of type ns7:AntipassbackState */
	class ns7__CredentialStateExtension *Extension;	/* optional element of type ns7:CredentialStateExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1100; } /* = unique type id SOAP_TYPE_ns7__CredentialState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__CredentialState() { ns7__CredentialState::soap_default(NULL); }
	virtual ~ns7__CredentialState() { }
};
#endif

#ifndef SOAP_TYPE_ns7__CredentialStateExtension
#define SOAP_TYPE_ns7__CredentialStateExtension (1101)
/* ns7:CredentialStateExtension */
class SOAP_CMAC ns7__CredentialStateExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1101; } /* = unique type id SOAP_TYPE_ns7__CredentialStateExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__CredentialStateExtension() { ns7__CredentialStateExtension::soap_default(NULL); }
	virtual ~ns7__CredentialStateExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns7__AntipassbackState
#define SOAP_TYPE_ns7__AntipassbackState (1102)
/* ns7:AntipassbackState */
class SOAP_CMAC ns7__AntipassbackState : public xsd__anyType
{
public:
	bool AntipassbackViolated;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1102; } /* = unique type id SOAP_TYPE_ns7__AntipassbackState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__AntipassbackState() { ns7__AntipassbackState::soap_default(NULL); }
	virtual ~ns7__AntipassbackState() { }
};
#endif

#ifndef SOAP_TYPE_ns7__CredentialIdentifierFormatTypeInfo
#define SOAP_TYPE_ns7__CredentialIdentifierFormatTypeInfo (1103)
/* ns7:CredentialIdentifierFormatTypeInfo */
class SOAP_CMAC ns7__CredentialIdentifierFormatTypeInfo : public xsd__anyType
{
public:
	std::string FormatType;	/* required element of type xsd:string */
	std::string Description;	/* required element of type ns2:Description */
	class ns7__CredentialIdentifierFormatTypeInfoExtension *Extension;	/* optional element of type ns7:CredentialIdentifierFormatTypeInfoExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1103; } /* = unique type id SOAP_TYPE_ns7__CredentialIdentifierFormatTypeInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__CredentialIdentifierFormatTypeInfo() { ns7__CredentialIdentifierFormatTypeInfo::soap_default(NULL); }
	virtual ~ns7__CredentialIdentifierFormatTypeInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns7__CredentialIdentifierFormatTypeInfoExtension
#define SOAP_TYPE_ns7__CredentialIdentifierFormatTypeInfoExtension (1104)
/* ns7:CredentialIdentifierFormatTypeInfoExtension */
class SOAP_CMAC ns7__CredentialIdentifierFormatTypeInfoExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1104; } /* = unique type id SOAP_TYPE_ns7__CredentialIdentifierFormatTypeInfoExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__CredentialIdentifierFormatTypeInfoExtension() { ns7__CredentialIdentifierFormatTypeInfoExtension::soap_default(NULL); }
	virtual ~ns7__CredentialIdentifierFormatTypeInfoExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns7__CredentialData
#define SOAP_TYPE_ns7__CredentialData (1105)
/* ns7:CredentialData */
class SOAP_CMAC ns7__CredentialData : public xsd__anyType
{
public:
	class ns7__Credential *Credential;	/* required element of type ns7:Credential */
	ns7__CredentialState *CredentialState;	/* required element of type ns7:CredentialState */
	class ns7__CredentialDataExtension *Extension;	/* optional element of type ns7:CredentialDataExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1105; } /* = unique type id SOAP_TYPE_ns7__CredentialData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__CredentialData() { ns7__CredentialData::soap_default(NULL); }
	virtual ~ns7__CredentialData() { }
};
#endif

#ifndef SOAP_TYPE_ns7__CredentialDataExtension
#define SOAP_TYPE_ns7__CredentialDataExtension (1106)
/* ns7:CredentialDataExtension */
class SOAP_CMAC ns7__CredentialDataExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1106; } /* = unique type id SOAP_TYPE_ns7__CredentialDataExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__CredentialDataExtension() { ns7__CredentialDataExtension::soap_default(NULL); }
	virtual ~ns7__CredentialDataExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns7__FaultResponse
#define SOAP_TYPE_ns7__FaultResponse (1107)
/* ns7:FaultResponse */
class SOAP_CMAC ns7__FaultResponse : public xsd__anyType
{
public:
	std::string Token;	/* required element of type ns2:ReferenceToken */
	std::string Fault;	/* required element of type xsd:string */
	class ns7__FaultResponseExtension *Extension;	/* optional element of type ns7:FaultResponseExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1107; } /* = unique type id SOAP_TYPE_ns7__FaultResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__FaultResponse() { ns7__FaultResponse::soap_default(NULL); }
	virtual ~ns7__FaultResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns7__FaultResponseExtension
#define SOAP_TYPE_ns7__FaultResponseExtension (1108)
/* ns7:FaultResponseExtension */
class SOAP_CMAC ns7__FaultResponseExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1108; } /* = unique type id SOAP_TYPE_ns7__FaultResponseExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__FaultResponseExtension() { ns7__FaultResponseExtension::soap_default(NULL); }
	virtual ~ns7__FaultResponseExtension() { }
};
#endif

#ifndef SOAP_TYPE__ns7__GetServiceCapabilities
#define SOAP_TYPE__ns7__GetServiceCapabilities (1109)
/* ns7:GetServiceCapabilities */
class SOAP_CMAC _ns7__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1109; } /* = unique type id SOAP_TYPE__ns7__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__GetServiceCapabilities() { _ns7__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_ns7__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__ns7__GetServiceCapabilitiesResponse
#define SOAP_TYPE__ns7__GetServiceCapabilitiesResponse (1110)
/* ns7:GetServiceCapabilitiesResponse */
class SOAP_CMAC _ns7__GetServiceCapabilitiesResponse
{
public:
	ns7__ServiceCapabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns7:ServiceCapabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1110; } /* = unique type id SOAP_TYPE__ns7__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__GetServiceCapabilitiesResponse() { _ns7__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_ns7__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns7__GetSupportedFormatTypes
#define SOAP_TYPE__ns7__GetSupportedFormatTypes (1111)
/* ns7:GetSupportedFormatTypes */
class SOAP_CMAC _ns7__GetSupportedFormatTypes
{
public:
	std::string CredentialIdentifierTypeName;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1111; } /* = unique type id SOAP_TYPE__ns7__GetSupportedFormatTypes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__GetSupportedFormatTypes() { _ns7__GetSupportedFormatTypes::soap_default(NULL); }
	virtual ~_ns7__GetSupportedFormatTypes() { }
};
#endif

#ifndef SOAP_TYPE__ns7__GetSupportedFormatTypesResponse
#define SOAP_TYPE__ns7__GetSupportedFormatTypesResponse (1112)
/* ns7:GetSupportedFormatTypesResponse */
class SOAP_CMAC _ns7__GetSupportedFormatTypesResponse
{
public:
	std::vector<ns7__CredentialIdentifierFormatTypeInfo * >FormatTypeInfo;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns7:CredentialIdentifierFormatTypeInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1112; } /* = unique type id SOAP_TYPE__ns7__GetSupportedFormatTypesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__GetSupportedFormatTypesResponse() { _ns7__GetSupportedFormatTypesResponse::soap_default(NULL); }
	virtual ~_ns7__GetSupportedFormatTypesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns7__GetCredentialInfo
#define SOAP_TYPE__ns7__GetCredentialInfo (1113)
/* ns7:GetCredentialInfo */
class SOAP_CMAC _ns7__GetCredentialInfo
{
public:
	std::vector<std::string >Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1113; } /* = unique type id SOAP_TYPE__ns7__GetCredentialInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__GetCredentialInfo() { _ns7__GetCredentialInfo::soap_default(NULL); }
	virtual ~_ns7__GetCredentialInfo() { }
};
#endif

#ifndef SOAP_TYPE__ns7__GetCredentialInfoResponse
#define SOAP_TYPE__ns7__GetCredentialInfoResponse (1114)
/* ns7:GetCredentialInfoResponse */
class SOAP_CMAC _ns7__GetCredentialInfoResponse
{
public:
	std::vector<class ns7__CredentialInfo * >CredentialInfo;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns7:CredentialInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1114; } /* = unique type id SOAP_TYPE__ns7__GetCredentialInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__GetCredentialInfoResponse() { _ns7__GetCredentialInfoResponse::soap_default(NULL); }
	virtual ~_ns7__GetCredentialInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns7__GetCredentialInfoList
#define SOAP_TYPE__ns7__GetCredentialInfoList (1115)
/* ns7:GetCredentialInfoList */
class SOAP_CMAC _ns7__GetCredentialInfoList
{
public:
	int *Limit;	/* optional element of type xsd:int */
	std::string *StartReference;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1115; } /* = unique type id SOAP_TYPE__ns7__GetCredentialInfoList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__GetCredentialInfoList() { _ns7__GetCredentialInfoList::soap_default(NULL); }
	virtual ~_ns7__GetCredentialInfoList() { }
};
#endif

#ifndef SOAP_TYPE__ns7__GetCredentialInfoListResponse
#define SOAP_TYPE__ns7__GetCredentialInfoListResponse (1116)
/* ns7:GetCredentialInfoListResponse */
class SOAP_CMAC _ns7__GetCredentialInfoListResponse
{
public:
	std::string *NextStartReference;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	std::vector<ns7__CredentialInfo * >CredentialInfo;	/* optional element of type ns7:CredentialInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1116; } /* = unique type id SOAP_TYPE__ns7__GetCredentialInfoListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__GetCredentialInfoListResponse() { _ns7__GetCredentialInfoListResponse::soap_default(NULL); }
	virtual ~_ns7__GetCredentialInfoListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns7__GetCredentials
#define SOAP_TYPE__ns7__GetCredentials (1117)
/* ns7:GetCredentials */
class SOAP_CMAC _ns7__GetCredentials
{
public:
	std::vector<std::string >Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1117; } /* = unique type id SOAP_TYPE__ns7__GetCredentials */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__GetCredentials() { _ns7__GetCredentials::soap_default(NULL); }
	virtual ~_ns7__GetCredentials() { }
};
#endif

#ifndef SOAP_TYPE__ns7__GetCredentialsResponse
#define SOAP_TYPE__ns7__GetCredentialsResponse (1118)
/* ns7:GetCredentialsResponse */
class SOAP_CMAC _ns7__GetCredentialsResponse
{
public:
	std::vector<ns7__Credential * >Credential;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns7:Credential */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1118; } /* = unique type id SOAP_TYPE__ns7__GetCredentialsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__GetCredentialsResponse() { _ns7__GetCredentialsResponse::soap_default(NULL); }
	virtual ~_ns7__GetCredentialsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns7__GetCredentialList
#define SOAP_TYPE__ns7__GetCredentialList (1119)
/* ns7:GetCredentialList */
class SOAP_CMAC _ns7__GetCredentialList
{
public:
	int *Limit;	/* optional element of type xsd:int */
	std::string *StartReference;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1119; } /* = unique type id SOAP_TYPE__ns7__GetCredentialList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__GetCredentialList() { _ns7__GetCredentialList::soap_default(NULL); }
	virtual ~_ns7__GetCredentialList() { }
};
#endif

#ifndef SOAP_TYPE__ns7__GetCredentialListResponse
#define SOAP_TYPE__ns7__GetCredentialListResponse (1120)
/* ns7:GetCredentialListResponse */
class SOAP_CMAC _ns7__GetCredentialListResponse
{
public:
	std::string *NextStartReference;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	std::vector<ns7__Credential * >Credential;	/* optional element of type ns7:Credential */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1120; } /* = unique type id SOAP_TYPE__ns7__GetCredentialListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__GetCredentialListResponse() { _ns7__GetCredentialListResponse::soap_default(NULL); }
	virtual ~_ns7__GetCredentialListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns7__CreateCredential
#define SOAP_TYPE__ns7__CreateCredential (1121)
/* ns7:CreateCredential */
class SOAP_CMAC _ns7__CreateCredential
{
public:
	ns7__Credential *Credential;	/* required element of type ns7:Credential */
	ns7__CredentialState *State;	/* required element of type ns7:CredentialState */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1121; } /* = unique type id SOAP_TYPE__ns7__CreateCredential */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__CreateCredential() { _ns7__CreateCredential::soap_default(NULL); }
	virtual ~_ns7__CreateCredential() { }
};
#endif

#ifndef SOAP_TYPE__ns7__CreateCredentialResponse
#define SOAP_TYPE__ns7__CreateCredentialResponse (1122)
/* ns7:CreateCredentialResponse */
class SOAP_CMAC _ns7__CreateCredentialResponse
{
public:
	std::string Token;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1122; } /* = unique type id SOAP_TYPE__ns7__CreateCredentialResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__CreateCredentialResponse() { _ns7__CreateCredentialResponse::soap_default(NULL); }
	virtual ~_ns7__CreateCredentialResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns7__ModifyCredential
#define SOAP_TYPE__ns7__ModifyCredential (1123)
/* ns7:ModifyCredential */
class SOAP_CMAC _ns7__ModifyCredential
{
public:
	ns7__Credential *Credential;	/* required element of type ns7:Credential */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1123; } /* = unique type id SOAP_TYPE__ns7__ModifyCredential */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__ModifyCredential() { _ns7__ModifyCredential::soap_default(NULL); }
	virtual ~_ns7__ModifyCredential() { }
};
#endif

#ifndef SOAP_TYPE__ns7__ModifyCredentialResponse
#define SOAP_TYPE__ns7__ModifyCredentialResponse (1124)
/* ns7:ModifyCredentialResponse */
class SOAP_CMAC _ns7__ModifyCredentialResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1124; } /* = unique type id SOAP_TYPE__ns7__ModifyCredentialResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__ModifyCredentialResponse() { _ns7__ModifyCredentialResponse::soap_default(NULL); }
	virtual ~_ns7__ModifyCredentialResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns7__SetCredential
#define SOAP_TYPE__ns7__SetCredential (1125)
/* ns7:SetCredential */
class SOAP_CMAC _ns7__SetCredential
{
public:
	ns7__CredentialData *CredentialData;	/* required element of type ns7:CredentialData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1125; } /* = unique type id SOAP_TYPE__ns7__SetCredential */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__SetCredential() { _ns7__SetCredential::soap_default(NULL); }
	virtual ~_ns7__SetCredential() { }
};
#endif

#ifndef SOAP_TYPE__ns7__SetCredentialResponse
#define SOAP_TYPE__ns7__SetCredentialResponse (1126)
/* ns7:SetCredentialResponse */
class SOAP_CMAC _ns7__SetCredentialResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1126; } /* = unique type id SOAP_TYPE__ns7__SetCredentialResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__SetCredentialResponse() { _ns7__SetCredentialResponse::soap_default(NULL); }
	virtual ~_ns7__SetCredentialResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns7__DeleteCredential
#define SOAP_TYPE__ns7__DeleteCredential (1127)
/* ns7:DeleteCredential */
class SOAP_CMAC _ns7__DeleteCredential
{
public:
	std::string Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1127; } /* = unique type id SOAP_TYPE__ns7__DeleteCredential */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__DeleteCredential() { _ns7__DeleteCredential::soap_default(NULL); }
	virtual ~_ns7__DeleteCredential() { }
};
#endif

#ifndef SOAP_TYPE__ns7__DeleteCredentialResponse
#define SOAP_TYPE__ns7__DeleteCredentialResponse (1128)
/* ns7:DeleteCredentialResponse */
class SOAP_CMAC _ns7__DeleteCredentialResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1128; } /* = unique type id SOAP_TYPE__ns7__DeleteCredentialResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__DeleteCredentialResponse() { _ns7__DeleteCredentialResponse::soap_default(NULL); }
	virtual ~_ns7__DeleteCredentialResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns7__GetCredentialState
#define SOAP_TYPE__ns7__GetCredentialState (1129)
/* ns7:GetCredentialState */
class SOAP_CMAC _ns7__GetCredentialState
{
public:
	std::string Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1129; } /* = unique type id SOAP_TYPE__ns7__GetCredentialState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__GetCredentialState() { _ns7__GetCredentialState::soap_default(NULL); }
	virtual ~_ns7__GetCredentialState() { }
};
#endif

#ifndef SOAP_TYPE__ns7__GetCredentialStateResponse
#define SOAP_TYPE__ns7__GetCredentialStateResponse (1130)
/* ns7:GetCredentialStateResponse */
class SOAP_CMAC _ns7__GetCredentialStateResponse
{
public:
	ns7__CredentialState *State;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns7:CredentialState */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1130; } /* = unique type id SOAP_TYPE__ns7__GetCredentialStateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__GetCredentialStateResponse() { _ns7__GetCredentialStateResponse::soap_default(NULL); }
	virtual ~_ns7__GetCredentialStateResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns7__EnableCredential
#define SOAP_TYPE__ns7__EnableCredential (1131)
/* ns7:EnableCredential */
class SOAP_CMAC _ns7__EnableCredential
{
public:
	std::string Token;	/* required element of type ns2:ReferenceToken */
	std::string *Reason;	/* optional element of type ns2:Name */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1131; } /* = unique type id SOAP_TYPE__ns7__EnableCredential */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__EnableCredential() { _ns7__EnableCredential::soap_default(NULL); }
	virtual ~_ns7__EnableCredential() { }
};
#endif

#ifndef SOAP_TYPE__ns7__EnableCredentialResponse
#define SOAP_TYPE__ns7__EnableCredentialResponse (1132)
/* ns7:EnableCredentialResponse */
class SOAP_CMAC _ns7__EnableCredentialResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1132; } /* = unique type id SOAP_TYPE__ns7__EnableCredentialResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__EnableCredentialResponse() { _ns7__EnableCredentialResponse::soap_default(NULL); }
	virtual ~_ns7__EnableCredentialResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns7__DisableCredential
#define SOAP_TYPE__ns7__DisableCredential (1133)
/* ns7:DisableCredential */
class SOAP_CMAC _ns7__DisableCredential
{
public:
	std::string Token;	/* required element of type ns2:ReferenceToken */
	std::string *Reason;	/* optional element of type ns2:Name */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1133; } /* = unique type id SOAP_TYPE__ns7__DisableCredential */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__DisableCredential() { _ns7__DisableCredential::soap_default(NULL); }
	virtual ~_ns7__DisableCredential() { }
};
#endif

#ifndef SOAP_TYPE__ns7__DisableCredentialResponse
#define SOAP_TYPE__ns7__DisableCredentialResponse (1134)
/* ns7:DisableCredentialResponse */
class SOAP_CMAC _ns7__DisableCredentialResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1134; } /* = unique type id SOAP_TYPE__ns7__DisableCredentialResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__DisableCredentialResponse() { _ns7__DisableCredentialResponse::soap_default(NULL); }
	virtual ~_ns7__DisableCredentialResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns7__ResetAntipassbackViolation
#define SOAP_TYPE__ns7__ResetAntipassbackViolation (1135)
/* ns7:ResetAntipassbackViolation */
class SOAP_CMAC _ns7__ResetAntipassbackViolation
{
public:
	std::string CredentialToken;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1135; } /* = unique type id SOAP_TYPE__ns7__ResetAntipassbackViolation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__ResetAntipassbackViolation() { _ns7__ResetAntipassbackViolation::soap_default(NULL); }
	virtual ~_ns7__ResetAntipassbackViolation() { }
};
#endif

#ifndef SOAP_TYPE__ns7__ResetAntipassbackViolationResponse
#define SOAP_TYPE__ns7__ResetAntipassbackViolationResponse (1136)
/* ns7:ResetAntipassbackViolationResponse */
class SOAP_CMAC _ns7__ResetAntipassbackViolationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1136; } /* = unique type id SOAP_TYPE__ns7__ResetAntipassbackViolationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__ResetAntipassbackViolationResponse() { _ns7__ResetAntipassbackViolationResponse::soap_default(NULL); }
	virtual ~_ns7__ResetAntipassbackViolationResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns7__GetCredentialIdentifiers
#define SOAP_TYPE__ns7__GetCredentialIdentifiers (1137)
/* ns7:GetCredentialIdentifiers */
class SOAP_CMAC _ns7__GetCredentialIdentifiers
{
public:
	std::string CredentialToken;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1137; } /* = unique type id SOAP_TYPE__ns7__GetCredentialIdentifiers */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__GetCredentialIdentifiers() { _ns7__GetCredentialIdentifiers::soap_default(NULL); }
	virtual ~_ns7__GetCredentialIdentifiers() { }
};
#endif

#ifndef SOAP_TYPE__ns7__GetCredentialIdentifiersResponse
#define SOAP_TYPE__ns7__GetCredentialIdentifiersResponse (1138)
/* ns7:GetCredentialIdentifiersResponse */
class SOAP_CMAC _ns7__GetCredentialIdentifiersResponse
{
public:
	std::vector<ns7__CredentialIdentifier * >CredentialIdentifier;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns7:CredentialIdentifier */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1138; } /* = unique type id SOAP_TYPE__ns7__GetCredentialIdentifiersResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__GetCredentialIdentifiersResponse() { _ns7__GetCredentialIdentifiersResponse::soap_default(NULL); }
	virtual ~_ns7__GetCredentialIdentifiersResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns7__SetCredentialIdentifier
#define SOAP_TYPE__ns7__SetCredentialIdentifier (1139)
/* ns7:SetCredentialIdentifier */
class SOAP_CMAC _ns7__SetCredentialIdentifier
{
public:
	std::string CredentialToken;	/* required element of type ns2:ReferenceToken */
	ns7__CredentialIdentifier *CredentialIdentifier;	/* required element of type ns7:CredentialIdentifier */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1139; } /* = unique type id SOAP_TYPE__ns7__SetCredentialIdentifier */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__SetCredentialIdentifier() { _ns7__SetCredentialIdentifier::soap_default(NULL); }
	virtual ~_ns7__SetCredentialIdentifier() { }
};
#endif

#ifndef SOAP_TYPE__ns7__SetCredentialIdentifierResponse
#define SOAP_TYPE__ns7__SetCredentialIdentifierResponse (1140)
/* ns7:SetCredentialIdentifierResponse */
class SOAP_CMAC _ns7__SetCredentialIdentifierResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1140; } /* = unique type id SOAP_TYPE__ns7__SetCredentialIdentifierResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__SetCredentialIdentifierResponse() { _ns7__SetCredentialIdentifierResponse::soap_default(NULL); }
	virtual ~_ns7__SetCredentialIdentifierResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns7__DeleteCredentialIdentifier
#define SOAP_TYPE__ns7__DeleteCredentialIdentifier (1141)
/* ns7:DeleteCredentialIdentifier */
class SOAP_CMAC _ns7__DeleteCredentialIdentifier
{
public:
	std::string CredentialToken;	/* required element of type ns2:ReferenceToken */
	std::string CredentialIdentifierTypeName;	/* required element of type ns2:Name */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1141; } /* = unique type id SOAP_TYPE__ns7__DeleteCredentialIdentifier */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__DeleteCredentialIdentifier() { _ns7__DeleteCredentialIdentifier::soap_default(NULL); }
	virtual ~_ns7__DeleteCredentialIdentifier() { }
};
#endif

#ifndef SOAP_TYPE__ns7__DeleteCredentialIdentifierResponse
#define SOAP_TYPE__ns7__DeleteCredentialIdentifierResponse (1142)
/* ns7:DeleteCredentialIdentifierResponse */
class SOAP_CMAC _ns7__DeleteCredentialIdentifierResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1142; } /* = unique type id SOAP_TYPE__ns7__DeleteCredentialIdentifierResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__DeleteCredentialIdentifierResponse() { _ns7__DeleteCredentialIdentifierResponse::soap_default(NULL); }
	virtual ~_ns7__DeleteCredentialIdentifierResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns7__GetCredentialAccessProfiles
#define SOAP_TYPE__ns7__GetCredentialAccessProfiles (1143)
/* ns7:GetCredentialAccessProfiles */
class SOAP_CMAC _ns7__GetCredentialAccessProfiles
{
public:
	std::string CredentialToken;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1143; } /* = unique type id SOAP_TYPE__ns7__GetCredentialAccessProfiles */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__GetCredentialAccessProfiles() { _ns7__GetCredentialAccessProfiles::soap_default(NULL); }
	virtual ~_ns7__GetCredentialAccessProfiles() { }
};
#endif

#ifndef SOAP_TYPE__ns7__GetCredentialAccessProfilesResponse
#define SOAP_TYPE__ns7__GetCredentialAccessProfilesResponse (1144)
/* ns7:GetCredentialAccessProfilesResponse */
class SOAP_CMAC _ns7__GetCredentialAccessProfilesResponse
{
public:
	std::vector<ns7__CredentialAccessProfile * >CredentialAccessProfile;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns7:CredentialAccessProfile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1144; } /* = unique type id SOAP_TYPE__ns7__GetCredentialAccessProfilesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__GetCredentialAccessProfilesResponse() { _ns7__GetCredentialAccessProfilesResponse::soap_default(NULL); }
	virtual ~_ns7__GetCredentialAccessProfilesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns7__SetCredentialAccessProfiles
#define SOAP_TYPE__ns7__SetCredentialAccessProfiles (1145)
/* ns7:SetCredentialAccessProfiles */
class SOAP_CMAC _ns7__SetCredentialAccessProfiles
{
public:
	std::string CredentialToken;	/* required element of type ns2:ReferenceToken */
	std::vector<ns7__CredentialAccessProfile * >CredentialAccessProfile;	/* required element of type ns7:CredentialAccessProfile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1145; } /* = unique type id SOAP_TYPE__ns7__SetCredentialAccessProfiles */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__SetCredentialAccessProfiles() { _ns7__SetCredentialAccessProfiles::soap_default(NULL); }
	virtual ~_ns7__SetCredentialAccessProfiles() { }
};
#endif

#ifndef SOAP_TYPE__ns7__SetCredentialAccessProfilesResponse
#define SOAP_TYPE__ns7__SetCredentialAccessProfilesResponse (1146)
/* ns7:SetCredentialAccessProfilesResponse */
class SOAP_CMAC _ns7__SetCredentialAccessProfilesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1146; } /* = unique type id SOAP_TYPE__ns7__SetCredentialAccessProfilesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__SetCredentialAccessProfilesResponse() { _ns7__SetCredentialAccessProfilesResponse::soap_default(NULL); }
	virtual ~_ns7__SetCredentialAccessProfilesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns7__DeleteCredentialAccessProfiles
#define SOAP_TYPE__ns7__DeleteCredentialAccessProfiles (1147)
/* ns7:DeleteCredentialAccessProfiles */
class SOAP_CMAC _ns7__DeleteCredentialAccessProfiles
{
public:
	std::string CredentialToken;	/* required element of type ns2:ReferenceToken */
	std::vector<std::string >AccessProfileToken;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1147; } /* = unique type id SOAP_TYPE__ns7__DeleteCredentialAccessProfiles */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__DeleteCredentialAccessProfiles() { _ns7__DeleteCredentialAccessProfiles::soap_default(NULL); }
	virtual ~_ns7__DeleteCredentialAccessProfiles() { }
};
#endif

#ifndef SOAP_TYPE__ns7__DeleteCredentialAccessProfilesResponse
#define SOAP_TYPE__ns7__DeleteCredentialAccessProfilesResponse (1148)
/* ns7:DeleteCredentialAccessProfilesResponse */
class SOAP_CMAC _ns7__DeleteCredentialAccessProfilesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1148; } /* = unique type id SOAP_TYPE__ns7__DeleteCredentialAccessProfilesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__DeleteCredentialAccessProfilesResponse() { _ns7__DeleteCredentialAccessProfilesResponse::soap_default(NULL); }
	virtual ~_ns7__DeleteCredentialAccessProfilesResponse() { }
};
#endif

#ifndef SOAP_TYPE_tmd__Capabilities
#define SOAP_TYPE_tmd__Capabilities (1149)
/* tmd:Capabilities */
class SOAP_CMAC tmd__Capabilities : public xsd__anyType
{
public:
	std::vector<char * >__any;
	int VideoSources;	/* optional attribute */
	int VideoOutputs;	/* optional attribute */
	int AudioSources;	/* optional attribute */
	int AudioOutputs;	/* optional attribute */
	int RelayOutputs;	/* optional attribute */
	int SerialPorts;	/* optional attribute */
	int DigitalInputs;	/* optional attribute */
	bool DigitalInputOptions;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1149; } /* = unique type id SOAP_TYPE_tmd__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__Capabilities() { tmd__Capabilities::soap_default(NULL); }
	virtual ~tmd__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE_tmd__RelayOutputOptions
#define SOAP_TYPE_tmd__RelayOutputOptions (1150)
/* tmd:RelayOutputOptions */
class SOAP_CMAC tmd__RelayOutputOptions : public xsd__anyType
{
public:
	std::vector<enum tt__RelayMode >Mode;	/* required element of type tt:RelayMode */
	std::string *DelayTimes;	/* optional element of type tmd:DelayTimes */
	bool *Discrete;	/* optional element of type xsd:boolean */
	class tmd__RelayOutputOptionsExtension *Extension;	/* optional element of type tmd:RelayOutputOptionsExtension */
	std::string token;	/* required attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1150; } /* = unique type id SOAP_TYPE_tmd__RelayOutputOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__RelayOutputOptions() { tmd__RelayOutputOptions::soap_default(NULL); }
	virtual ~tmd__RelayOutputOptions() { }
};
#endif

#ifndef SOAP_TYPE_tmd__RelayOutputOptionsExtension
#define SOAP_TYPE_tmd__RelayOutputOptionsExtension (1151)
/* tmd:RelayOutputOptionsExtension */
class SOAP_CMAC tmd__RelayOutputOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1151; } /* = unique type id SOAP_TYPE_tmd__RelayOutputOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__RelayOutputOptionsExtension() { tmd__RelayOutputOptionsExtension::soap_default(NULL); }
	virtual ~tmd__RelayOutputOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tmd__Get
#define SOAP_TYPE_tmd__Get (1152)
/* Primitive tmd:Get schema type: */
class SOAP_CMAC tmd__Get : public xsd__anyType
{
public:
	virtual int soap_type() const { return 1152; } /* = unique type id SOAP_TYPE_tmd__Get */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__Get() { tmd__Get::soap_default(NULL); }
	virtual ~tmd__Get() { }
};
#endif

#ifndef SOAP_TYPE_tmd__GetResponse
#define SOAP_TYPE_tmd__GetResponse (1153)
/* tmd:GetResponse */
class SOAP_CMAC tmd__GetResponse : public xsd__anyType
{
public:
	std::vector<std::string >Token;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:ReferenceToken */
public:
	virtual int soap_type() const { return 1153; } /* = unique type id SOAP_TYPE_tmd__GetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__GetResponse() { tmd__GetResponse::soap_default(NULL); }
	virtual ~tmd__GetResponse() { }
};
#endif

#ifndef SOAP_TYPE_tmd__DigitalInputConfigurationOptions
#define SOAP_TYPE_tmd__DigitalInputConfigurationOptions (1154)
/* tmd:DigitalInputConfigurationOptions */
class SOAP_CMAC tmd__DigitalInputConfigurationOptions : public xsd__anyType
{
public:
	std::vector<enum tt__DigitalIdleState >IdleState;	/* required element of type tt:DigitalIdleState */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1154; } /* = unique type id SOAP_TYPE_tmd__DigitalInputConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__DigitalInputConfigurationOptions() { tmd__DigitalInputConfigurationOptions::soap_default(NULL); }
	virtual ~tmd__DigitalInputConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__tmd__union_SerialData
#define SOAP_TYPE__tmd__union_SerialData (2961)
/* xsd:choice */
union _tmd__union_SerialData
{
#define SOAP_UNION__tmd__union_SerialData_Binary	(1)
	xsd__base64Binary *Binary;
#define SOAP_UNION__tmd__union_SerialData_String	(2)
	std::string *String;
};
#endif

#ifndef SOAP_TYPE_tmd__SerialData
#define SOAP_TYPE_tmd__SerialData (1155)
/* tmd:SerialData */
class SOAP_CMAC tmd__SerialData : public xsd__anyType
{
public:
	int __union_SerialData;	/* union discriminant (of union defined below) */
	union _tmd__union_SerialData union_SerialData;	/* required element of type xsd:choice */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1155; } /* = unique type id SOAP_TYPE_tmd__SerialData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__SerialData() { tmd__SerialData::soap_default(NULL); }
	virtual ~tmd__SerialData() { }
};
#endif

#ifndef SOAP_TYPE_tmd__SerialPortConfiguration
#define SOAP_TYPE_tmd__SerialPortConfiguration (1157)
/* tmd:SerialPortConfiguration */
class SOAP_CMAC tmd__SerialPortConfiguration : public xsd__anyType
{
public:
	int BaudRate;	/* required element of type xsd:int */
	enum tmd__ParityBit ParityBit;	/* required element of type tmd:ParityBit */
	int CharacterLength;	/* required element of type xsd:int */
	float StopBit;	/* required element of type xsd:float */
	std::vector<char * >__any;
	std::string token;	/* required attribute */
	enum tmd__SerialPortType type;	/* required attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1157; } /* = unique type id SOAP_TYPE_tmd__SerialPortConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__SerialPortConfiguration() { tmd__SerialPortConfiguration::soap_default(NULL); }
	virtual ~tmd__SerialPortConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tmd__SerialPortConfigurationOptions
#define SOAP_TYPE_tmd__SerialPortConfigurationOptions (1158)
/* tmd:SerialPortConfigurationOptions */
class SOAP_CMAC tmd__SerialPortConfigurationOptions : public xsd__anyType
{
public:
	tt__IntList *BaudRateList;	/* required element of type tt:IntList */
	class tmd__ParityBitList *ParityBitList;	/* required element of type tmd:ParityBitList */
	tt__IntList *CharacterLengthList;	/* required element of type tt:IntList */
	tt__FloatList *StopBitList;	/* required element of type tt:FloatList */
	std::vector<char * >__any;
	std::string token;	/* required attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1158; } /* = unique type id SOAP_TYPE_tmd__SerialPortConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__SerialPortConfigurationOptions() { tmd__SerialPortConfigurationOptions::soap_default(NULL); }
	virtual ~tmd__SerialPortConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tmd__ParityBitList
#define SOAP_TYPE_tmd__ParityBitList (1159)
/* tmd:ParityBitList */
class SOAP_CMAC tmd__ParityBitList : public xsd__anyType
{
public:
	std::vector<enum tmd__ParityBit >Items;	/* optional element of type tmd:ParityBit */
public:
	virtual int soap_type() const { return 1159; } /* = unique type id SOAP_TYPE_tmd__ParityBitList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__ParityBitList() { tmd__ParityBitList::soap_default(NULL); }
	virtual ~tmd__ParityBitList() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetServiceCapabilities
#define SOAP_TYPE__tmd__GetServiceCapabilities (1160)
/* tmd:GetServiceCapabilities */
class SOAP_CMAC _tmd__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1160; } /* = unique type id SOAP_TYPE__tmd__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetServiceCapabilities() { _tmd__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_tmd__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tmd__GetServiceCapabilitiesResponse (1161)
/* tmd:GetServiceCapabilitiesResponse */
class SOAP_CMAC _tmd__GetServiceCapabilitiesResponse
{
public:
	tmd__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tmd:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1161; } /* = unique type id SOAP_TYPE__tmd__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetServiceCapabilitiesResponse() { _tmd__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_tmd__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetRelayOutputOptions
#define SOAP_TYPE__tmd__GetRelayOutputOptions (1162)
/* tmd:GetRelayOutputOptions */
class SOAP_CMAC _tmd__GetRelayOutputOptions
{
public:
	std::string *RelayOutputToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1162; } /* = unique type id SOAP_TYPE__tmd__GetRelayOutputOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetRelayOutputOptions() { _tmd__GetRelayOutputOptions::soap_default(NULL); }
	virtual ~_tmd__GetRelayOutputOptions() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetRelayOutputOptionsResponse
#define SOAP_TYPE__tmd__GetRelayOutputOptionsResponse (1163)
/* tmd:GetRelayOutputOptionsResponse */
class SOAP_CMAC _tmd__GetRelayOutputOptionsResponse
{
public:
	std::vector<tmd__RelayOutputOptions * >RelayOutputOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tmd:RelayOutputOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1163; } /* = unique type id SOAP_TYPE__tmd__GetRelayOutputOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetRelayOutputOptionsResponse() { _tmd__GetRelayOutputOptionsResponse::soap_default(NULL); }
	virtual ~_tmd__GetRelayOutputOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetVideoOutputs
#define SOAP_TYPE__tmd__GetVideoOutputs (1164)
/* tmd:GetVideoOutputs */
class SOAP_CMAC _tmd__GetVideoOutputs
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1164; } /* = unique type id SOAP_TYPE__tmd__GetVideoOutputs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetVideoOutputs() { _tmd__GetVideoOutputs::soap_default(NULL); }
	virtual ~_tmd__GetVideoOutputs() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetVideoOutputsResponse
#define SOAP_TYPE__tmd__GetVideoOutputsResponse (1165)
/* tmd:GetVideoOutputsResponse */
class SOAP_CMAC _tmd__GetVideoOutputsResponse
{
public:
	std::vector<class tt__VideoOutput * >VideoOutputs;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:VideoOutput */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1165; } /* = unique type id SOAP_TYPE__tmd__GetVideoOutputsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetVideoOutputsResponse() { _tmd__GetVideoOutputsResponse::soap_default(NULL); }
	virtual ~_tmd__GetVideoOutputsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetAudioSourceConfiguration
#define SOAP_TYPE__tmd__GetAudioSourceConfiguration (1166)
/* tmd:GetAudioSourceConfiguration */
class SOAP_CMAC _tmd__GetAudioSourceConfiguration
{
public:
	std::string AudioSourceToken;	/* required element of type tt:ReferenceToken */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1166; } /* = unique type id SOAP_TYPE__tmd__GetAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetAudioSourceConfiguration() { _tmd__GetAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_tmd__GetAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetAudioSourceConfigurationResponse
#define SOAP_TYPE__tmd__GetAudioSourceConfigurationResponse (1167)
/* tmd:GetAudioSourceConfigurationResponse */
class SOAP_CMAC _tmd__GetAudioSourceConfigurationResponse
{
public:
	tt__AudioSourceConfiguration *AudioSourceConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioSourceConfiguration */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1167; } /* = unique type id SOAP_TYPE__tmd__GetAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetAudioSourceConfigurationResponse() { _tmd__GetAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_tmd__GetAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetAudioOutputConfiguration
#define SOAP_TYPE__tmd__GetAudioOutputConfiguration (1168)
/* tmd:GetAudioOutputConfiguration */
class SOAP_CMAC _tmd__GetAudioOutputConfiguration
{
public:
	std::string AudioOutputToken;	/* required element of type tt:ReferenceToken */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1168; } /* = unique type id SOAP_TYPE__tmd__GetAudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetAudioOutputConfiguration() { _tmd__GetAudioOutputConfiguration::soap_default(NULL); }
	virtual ~_tmd__GetAudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetAudioOutputConfigurationResponse
#define SOAP_TYPE__tmd__GetAudioOutputConfigurationResponse (1169)
/* tmd:GetAudioOutputConfigurationResponse */
class SOAP_CMAC _tmd__GetAudioOutputConfigurationResponse
{
public:
	tt__AudioOutputConfiguration *AudioOutputConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioOutputConfiguration */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1169; } /* = unique type id SOAP_TYPE__tmd__GetAudioOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetAudioOutputConfigurationResponse() { _tmd__GetAudioOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_tmd__GetAudioOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetVideoSourceConfiguration
#define SOAP_TYPE__tmd__GetVideoSourceConfiguration (1170)
/* tmd:GetVideoSourceConfiguration */
class SOAP_CMAC _tmd__GetVideoSourceConfiguration
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1170; } /* = unique type id SOAP_TYPE__tmd__GetVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetVideoSourceConfiguration() { _tmd__GetVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_tmd__GetVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetVideoSourceConfigurationResponse
#define SOAP_TYPE__tmd__GetVideoSourceConfigurationResponse (1171)
/* tmd:GetVideoSourceConfigurationResponse */
class SOAP_CMAC _tmd__GetVideoSourceConfigurationResponse
{
public:
	tt__VideoSourceConfiguration *VideoSourceConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoSourceConfiguration */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1171; } /* = unique type id SOAP_TYPE__tmd__GetVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetVideoSourceConfigurationResponse() { _tmd__GetVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_tmd__GetVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetVideoOutputConfiguration
#define SOAP_TYPE__tmd__GetVideoOutputConfiguration (1172)
/* tmd:GetVideoOutputConfiguration */
class SOAP_CMAC _tmd__GetVideoOutputConfiguration
{
public:
	std::string VideoOutputToken;	/* required element of type tt:ReferenceToken */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1172; } /* = unique type id SOAP_TYPE__tmd__GetVideoOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetVideoOutputConfiguration() { _tmd__GetVideoOutputConfiguration::soap_default(NULL); }
	virtual ~_tmd__GetVideoOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetVideoOutputConfigurationResponse
#define SOAP_TYPE__tmd__GetVideoOutputConfigurationResponse (1173)
/* tmd:GetVideoOutputConfigurationResponse */
class SOAP_CMAC _tmd__GetVideoOutputConfigurationResponse
{
public:
	class tt__VideoOutputConfiguration *VideoOutputConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoOutputConfiguration */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1173; } /* = unique type id SOAP_TYPE__tmd__GetVideoOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetVideoOutputConfigurationResponse() { _tmd__GetVideoOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_tmd__GetVideoOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetAudioSourceConfiguration
#define SOAP_TYPE__tmd__SetAudioSourceConfiguration (1174)
/* tmd:SetAudioSourceConfiguration */
class SOAP_CMAC _tmd__SetAudioSourceConfiguration
{
public:
	tt__AudioSourceConfiguration *Configuration;	/* required element of type tt:AudioSourceConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1174; } /* = unique type id SOAP_TYPE__tmd__SetAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetAudioSourceConfiguration() { _tmd__SetAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_tmd__SetAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetAudioSourceConfigurationResponse
#define SOAP_TYPE__tmd__SetAudioSourceConfigurationResponse (1175)
/* tmd:SetAudioSourceConfigurationResponse */
class SOAP_CMAC _tmd__SetAudioSourceConfigurationResponse
{
public:
	std::vector<char * >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1175; } /* = unique type id SOAP_TYPE__tmd__SetAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetAudioSourceConfigurationResponse() { _tmd__SetAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_tmd__SetAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetAudioOutputConfiguration
#define SOAP_TYPE__tmd__SetAudioOutputConfiguration (1176)
/* tmd:SetAudioOutputConfiguration */
class SOAP_CMAC _tmd__SetAudioOutputConfiguration
{
public:
	tt__AudioOutputConfiguration *Configuration;	/* required element of type tt:AudioOutputConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1176; } /* = unique type id SOAP_TYPE__tmd__SetAudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetAudioOutputConfiguration() { _tmd__SetAudioOutputConfiguration::soap_default(NULL); }
	virtual ~_tmd__SetAudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetAudioOutputConfigurationResponse
#define SOAP_TYPE__tmd__SetAudioOutputConfigurationResponse (1177)
/* tmd:SetAudioOutputConfigurationResponse */
class SOAP_CMAC _tmd__SetAudioOutputConfigurationResponse
{
public:
	std::vector<char * >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1177; } /* = unique type id SOAP_TYPE__tmd__SetAudioOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetAudioOutputConfigurationResponse() { _tmd__SetAudioOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_tmd__SetAudioOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetVideoSourceConfiguration
#define SOAP_TYPE__tmd__SetVideoSourceConfiguration (1178)
/* tmd:SetVideoSourceConfiguration */
class SOAP_CMAC _tmd__SetVideoSourceConfiguration
{
public:
	tt__VideoSourceConfiguration *Configuration;	/* required element of type tt:VideoSourceConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1178; } /* = unique type id SOAP_TYPE__tmd__SetVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetVideoSourceConfiguration() { _tmd__SetVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_tmd__SetVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetVideoSourceConfigurationResponse
#define SOAP_TYPE__tmd__SetVideoSourceConfigurationResponse (1179)
/* tmd:SetVideoSourceConfigurationResponse */
class SOAP_CMAC _tmd__SetVideoSourceConfigurationResponse
{
public:
	std::vector<char * >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1179; } /* = unique type id SOAP_TYPE__tmd__SetVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetVideoSourceConfigurationResponse() { _tmd__SetVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_tmd__SetVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetVideoOutputConfiguration
#define SOAP_TYPE__tmd__SetVideoOutputConfiguration (1180)
/* tmd:SetVideoOutputConfiguration */
class SOAP_CMAC _tmd__SetVideoOutputConfiguration
{
public:
	tt__VideoOutputConfiguration *Configuration;	/* required element of type tt:VideoOutputConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1180; } /* = unique type id SOAP_TYPE__tmd__SetVideoOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetVideoOutputConfiguration() { _tmd__SetVideoOutputConfiguration::soap_default(NULL); }
	virtual ~_tmd__SetVideoOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetVideoOutputConfigurationResponse
#define SOAP_TYPE__tmd__SetVideoOutputConfigurationResponse (1181)
/* tmd:SetVideoOutputConfigurationResponse */
class SOAP_CMAC _tmd__SetVideoOutputConfigurationResponse
{
public:
	std::vector<char * >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1181; } /* = unique type id SOAP_TYPE__tmd__SetVideoOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetVideoOutputConfigurationResponse() { _tmd__SetVideoOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_tmd__SetVideoOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetVideoSourceConfigurationOptions
#define SOAP_TYPE__tmd__GetVideoSourceConfigurationOptions (1182)
/* tmd:GetVideoSourceConfigurationOptions */
class SOAP_CMAC _tmd__GetVideoSourceConfigurationOptions
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1182; } /* = unique type id SOAP_TYPE__tmd__GetVideoSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetVideoSourceConfigurationOptions() { _tmd__GetVideoSourceConfigurationOptions::soap_default(NULL); }
	virtual ~_tmd__GetVideoSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetVideoSourceConfigurationOptionsResponse
#define SOAP_TYPE__tmd__GetVideoSourceConfigurationOptionsResponse (1183)
/* tmd:GetVideoSourceConfigurationOptionsResponse */
class SOAP_CMAC _tmd__GetVideoSourceConfigurationOptionsResponse
{
public:
	tt__VideoSourceConfigurationOptions *VideoSourceConfigurationOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoSourceConfigurationOptions */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1183; } /* = unique type id SOAP_TYPE__tmd__GetVideoSourceConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetVideoSourceConfigurationOptionsResponse() { _tmd__GetVideoSourceConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_tmd__GetVideoSourceConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetVideoOutputConfigurationOptions
#define SOAP_TYPE__tmd__GetVideoOutputConfigurationOptions (1184)
/* tmd:GetVideoOutputConfigurationOptions */
class SOAP_CMAC _tmd__GetVideoOutputConfigurationOptions
{
public:
	std::string VideoOutputToken;	/* required element of type tt:ReferenceToken */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1184; } /* = unique type id SOAP_TYPE__tmd__GetVideoOutputConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetVideoOutputConfigurationOptions() { _tmd__GetVideoOutputConfigurationOptions::soap_default(NULL); }
	virtual ~_tmd__GetVideoOutputConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetVideoOutputConfigurationOptionsResponse
#define SOAP_TYPE__tmd__GetVideoOutputConfigurationOptionsResponse (1185)
/* tmd:GetVideoOutputConfigurationOptionsResponse */
class SOAP_CMAC _tmd__GetVideoOutputConfigurationOptionsResponse
{
public:
	tt__VideoOutputConfigurationOptions *VideoOutputConfigurationOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoOutputConfigurationOptions */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1185; } /* = unique type id SOAP_TYPE__tmd__GetVideoOutputConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetVideoOutputConfigurationOptionsResponse() { _tmd__GetVideoOutputConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_tmd__GetVideoOutputConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetAudioSourceConfigurationOptions
#define SOAP_TYPE__tmd__GetAudioSourceConfigurationOptions (1186)
/* tmd:GetAudioSourceConfigurationOptions */
class SOAP_CMAC _tmd__GetAudioSourceConfigurationOptions
{
public:
	std::string AudioSourceToken;	/* required element of type tt:ReferenceToken */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1186; } /* = unique type id SOAP_TYPE__tmd__GetAudioSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetAudioSourceConfigurationOptions() { _tmd__GetAudioSourceConfigurationOptions::soap_default(NULL); }
	virtual ~_tmd__GetAudioSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetAudioSourceConfigurationOptionsResponse
#define SOAP_TYPE__tmd__GetAudioSourceConfigurationOptionsResponse (1187)
/* tmd:GetAudioSourceConfigurationOptionsResponse */
class SOAP_CMAC _tmd__GetAudioSourceConfigurationOptionsResponse
{
public:
	tt__AudioSourceConfigurationOptions *AudioSourceOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioSourceConfigurationOptions */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1187; } /* = unique type id SOAP_TYPE__tmd__GetAudioSourceConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetAudioSourceConfigurationOptionsResponse() { _tmd__GetAudioSourceConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_tmd__GetAudioSourceConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetAudioOutputConfigurationOptions
#define SOAP_TYPE__tmd__GetAudioOutputConfigurationOptions (1188)
/* tmd:GetAudioOutputConfigurationOptions */
class SOAP_CMAC _tmd__GetAudioOutputConfigurationOptions
{
public:
	std::string AudioOutputToken;	/* required element of type tt:ReferenceToken */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1188; } /* = unique type id SOAP_TYPE__tmd__GetAudioOutputConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetAudioOutputConfigurationOptions() { _tmd__GetAudioOutputConfigurationOptions::soap_default(NULL); }
	virtual ~_tmd__GetAudioOutputConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetAudioOutputConfigurationOptionsResponse
#define SOAP_TYPE__tmd__GetAudioOutputConfigurationOptionsResponse (1189)
/* tmd:GetAudioOutputConfigurationOptionsResponse */
class SOAP_CMAC _tmd__GetAudioOutputConfigurationOptionsResponse
{
public:
	tt__AudioOutputConfigurationOptions *AudioOutputOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioOutputConfigurationOptions */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1189; } /* = unique type id SOAP_TYPE__tmd__GetAudioOutputConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetAudioOutputConfigurationOptionsResponse() { _tmd__GetAudioOutputConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_tmd__GetAudioOutputConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetRelayOutputSettings
#define SOAP_TYPE__tmd__SetRelayOutputSettings (1190)
/* tmd:SetRelayOutputSettings */
class SOAP_CMAC _tmd__SetRelayOutputSettings
{
public:
	class tt__RelayOutput *RelayOutput;	/* required element of type tt:RelayOutput */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1190; } /* = unique type id SOAP_TYPE__tmd__SetRelayOutputSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetRelayOutputSettings() { _tmd__SetRelayOutputSettings::soap_default(NULL); }
	virtual ~_tmd__SetRelayOutputSettings() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetRelayOutputSettingsResponse
#define SOAP_TYPE__tmd__SetRelayOutputSettingsResponse (1191)
/* tmd:SetRelayOutputSettingsResponse */
class SOAP_CMAC _tmd__SetRelayOutputSettingsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1191; } /* = unique type id SOAP_TYPE__tmd__SetRelayOutputSettingsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetRelayOutputSettingsResponse() { _tmd__SetRelayOutputSettingsResponse::soap_default(NULL); }
	virtual ~_tmd__SetRelayOutputSettingsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetDigitalInputs
#define SOAP_TYPE__tmd__GetDigitalInputs (1192)
/* tmd:GetDigitalInputs */
class SOAP_CMAC _tmd__GetDigitalInputs
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1192; } /* = unique type id SOAP_TYPE__tmd__GetDigitalInputs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetDigitalInputs() { _tmd__GetDigitalInputs::soap_default(NULL); }
	virtual ~_tmd__GetDigitalInputs() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetDigitalInputsResponse
#define SOAP_TYPE__tmd__GetDigitalInputsResponse (1193)
/* tmd:GetDigitalInputsResponse */
class SOAP_CMAC _tmd__GetDigitalInputsResponse
{
public:
	std::vector<class tt__DigitalInput * >DigitalInputs;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:DigitalInput */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1193; } /* = unique type id SOAP_TYPE__tmd__GetDigitalInputsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetDigitalInputsResponse() { _tmd__GetDigitalInputsResponse::soap_default(NULL); }
	virtual ~_tmd__GetDigitalInputsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetDigitalInputConfigurationOptions
#define SOAP_TYPE__tmd__GetDigitalInputConfigurationOptions (1194)
/* tmd:GetDigitalInputConfigurationOptions */
class SOAP_CMAC _tmd__GetDigitalInputConfigurationOptions
{
public:
	std::string *Token;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1194; } /* = unique type id SOAP_TYPE__tmd__GetDigitalInputConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetDigitalInputConfigurationOptions() { _tmd__GetDigitalInputConfigurationOptions::soap_default(NULL); }
	virtual ~_tmd__GetDigitalInputConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetDigitalInputConfigurationOptionsResponse
#define SOAP_TYPE__tmd__GetDigitalInputConfigurationOptionsResponse (1195)
/* tmd:GetDigitalInputConfigurationOptionsResponse */
class SOAP_CMAC _tmd__GetDigitalInputConfigurationOptionsResponse
{
public:
	tmd__DigitalInputConfigurationOptions *DigitalInputOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tmd:DigitalInputConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1195; } /* = unique type id SOAP_TYPE__tmd__GetDigitalInputConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetDigitalInputConfigurationOptionsResponse() { _tmd__GetDigitalInputConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_tmd__GetDigitalInputConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetDigitalInputConfigurations
#define SOAP_TYPE__tmd__SetDigitalInputConfigurations (1196)
/* tmd:SetDigitalInputConfigurations */
class SOAP_CMAC _tmd__SetDigitalInputConfigurations
{
public:
	std::vector<tt__DigitalInput * >DigitalInputs;	/* required element of type tt:DigitalInput */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1196; } /* = unique type id SOAP_TYPE__tmd__SetDigitalInputConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetDigitalInputConfigurations() { _tmd__SetDigitalInputConfigurations::soap_default(NULL); }
	virtual ~_tmd__SetDigitalInputConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetDigitalInputConfigurationsResponse
#define SOAP_TYPE__tmd__SetDigitalInputConfigurationsResponse (1197)
/* tmd:SetDigitalInputConfigurationsResponse */
class SOAP_CMAC _tmd__SetDigitalInputConfigurationsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1197; } /* = unique type id SOAP_TYPE__tmd__SetDigitalInputConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetDigitalInputConfigurationsResponse() { _tmd__SetDigitalInputConfigurationsResponse::soap_default(NULL); }
	virtual ~_tmd__SetDigitalInputConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetSerialPorts
#define SOAP_TYPE__tmd__GetSerialPorts (1198)
/* tmd:GetSerialPorts */
class SOAP_CMAC _tmd__GetSerialPorts
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1198; } /* = unique type id SOAP_TYPE__tmd__GetSerialPorts */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetSerialPorts() { _tmd__GetSerialPorts::soap_default(NULL); }
	virtual ~_tmd__GetSerialPorts() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetSerialPortsResponse
#define SOAP_TYPE__tmd__GetSerialPortsResponse (1199)
/* tmd:GetSerialPortsResponse */
class SOAP_CMAC _tmd__GetSerialPortsResponse
{
public:
	std::vector<class tmd__SerialPort * >SerialPort;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tmd:SerialPort */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1199; } /* = unique type id SOAP_TYPE__tmd__GetSerialPortsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetSerialPortsResponse() { _tmd__GetSerialPortsResponse::soap_default(NULL); }
	virtual ~_tmd__GetSerialPortsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetSerialPortConfiguration
#define SOAP_TYPE__tmd__GetSerialPortConfiguration (1200)
/* tmd:GetSerialPortConfiguration */
class SOAP_CMAC _tmd__GetSerialPortConfiguration
{
public:
	std::string SerialPortToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1200; } /* = unique type id SOAP_TYPE__tmd__GetSerialPortConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetSerialPortConfiguration() { _tmd__GetSerialPortConfiguration::soap_default(NULL); }
	virtual ~_tmd__GetSerialPortConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetSerialPortConfigurationResponse
#define SOAP_TYPE__tmd__GetSerialPortConfigurationResponse (1201)
/* tmd:GetSerialPortConfigurationResponse */
class SOAP_CMAC _tmd__GetSerialPortConfigurationResponse
{
public:
	tmd__SerialPortConfiguration *SerialPortConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tmd:SerialPortConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1201; } /* = unique type id SOAP_TYPE__tmd__GetSerialPortConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetSerialPortConfigurationResponse() { _tmd__GetSerialPortConfigurationResponse::soap_default(NULL); }
	virtual ~_tmd__GetSerialPortConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetSerialPortConfiguration
#define SOAP_TYPE__tmd__SetSerialPortConfiguration (1202)
/* tmd:SetSerialPortConfiguration */
class SOAP_CMAC _tmd__SetSerialPortConfiguration
{
public:
	tmd__SerialPortConfiguration *SerialPortConfiguration;	/* required element of type tmd:SerialPortConfiguration */
	bool ForcePersistance;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1202; } /* = unique type id SOAP_TYPE__tmd__SetSerialPortConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetSerialPortConfiguration() { _tmd__SetSerialPortConfiguration::soap_default(NULL); }
	virtual ~_tmd__SetSerialPortConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetSerialPortConfigurationResponse
#define SOAP_TYPE__tmd__SetSerialPortConfigurationResponse (1203)
/* tmd:SetSerialPortConfigurationResponse */
class SOAP_CMAC _tmd__SetSerialPortConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1203; } /* = unique type id SOAP_TYPE__tmd__SetSerialPortConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetSerialPortConfigurationResponse() { _tmd__SetSerialPortConfigurationResponse::soap_default(NULL); }
	virtual ~_tmd__SetSerialPortConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetSerialPortConfigurationOptions
#define SOAP_TYPE__tmd__GetSerialPortConfigurationOptions (1204)
/* tmd:GetSerialPortConfigurationOptions */
class SOAP_CMAC _tmd__GetSerialPortConfigurationOptions
{
public:
	std::string SerialPortToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1204; } /* = unique type id SOAP_TYPE__tmd__GetSerialPortConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetSerialPortConfigurationOptions() { _tmd__GetSerialPortConfigurationOptions::soap_default(NULL); }
	virtual ~_tmd__GetSerialPortConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetSerialPortConfigurationOptionsResponse
#define SOAP_TYPE__tmd__GetSerialPortConfigurationOptionsResponse (1205)
/* tmd:GetSerialPortConfigurationOptionsResponse */
class SOAP_CMAC _tmd__GetSerialPortConfigurationOptionsResponse
{
public:
	tmd__SerialPortConfigurationOptions *SerialPortOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tmd:SerialPortConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1205; } /* = unique type id SOAP_TYPE__tmd__GetSerialPortConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetSerialPortConfigurationOptionsResponse() { _tmd__GetSerialPortConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_tmd__GetSerialPortConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SendReceiveSerialCommand
#define SOAP_TYPE__tmd__SendReceiveSerialCommand (1206)
/* tmd:SendReceiveSerialCommand */
class SOAP_CMAC _tmd__SendReceiveSerialCommand
{
public:
	std::string *Token;	/* optional element of type tt:ReferenceToken */
	tmd__SerialData *SerialData;	/* optional element of type tmd:SerialData */
	LONG64 *TimeOut;	/* optional element of type xsd:duration */
	std::string *DataLength;	/* optional element of type xsd:integer */
	std::string *Delimiter;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1206; } /* = unique type id SOAP_TYPE__tmd__SendReceiveSerialCommand */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SendReceiveSerialCommand() { _tmd__SendReceiveSerialCommand::soap_default(NULL); }
	virtual ~_tmd__SendReceiveSerialCommand() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SendReceiveSerialCommandResponse
#define SOAP_TYPE__tmd__SendReceiveSerialCommandResponse (1207)
/* tmd:SendReceiveSerialCommandResponse */
class SOAP_CMAC _tmd__SendReceiveSerialCommandResponse
{
public:
	tmd__SerialData *SerialData;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tmd:SerialData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1207; } /* = unique type id SOAP_TYPE__tmd__SendReceiveSerialCommandResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SendReceiveSerialCommandResponse() { _tmd__SendReceiveSerialCommandResponse::soap_default(NULL); }
	virtual ~_tmd__SendReceiveSerialCommandResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__Service_Capabilities
#define SOAP_TYPE__tds__Service_Capabilities (2984)
/* tds:Service-Capabilities */
class SOAP_CMAC _tds__Service_Capabilities
{
public:
	char *__any;
public:
	virtual int soap_type() const { return 2984; } /* = unique type id SOAP_TYPE__tds__Service_Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__Service_Capabilities() { _tds__Service_Capabilities::soap_default(NULL); }
	virtual ~_tds__Service_Capabilities() { }
};
#endif

#ifndef SOAP_TYPE_tds__Service
#define SOAP_TYPE_tds__Service (1208)
/* tds:Service */
class SOAP_CMAC tds__Service : public xsd__anyType
{
public:
	std::string Namespace;	/* required element of type xsd:anyURI */
	std::string XAddr;	/* required element of type xsd:anyURI */
	_tds__Service_Capabilities *Capabilities;	/* optional element of type tds:Service-Capabilities */
	tt__OnvifVersion *Version;	/* required element of type tt:OnvifVersion */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1208; } /* = unique type id SOAP_TYPE_tds__Service */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tds__Service() { tds__Service::soap_default(NULL); }
	virtual ~tds__Service() { }
};
#endif

#ifndef SOAP_TYPE_tds__DeviceServiceCapabilities
#define SOAP_TYPE_tds__DeviceServiceCapabilities (1209)
/* tds:DeviceServiceCapabilities */
class SOAP_CMAC tds__DeviceServiceCapabilities : public xsd__anyType
{
public:
	class tds__NetworkCapabilities *Network;	/* required element of type tds:NetworkCapabilities */
	class tds__SecurityCapabilities *Security;	/* required element of type tds:SecurityCapabilities */
	class tds__SystemCapabilities *System;	/* required element of type tds:SystemCapabilities */
	class tds__MiscCapabilities *Misc;	/* optional element of type tds:MiscCapabilities */
public:
	virtual int soap_type() const { return 1209; } /* = unique type id SOAP_TYPE_tds__DeviceServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tds__DeviceServiceCapabilities() { tds__DeviceServiceCapabilities::soap_default(NULL); }
	virtual ~tds__DeviceServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tds__NetworkCapabilities
#define SOAP_TYPE_tds__NetworkCapabilities (1210)
/* Primitive tds:NetworkCapabilities schema type: */
class SOAP_CMAC tds__NetworkCapabilities : public xsd__anyType
{
public:
	bool *IPFilter;	/* optional attribute */
	bool *ZeroConfiguration;	/* optional attribute */
	bool *IPVersion6;	/* optional attribute */
	bool *DynDNS;	/* optional attribute */
	bool *Dot11Configuration;	/* optional attribute */
	int *Dot1XConfigurations;	/* optional attribute */
	bool *HostnameFromDHCP;	/* optional attribute */
	int *NTP;	/* optional attribute */
	bool *DHCPv6;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1210; } /* = unique type id SOAP_TYPE_tds__NetworkCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tds__NetworkCapabilities() { tds__NetworkCapabilities::soap_default(NULL); }
	virtual ~tds__NetworkCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tds__SecurityCapabilities
#define SOAP_TYPE_tds__SecurityCapabilities (1211)
/* Primitive tds:SecurityCapabilities schema type: */
class SOAP_CMAC tds__SecurityCapabilities : public xsd__anyType
{
public:
	bool *TLS1_x002e0;	/* optional attribute */
	bool *TLS1_x002e1;	/* optional attribute */
	bool *TLS1_x002e2;	/* optional attribute */
	bool *OnboardKeyGeneration;	/* optional attribute */
	bool *AccessPolicyConfig;	/* optional attribute */
	bool *DefaultAccessPolicy;	/* optional attribute */
	bool *Dot1X;	/* optional attribute */
	bool *RemoteUserHandling;	/* optional attribute */
	bool *X_x002e509Token;	/* optional attribute */
	bool *SAMLToken;	/* optional attribute */
	bool *KerberosToken;	/* optional attribute */
	bool *UsernameToken;	/* optional attribute */
	bool *HttpDigest;	/* optional attribute */
	bool *RELToken;	/* optional attribute */
	std::string *SupportedEAPMethods;	/* optional attribute */
	int *MaxUsers;	/* optional attribute */
	int *MaxUserNameLength;	/* optional attribute */
	int *MaxPasswordLength;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1211; } /* = unique type id SOAP_TYPE_tds__SecurityCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tds__SecurityCapabilities() { tds__SecurityCapabilities::soap_default(NULL); }
	virtual ~tds__SecurityCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tds__SystemCapabilities
#define SOAP_TYPE_tds__SystemCapabilities (1212)
/* Primitive tds:SystemCapabilities schema type: */
class SOAP_CMAC tds__SystemCapabilities : public xsd__anyType
{
public:
	bool *DiscoveryResolve;	/* optional attribute */
	bool *DiscoveryBye;	/* optional attribute */
	bool *RemoteDiscovery;	/* optional attribute */
	bool *SystemBackup;	/* optional attribute */
	bool *SystemLogging;	/* optional attribute */
	bool *FirmwareUpgrade;	/* optional attribute */
	bool *HttpFirmwareUpgrade;	/* optional attribute */
	bool *HttpSystemBackup;	/* optional attribute */
	bool *HttpSystemLogging;	/* optional attribute */
	bool *HttpSupportInformation;	/* optional attribute */
	bool *StorageConfiguration;	/* optional attribute */
	int *MaxStorageConfigurations;	/* optional attribute */
	int *GeoLocationEntries;	/* optional attribute */
	std::string *AutoGeo;	/* optional attribute */
	std::string *StorageTypesSupported;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1212; } /* = unique type id SOAP_TYPE_tds__SystemCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tds__SystemCapabilities() { tds__SystemCapabilities::soap_default(NULL); }
	virtual ~tds__SystemCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tds__MiscCapabilities
#define SOAP_TYPE_tds__MiscCapabilities (1213)
/* Primitive tds:MiscCapabilities schema type: */
class SOAP_CMAC tds__MiscCapabilities : public xsd__anyType
{
public:
	std::string *AuxiliaryCommands;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1213; } /* = unique type id SOAP_TYPE_tds__MiscCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tds__MiscCapabilities() { tds__MiscCapabilities::soap_default(NULL); }
	virtual ~tds__MiscCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__tds__UserCredential_Extension
#define SOAP_TYPE__tds__UserCredential_Extension (2991)
/* tds:UserCredential-Extension */
class SOAP_CMAC _tds__UserCredential_Extension
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 2991; } /* = unique type id SOAP_TYPE__tds__UserCredential_Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__UserCredential_Extension() { _tds__UserCredential_Extension::soap_default(NULL); }
	virtual ~_tds__UserCredential_Extension() { }
};
#endif

#ifndef SOAP_TYPE_tds__UserCredential
#define SOAP_TYPE_tds__UserCredential (1214)
/* tds:UserCredential */
class SOAP_CMAC tds__UserCredential : public xsd__anyType
{
public:
	std::string UserName;	/* required element of type xsd:string */
	std::string *Password;	/* optional element of type xsd:string */
	_tds__UserCredential_Extension *Extension;	/* optional element of type tds:UserCredential-Extension */
public:
	virtual int soap_type() const { return 1214; } /* = unique type id SOAP_TYPE_tds__UserCredential */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tds__UserCredential() { tds__UserCredential::soap_default(NULL); }
	virtual ~tds__UserCredential() { }
};
#endif

#ifndef SOAP_TYPE__tds__StorageConfigurationData_Extension
#define SOAP_TYPE__tds__StorageConfigurationData_Extension (2994)
/* tds:StorageConfigurationData-Extension */
class SOAP_CMAC _tds__StorageConfigurationData_Extension
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 2994; } /* = unique type id SOAP_TYPE__tds__StorageConfigurationData_Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__StorageConfigurationData_Extension() { _tds__StorageConfigurationData_Extension::soap_default(NULL); }
	virtual ~_tds__StorageConfigurationData_Extension() { }
};
#endif

#ifndef SOAP_TYPE_tds__StorageConfigurationData
#define SOAP_TYPE_tds__StorageConfigurationData (1215)
/* tds:StorageConfigurationData */
class SOAP_CMAC tds__StorageConfigurationData : public xsd__anyType
{
public:
	std::string *LocalPath;	/* optional element of type xsd:anyURI */
	std::string *StorageUri;	/* optional element of type xsd:anyURI */
	tds__UserCredential *User;	/* optional element of type tds:UserCredential */
	_tds__StorageConfigurationData_Extension *Extension;	/* optional element of type tds:StorageConfigurationData-Extension */
	std::string type;	/* required attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1215; } /* = unique type id SOAP_TYPE_tds__StorageConfigurationData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tds__StorageConfigurationData() { tds__StorageConfigurationData::soap_default(NULL); }
	virtual ~tds__StorageConfigurationData() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetServices
#define SOAP_TYPE__tds__GetServices (1217)
/* tds:GetServices */
class SOAP_CMAC _tds__GetServices
{
public:
	bool IncludeCapability;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1217; } /* = unique type id SOAP_TYPE__tds__GetServices */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetServices() { _tds__GetServices::soap_default(NULL); }
	virtual ~_tds__GetServices() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetServicesResponse
#define SOAP_TYPE__tds__GetServicesResponse (1218)
/* tds:GetServicesResponse */
class SOAP_CMAC _tds__GetServicesResponse
{
public:
	std::vector<tds__Service * >Service;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tds:Service */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1218; } /* = unique type id SOAP_TYPE__tds__GetServicesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetServicesResponse() { _tds__GetServicesResponse::soap_default(NULL); }
	virtual ~_tds__GetServicesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetServiceCapabilities
#define SOAP_TYPE__tds__GetServiceCapabilities (1219)
/* tds:GetServiceCapabilities */
class SOAP_CMAC _tds__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1219; } /* = unique type id SOAP_TYPE__tds__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetServiceCapabilities() { _tds__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_tds__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tds__GetServiceCapabilitiesResponse (1220)
/* tds:GetServiceCapabilitiesResponse */
class SOAP_CMAC _tds__GetServiceCapabilitiesResponse
{
public:
	tds__DeviceServiceCapabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tds:DeviceServiceCapabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1220; } /* = unique type id SOAP_TYPE__tds__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetServiceCapabilitiesResponse() { _tds__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_tds__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDeviceInformation
#define SOAP_TYPE__tds__GetDeviceInformation (1221)
/* tds:GetDeviceInformation */
class SOAP_CMAC _tds__GetDeviceInformation
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1221; } /* = unique type id SOAP_TYPE__tds__GetDeviceInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDeviceInformation() { _tds__GetDeviceInformation::soap_default(NULL); }
	virtual ~_tds__GetDeviceInformation() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDeviceInformationResponse
#define SOAP_TYPE__tds__GetDeviceInformationResponse (1222)
/* tds:GetDeviceInformationResponse */
class SOAP_CMAC _tds__GetDeviceInformationResponse
{
public:
	std::string Manufacturer;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string Model;	/* required element of type xsd:string */
	std::string FirmwareVersion;	/* required element of type xsd:string */
	std::string SerialNumber;	/* required element of type xsd:string */
	std::string HardwareId;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1222; } /* = unique type id SOAP_TYPE__tds__GetDeviceInformationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDeviceInformationResponse() { _tds__GetDeviceInformationResponse::soap_default(NULL); }
	virtual ~_tds__GetDeviceInformationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetSystemDateAndTime
#define SOAP_TYPE__tds__SetSystemDateAndTime (1223)
/* tds:SetSystemDateAndTime */
class SOAP_CMAC _tds__SetSystemDateAndTime
{
public:
	enum tt__SetDateTimeType DateTimeType;	/* required element of type tt:SetDateTimeType */
	bool DaylightSavings;	/* required element of type xsd:boolean */
	tt__TimeZone *TimeZone;	/* optional element of type tt:TimeZone */
	tt__DateTime *UTCDateTime;	/* optional element of type tt:DateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1223; } /* = unique type id SOAP_TYPE__tds__SetSystemDateAndTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetSystemDateAndTime() { _tds__SetSystemDateAndTime::soap_default(NULL); }
	virtual ~_tds__SetSystemDateAndTime() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetSystemDateAndTimeResponse
#define SOAP_TYPE__tds__SetSystemDateAndTimeResponse (1224)
/* tds:SetSystemDateAndTimeResponse */
class SOAP_CMAC _tds__SetSystemDateAndTimeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1224; } /* = unique type id SOAP_TYPE__tds__SetSystemDateAndTimeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetSystemDateAndTimeResponse() { _tds__SetSystemDateAndTimeResponse::soap_default(NULL); }
	virtual ~_tds__SetSystemDateAndTimeResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemDateAndTime
#define SOAP_TYPE__tds__GetSystemDateAndTime (1225)
/* tds:GetSystemDateAndTime */
class SOAP_CMAC _tds__GetSystemDateAndTime
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1225; } /* = unique type id SOAP_TYPE__tds__GetSystemDateAndTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemDateAndTime() { _tds__GetSystemDateAndTime::soap_default(NULL); }
	virtual ~_tds__GetSystemDateAndTime() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemDateAndTimeResponse
#define SOAP_TYPE__tds__GetSystemDateAndTimeResponse (1226)
/* tds:GetSystemDateAndTimeResponse */
class SOAP_CMAC _tds__GetSystemDateAndTimeResponse
{
public:
	tt__SystemDateTime *SystemDateAndTime;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:SystemDateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1226; } /* = unique type id SOAP_TYPE__tds__GetSystemDateAndTimeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemDateAndTimeResponse() { _tds__GetSystemDateAndTimeResponse::soap_default(NULL); }
	virtual ~_tds__GetSystemDateAndTimeResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetSystemFactoryDefault
#define SOAP_TYPE__tds__SetSystemFactoryDefault (1227)
/* tds:SetSystemFactoryDefault */
class SOAP_CMAC _tds__SetSystemFactoryDefault
{
public:
	enum tt__FactoryDefaultType FactoryDefault;	/* required element of type tt:FactoryDefaultType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1227; } /* = unique type id SOAP_TYPE__tds__SetSystemFactoryDefault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetSystemFactoryDefault() { _tds__SetSystemFactoryDefault::soap_default(NULL); }
	virtual ~_tds__SetSystemFactoryDefault() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetSystemFactoryDefaultResponse
#define SOAP_TYPE__tds__SetSystemFactoryDefaultResponse (1228)
/* tds:SetSystemFactoryDefaultResponse */
class SOAP_CMAC _tds__SetSystemFactoryDefaultResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1228; } /* = unique type id SOAP_TYPE__tds__SetSystemFactoryDefaultResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetSystemFactoryDefaultResponse() { _tds__SetSystemFactoryDefaultResponse::soap_default(NULL); }
	virtual ~_tds__SetSystemFactoryDefaultResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__UpgradeSystemFirmware
#define SOAP_TYPE__tds__UpgradeSystemFirmware (1229)
/* tds:UpgradeSystemFirmware */
class SOAP_CMAC _tds__UpgradeSystemFirmware
{
public:
	tt__AttachmentData *Firmware;	/* required element of type tt:AttachmentData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1229; } /* = unique type id SOAP_TYPE__tds__UpgradeSystemFirmware */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__UpgradeSystemFirmware() { _tds__UpgradeSystemFirmware::soap_default(NULL); }
	virtual ~_tds__UpgradeSystemFirmware() { }
};
#endif

#ifndef SOAP_TYPE__tds__UpgradeSystemFirmwareResponse
#define SOAP_TYPE__tds__UpgradeSystemFirmwareResponse (1230)
/* tds:UpgradeSystemFirmwareResponse */
class SOAP_CMAC _tds__UpgradeSystemFirmwareResponse
{
public:
	std::string *Message;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1230; } /* = unique type id SOAP_TYPE__tds__UpgradeSystemFirmwareResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__UpgradeSystemFirmwareResponse() { _tds__UpgradeSystemFirmwareResponse::soap_default(NULL); }
	virtual ~_tds__UpgradeSystemFirmwareResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SystemReboot
#define SOAP_TYPE__tds__SystemReboot (1231)
/* tds:SystemReboot */
class SOAP_CMAC _tds__SystemReboot
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1231; } /* = unique type id SOAP_TYPE__tds__SystemReboot */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SystemReboot() { _tds__SystemReboot::soap_default(NULL); }
	virtual ~_tds__SystemReboot() { }
};
#endif

#ifndef SOAP_TYPE__tds__SystemRebootResponse
#define SOAP_TYPE__tds__SystemRebootResponse (1232)
/* tds:SystemRebootResponse */
class SOAP_CMAC _tds__SystemRebootResponse
{
public:
	std::string Message;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1232; } /* = unique type id SOAP_TYPE__tds__SystemRebootResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SystemRebootResponse() { _tds__SystemRebootResponse::soap_default(NULL); }
	virtual ~_tds__SystemRebootResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__RestoreSystem
#define SOAP_TYPE__tds__RestoreSystem (1233)
/* tds:RestoreSystem */
class SOAP_CMAC _tds__RestoreSystem
{
public:
	std::vector<tt__BackupFile * >BackupFiles;	/* required element of type tt:BackupFile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1233; } /* = unique type id SOAP_TYPE__tds__RestoreSystem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__RestoreSystem() { _tds__RestoreSystem::soap_default(NULL); }
	virtual ~_tds__RestoreSystem() { }
};
#endif

#ifndef SOAP_TYPE__tds__RestoreSystemResponse
#define SOAP_TYPE__tds__RestoreSystemResponse (1234)
/* tds:RestoreSystemResponse */
class SOAP_CMAC _tds__RestoreSystemResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1234; } /* = unique type id SOAP_TYPE__tds__RestoreSystemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__RestoreSystemResponse() { _tds__RestoreSystemResponse::soap_default(NULL); }
	virtual ~_tds__RestoreSystemResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemBackup
#define SOAP_TYPE__tds__GetSystemBackup (1235)
/* tds:GetSystemBackup */
class SOAP_CMAC _tds__GetSystemBackup
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1235; } /* = unique type id SOAP_TYPE__tds__GetSystemBackup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemBackup() { _tds__GetSystemBackup::soap_default(NULL); }
	virtual ~_tds__GetSystemBackup() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemBackupResponse
#define SOAP_TYPE__tds__GetSystemBackupResponse (1236)
/* tds:GetSystemBackupResponse */
class SOAP_CMAC _tds__GetSystemBackupResponse
{
public:
	std::vector<tt__BackupFile * >BackupFiles;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:BackupFile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1236; } /* = unique type id SOAP_TYPE__tds__GetSystemBackupResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemBackupResponse() { _tds__GetSystemBackupResponse::soap_default(NULL); }
	virtual ~_tds__GetSystemBackupResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemSupportInformation
#define SOAP_TYPE__tds__GetSystemSupportInformation (1237)
/* tds:GetSystemSupportInformation */
class SOAP_CMAC _tds__GetSystemSupportInformation
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1237; } /* = unique type id SOAP_TYPE__tds__GetSystemSupportInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemSupportInformation() { _tds__GetSystemSupportInformation::soap_default(NULL); }
	virtual ~_tds__GetSystemSupportInformation() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemSupportInformationResponse
#define SOAP_TYPE__tds__GetSystemSupportInformationResponse (1238)
/* tds:GetSystemSupportInformationResponse */
class SOAP_CMAC _tds__GetSystemSupportInformationResponse
{
public:
	tt__SupportInformation *SupportInformation;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:SupportInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1238; } /* = unique type id SOAP_TYPE__tds__GetSystemSupportInformationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemSupportInformationResponse() { _tds__GetSystemSupportInformationResponse::soap_default(NULL); }
	virtual ~_tds__GetSystemSupportInformationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemLog
#define SOAP_TYPE__tds__GetSystemLog (1239)
/* tds:GetSystemLog */
class SOAP_CMAC _tds__GetSystemLog
{
public:
	enum tt__SystemLogType LogType;	/* required element of type tt:SystemLogType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1239; } /* = unique type id SOAP_TYPE__tds__GetSystemLog */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemLog() { _tds__GetSystemLog::soap_default(NULL); }
	virtual ~_tds__GetSystemLog() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemLogResponse
#define SOAP_TYPE__tds__GetSystemLogResponse (1240)
/* tds:GetSystemLogResponse */
class SOAP_CMAC _tds__GetSystemLogResponse
{
public:
	tt__SystemLog *SystemLog;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:SystemLog */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1240; } /* = unique type id SOAP_TYPE__tds__GetSystemLogResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemLogResponse() { _tds__GetSystemLogResponse::soap_default(NULL); }
	virtual ~_tds__GetSystemLogResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetScopes
#define SOAP_TYPE__tds__GetScopes (1241)
/* tds:GetScopes */
class SOAP_CMAC _tds__GetScopes
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1241; } /* = unique type id SOAP_TYPE__tds__GetScopes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetScopes() { _tds__GetScopes::soap_default(NULL); }
	virtual ~_tds__GetScopes() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetScopesResponse
#define SOAP_TYPE__tds__GetScopesResponse (1242)
/* tds:GetScopesResponse */
class SOAP_CMAC _tds__GetScopesResponse
{
public:
	std::vector<tt__Scope * >Scopes;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Scope */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1242; } /* = unique type id SOAP_TYPE__tds__GetScopesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetScopesResponse() { _tds__GetScopesResponse::soap_default(NULL); }
	virtual ~_tds__GetScopesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetScopes
#define SOAP_TYPE__tds__SetScopes (1243)
/* tds:SetScopes */
class SOAP_CMAC _tds__SetScopes
{
public:
	std::vector<std::string >Scopes;	/* required element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1243; } /* = unique type id SOAP_TYPE__tds__SetScopes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetScopes() { _tds__SetScopes::soap_default(NULL); }
	virtual ~_tds__SetScopes() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetScopesResponse
#define SOAP_TYPE__tds__SetScopesResponse (1244)
/* tds:SetScopesResponse */
class SOAP_CMAC _tds__SetScopesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1244; } /* = unique type id SOAP_TYPE__tds__SetScopesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetScopesResponse() { _tds__SetScopesResponse::soap_default(NULL); }
	virtual ~_tds__SetScopesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__AddScopes
#define SOAP_TYPE__tds__AddScopes (1245)
/* tds:AddScopes */
class SOAP_CMAC _tds__AddScopes
{
public:
	std::vector<std::string >ScopeItem;	/* required element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1245; } /* = unique type id SOAP_TYPE__tds__AddScopes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__AddScopes() { _tds__AddScopes::soap_default(NULL); }
	virtual ~_tds__AddScopes() { }
};
#endif

#ifndef SOAP_TYPE__tds__AddScopesResponse
#define SOAP_TYPE__tds__AddScopesResponse (1246)
/* tds:AddScopesResponse */
class SOAP_CMAC _tds__AddScopesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1246; } /* = unique type id SOAP_TYPE__tds__AddScopesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__AddScopesResponse() { _tds__AddScopesResponse::soap_default(NULL); }
	virtual ~_tds__AddScopesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__RemoveScopes
#define SOAP_TYPE__tds__RemoveScopes (1247)
/* tds:RemoveScopes */
class SOAP_CMAC _tds__RemoveScopes
{
public:
	std::vector<std::string >ScopeItem;	/* required element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1247; } /* = unique type id SOAP_TYPE__tds__RemoveScopes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__RemoveScopes() { _tds__RemoveScopes::soap_default(NULL); }
	virtual ~_tds__RemoveScopes() { }
};
#endif

#ifndef SOAP_TYPE__tds__RemoveScopesResponse
#define SOAP_TYPE__tds__RemoveScopesResponse (1248)
/* tds:RemoveScopesResponse */
class SOAP_CMAC _tds__RemoveScopesResponse
{
public:
	std::vector<std::string >ScopeItem;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1248; } /* = unique type id SOAP_TYPE__tds__RemoveScopesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__RemoveScopesResponse() { _tds__RemoveScopesResponse::soap_default(NULL); }
	virtual ~_tds__RemoveScopesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDiscoveryMode
#define SOAP_TYPE__tds__GetDiscoveryMode (1249)
/* tds:GetDiscoveryMode */
class SOAP_CMAC _tds__GetDiscoveryMode
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1249; } /* = unique type id SOAP_TYPE__tds__GetDiscoveryMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDiscoveryMode() { _tds__GetDiscoveryMode::soap_default(NULL); }
	virtual ~_tds__GetDiscoveryMode() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDiscoveryModeResponse
#define SOAP_TYPE__tds__GetDiscoveryModeResponse (1250)
/* tds:GetDiscoveryModeResponse */
class SOAP_CMAC _tds__GetDiscoveryModeResponse
{
public:
	enum tt__DiscoveryMode DiscoveryMode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:DiscoveryMode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1250; } /* = unique type id SOAP_TYPE__tds__GetDiscoveryModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDiscoveryModeResponse() { _tds__GetDiscoveryModeResponse::soap_default(NULL); }
	virtual ~_tds__GetDiscoveryModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetDiscoveryMode
#define SOAP_TYPE__tds__SetDiscoveryMode (1251)
/* tds:SetDiscoveryMode */
class SOAP_CMAC _tds__SetDiscoveryMode
{
public:
	enum tt__DiscoveryMode DiscoveryMode;	/* required element of type tt:DiscoveryMode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1251; } /* = unique type id SOAP_TYPE__tds__SetDiscoveryMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetDiscoveryMode() { _tds__SetDiscoveryMode::soap_default(NULL); }
	virtual ~_tds__SetDiscoveryMode() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetDiscoveryModeResponse
#define SOAP_TYPE__tds__SetDiscoveryModeResponse (1252)
/* tds:SetDiscoveryModeResponse */
class SOAP_CMAC _tds__SetDiscoveryModeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1252; } /* = unique type id SOAP_TYPE__tds__SetDiscoveryModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetDiscoveryModeResponse() { _tds__SetDiscoveryModeResponse::soap_default(NULL); }
	virtual ~_tds__SetDiscoveryModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetRemoteDiscoveryMode
#define SOAP_TYPE__tds__GetRemoteDiscoveryMode (1253)
/* tds:GetRemoteDiscoveryMode */
class SOAP_CMAC _tds__GetRemoteDiscoveryMode
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1253; } /* = unique type id SOAP_TYPE__tds__GetRemoteDiscoveryMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetRemoteDiscoveryMode() { _tds__GetRemoteDiscoveryMode::soap_default(NULL); }
	virtual ~_tds__GetRemoteDiscoveryMode() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse
#define SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse (1254)
/* tds:GetRemoteDiscoveryModeResponse */
class SOAP_CMAC _tds__GetRemoteDiscoveryModeResponse
{
public:
	enum tt__DiscoveryMode RemoteDiscoveryMode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:DiscoveryMode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1254; } /* = unique type id SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetRemoteDiscoveryModeResponse() { _tds__GetRemoteDiscoveryModeResponse::soap_default(NULL); }
	virtual ~_tds__GetRemoteDiscoveryModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetRemoteDiscoveryMode
#define SOAP_TYPE__tds__SetRemoteDiscoveryMode (1255)
/* tds:SetRemoteDiscoveryMode */
class SOAP_CMAC _tds__SetRemoteDiscoveryMode
{
public:
	enum tt__DiscoveryMode RemoteDiscoveryMode;	/* required element of type tt:DiscoveryMode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1255; } /* = unique type id SOAP_TYPE__tds__SetRemoteDiscoveryMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetRemoteDiscoveryMode() { _tds__SetRemoteDiscoveryMode::soap_default(NULL); }
	virtual ~_tds__SetRemoteDiscoveryMode() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse
#define SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse (1256)
/* tds:SetRemoteDiscoveryModeResponse */
class SOAP_CMAC _tds__SetRemoteDiscoveryModeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1256; } /* = unique type id SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetRemoteDiscoveryModeResponse() { _tds__SetRemoteDiscoveryModeResponse::soap_default(NULL); }
	virtual ~_tds__SetRemoteDiscoveryModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDPAddresses
#define SOAP_TYPE__tds__GetDPAddresses (1257)
/* tds:GetDPAddresses */
class SOAP_CMAC _tds__GetDPAddresses
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1257; } /* = unique type id SOAP_TYPE__tds__GetDPAddresses */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDPAddresses() { _tds__GetDPAddresses::soap_default(NULL); }
	virtual ~_tds__GetDPAddresses() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDPAddressesResponse
#define SOAP_TYPE__tds__GetDPAddressesResponse (1258)
/* tds:GetDPAddressesResponse */
class SOAP_CMAC _tds__GetDPAddressesResponse
{
public:
	std::vector<tt__NetworkHost * >DPAddress;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:NetworkHost */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1258; } /* = unique type id SOAP_TYPE__tds__GetDPAddressesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDPAddressesResponse() { _tds__GetDPAddressesResponse::soap_default(NULL); }
	virtual ~_tds__GetDPAddressesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetDPAddresses
#define SOAP_TYPE__tds__SetDPAddresses (1259)
/* tds:SetDPAddresses */
class SOAP_CMAC _tds__SetDPAddresses
{
public:
	std::vector<tt__NetworkHost * >DPAddress;	/* optional element of type tt:NetworkHost */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1259; } /* = unique type id SOAP_TYPE__tds__SetDPAddresses */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetDPAddresses() { _tds__SetDPAddresses::soap_default(NULL); }
	virtual ~_tds__SetDPAddresses() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetDPAddressesResponse
#define SOAP_TYPE__tds__SetDPAddressesResponse (1260)
/* tds:SetDPAddressesResponse */
class SOAP_CMAC _tds__SetDPAddressesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1260; } /* = unique type id SOAP_TYPE__tds__SetDPAddressesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetDPAddressesResponse() { _tds__SetDPAddressesResponse::soap_default(NULL); }
	virtual ~_tds__SetDPAddressesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetEndpointReference
#define SOAP_TYPE__tds__GetEndpointReference (1261)
/* tds:GetEndpointReference */
class SOAP_CMAC _tds__GetEndpointReference
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1261; } /* = unique type id SOAP_TYPE__tds__GetEndpointReference */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetEndpointReference() { _tds__GetEndpointReference::soap_default(NULL); }
	virtual ~_tds__GetEndpointReference() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetEndpointReferenceResponse
#define SOAP_TYPE__tds__GetEndpointReferenceResponse (1262)
/* tds:GetEndpointReferenceResponse */
class SOAP_CMAC _tds__GetEndpointReferenceResponse
{
public:
	std::string GUID;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1262; } /* = unique type id SOAP_TYPE__tds__GetEndpointReferenceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetEndpointReferenceResponse() { _tds__GetEndpointReferenceResponse::soap_default(NULL); }
	virtual ~_tds__GetEndpointReferenceResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetRemoteUser
#define SOAP_TYPE__tds__GetRemoteUser (1263)
/* tds:GetRemoteUser */
class SOAP_CMAC _tds__GetRemoteUser
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1263; } /* = unique type id SOAP_TYPE__tds__GetRemoteUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetRemoteUser() { _tds__GetRemoteUser::soap_default(NULL); }
	virtual ~_tds__GetRemoteUser() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetRemoteUserResponse
#define SOAP_TYPE__tds__GetRemoteUserResponse (1264)
/* tds:GetRemoteUserResponse */
class SOAP_CMAC _tds__GetRemoteUserResponse
{
public:
	tt__RemoteUser *RemoteUser;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:RemoteUser */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1264; } /* = unique type id SOAP_TYPE__tds__GetRemoteUserResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetRemoteUserResponse() { _tds__GetRemoteUserResponse::soap_default(NULL); }
	virtual ~_tds__GetRemoteUserResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetRemoteUser
#define SOAP_TYPE__tds__SetRemoteUser (1265)
/* tds:SetRemoteUser */
class SOAP_CMAC _tds__SetRemoteUser
{
public:
	tt__RemoteUser *RemoteUser;	/* optional element of type tt:RemoteUser */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1265; } /* = unique type id SOAP_TYPE__tds__SetRemoteUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetRemoteUser() { _tds__SetRemoteUser::soap_default(NULL); }
	virtual ~_tds__SetRemoteUser() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetRemoteUserResponse
#define SOAP_TYPE__tds__SetRemoteUserResponse (1266)
/* tds:SetRemoteUserResponse */
class SOAP_CMAC _tds__SetRemoteUserResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1266; } /* = unique type id SOAP_TYPE__tds__SetRemoteUserResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetRemoteUserResponse() { _tds__SetRemoteUserResponse::soap_default(NULL); }
	virtual ~_tds__SetRemoteUserResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetUsers
#define SOAP_TYPE__tds__GetUsers (1267)
/* tds:GetUsers */
class SOAP_CMAC _tds__GetUsers
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1267; } /* = unique type id SOAP_TYPE__tds__GetUsers */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetUsers() { _tds__GetUsers::soap_default(NULL); }
	virtual ~_tds__GetUsers() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetUsersResponse
#define SOAP_TYPE__tds__GetUsersResponse (1268)
/* tds:GetUsersResponse */
class SOAP_CMAC _tds__GetUsersResponse
{
public:
	std::vector<tt__User * >User;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:User */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1268; } /* = unique type id SOAP_TYPE__tds__GetUsersResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetUsersResponse() { _tds__GetUsersResponse::soap_default(NULL); }
	virtual ~_tds__GetUsersResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__CreateUsers
#define SOAP_TYPE__tds__CreateUsers (1269)
/* tds:CreateUsers */
class SOAP_CMAC _tds__CreateUsers
{
public:
	std::vector<tt__User * >User;	/* required element of type tt:User */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1269; } /* = unique type id SOAP_TYPE__tds__CreateUsers */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__CreateUsers() { _tds__CreateUsers::soap_default(NULL); }
	virtual ~_tds__CreateUsers() { }
};
#endif

#ifndef SOAP_TYPE__tds__CreateUsersResponse
#define SOAP_TYPE__tds__CreateUsersResponse (1270)
/* tds:CreateUsersResponse */
class SOAP_CMAC _tds__CreateUsersResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1270; } /* = unique type id SOAP_TYPE__tds__CreateUsersResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__CreateUsersResponse() { _tds__CreateUsersResponse::soap_default(NULL); }
	virtual ~_tds__CreateUsersResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__DeleteUsers
#define SOAP_TYPE__tds__DeleteUsers (1271)
/* tds:DeleteUsers */
class SOAP_CMAC _tds__DeleteUsers
{
public:
	std::vector<std::string >Username;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1271; } /* = unique type id SOAP_TYPE__tds__DeleteUsers */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__DeleteUsers() { _tds__DeleteUsers::soap_default(NULL); }
	virtual ~_tds__DeleteUsers() { }
};
#endif

#ifndef SOAP_TYPE__tds__DeleteUsersResponse
#define SOAP_TYPE__tds__DeleteUsersResponse (1272)
/* tds:DeleteUsersResponse */
class SOAP_CMAC _tds__DeleteUsersResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1272; } /* = unique type id SOAP_TYPE__tds__DeleteUsersResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__DeleteUsersResponse() { _tds__DeleteUsersResponse::soap_default(NULL); }
	virtual ~_tds__DeleteUsersResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetUser
#define SOAP_TYPE__tds__SetUser (1273)
/* tds:SetUser */
class SOAP_CMAC _tds__SetUser
{
public:
	std::vector<tt__User * >User;	/* required element of type tt:User */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1273; } /* = unique type id SOAP_TYPE__tds__SetUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetUser() { _tds__SetUser::soap_default(NULL); }
	virtual ~_tds__SetUser() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetUserResponse
#define SOAP_TYPE__tds__SetUserResponse (1274)
/* tds:SetUserResponse */
class SOAP_CMAC _tds__SetUserResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1274; } /* = unique type id SOAP_TYPE__tds__SetUserResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetUserResponse() { _tds__SetUserResponse::soap_default(NULL); }
	virtual ~_tds__SetUserResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetWsdlUrl
#define SOAP_TYPE__tds__GetWsdlUrl (1275)
/* tds:GetWsdlUrl */
class SOAP_CMAC _tds__GetWsdlUrl
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1275; } /* = unique type id SOAP_TYPE__tds__GetWsdlUrl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetWsdlUrl() { _tds__GetWsdlUrl::soap_default(NULL); }
	virtual ~_tds__GetWsdlUrl() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetWsdlUrlResponse
#define SOAP_TYPE__tds__GetWsdlUrlResponse (1276)
/* tds:GetWsdlUrlResponse */
class SOAP_CMAC _tds__GetWsdlUrlResponse
{
public:
	std::string WsdlUrl;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1276; } /* = unique type id SOAP_TYPE__tds__GetWsdlUrlResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetWsdlUrlResponse() { _tds__GetWsdlUrlResponse::soap_default(NULL); }
	virtual ~_tds__GetWsdlUrlResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetCapabilities
#define SOAP_TYPE__tds__GetCapabilities (1277)
/* tds:GetCapabilities */
class SOAP_CMAC _tds__GetCapabilities
{
public:
	std::vector<enum tt__CapabilityCategory >Category;	/* optional element of type tt:CapabilityCategory */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1277; } /* = unique type id SOAP_TYPE__tds__GetCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetCapabilities() { _tds__GetCapabilities::soap_default(NULL); }
	virtual ~_tds__GetCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetCapabilitiesResponse
#define SOAP_TYPE__tds__GetCapabilitiesResponse (1278)
/* tds:GetCapabilitiesResponse */
class SOAP_CMAC _tds__GetCapabilitiesResponse
{
public:
	tt__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1278; } /* = unique type id SOAP_TYPE__tds__GetCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetCapabilitiesResponse() { _tds__GetCapabilitiesResponse::soap_default(NULL); }
	virtual ~_tds__GetCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetHostname
#define SOAP_TYPE__tds__GetHostname (1279)
/* tds:GetHostname */
class SOAP_CMAC _tds__GetHostname
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1279; } /* = unique type id SOAP_TYPE__tds__GetHostname */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetHostname() { _tds__GetHostname::soap_default(NULL); }
	virtual ~_tds__GetHostname() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetHostnameResponse
#define SOAP_TYPE__tds__GetHostnameResponse (1280)
/* tds:GetHostnameResponse */
class SOAP_CMAC _tds__GetHostnameResponse
{
public:
	tt__HostnameInformation *HostnameInformation;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:HostnameInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1280; } /* = unique type id SOAP_TYPE__tds__GetHostnameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetHostnameResponse() { _tds__GetHostnameResponse::soap_default(NULL); }
	virtual ~_tds__GetHostnameResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetHostname
#define SOAP_TYPE__tds__SetHostname (1281)
/* tds:SetHostname */
class SOAP_CMAC _tds__SetHostname
{
public:
	std::string Name;	/* required element of type xsd:token */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1281; } /* = unique type id SOAP_TYPE__tds__SetHostname */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetHostname() { _tds__SetHostname::soap_default(NULL); }
	virtual ~_tds__SetHostname() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetHostnameResponse
#define SOAP_TYPE__tds__SetHostnameResponse (1282)
/* tds:SetHostnameResponse */
class SOAP_CMAC _tds__SetHostnameResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1282; } /* = unique type id SOAP_TYPE__tds__SetHostnameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetHostnameResponse() { _tds__SetHostnameResponse::soap_default(NULL); }
	virtual ~_tds__SetHostnameResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetHostnameFromDHCP
#define SOAP_TYPE__tds__SetHostnameFromDHCP (1283)
/* tds:SetHostnameFromDHCP */
class SOAP_CMAC _tds__SetHostnameFromDHCP
{
public:
	bool FromDHCP;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1283; } /* = unique type id SOAP_TYPE__tds__SetHostnameFromDHCP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetHostnameFromDHCP() { _tds__SetHostnameFromDHCP::soap_default(NULL); }
	virtual ~_tds__SetHostnameFromDHCP() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetHostnameFromDHCPResponse
#define SOAP_TYPE__tds__SetHostnameFromDHCPResponse (1284)
/* tds:SetHostnameFromDHCPResponse */
class SOAP_CMAC _tds__SetHostnameFromDHCPResponse
{
public:
	bool RebootNeeded;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1284; } /* = unique type id SOAP_TYPE__tds__SetHostnameFromDHCPResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetHostnameFromDHCPResponse() { _tds__SetHostnameFromDHCPResponse::soap_default(NULL); }
	virtual ~_tds__SetHostnameFromDHCPResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDNS
#define SOAP_TYPE__tds__GetDNS (1285)
/* tds:GetDNS */
class SOAP_CMAC _tds__GetDNS
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1285; } /* = unique type id SOAP_TYPE__tds__GetDNS */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDNS() { _tds__GetDNS::soap_default(NULL); }
	virtual ~_tds__GetDNS() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDNSResponse
#define SOAP_TYPE__tds__GetDNSResponse (1286)
/* tds:GetDNSResponse */
class SOAP_CMAC _tds__GetDNSResponse
{
public:
	tt__DNSInformation *DNSInformation;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:DNSInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1286; } /* = unique type id SOAP_TYPE__tds__GetDNSResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDNSResponse() { _tds__GetDNSResponse::soap_default(NULL); }
	virtual ~_tds__GetDNSResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetDNS
#define SOAP_TYPE__tds__SetDNS (1287)
/* tds:SetDNS */
class SOAP_CMAC _tds__SetDNS
{
public:
	bool FromDHCP;	/* required element of type xsd:boolean */
	std::vector<std::string >SearchDomain;	/* optional element of type xsd:token */
	std::vector<tt__IPAddress * >DNSManual;	/* optional element of type tt:IPAddress */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1287; } /* = unique type id SOAP_TYPE__tds__SetDNS */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetDNS() { _tds__SetDNS::soap_default(NULL); }
	virtual ~_tds__SetDNS() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetDNSResponse
#define SOAP_TYPE__tds__SetDNSResponse (1288)
/* tds:SetDNSResponse */
class SOAP_CMAC _tds__SetDNSResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1288; } /* = unique type id SOAP_TYPE__tds__SetDNSResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetDNSResponse() { _tds__SetDNSResponse::soap_default(NULL); }
	virtual ~_tds__SetDNSResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetNTP
#define SOAP_TYPE__tds__GetNTP (1289)
/* tds:GetNTP */
class SOAP_CMAC _tds__GetNTP
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1289; } /* = unique type id SOAP_TYPE__tds__GetNTP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetNTP() { _tds__GetNTP::soap_default(NULL); }
	virtual ~_tds__GetNTP() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetNTPResponse
#define SOAP_TYPE__tds__GetNTPResponse (1290)
/* tds:GetNTPResponse */
class SOAP_CMAC _tds__GetNTPResponse
{
public:
	tt__NTPInformation *NTPInformation;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:NTPInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1290; } /* = unique type id SOAP_TYPE__tds__GetNTPResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetNTPResponse() { _tds__GetNTPResponse::soap_default(NULL); }
	virtual ~_tds__GetNTPResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetNTP
#define SOAP_TYPE__tds__SetNTP (1291)
/* tds:SetNTP */
class SOAP_CMAC _tds__SetNTP
{
public:
	bool FromDHCP;	/* required element of type xsd:boolean */
	std::vector<tt__NetworkHost * >NTPManual;	/* optional element of type tt:NetworkHost */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1291; } /* = unique type id SOAP_TYPE__tds__SetNTP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetNTP() { _tds__SetNTP::soap_default(NULL); }
	virtual ~_tds__SetNTP() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetNTPResponse
#define SOAP_TYPE__tds__SetNTPResponse (1292)
/* tds:SetNTPResponse */
class SOAP_CMAC _tds__SetNTPResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1292; } /* = unique type id SOAP_TYPE__tds__SetNTPResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetNTPResponse() { _tds__SetNTPResponse::soap_default(NULL); }
	virtual ~_tds__SetNTPResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDynamicDNS
#define SOAP_TYPE__tds__GetDynamicDNS (1293)
/* tds:GetDynamicDNS */
class SOAP_CMAC _tds__GetDynamicDNS
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1293; } /* = unique type id SOAP_TYPE__tds__GetDynamicDNS */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDynamicDNS() { _tds__GetDynamicDNS::soap_default(NULL); }
	virtual ~_tds__GetDynamicDNS() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDynamicDNSResponse
#define SOAP_TYPE__tds__GetDynamicDNSResponse (1294)
/* tds:GetDynamicDNSResponse */
class SOAP_CMAC _tds__GetDynamicDNSResponse
{
public:
	tt__DynamicDNSInformation *DynamicDNSInformation;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:DynamicDNSInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1294; } /* = unique type id SOAP_TYPE__tds__GetDynamicDNSResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDynamicDNSResponse() { _tds__GetDynamicDNSResponse::soap_default(NULL); }
	virtual ~_tds__GetDynamicDNSResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetDynamicDNS
#define SOAP_TYPE__tds__SetDynamicDNS (1295)
/* tds:SetDynamicDNS */
class SOAP_CMAC _tds__SetDynamicDNS
{
public:
	enum tt__DynamicDNSType Type;	/* required element of type tt:DynamicDNSType */
	std::string *Name;	/* optional element of type tt:DNSName */
	LONG64 *TTL;	/* optional element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1295; } /* = unique type id SOAP_TYPE__tds__SetDynamicDNS */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetDynamicDNS() { _tds__SetDynamicDNS::soap_default(NULL); }
	virtual ~_tds__SetDynamicDNS() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetDynamicDNSResponse
#define SOAP_TYPE__tds__SetDynamicDNSResponse (1296)
/* tds:SetDynamicDNSResponse */
class SOAP_CMAC _tds__SetDynamicDNSResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1296; } /* = unique type id SOAP_TYPE__tds__SetDynamicDNSResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetDynamicDNSResponse() { _tds__SetDynamicDNSResponse::soap_default(NULL); }
	virtual ~_tds__SetDynamicDNSResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetNetworkInterfaces
#define SOAP_TYPE__tds__GetNetworkInterfaces (1297)
/* tds:GetNetworkInterfaces */
class SOAP_CMAC _tds__GetNetworkInterfaces
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1297; } /* = unique type id SOAP_TYPE__tds__GetNetworkInterfaces */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetNetworkInterfaces() { _tds__GetNetworkInterfaces::soap_default(NULL); }
	virtual ~_tds__GetNetworkInterfaces() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetNetworkInterfacesResponse
#define SOAP_TYPE__tds__GetNetworkInterfacesResponse (1298)
/* tds:GetNetworkInterfacesResponse */
class SOAP_CMAC _tds__GetNetworkInterfacesResponse
{
public:
	std::vector<class tt__NetworkInterface * >NetworkInterfaces;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:NetworkInterface */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1298; } /* = unique type id SOAP_TYPE__tds__GetNetworkInterfacesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetNetworkInterfacesResponse() { _tds__GetNetworkInterfacesResponse::soap_default(NULL); }
	virtual ~_tds__GetNetworkInterfacesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetNetworkInterfaces
#define SOAP_TYPE__tds__SetNetworkInterfaces (1299)
/* tds:SetNetworkInterfaces */
class SOAP_CMAC _tds__SetNetworkInterfaces
{
public:
	std::string InterfaceToken;	/* required element of type tt:ReferenceToken */
	tt__NetworkInterfaceSetConfiguration *NetworkInterface;	/* required element of type tt:NetworkInterfaceSetConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1299; } /* = unique type id SOAP_TYPE__tds__SetNetworkInterfaces */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetNetworkInterfaces() { _tds__SetNetworkInterfaces::soap_default(NULL); }
	virtual ~_tds__SetNetworkInterfaces() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetNetworkInterfacesResponse
#define SOAP_TYPE__tds__SetNetworkInterfacesResponse (1300)
/* tds:SetNetworkInterfacesResponse */
class SOAP_CMAC _tds__SetNetworkInterfacesResponse
{
public:
	bool RebootNeeded;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1300; } /* = unique type id SOAP_TYPE__tds__SetNetworkInterfacesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetNetworkInterfacesResponse() { _tds__SetNetworkInterfacesResponse::soap_default(NULL); }
	virtual ~_tds__SetNetworkInterfacesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetNetworkProtocols
#define SOAP_TYPE__tds__GetNetworkProtocols (1301)
/* tds:GetNetworkProtocols */
class SOAP_CMAC _tds__GetNetworkProtocols
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1301; } /* = unique type id SOAP_TYPE__tds__GetNetworkProtocols */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetNetworkProtocols() { _tds__GetNetworkProtocols::soap_default(NULL); }
	virtual ~_tds__GetNetworkProtocols() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetNetworkProtocolsResponse
#define SOAP_TYPE__tds__GetNetworkProtocolsResponse (1302)
/* tds:GetNetworkProtocolsResponse */
class SOAP_CMAC _tds__GetNetworkProtocolsResponse
{
public:
	std::vector<tt__NetworkProtocol * >NetworkProtocols;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:NetworkProtocol */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1302; } /* = unique type id SOAP_TYPE__tds__GetNetworkProtocolsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetNetworkProtocolsResponse() { _tds__GetNetworkProtocolsResponse::soap_default(NULL); }
	virtual ~_tds__GetNetworkProtocolsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetNetworkProtocols
#define SOAP_TYPE__tds__SetNetworkProtocols (1303)
/* tds:SetNetworkProtocols */
class SOAP_CMAC _tds__SetNetworkProtocols
{
public:
	std::vector<tt__NetworkProtocol * >NetworkProtocols;	/* required element of type tt:NetworkProtocol */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1303; } /* = unique type id SOAP_TYPE__tds__SetNetworkProtocols */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetNetworkProtocols() { _tds__SetNetworkProtocols::soap_default(NULL); }
	virtual ~_tds__SetNetworkProtocols() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetNetworkProtocolsResponse
#define SOAP_TYPE__tds__SetNetworkProtocolsResponse (1304)
/* tds:SetNetworkProtocolsResponse */
class SOAP_CMAC _tds__SetNetworkProtocolsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1304; } /* = unique type id SOAP_TYPE__tds__SetNetworkProtocolsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetNetworkProtocolsResponse() { _tds__SetNetworkProtocolsResponse::soap_default(NULL); }
	virtual ~_tds__SetNetworkProtocolsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetNetworkDefaultGateway
#define SOAP_TYPE__tds__GetNetworkDefaultGateway (1305)
/* tds:GetNetworkDefaultGateway */
class SOAP_CMAC _tds__GetNetworkDefaultGateway
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1305; } /* = unique type id SOAP_TYPE__tds__GetNetworkDefaultGateway */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetNetworkDefaultGateway() { _tds__GetNetworkDefaultGateway::soap_default(NULL); }
	virtual ~_tds__GetNetworkDefaultGateway() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse
#define SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse (1306)
/* tds:GetNetworkDefaultGatewayResponse */
class SOAP_CMAC _tds__GetNetworkDefaultGatewayResponse
{
public:
	tt__NetworkGateway *NetworkGateway;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:NetworkGateway */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1306; } /* = unique type id SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetNetworkDefaultGatewayResponse() { _tds__GetNetworkDefaultGatewayResponse::soap_default(NULL); }
	virtual ~_tds__GetNetworkDefaultGatewayResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetNetworkDefaultGateway
#define SOAP_TYPE__tds__SetNetworkDefaultGateway (1307)
/* tds:SetNetworkDefaultGateway */
class SOAP_CMAC _tds__SetNetworkDefaultGateway
{
public:
	std::vector<std::string >IPv4Address;	/* optional element of type tt:IPv4Address */
	std::vector<std::string >IPv6Address;	/* optional element of type tt:IPv6Address */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1307; } /* = unique type id SOAP_TYPE__tds__SetNetworkDefaultGateway */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetNetworkDefaultGateway() { _tds__SetNetworkDefaultGateway::soap_default(NULL); }
	virtual ~_tds__SetNetworkDefaultGateway() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse
#define SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse (1308)
/* tds:SetNetworkDefaultGatewayResponse */
class SOAP_CMAC _tds__SetNetworkDefaultGatewayResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1308; } /* = unique type id SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetNetworkDefaultGatewayResponse() { _tds__SetNetworkDefaultGatewayResponse::soap_default(NULL); }
	virtual ~_tds__SetNetworkDefaultGatewayResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetZeroConfiguration
#define SOAP_TYPE__tds__GetZeroConfiguration (1309)
/* tds:GetZeroConfiguration */
class SOAP_CMAC _tds__GetZeroConfiguration
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1309; } /* = unique type id SOAP_TYPE__tds__GetZeroConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetZeroConfiguration() { _tds__GetZeroConfiguration::soap_default(NULL); }
	virtual ~_tds__GetZeroConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetZeroConfigurationResponse
#define SOAP_TYPE__tds__GetZeroConfigurationResponse (1310)
/* tds:GetZeroConfigurationResponse */
class SOAP_CMAC _tds__GetZeroConfigurationResponse
{
public:
	tt__NetworkZeroConfiguration *ZeroConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:NetworkZeroConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1310; } /* = unique type id SOAP_TYPE__tds__GetZeroConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetZeroConfigurationResponse() { _tds__GetZeroConfigurationResponse::soap_default(NULL); }
	virtual ~_tds__GetZeroConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetZeroConfiguration
#define SOAP_TYPE__tds__SetZeroConfiguration (1311)
/* tds:SetZeroConfiguration */
class SOAP_CMAC _tds__SetZeroConfiguration
{
public:
	std::string InterfaceToken;	/* required element of type tt:ReferenceToken */
	bool Enabled;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1311; } /* = unique type id SOAP_TYPE__tds__SetZeroConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetZeroConfiguration() { _tds__SetZeroConfiguration::soap_default(NULL); }
	virtual ~_tds__SetZeroConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetZeroConfigurationResponse
#define SOAP_TYPE__tds__SetZeroConfigurationResponse (1312)
/* tds:SetZeroConfigurationResponse */
class SOAP_CMAC _tds__SetZeroConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1312; } /* = unique type id SOAP_TYPE__tds__SetZeroConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetZeroConfigurationResponse() { _tds__SetZeroConfigurationResponse::soap_default(NULL); }
	virtual ~_tds__SetZeroConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetIPAddressFilter
#define SOAP_TYPE__tds__GetIPAddressFilter (1313)
/* tds:GetIPAddressFilter */
class SOAP_CMAC _tds__GetIPAddressFilter
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1313; } /* = unique type id SOAP_TYPE__tds__GetIPAddressFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetIPAddressFilter() { _tds__GetIPAddressFilter::soap_default(NULL); }
	virtual ~_tds__GetIPAddressFilter() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetIPAddressFilterResponse
#define SOAP_TYPE__tds__GetIPAddressFilterResponse (1314)
/* tds:GetIPAddressFilterResponse */
class SOAP_CMAC _tds__GetIPAddressFilterResponse
{
public:
	tt__IPAddressFilter *IPAddressFilter;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:IPAddressFilter */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1314; } /* = unique type id SOAP_TYPE__tds__GetIPAddressFilterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetIPAddressFilterResponse() { _tds__GetIPAddressFilterResponse::soap_default(NULL); }
	virtual ~_tds__GetIPAddressFilterResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetIPAddressFilter
#define SOAP_TYPE__tds__SetIPAddressFilter (1315)
/* tds:SetIPAddressFilter */
class SOAP_CMAC _tds__SetIPAddressFilter
{
public:
	tt__IPAddressFilter *IPAddressFilter;	/* required element of type tt:IPAddressFilter */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1315; } /* = unique type id SOAP_TYPE__tds__SetIPAddressFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetIPAddressFilter() { _tds__SetIPAddressFilter::soap_default(NULL); }
	virtual ~_tds__SetIPAddressFilter() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetIPAddressFilterResponse
#define SOAP_TYPE__tds__SetIPAddressFilterResponse (1316)
/* tds:SetIPAddressFilterResponse */
class SOAP_CMAC _tds__SetIPAddressFilterResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1316; } /* = unique type id SOAP_TYPE__tds__SetIPAddressFilterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetIPAddressFilterResponse() { _tds__SetIPAddressFilterResponse::soap_default(NULL); }
	virtual ~_tds__SetIPAddressFilterResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__AddIPAddressFilter
#define SOAP_TYPE__tds__AddIPAddressFilter (1317)
/* tds:AddIPAddressFilter */
class SOAP_CMAC _tds__AddIPAddressFilter
{
public:
	tt__IPAddressFilter *IPAddressFilter;	/* required element of type tt:IPAddressFilter */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1317; } /* = unique type id SOAP_TYPE__tds__AddIPAddressFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__AddIPAddressFilter() { _tds__AddIPAddressFilter::soap_default(NULL); }
	virtual ~_tds__AddIPAddressFilter() { }
};
#endif

#ifndef SOAP_TYPE__tds__AddIPAddressFilterResponse
#define SOAP_TYPE__tds__AddIPAddressFilterResponse (1318)
/* tds:AddIPAddressFilterResponse */
class SOAP_CMAC _tds__AddIPAddressFilterResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1318; } /* = unique type id SOAP_TYPE__tds__AddIPAddressFilterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__AddIPAddressFilterResponse() { _tds__AddIPAddressFilterResponse::soap_default(NULL); }
	virtual ~_tds__AddIPAddressFilterResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__RemoveIPAddressFilter
#define SOAP_TYPE__tds__RemoveIPAddressFilter (1319)
/* tds:RemoveIPAddressFilter */
class SOAP_CMAC _tds__RemoveIPAddressFilter
{
public:
	tt__IPAddressFilter *IPAddressFilter;	/* required element of type tt:IPAddressFilter */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1319; } /* = unique type id SOAP_TYPE__tds__RemoveIPAddressFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__RemoveIPAddressFilter() { _tds__RemoveIPAddressFilter::soap_default(NULL); }
	virtual ~_tds__RemoveIPAddressFilter() { }
};
#endif

#ifndef SOAP_TYPE__tds__RemoveIPAddressFilterResponse
#define SOAP_TYPE__tds__RemoveIPAddressFilterResponse (1320)
/* tds:RemoveIPAddressFilterResponse */
class SOAP_CMAC _tds__RemoveIPAddressFilterResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1320; } /* = unique type id SOAP_TYPE__tds__RemoveIPAddressFilterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__RemoveIPAddressFilterResponse() { _tds__RemoveIPAddressFilterResponse::soap_default(NULL); }
	virtual ~_tds__RemoveIPAddressFilterResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetAccessPolicy
#define SOAP_TYPE__tds__GetAccessPolicy (1321)
/* tds:GetAccessPolicy */
class SOAP_CMAC _tds__GetAccessPolicy
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1321; } /* = unique type id SOAP_TYPE__tds__GetAccessPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetAccessPolicy() { _tds__GetAccessPolicy::soap_default(NULL); }
	virtual ~_tds__GetAccessPolicy() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetAccessPolicyResponse
#define SOAP_TYPE__tds__GetAccessPolicyResponse (1322)
/* tds:GetAccessPolicyResponse */
class SOAP_CMAC _tds__GetAccessPolicyResponse
{
public:
	tt__BinaryData *PolicyFile;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:BinaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1322; } /* = unique type id SOAP_TYPE__tds__GetAccessPolicyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetAccessPolicyResponse() { _tds__GetAccessPolicyResponse::soap_default(NULL); }
	virtual ~_tds__GetAccessPolicyResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetAccessPolicy
#define SOAP_TYPE__tds__SetAccessPolicy (1323)
/* tds:SetAccessPolicy */
class SOAP_CMAC _tds__SetAccessPolicy
{
public:
	tt__BinaryData *PolicyFile;	/* required element of type tt:BinaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1323; } /* = unique type id SOAP_TYPE__tds__SetAccessPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetAccessPolicy() { _tds__SetAccessPolicy::soap_default(NULL); }
	virtual ~_tds__SetAccessPolicy() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetAccessPolicyResponse
#define SOAP_TYPE__tds__SetAccessPolicyResponse (1324)
/* tds:SetAccessPolicyResponse */
class SOAP_CMAC _tds__SetAccessPolicyResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1324; } /* = unique type id SOAP_TYPE__tds__SetAccessPolicyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetAccessPolicyResponse() { _tds__SetAccessPolicyResponse::soap_default(NULL); }
	virtual ~_tds__SetAccessPolicyResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__CreateCertificate
#define SOAP_TYPE__tds__CreateCertificate (1325)
/* tds:CreateCertificate */
class SOAP_CMAC _tds__CreateCertificate
{
public:
	std::string *CertificateID;	/* optional element of type xsd:token */
	std::string *Subject;	/* optional element of type xsd:string */
	time_t *ValidNotBefore;	/* optional element of type xsd:dateTime */
	time_t *ValidNotAfter;	/* optional element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1325; } /* = unique type id SOAP_TYPE__tds__CreateCertificate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__CreateCertificate() { _tds__CreateCertificate::soap_default(NULL); }
	virtual ~_tds__CreateCertificate() { }
};
#endif

#ifndef SOAP_TYPE__tds__CreateCertificateResponse
#define SOAP_TYPE__tds__CreateCertificateResponse (1326)
/* tds:CreateCertificateResponse */
class SOAP_CMAC _tds__CreateCertificateResponse
{
public:
	tt__Certificate *NvtCertificate;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Certificate */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1326; } /* = unique type id SOAP_TYPE__tds__CreateCertificateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__CreateCertificateResponse() { _tds__CreateCertificateResponse::soap_default(NULL); }
	virtual ~_tds__CreateCertificateResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetCertificates
#define SOAP_TYPE__tds__GetCertificates (1327)
/* tds:GetCertificates */
class SOAP_CMAC _tds__GetCertificates
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1327; } /* = unique type id SOAP_TYPE__tds__GetCertificates */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetCertificates() { _tds__GetCertificates::soap_default(NULL); }
	virtual ~_tds__GetCertificates() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetCertificatesResponse
#define SOAP_TYPE__tds__GetCertificatesResponse (1328)
/* tds:GetCertificatesResponse */
class SOAP_CMAC _tds__GetCertificatesResponse
{
public:
	std::vector<tt__Certificate * >NvtCertificate;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:Certificate */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1328; } /* = unique type id SOAP_TYPE__tds__GetCertificatesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetCertificatesResponse() { _tds__GetCertificatesResponse::soap_default(NULL); }
	virtual ~_tds__GetCertificatesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetCertificatesStatus
#define SOAP_TYPE__tds__GetCertificatesStatus (1329)
/* tds:GetCertificatesStatus */
class SOAP_CMAC _tds__GetCertificatesStatus
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1329; } /* = unique type id SOAP_TYPE__tds__GetCertificatesStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetCertificatesStatus() { _tds__GetCertificatesStatus::soap_default(NULL); }
	virtual ~_tds__GetCertificatesStatus() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetCertificatesStatusResponse
#define SOAP_TYPE__tds__GetCertificatesStatusResponse (1330)
/* tds:GetCertificatesStatusResponse */
class SOAP_CMAC _tds__GetCertificatesStatusResponse
{
public:
	std::vector<tt__CertificateStatus * >CertificateStatus;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:CertificateStatus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1330; } /* = unique type id SOAP_TYPE__tds__GetCertificatesStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetCertificatesStatusResponse() { _tds__GetCertificatesStatusResponse::soap_default(NULL); }
	virtual ~_tds__GetCertificatesStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetCertificatesStatus
#define SOAP_TYPE__tds__SetCertificatesStatus (1331)
/* tds:SetCertificatesStatus */
class SOAP_CMAC _tds__SetCertificatesStatus
{
public:
	std::vector<tt__CertificateStatus * >CertificateStatus;	/* optional element of type tt:CertificateStatus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1331; } /* = unique type id SOAP_TYPE__tds__SetCertificatesStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetCertificatesStatus() { _tds__SetCertificatesStatus::soap_default(NULL); }
	virtual ~_tds__SetCertificatesStatus() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetCertificatesStatusResponse
#define SOAP_TYPE__tds__SetCertificatesStatusResponse (1332)
/* tds:SetCertificatesStatusResponse */
class SOAP_CMAC _tds__SetCertificatesStatusResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1332; } /* = unique type id SOAP_TYPE__tds__SetCertificatesStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetCertificatesStatusResponse() { _tds__SetCertificatesStatusResponse::soap_default(NULL); }
	virtual ~_tds__SetCertificatesStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__DeleteCertificates
#define SOAP_TYPE__tds__DeleteCertificates (1333)
/* tds:DeleteCertificates */
class SOAP_CMAC _tds__DeleteCertificates
{
public:
	std::vector<std::string >CertificateID;	/* required element of type xsd:token */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1333; } /* = unique type id SOAP_TYPE__tds__DeleteCertificates */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__DeleteCertificates() { _tds__DeleteCertificates::soap_default(NULL); }
	virtual ~_tds__DeleteCertificates() { }
};
#endif

#ifndef SOAP_TYPE__tds__DeleteCertificatesResponse
#define SOAP_TYPE__tds__DeleteCertificatesResponse (1334)
/* tds:DeleteCertificatesResponse */
class SOAP_CMAC _tds__DeleteCertificatesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1334; } /* = unique type id SOAP_TYPE__tds__DeleteCertificatesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__DeleteCertificatesResponse() { _tds__DeleteCertificatesResponse::soap_default(NULL); }
	virtual ~_tds__DeleteCertificatesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetPkcs10Request
#define SOAP_TYPE__tds__GetPkcs10Request (1335)
/* tds:GetPkcs10Request */
class SOAP_CMAC _tds__GetPkcs10Request
{
public:
	std::string CertificateID;	/* required element of type xsd:token */
	std::string *Subject;	/* optional element of type xsd:string */
	tt__BinaryData *Attributes;	/* optional element of type tt:BinaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1335; } /* = unique type id SOAP_TYPE__tds__GetPkcs10Request */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetPkcs10Request() { _tds__GetPkcs10Request::soap_default(NULL); }
	virtual ~_tds__GetPkcs10Request() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetPkcs10RequestResponse
#define SOAP_TYPE__tds__GetPkcs10RequestResponse (1336)
/* tds:GetPkcs10RequestResponse */
class SOAP_CMAC _tds__GetPkcs10RequestResponse
{
public:
	tt__BinaryData *Pkcs10Request;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:BinaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1336; } /* = unique type id SOAP_TYPE__tds__GetPkcs10RequestResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetPkcs10RequestResponse() { _tds__GetPkcs10RequestResponse::soap_default(NULL); }
	virtual ~_tds__GetPkcs10RequestResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__LoadCertificates
#define SOAP_TYPE__tds__LoadCertificates (1337)
/* tds:LoadCertificates */
class SOAP_CMAC _tds__LoadCertificates
{
public:
	std::vector<tt__Certificate * >NVTCertificate;	/* required element of type tt:Certificate */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1337; } /* = unique type id SOAP_TYPE__tds__LoadCertificates */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__LoadCertificates() { _tds__LoadCertificates::soap_default(NULL); }
	virtual ~_tds__LoadCertificates() { }
};
#endif

#ifndef SOAP_TYPE__tds__LoadCertificatesResponse
#define SOAP_TYPE__tds__LoadCertificatesResponse (1338)
/* tds:LoadCertificatesResponse */
class SOAP_CMAC _tds__LoadCertificatesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1338; } /* = unique type id SOAP_TYPE__tds__LoadCertificatesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__LoadCertificatesResponse() { _tds__LoadCertificatesResponse::soap_default(NULL); }
	virtual ~_tds__LoadCertificatesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetClientCertificateMode
#define SOAP_TYPE__tds__GetClientCertificateMode (1339)
/* tds:GetClientCertificateMode */
class SOAP_CMAC _tds__GetClientCertificateMode
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1339; } /* = unique type id SOAP_TYPE__tds__GetClientCertificateMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetClientCertificateMode() { _tds__GetClientCertificateMode::soap_default(NULL); }
	virtual ~_tds__GetClientCertificateMode() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetClientCertificateModeResponse
#define SOAP_TYPE__tds__GetClientCertificateModeResponse (1340)
/* tds:GetClientCertificateModeResponse */
class SOAP_CMAC _tds__GetClientCertificateModeResponse
{
public:
	bool Enabled;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1340; } /* = unique type id SOAP_TYPE__tds__GetClientCertificateModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetClientCertificateModeResponse() { _tds__GetClientCertificateModeResponse::soap_default(NULL); }
	virtual ~_tds__GetClientCertificateModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetClientCertificateMode
#define SOAP_TYPE__tds__SetClientCertificateMode (1341)
/* tds:SetClientCertificateMode */
class SOAP_CMAC _tds__SetClientCertificateMode
{
public:
	bool Enabled;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1341; } /* = unique type id SOAP_TYPE__tds__SetClientCertificateMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetClientCertificateMode() { _tds__SetClientCertificateMode::soap_default(NULL); }
	virtual ~_tds__SetClientCertificateMode() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetClientCertificateModeResponse
#define SOAP_TYPE__tds__SetClientCertificateModeResponse (1342)
/* tds:SetClientCertificateModeResponse */
class SOAP_CMAC _tds__SetClientCertificateModeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1342; } /* = unique type id SOAP_TYPE__tds__SetClientCertificateModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetClientCertificateModeResponse() { _tds__SetClientCertificateModeResponse::soap_default(NULL); }
	virtual ~_tds__SetClientCertificateModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetCACertificates
#define SOAP_TYPE__tds__GetCACertificates (1343)
/* tds:GetCACertificates */
class SOAP_CMAC _tds__GetCACertificates
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1343; } /* = unique type id SOAP_TYPE__tds__GetCACertificates */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetCACertificates() { _tds__GetCACertificates::soap_default(NULL); }
	virtual ~_tds__GetCACertificates() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetCACertificatesResponse
#define SOAP_TYPE__tds__GetCACertificatesResponse (1344)
/* tds:GetCACertificatesResponse */
class SOAP_CMAC _tds__GetCACertificatesResponse
{
public:
	std::vector<tt__Certificate * >CACertificate;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:Certificate */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1344; } /* = unique type id SOAP_TYPE__tds__GetCACertificatesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetCACertificatesResponse() { _tds__GetCACertificatesResponse::soap_default(NULL); }
	virtual ~_tds__GetCACertificatesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__LoadCertificateWithPrivateKey
#define SOAP_TYPE__tds__LoadCertificateWithPrivateKey (1345)
/* tds:LoadCertificateWithPrivateKey */
class SOAP_CMAC _tds__LoadCertificateWithPrivateKey
{
public:
	std::vector<tt__CertificateWithPrivateKey * >CertificateWithPrivateKey;	/* required element of type tt:CertificateWithPrivateKey */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1345; } /* = unique type id SOAP_TYPE__tds__LoadCertificateWithPrivateKey */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__LoadCertificateWithPrivateKey() { _tds__LoadCertificateWithPrivateKey::soap_default(NULL); }
	virtual ~_tds__LoadCertificateWithPrivateKey() { }
};
#endif

#ifndef SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse
#define SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse (1346)
/* tds:LoadCertificateWithPrivateKeyResponse */
class SOAP_CMAC _tds__LoadCertificateWithPrivateKeyResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1346; } /* = unique type id SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__LoadCertificateWithPrivateKeyResponse() { _tds__LoadCertificateWithPrivateKeyResponse::soap_default(NULL); }
	virtual ~_tds__LoadCertificateWithPrivateKeyResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetCertificateInformation
#define SOAP_TYPE__tds__GetCertificateInformation (1347)
/* tds:GetCertificateInformation */
class SOAP_CMAC _tds__GetCertificateInformation
{
public:
	std::string CertificateID;	/* required element of type xsd:token */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1347; } /* = unique type id SOAP_TYPE__tds__GetCertificateInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetCertificateInformation() { _tds__GetCertificateInformation::soap_default(NULL); }
	virtual ~_tds__GetCertificateInformation() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetCertificateInformationResponse
#define SOAP_TYPE__tds__GetCertificateInformationResponse (1348)
/* tds:GetCertificateInformationResponse */
class SOAP_CMAC _tds__GetCertificateInformationResponse
{
public:
	tt__CertificateInformation *CertificateInformation;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:CertificateInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1348; } /* = unique type id SOAP_TYPE__tds__GetCertificateInformationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetCertificateInformationResponse() { _tds__GetCertificateInformationResponse::soap_default(NULL); }
	virtual ~_tds__GetCertificateInformationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__LoadCACertificates
#define SOAP_TYPE__tds__LoadCACertificates (1349)
/* tds:LoadCACertificates */
class SOAP_CMAC _tds__LoadCACertificates
{
public:
	std::vector<tt__Certificate * >CACertificate;	/* required element of type tt:Certificate */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1349; } /* = unique type id SOAP_TYPE__tds__LoadCACertificates */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__LoadCACertificates() { _tds__LoadCACertificates::soap_default(NULL); }
	virtual ~_tds__LoadCACertificates() { }
};
#endif

#ifndef SOAP_TYPE__tds__LoadCACertificatesResponse
#define SOAP_TYPE__tds__LoadCACertificatesResponse (1350)
/* tds:LoadCACertificatesResponse */
class SOAP_CMAC _tds__LoadCACertificatesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1350; } /* = unique type id SOAP_TYPE__tds__LoadCACertificatesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__LoadCACertificatesResponse() { _tds__LoadCACertificatesResponse::soap_default(NULL); }
	virtual ~_tds__LoadCACertificatesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__CreateDot1XConfiguration
#define SOAP_TYPE__tds__CreateDot1XConfiguration (1351)
/* tds:CreateDot1XConfiguration */
class SOAP_CMAC _tds__CreateDot1XConfiguration
{
public:
	tt__Dot1XConfiguration *Dot1XConfiguration;	/* required element of type tt:Dot1XConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1351; } /* = unique type id SOAP_TYPE__tds__CreateDot1XConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__CreateDot1XConfiguration() { _tds__CreateDot1XConfiguration::soap_default(NULL); }
	virtual ~_tds__CreateDot1XConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tds__CreateDot1XConfigurationResponse
#define SOAP_TYPE__tds__CreateDot1XConfigurationResponse (1352)
/* tds:CreateDot1XConfigurationResponse */
class SOAP_CMAC _tds__CreateDot1XConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1352; } /* = unique type id SOAP_TYPE__tds__CreateDot1XConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__CreateDot1XConfigurationResponse() { _tds__CreateDot1XConfigurationResponse::soap_default(NULL); }
	virtual ~_tds__CreateDot1XConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetDot1XConfiguration
#define SOAP_TYPE__tds__SetDot1XConfiguration (1353)
/* tds:SetDot1XConfiguration */
class SOAP_CMAC _tds__SetDot1XConfiguration
{
public:
	tt__Dot1XConfiguration *Dot1XConfiguration;	/* required element of type tt:Dot1XConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1353; } /* = unique type id SOAP_TYPE__tds__SetDot1XConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetDot1XConfiguration() { _tds__SetDot1XConfiguration::soap_default(NULL); }
	virtual ~_tds__SetDot1XConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetDot1XConfigurationResponse
#define SOAP_TYPE__tds__SetDot1XConfigurationResponse (1354)
/* tds:SetDot1XConfigurationResponse */
class SOAP_CMAC _tds__SetDot1XConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1354; } /* = unique type id SOAP_TYPE__tds__SetDot1XConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetDot1XConfigurationResponse() { _tds__SetDot1XConfigurationResponse::soap_default(NULL); }
	virtual ~_tds__SetDot1XConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDot1XConfiguration
#define SOAP_TYPE__tds__GetDot1XConfiguration (1355)
/* tds:GetDot1XConfiguration */
class SOAP_CMAC _tds__GetDot1XConfiguration
{
public:
	std::string Dot1XConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1355; } /* = unique type id SOAP_TYPE__tds__GetDot1XConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDot1XConfiguration() { _tds__GetDot1XConfiguration::soap_default(NULL); }
	virtual ~_tds__GetDot1XConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDot1XConfigurationResponse
#define SOAP_TYPE__tds__GetDot1XConfigurationResponse (1356)
/* tds:GetDot1XConfigurationResponse */
class SOAP_CMAC _tds__GetDot1XConfigurationResponse
{
public:
	tt__Dot1XConfiguration *Dot1XConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Dot1XConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1356; } /* = unique type id SOAP_TYPE__tds__GetDot1XConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDot1XConfigurationResponse() { _tds__GetDot1XConfigurationResponse::soap_default(NULL); }
	virtual ~_tds__GetDot1XConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDot1XConfigurations
#define SOAP_TYPE__tds__GetDot1XConfigurations (1357)
/* tds:GetDot1XConfigurations */
class SOAP_CMAC _tds__GetDot1XConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1357; } /* = unique type id SOAP_TYPE__tds__GetDot1XConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDot1XConfigurations() { _tds__GetDot1XConfigurations::soap_default(NULL); }
	virtual ~_tds__GetDot1XConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDot1XConfigurationsResponse
#define SOAP_TYPE__tds__GetDot1XConfigurationsResponse (1358)
/* tds:GetDot1XConfigurationsResponse */
class SOAP_CMAC _tds__GetDot1XConfigurationsResponse
{
public:
	std::vector<tt__Dot1XConfiguration * >Dot1XConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:Dot1XConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1358; } /* = unique type id SOAP_TYPE__tds__GetDot1XConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDot1XConfigurationsResponse() { _tds__GetDot1XConfigurationsResponse::soap_default(NULL); }
	virtual ~_tds__GetDot1XConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__DeleteDot1XConfiguration
#define SOAP_TYPE__tds__DeleteDot1XConfiguration (1359)
/* tds:DeleteDot1XConfiguration */
class SOAP_CMAC _tds__DeleteDot1XConfiguration
{
public:
	std::vector<std::string >Dot1XConfigurationToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1359; } /* = unique type id SOAP_TYPE__tds__DeleteDot1XConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__DeleteDot1XConfiguration() { _tds__DeleteDot1XConfiguration::soap_default(NULL); }
	virtual ~_tds__DeleteDot1XConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tds__DeleteDot1XConfigurationResponse
#define SOAP_TYPE__tds__DeleteDot1XConfigurationResponse (1360)
/* tds:DeleteDot1XConfigurationResponse */
class SOAP_CMAC _tds__DeleteDot1XConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1360; } /* = unique type id SOAP_TYPE__tds__DeleteDot1XConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__DeleteDot1XConfigurationResponse() { _tds__DeleteDot1XConfigurationResponse::soap_default(NULL); }
	virtual ~_tds__DeleteDot1XConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetRelayOutputs
#define SOAP_TYPE__tds__GetRelayOutputs (1361)
/* tds:GetRelayOutputs */
class SOAP_CMAC _tds__GetRelayOutputs
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1361; } /* = unique type id SOAP_TYPE__tds__GetRelayOutputs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetRelayOutputs() { _tds__GetRelayOutputs::soap_default(NULL); }
	virtual ~_tds__GetRelayOutputs() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetRelayOutputsResponse
#define SOAP_TYPE__tds__GetRelayOutputsResponse (1362)
/* tds:GetRelayOutputsResponse */
class SOAP_CMAC _tds__GetRelayOutputsResponse
{
public:
	std::vector<tt__RelayOutput * >RelayOutputs;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:RelayOutput */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1362; } /* = unique type id SOAP_TYPE__tds__GetRelayOutputsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetRelayOutputsResponse() { _tds__GetRelayOutputsResponse::soap_default(NULL); }
	virtual ~_tds__GetRelayOutputsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetRelayOutputSettings
#define SOAP_TYPE__tds__SetRelayOutputSettings (1363)
/* tds:SetRelayOutputSettings */
class SOAP_CMAC _tds__SetRelayOutputSettings
{
public:
	std::string RelayOutputToken;	/* required element of type tt:ReferenceToken */
	tt__RelayOutputSettings *Properties;	/* required element of type tt:RelayOutputSettings */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1363; } /* = unique type id SOAP_TYPE__tds__SetRelayOutputSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetRelayOutputSettings() { _tds__SetRelayOutputSettings::soap_default(NULL); }
	virtual ~_tds__SetRelayOutputSettings() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetRelayOutputSettingsResponse
#define SOAP_TYPE__tds__SetRelayOutputSettingsResponse (1364)
/* tds:SetRelayOutputSettingsResponse */
class SOAP_CMAC _tds__SetRelayOutputSettingsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1364; } /* = unique type id SOAP_TYPE__tds__SetRelayOutputSettingsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetRelayOutputSettingsResponse() { _tds__SetRelayOutputSettingsResponse::soap_default(NULL); }
	virtual ~_tds__SetRelayOutputSettingsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetRelayOutputState
#define SOAP_TYPE__tds__SetRelayOutputState (1365)
/* tds:SetRelayOutputState */
class SOAP_CMAC _tds__SetRelayOutputState
{
public:
	std::string RelayOutputToken;	/* required element of type tt:ReferenceToken */
	enum tt__RelayLogicalState LogicalState;	/* required element of type tt:RelayLogicalState */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1365; } /* = unique type id SOAP_TYPE__tds__SetRelayOutputState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetRelayOutputState() { _tds__SetRelayOutputState::soap_default(NULL); }
	virtual ~_tds__SetRelayOutputState() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetRelayOutputStateResponse
#define SOAP_TYPE__tds__SetRelayOutputStateResponse (1366)
/* tds:SetRelayOutputStateResponse */
class SOAP_CMAC _tds__SetRelayOutputStateResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1366; } /* = unique type id SOAP_TYPE__tds__SetRelayOutputStateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetRelayOutputStateResponse() { _tds__SetRelayOutputStateResponse::soap_default(NULL); }
	virtual ~_tds__SetRelayOutputStateResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SendAuxiliaryCommand
#define SOAP_TYPE__tds__SendAuxiliaryCommand (1367)
/* tds:SendAuxiliaryCommand */
class SOAP_CMAC _tds__SendAuxiliaryCommand
{
public:
	std::string AuxiliaryCommand;	/* required element of type tt:AuxiliaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1367; } /* = unique type id SOAP_TYPE__tds__SendAuxiliaryCommand */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SendAuxiliaryCommand() { _tds__SendAuxiliaryCommand::soap_default(NULL); }
	virtual ~_tds__SendAuxiliaryCommand() { }
};
#endif

#ifndef SOAP_TYPE__tds__SendAuxiliaryCommandResponse
#define SOAP_TYPE__tds__SendAuxiliaryCommandResponse (1368)
/* tds:SendAuxiliaryCommandResponse */
class SOAP_CMAC _tds__SendAuxiliaryCommandResponse
{
public:
	std::string *AuxiliaryCommandResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AuxiliaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1368; } /* = unique type id SOAP_TYPE__tds__SendAuxiliaryCommandResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SendAuxiliaryCommandResponse() { _tds__SendAuxiliaryCommandResponse::soap_default(NULL); }
	virtual ~_tds__SendAuxiliaryCommandResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDot11Capabilities
#define SOAP_TYPE__tds__GetDot11Capabilities (1369)
/* tds:GetDot11Capabilities */
class SOAP_CMAC _tds__GetDot11Capabilities
{
public:
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1369; } /* = unique type id SOAP_TYPE__tds__GetDot11Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDot11Capabilities() { _tds__GetDot11Capabilities::soap_default(NULL); }
	virtual ~_tds__GetDot11Capabilities() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDot11CapabilitiesResponse
#define SOAP_TYPE__tds__GetDot11CapabilitiesResponse (1370)
/* tds:GetDot11CapabilitiesResponse */
class SOAP_CMAC _tds__GetDot11CapabilitiesResponse
{
public:
	tt__Dot11Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Dot11Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1370; } /* = unique type id SOAP_TYPE__tds__GetDot11CapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDot11CapabilitiesResponse() { _tds__GetDot11CapabilitiesResponse::soap_default(NULL); }
	virtual ~_tds__GetDot11CapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDot11Status
#define SOAP_TYPE__tds__GetDot11Status (1371)
/* tds:GetDot11Status */
class SOAP_CMAC _tds__GetDot11Status
{
public:
	std::string InterfaceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1371; } /* = unique type id SOAP_TYPE__tds__GetDot11Status */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDot11Status() { _tds__GetDot11Status::soap_default(NULL); }
	virtual ~_tds__GetDot11Status() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDot11StatusResponse
#define SOAP_TYPE__tds__GetDot11StatusResponse (1372)
/* tds:GetDot11StatusResponse */
class SOAP_CMAC _tds__GetDot11StatusResponse
{
public:
	tt__Dot11Status *Status;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Dot11Status */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1372; } /* = unique type id SOAP_TYPE__tds__GetDot11StatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDot11StatusResponse() { _tds__GetDot11StatusResponse::soap_default(NULL); }
	virtual ~_tds__GetDot11StatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__ScanAvailableDot11Networks
#define SOAP_TYPE__tds__ScanAvailableDot11Networks (1373)
/* tds:ScanAvailableDot11Networks */
class SOAP_CMAC _tds__ScanAvailableDot11Networks
{
public:
	std::string InterfaceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1373; } /* = unique type id SOAP_TYPE__tds__ScanAvailableDot11Networks */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__ScanAvailableDot11Networks() { _tds__ScanAvailableDot11Networks::soap_default(NULL); }
	virtual ~_tds__ScanAvailableDot11Networks() { }
};
#endif

#ifndef SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse
#define SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse (1374)
/* tds:ScanAvailableDot11NetworksResponse */
class SOAP_CMAC _tds__ScanAvailableDot11NetworksResponse
{
public:
	std::vector<tt__Dot11AvailableNetworks * >Networks;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:Dot11AvailableNetworks */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1374; } /* = unique type id SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__ScanAvailableDot11NetworksResponse() { _tds__ScanAvailableDot11NetworksResponse::soap_default(NULL); }
	virtual ~_tds__ScanAvailableDot11NetworksResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemUris
#define SOAP_TYPE__tds__GetSystemUris (1375)
/* tds:GetSystemUris */
class SOAP_CMAC _tds__GetSystemUris
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1375; } /* = unique type id SOAP_TYPE__tds__GetSystemUris */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemUris() { _tds__GetSystemUris::soap_default(NULL); }
	virtual ~_tds__GetSystemUris() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemUrisResponse_Extension
#define SOAP_TYPE__tds__GetSystemUrisResponse_Extension (3039)
/* tds:GetSystemUrisResponse-Extension */
class SOAP_CMAC _tds__GetSystemUrisResponse_Extension
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 3039; } /* = unique type id SOAP_TYPE__tds__GetSystemUrisResponse_Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemUrisResponse_Extension() { _tds__GetSystemUrisResponse_Extension::soap_default(NULL); }
	virtual ~_tds__GetSystemUrisResponse_Extension() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemUrisResponse
#define SOAP_TYPE__tds__GetSystemUrisResponse (1376)
/* tds:GetSystemUrisResponse */
class SOAP_CMAC _tds__GetSystemUrisResponse
{
public:
	tt__SystemLogUriList *SystemLogUris;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:SystemLogUriList */
	std::string *SupportInfoUri;	/* optional element of type xsd:anyURI */
	std::string *SystemBackupUri;	/* optional element of type xsd:anyURI */
	_tds__GetSystemUrisResponse_Extension *Extension;	/* optional element of type tds:GetSystemUrisResponse-Extension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1376; } /* = unique type id SOAP_TYPE__tds__GetSystemUrisResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemUrisResponse() { _tds__GetSystemUrisResponse::soap_default(NULL); }
	virtual ~_tds__GetSystemUrisResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__StartFirmwareUpgrade
#define SOAP_TYPE__tds__StartFirmwareUpgrade (1377)
/* tds:StartFirmwareUpgrade */
class SOAP_CMAC _tds__StartFirmwareUpgrade
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1377; } /* = unique type id SOAP_TYPE__tds__StartFirmwareUpgrade */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__StartFirmwareUpgrade() { _tds__StartFirmwareUpgrade::soap_default(NULL); }
	virtual ~_tds__StartFirmwareUpgrade() { }
};
#endif

#ifndef SOAP_TYPE__tds__StartFirmwareUpgradeResponse
#define SOAP_TYPE__tds__StartFirmwareUpgradeResponse (1378)
/* tds:StartFirmwareUpgradeResponse */
class SOAP_CMAC _tds__StartFirmwareUpgradeResponse
{
public:
	std::string UploadUri;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:anyURI */
	LONG64 UploadDelay;	/* external */
	LONG64 ExpectedDownTime;	/* external */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1378; } /* = unique type id SOAP_TYPE__tds__StartFirmwareUpgradeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__StartFirmwareUpgradeResponse() { _tds__StartFirmwareUpgradeResponse::soap_default(NULL); }
	virtual ~_tds__StartFirmwareUpgradeResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__StartSystemRestore
#define SOAP_TYPE__tds__StartSystemRestore (1379)
/* tds:StartSystemRestore */
class SOAP_CMAC _tds__StartSystemRestore
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1379; } /* = unique type id SOAP_TYPE__tds__StartSystemRestore */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__StartSystemRestore() { _tds__StartSystemRestore::soap_default(NULL); }
	virtual ~_tds__StartSystemRestore() { }
};
#endif

#ifndef SOAP_TYPE__tds__StartSystemRestoreResponse
#define SOAP_TYPE__tds__StartSystemRestoreResponse (1380)
/* tds:StartSystemRestoreResponse */
class SOAP_CMAC _tds__StartSystemRestoreResponse
{
public:
	std::string UploadUri;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:anyURI */
	LONG64 ExpectedDownTime;	/* external */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1380; } /* = unique type id SOAP_TYPE__tds__StartSystemRestoreResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__StartSystemRestoreResponse() { _tds__StartSystemRestoreResponse::soap_default(NULL); }
	virtual ~_tds__StartSystemRestoreResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetStorageConfigurations
#define SOAP_TYPE__tds__GetStorageConfigurations (1381)
/* tds:GetStorageConfigurations */
class SOAP_CMAC _tds__GetStorageConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1381; } /* = unique type id SOAP_TYPE__tds__GetStorageConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetStorageConfigurations() { _tds__GetStorageConfigurations::soap_default(NULL); }
	virtual ~_tds__GetStorageConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetStorageConfigurationsResponse
#define SOAP_TYPE__tds__GetStorageConfigurationsResponse (1382)
/* tds:GetStorageConfigurationsResponse */
class SOAP_CMAC _tds__GetStorageConfigurationsResponse
{
public:
	std::vector<class tds__StorageConfiguration * >StorageConfigurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tds:StorageConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1382; } /* = unique type id SOAP_TYPE__tds__GetStorageConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetStorageConfigurationsResponse() { _tds__GetStorageConfigurationsResponse::soap_default(NULL); }
	virtual ~_tds__GetStorageConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__CreateStorageConfiguration
#define SOAP_TYPE__tds__CreateStorageConfiguration (1383)
/* tds:CreateStorageConfiguration */
class SOAP_CMAC _tds__CreateStorageConfiguration
{
public:
	tds__StorageConfigurationData *StorageConfiguration;	/* required element of type tds:StorageConfigurationData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1383; } /* = unique type id SOAP_TYPE__tds__CreateStorageConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__CreateStorageConfiguration() { _tds__CreateStorageConfiguration::soap_default(NULL); }
	virtual ~_tds__CreateStorageConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tds__CreateStorageConfigurationResponse
#define SOAP_TYPE__tds__CreateStorageConfigurationResponse (1384)
/* tds:CreateStorageConfigurationResponse */
class SOAP_CMAC _tds__CreateStorageConfigurationResponse
{
public:
	std::string Token;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1384; } /* = unique type id SOAP_TYPE__tds__CreateStorageConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__CreateStorageConfigurationResponse() { _tds__CreateStorageConfigurationResponse::soap_default(NULL); }
	virtual ~_tds__CreateStorageConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetStorageConfiguration
#define SOAP_TYPE__tds__GetStorageConfiguration (1385)
/* tds:GetStorageConfiguration */
class SOAP_CMAC _tds__GetStorageConfiguration
{
public:
	std::string Token;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1385; } /* = unique type id SOAP_TYPE__tds__GetStorageConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetStorageConfiguration() { _tds__GetStorageConfiguration::soap_default(NULL); }
	virtual ~_tds__GetStorageConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetStorageConfigurationResponse
#define SOAP_TYPE__tds__GetStorageConfigurationResponse (1386)
/* tds:GetStorageConfigurationResponse */
class SOAP_CMAC _tds__GetStorageConfigurationResponse
{
public:
	tds__StorageConfiguration *StorageConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tds:StorageConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1386; } /* = unique type id SOAP_TYPE__tds__GetStorageConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetStorageConfigurationResponse() { _tds__GetStorageConfigurationResponse::soap_default(NULL); }
	virtual ~_tds__GetStorageConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetStorageConfiguration
#define SOAP_TYPE__tds__SetStorageConfiguration (1387)
/* tds:SetStorageConfiguration */
class SOAP_CMAC _tds__SetStorageConfiguration
{
public:
	tds__StorageConfiguration *StorageConfiguration;	/* required element of type tds:StorageConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1387; } /* = unique type id SOAP_TYPE__tds__SetStorageConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetStorageConfiguration() { _tds__SetStorageConfiguration::soap_default(NULL); }
	virtual ~_tds__SetStorageConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetStorageConfigurationResponse
#define SOAP_TYPE__tds__SetStorageConfigurationResponse (1388)
/* tds:SetStorageConfigurationResponse */
class SOAP_CMAC _tds__SetStorageConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1388; } /* = unique type id SOAP_TYPE__tds__SetStorageConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetStorageConfigurationResponse() { _tds__SetStorageConfigurationResponse::soap_default(NULL); }
	virtual ~_tds__SetStorageConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__DeleteStorageConfiguration
#define SOAP_TYPE__tds__DeleteStorageConfiguration (1389)
/* tds:DeleteStorageConfiguration */
class SOAP_CMAC _tds__DeleteStorageConfiguration
{
public:
	std::string Token;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1389; } /* = unique type id SOAP_TYPE__tds__DeleteStorageConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__DeleteStorageConfiguration() { _tds__DeleteStorageConfiguration::soap_default(NULL); }
	virtual ~_tds__DeleteStorageConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tds__DeleteStorageConfigurationResponse
#define SOAP_TYPE__tds__DeleteStorageConfigurationResponse (1390)
/* tds:DeleteStorageConfigurationResponse */
class SOAP_CMAC _tds__DeleteStorageConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1390; } /* = unique type id SOAP_TYPE__tds__DeleteStorageConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__DeleteStorageConfigurationResponse() { _tds__DeleteStorageConfigurationResponse::soap_default(NULL); }
	virtual ~_tds__DeleteStorageConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetGeoLocation
#define SOAP_TYPE__tds__GetGeoLocation (1391)
/* tds:GetGeoLocation */
class SOAP_CMAC _tds__GetGeoLocation
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1391; } /* = unique type id SOAP_TYPE__tds__GetGeoLocation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetGeoLocation() { _tds__GetGeoLocation::soap_default(NULL); }
	virtual ~_tds__GetGeoLocation() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetGeoLocationResponse
#define SOAP_TYPE__tds__GetGeoLocationResponse (1392)
/* tds:GetGeoLocationResponse */
class SOAP_CMAC _tds__GetGeoLocationResponse
{
public:
	std::vector<tt__LocationEntity * >Location;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:LocationEntity */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1392; } /* = unique type id SOAP_TYPE__tds__GetGeoLocationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetGeoLocationResponse() { _tds__GetGeoLocationResponse::soap_default(NULL); }
	virtual ~_tds__GetGeoLocationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetGeoLocation
#define SOAP_TYPE__tds__SetGeoLocation (1393)
/* tds:SetGeoLocation */
class SOAP_CMAC _tds__SetGeoLocation
{
public:
	std::vector<tt__LocationEntity * >Location;	/* required element of type tt:LocationEntity */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1393; } /* = unique type id SOAP_TYPE__tds__SetGeoLocation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetGeoLocation() { _tds__SetGeoLocation::soap_default(NULL); }
	virtual ~_tds__SetGeoLocation() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetGeoLocationResponse
#define SOAP_TYPE__tds__SetGeoLocationResponse (1394)
/* tds:SetGeoLocationResponse */
class SOAP_CMAC _tds__SetGeoLocationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1394; } /* = unique type id SOAP_TYPE__tds__SetGeoLocationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetGeoLocationResponse() { _tds__SetGeoLocationResponse::soap_default(NULL); }
	virtual ~_tds__SetGeoLocationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__DeleteGeoLocation
#define SOAP_TYPE__tds__DeleteGeoLocation (1395)
/* tds:DeleteGeoLocation */
class SOAP_CMAC _tds__DeleteGeoLocation
{
public:
	std::vector<tt__LocationEntity * >Location;	/* required element of type tt:LocationEntity */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1395; } /* = unique type id SOAP_TYPE__tds__DeleteGeoLocation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__DeleteGeoLocation() { _tds__DeleteGeoLocation::soap_default(NULL); }
	virtual ~_tds__DeleteGeoLocation() { }
};
#endif

#ifndef SOAP_TYPE__tds__DeleteGeoLocationResponse
#define SOAP_TYPE__tds__DeleteGeoLocationResponse (1396)
/* tds:DeleteGeoLocationResponse */
class SOAP_CMAC _tds__DeleteGeoLocationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1396; } /* = unique type id SOAP_TYPE__tds__DeleteGeoLocationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__DeleteGeoLocationResponse() { _tds__DeleteGeoLocationResponse::soap_default(NULL); }
	virtual ~_tds__DeleteGeoLocationResponse() { }
};
#endif

#ifndef SOAP_TYPE_tls__Capabilities
#define SOAP_TYPE_tls__Capabilities (1397)
/* tls:Capabilities */
class SOAP_CMAC tls__Capabilities : public xsd__anyType
{
public:
	std::vector<char * >__any;
	bool *FixedLayout;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1397; } /* = unique type id SOAP_TYPE_tls__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tls__Capabilities() { tls__Capabilities::soap_default(NULL); }
	virtual ~tls__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE__tls__GetServiceCapabilities
#define SOAP_TYPE__tls__GetServiceCapabilities (1398)
/* tls:GetServiceCapabilities */
class SOAP_CMAC _tls__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1398; } /* = unique type id SOAP_TYPE__tls__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__GetServiceCapabilities() { _tls__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_tls__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__tls__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tls__GetServiceCapabilitiesResponse (1399)
/* tls:GetServiceCapabilitiesResponse */
class SOAP_CMAC _tls__GetServiceCapabilitiesResponse
{
public:
	tls__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tls:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1399; } /* = unique type id SOAP_TYPE__tls__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__GetServiceCapabilitiesResponse() { _tls__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_tls__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tls__GetLayout
#define SOAP_TYPE__tls__GetLayout (1400)
/* tls:GetLayout */
class SOAP_CMAC _tls__GetLayout
{
public:
	std::string VideoOutput;	/* required element of type tt:ReferenceToken */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1400; } /* = unique type id SOAP_TYPE__tls__GetLayout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__GetLayout() { _tls__GetLayout::soap_default(NULL); }
	virtual ~_tls__GetLayout() { }
};
#endif

#ifndef SOAP_TYPE__tls__GetLayoutResponse
#define SOAP_TYPE__tls__GetLayoutResponse (1401)
/* tls:GetLayoutResponse */
class SOAP_CMAC _tls__GetLayoutResponse
{
public:
	tt__Layout *Layout;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Layout */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1401; } /* = unique type id SOAP_TYPE__tls__GetLayoutResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__GetLayoutResponse() { _tls__GetLayoutResponse::soap_default(NULL); }
	virtual ~_tls__GetLayoutResponse() { }
};
#endif

#ifndef SOAP_TYPE__tls__SetLayout
#define SOAP_TYPE__tls__SetLayout (1402)
/* tls:SetLayout */
class SOAP_CMAC _tls__SetLayout
{
public:
	std::string VideoOutput;	/* required element of type tt:ReferenceToken */
	tt__Layout *Layout;	/* required element of type tt:Layout */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1402; } /* = unique type id SOAP_TYPE__tls__SetLayout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__SetLayout() { _tls__SetLayout::soap_default(NULL); }
	virtual ~_tls__SetLayout() { }
};
#endif

#ifndef SOAP_TYPE__tls__SetLayoutResponse
#define SOAP_TYPE__tls__SetLayoutResponse (1403)
/* tls:SetLayoutResponse */
class SOAP_CMAC _tls__SetLayoutResponse
{
public:
	std::vector<char * >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1403; } /* = unique type id SOAP_TYPE__tls__SetLayoutResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__SetLayoutResponse() { _tls__SetLayoutResponse::soap_default(NULL); }
	virtual ~_tls__SetLayoutResponse() { }
};
#endif

#ifndef SOAP_TYPE__tls__GetDisplayOptions
#define SOAP_TYPE__tls__GetDisplayOptions (1404)
/* tls:GetDisplayOptions */
class SOAP_CMAC _tls__GetDisplayOptions
{
public:
	std::string VideoOutput;	/* required element of type tt:ReferenceToken */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1404; } /* = unique type id SOAP_TYPE__tls__GetDisplayOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__GetDisplayOptions() { _tls__GetDisplayOptions::soap_default(NULL); }
	virtual ~_tls__GetDisplayOptions() { }
};
#endif

#ifndef SOAP_TYPE__tls__GetDisplayOptionsResponse
#define SOAP_TYPE__tls__GetDisplayOptionsResponse (1405)
/* tls:GetDisplayOptionsResponse */
class SOAP_CMAC _tls__GetDisplayOptionsResponse
{
public:
	tt__LayoutOptions *LayoutOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:LayoutOptions */
	tt__CodingCapabilities *CodingCapabilities;	/* required element of type tt:CodingCapabilities */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1405; } /* = unique type id SOAP_TYPE__tls__GetDisplayOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__GetDisplayOptionsResponse() { _tls__GetDisplayOptionsResponse::soap_default(NULL); }
	virtual ~_tls__GetDisplayOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tls__GetPaneConfigurations
#define SOAP_TYPE__tls__GetPaneConfigurations (1406)
/* tls:GetPaneConfigurations */
class SOAP_CMAC _tls__GetPaneConfigurations
{
public:
	std::string VideoOutput;	/* required element of type tt:ReferenceToken */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1406; } /* = unique type id SOAP_TYPE__tls__GetPaneConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__GetPaneConfigurations() { _tls__GetPaneConfigurations::soap_default(NULL); }
	virtual ~_tls__GetPaneConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__tls__GetPaneConfigurationsResponse
#define SOAP_TYPE__tls__GetPaneConfigurationsResponse (1407)
/* tls:GetPaneConfigurationsResponse */
class SOAP_CMAC _tls__GetPaneConfigurationsResponse
{
public:
	std::vector<tt__PaneConfiguration * >PaneConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:PaneConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1407; } /* = unique type id SOAP_TYPE__tls__GetPaneConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__GetPaneConfigurationsResponse() { _tls__GetPaneConfigurationsResponse::soap_default(NULL); }
	virtual ~_tls__GetPaneConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tls__GetPaneConfiguration
#define SOAP_TYPE__tls__GetPaneConfiguration (1408)
/* tls:GetPaneConfiguration */
class SOAP_CMAC _tls__GetPaneConfiguration
{
public:
	std::string VideoOutput;	/* required element of type tt:ReferenceToken */
	std::string Pane;	/* required element of type tt:ReferenceToken */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1408; } /* = unique type id SOAP_TYPE__tls__GetPaneConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__GetPaneConfiguration() { _tls__GetPaneConfiguration::soap_default(NULL); }
	virtual ~_tls__GetPaneConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tls__GetPaneConfigurationResponse
#define SOAP_TYPE__tls__GetPaneConfigurationResponse (1409)
/* tls:GetPaneConfigurationResponse */
class SOAP_CMAC _tls__GetPaneConfigurationResponse
{
public:
	tt__PaneConfiguration *PaneConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:PaneConfiguration */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1409; } /* = unique type id SOAP_TYPE__tls__GetPaneConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__GetPaneConfigurationResponse() { _tls__GetPaneConfigurationResponse::soap_default(NULL); }
	virtual ~_tls__GetPaneConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tls__SetPaneConfigurations
#define SOAP_TYPE__tls__SetPaneConfigurations (1410)
/* tls:SetPaneConfigurations */
class SOAP_CMAC _tls__SetPaneConfigurations
{
public:
	std::string VideoOutput;	/* required element of type tt:ReferenceToken */
	std::vector<tt__PaneConfiguration * >PaneConfiguration;	/* required element of type tt:PaneConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1410; } /* = unique type id SOAP_TYPE__tls__SetPaneConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__SetPaneConfigurations() { _tls__SetPaneConfigurations::soap_default(NULL); }
	virtual ~_tls__SetPaneConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__tls__SetPaneConfigurationsResponse
#define SOAP_TYPE__tls__SetPaneConfigurationsResponse (1411)
/* tls:SetPaneConfigurationsResponse */
class SOAP_CMAC _tls__SetPaneConfigurationsResponse
{
public:
	std::vector<char * >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1411; } /* = unique type id SOAP_TYPE__tls__SetPaneConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__SetPaneConfigurationsResponse() { _tls__SetPaneConfigurationsResponse::soap_default(NULL); }
	virtual ~_tls__SetPaneConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tls__SetPaneConfiguration
#define SOAP_TYPE__tls__SetPaneConfiguration (1412)
/* tls:SetPaneConfiguration */
class SOAP_CMAC _tls__SetPaneConfiguration
{
public:
	std::string VideoOutput;	/* required element of type tt:ReferenceToken */
	tt__PaneConfiguration *PaneConfiguration;	/* required element of type tt:PaneConfiguration */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1412; } /* = unique type id SOAP_TYPE__tls__SetPaneConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__SetPaneConfiguration() { _tls__SetPaneConfiguration::soap_default(NULL); }
	virtual ~_tls__SetPaneConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tls__SetPaneConfigurationResponse
#define SOAP_TYPE__tls__SetPaneConfigurationResponse (1413)
/* tls:SetPaneConfigurationResponse */
class SOAP_CMAC _tls__SetPaneConfigurationResponse
{
public:
	std::vector<char * >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1413; } /* = unique type id SOAP_TYPE__tls__SetPaneConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__SetPaneConfigurationResponse() { _tls__SetPaneConfigurationResponse::soap_default(NULL); }
	virtual ~_tls__SetPaneConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tls__CreatePaneConfiguration
#define SOAP_TYPE__tls__CreatePaneConfiguration (1414)
/* tls:CreatePaneConfiguration */
class SOAP_CMAC _tls__CreatePaneConfiguration
{
public:
	std::string VideoOutput;	/* required element of type tt:ReferenceToken */
	tt__PaneConfiguration *PaneConfiguration;	/* required element of type tt:PaneConfiguration */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1414; } /* = unique type id SOAP_TYPE__tls__CreatePaneConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__CreatePaneConfiguration() { _tls__CreatePaneConfiguration::soap_default(NULL); }
	virtual ~_tls__CreatePaneConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tls__CreatePaneConfigurationResponse
#define SOAP_TYPE__tls__CreatePaneConfigurationResponse (1415)
/* tls:CreatePaneConfigurationResponse */
class SOAP_CMAC _tls__CreatePaneConfigurationResponse
{
public:
	std::string PaneToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:ReferenceToken */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1415; } /* = unique type id SOAP_TYPE__tls__CreatePaneConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__CreatePaneConfigurationResponse() { _tls__CreatePaneConfigurationResponse::soap_default(NULL); }
	virtual ~_tls__CreatePaneConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tls__DeletePaneConfiguration
#define SOAP_TYPE__tls__DeletePaneConfiguration (1416)
/* tls:DeletePaneConfiguration */
class SOAP_CMAC _tls__DeletePaneConfiguration
{
public:
	std::string VideoOutput;	/* required element of type tt:ReferenceToken */
	std::string PaneToken;	/* required element of type tt:ReferenceToken */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1416; } /* = unique type id SOAP_TYPE__tls__DeletePaneConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__DeletePaneConfiguration() { _tls__DeletePaneConfiguration::soap_default(NULL); }
	virtual ~_tls__DeletePaneConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tls__DeletePaneConfigurationResponse
#define SOAP_TYPE__tls__DeletePaneConfigurationResponse (1417)
/* tls:DeletePaneConfigurationResponse */
class SOAP_CMAC _tls__DeletePaneConfigurationResponse
{
public:
	std::vector<char * >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1417; } /* = unique type id SOAP_TYPE__tls__DeletePaneConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__DeletePaneConfigurationResponse() { _tls__DeletePaneConfigurationResponse::soap_default(NULL); }
	virtual ~_tls__DeletePaneConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns8__ServiceCapabilities
#define SOAP_TYPE_ns8__ServiceCapabilities (1418)
/* ns8:ServiceCapabilities */
class SOAP_CMAC ns8__ServiceCapabilities : public xsd__anyType
{
public:
	std::vector<char * >__any;
	unsigned int MaxLimit;	/* required attribute */
	unsigned int MaxDoors;	/* optional attribute */
	bool ClientSuppliedTokenSupported;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1418; } /* = unique type id SOAP_TYPE_ns8__ServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__ServiceCapabilities() { ns8__ServiceCapabilities::soap_default(NULL); }
	virtual ~ns8__ServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_ns8__DoorExtension
#define SOAP_TYPE_ns8__DoorExtension (1422)
/* ns8:DoorExtension */
class SOAP_CMAC ns8__DoorExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1422; } /* = unique type id SOAP_TYPE_ns8__DoorExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__DoorExtension() { ns8__DoorExtension::soap_default(NULL); }
	virtual ~ns8__DoorExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns8__Timings
#define SOAP_TYPE_ns8__Timings (1423)
/* ns8:Timings */
class SOAP_CMAC ns8__Timings : public xsd__anyType
{
public:
	LONG64 ReleaseTime;	/* external */
	LONG64 OpenTime;	/* external */
	LONG64 *ExtendedReleaseTime;	/* optional element of type xsd:duration */
	LONG64 *DelayTimeBeforeRelock;	/* optional element of type xsd:duration */
	LONG64 *ExtendedOpenTime;	/* optional element of type xsd:duration */
	LONG64 *PreAlarmTime;	/* optional element of type xsd:duration */
	class ns8__TimingsExtension *Extension;	/* optional element of type ns8:TimingsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1423; } /* = unique type id SOAP_TYPE_ns8__Timings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__Timings() { ns8__Timings::soap_default(NULL); }
	virtual ~ns8__Timings() { }
};
#endif

#ifndef SOAP_TYPE_ns8__TimingsExtension
#define SOAP_TYPE_ns8__TimingsExtension (1424)
/* ns8:TimingsExtension */
class SOAP_CMAC ns8__TimingsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1424; } /* = unique type id SOAP_TYPE_ns8__TimingsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__TimingsExtension() { ns8__TimingsExtension::soap_default(NULL); }
	virtual ~ns8__TimingsExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns8__DoorCapabilities
#define SOAP_TYPE_ns8__DoorCapabilities (1425)
/* ns8:DoorCapabilities */
class SOAP_CMAC ns8__DoorCapabilities : public xsd__anyType
{
public:
	std::vector<char * >__any;
	bool *Access;	/* optional attribute */
	bool *AccessTimingOverride;	/* optional attribute */
	bool *Lock;	/* optional attribute */
	bool *Unlock;	/* optional attribute */
	bool *Block;	/* optional attribute */
	bool *DoubleLock;	/* optional attribute */
	bool *LockDown;	/* optional attribute */
	bool *LockOpen;	/* optional attribute */
	bool *DoorMonitor;	/* optional attribute */
	bool *LockMonitor;	/* optional attribute */
	bool *DoubleLockMonitor;	/* optional attribute */
	bool *Alarm;	/* optional attribute */
	bool *Tamper;	/* optional attribute */
	bool *Fault;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1425; } /* = unique type id SOAP_TYPE_ns8__DoorCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__DoorCapabilities() { ns8__DoorCapabilities::soap_default(NULL); }
	virtual ~ns8__DoorCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_ns8__DoorState
#define SOAP_TYPE_ns8__DoorState (1426)
/* ns8:DoorState */
class SOAP_CMAC ns8__DoorState : public xsd__anyType
{
public:
	enum ns8__DoorPhysicalState *DoorPhysicalState;	/* optional element of type ns8:DoorPhysicalState */
	enum ns8__LockPhysicalState *LockPhysicalState;	/* optional element of type ns8:LockPhysicalState */
	enum ns8__LockPhysicalState *DoubleLockPhysicalState;	/* optional element of type ns8:LockPhysicalState */
	enum ns8__DoorAlarmState *Alarm;	/* optional element of type ns8:DoorAlarmState */
	class ns8__DoorTamper *Tamper;	/* optional element of type ns8:DoorTamper */
	class ns8__DoorFault *Fault;	/* optional element of type ns8:DoorFault */
	enum ns8__DoorMode DoorMode;	/* required element of type ns8:DoorMode */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1426; } /* = unique type id SOAP_TYPE_ns8__DoorState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__DoorState() { ns8__DoorState::soap_default(NULL); }
	virtual ~ns8__DoorState() { }
};
#endif

#ifndef SOAP_TYPE_ns8__DoorTamper
#define SOAP_TYPE_ns8__DoorTamper (1427)
/* ns8:DoorTamper */
class SOAP_CMAC ns8__DoorTamper : public xsd__anyType
{
public:
	std::string *Reason;	/* optional element of type xsd:string */
	enum ns8__DoorTamperState State;	/* required element of type ns8:DoorTamperState */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1427; } /* = unique type id SOAP_TYPE_ns8__DoorTamper */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__DoorTamper() { ns8__DoorTamper::soap_default(NULL); }
	virtual ~ns8__DoorTamper() { }
};
#endif

#ifndef SOAP_TYPE_ns8__DoorFault
#define SOAP_TYPE_ns8__DoorFault (1428)
/* ns8:DoorFault */
class SOAP_CMAC ns8__DoorFault : public xsd__anyType
{
public:
	std::string *Reason;	/* optional element of type xsd:string */
	enum ns8__DoorFaultState State;	/* required element of type ns8:DoorFaultState */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1428; } /* = unique type id SOAP_TYPE_ns8__DoorFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__DoorFault() { ns8__DoorFault::soap_default(NULL); }
	virtual ~ns8__DoorFault() { }
};
#endif

#ifndef SOAP_TYPE_ns8__AccessDoorExtension
#define SOAP_TYPE_ns8__AccessDoorExtension (1429)
/* ns8:AccessDoorExtension */
class SOAP_CMAC ns8__AccessDoorExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1429; } /* = unique type id SOAP_TYPE_ns8__AccessDoorExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__AccessDoorExtension() { ns8__AccessDoorExtension::soap_default(NULL); }
	virtual ~ns8__AccessDoorExtension() { }
};
#endif

#ifndef SOAP_TYPE__ns8__GetServiceCapabilities
#define SOAP_TYPE__ns8__GetServiceCapabilities (1430)
/* ns8:GetServiceCapabilities */
class SOAP_CMAC _ns8__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1430; } /* = unique type id SOAP_TYPE__ns8__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__GetServiceCapabilities() { _ns8__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_ns8__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__ns8__GetServiceCapabilitiesResponse
#define SOAP_TYPE__ns8__GetServiceCapabilitiesResponse (1431)
/* ns8:GetServiceCapabilitiesResponse */
class SOAP_CMAC _ns8__GetServiceCapabilitiesResponse
{
public:
	ns8__ServiceCapabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns8:ServiceCapabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1431; } /* = unique type id SOAP_TYPE__ns8__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__GetServiceCapabilitiesResponse() { _ns8__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_ns8__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns8__GetDoorInfoList
#define SOAP_TYPE__ns8__GetDoorInfoList (1432)
/* ns8:GetDoorInfoList */
class SOAP_CMAC _ns8__GetDoorInfoList
{
public:
	int *Limit;	/* optional element of type xsd:int */
	std::string *StartReference;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1432; } /* = unique type id SOAP_TYPE__ns8__GetDoorInfoList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__GetDoorInfoList() { _ns8__GetDoorInfoList::soap_default(NULL); }
	virtual ~_ns8__GetDoorInfoList() { }
};
#endif

#ifndef SOAP_TYPE__ns8__GetDoorInfoListResponse
#define SOAP_TYPE__ns8__GetDoorInfoListResponse (1433)
/* ns8:GetDoorInfoListResponse */
class SOAP_CMAC _ns8__GetDoorInfoListResponse
{
public:
	std::string *NextStartReference;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	std::vector<class ns8__DoorInfo * >DoorInfo;	/* optional element of type ns8:DoorInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1433; } /* = unique type id SOAP_TYPE__ns8__GetDoorInfoListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__GetDoorInfoListResponse() { _ns8__GetDoorInfoListResponse::soap_default(NULL); }
	virtual ~_ns8__GetDoorInfoListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns8__GetDoorInfo
#define SOAP_TYPE__ns8__GetDoorInfo (1434)
/* ns8:GetDoorInfo */
class SOAP_CMAC _ns8__GetDoorInfo
{
public:
	std::vector<std::string >Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1434; } /* = unique type id SOAP_TYPE__ns8__GetDoorInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__GetDoorInfo() { _ns8__GetDoorInfo::soap_default(NULL); }
	virtual ~_ns8__GetDoorInfo() { }
};
#endif

#ifndef SOAP_TYPE__ns8__GetDoorInfoResponse
#define SOAP_TYPE__ns8__GetDoorInfoResponse (1435)
/* ns8:GetDoorInfoResponse */
class SOAP_CMAC _ns8__GetDoorInfoResponse
{
public:
	std::vector<ns8__DoorInfo * >DoorInfo;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns8:DoorInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1435; } /* = unique type id SOAP_TYPE__ns8__GetDoorInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__GetDoorInfoResponse() { _ns8__GetDoorInfoResponse::soap_default(NULL); }
	virtual ~_ns8__GetDoorInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns8__GetDoorList
#define SOAP_TYPE__ns8__GetDoorList (1436)
/* ns8:GetDoorList */
class SOAP_CMAC _ns8__GetDoorList
{
public:
	int *Limit;	/* optional element of type xsd:int */
	std::string *StartReference;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1436; } /* = unique type id SOAP_TYPE__ns8__GetDoorList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__GetDoorList() { _ns8__GetDoorList::soap_default(NULL); }
	virtual ~_ns8__GetDoorList() { }
};
#endif

#ifndef SOAP_TYPE__ns8__GetDoorListResponse
#define SOAP_TYPE__ns8__GetDoorListResponse (1437)
/* ns8:GetDoorListResponse */
class SOAP_CMAC _ns8__GetDoorListResponse
{
public:
	std::string *NextStartReference;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	std::vector<class ns8__Door * >Door;	/* optional element of type ns8:Door */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1437; } /* = unique type id SOAP_TYPE__ns8__GetDoorListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__GetDoorListResponse() { _ns8__GetDoorListResponse::soap_default(NULL); }
	virtual ~_ns8__GetDoorListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns8__GetDoors
#define SOAP_TYPE__ns8__GetDoors (1438)
/* ns8:GetDoors */
class SOAP_CMAC _ns8__GetDoors
{
public:
	std::vector<std::string >Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1438; } /* = unique type id SOAP_TYPE__ns8__GetDoors */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__GetDoors() { _ns8__GetDoors::soap_default(NULL); }
	virtual ~_ns8__GetDoors() { }
};
#endif

#ifndef SOAP_TYPE__ns8__GetDoorsResponse
#define SOAP_TYPE__ns8__GetDoorsResponse (1439)
/* ns8:GetDoorsResponse */
class SOAP_CMAC _ns8__GetDoorsResponse
{
public:
	std::vector<ns8__Door * >Door;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns8:Door */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1439; } /* = unique type id SOAP_TYPE__ns8__GetDoorsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__GetDoorsResponse() { _ns8__GetDoorsResponse::soap_default(NULL); }
	virtual ~_ns8__GetDoorsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns8__CreateDoor
#define SOAP_TYPE__ns8__CreateDoor (1440)
/* ns8:CreateDoor */
class SOAP_CMAC _ns8__CreateDoor
{
public:
	ns8__Door *Door;	/* required element of type ns8:Door */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1440; } /* = unique type id SOAP_TYPE__ns8__CreateDoor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__CreateDoor() { _ns8__CreateDoor::soap_default(NULL); }
	virtual ~_ns8__CreateDoor() { }
};
#endif

#ifndef SOAP_TYPE__ns8__CreateDoorResponse
#define SOAP_TYPE__ns8__CreateDoorResponse (1441)
/* ns8:CreateDoorResponse */
class SOAP_CMAC _ns8__CreateDoorResponse
{
public:
	std::string Token;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1441; } /* = unique type id SOAP_TYPE__ns8__CreateDoorResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__CreateDoorResponse() { _ns8__CreateDoorResponse::soap_default(NULL); }
	virtual ~_ns8__CreateDoorResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns8__SetDoor
#define SOAP_TYPE__ns8__SetDoor (1442)
/* ns8:SetDoor */
class SOAP_CMAC _ns8__SetDoor
{
public:
	ns8__Door *Door;	/* required element of type ns8:Door */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1442; } /* = unique type id SOAP_TYPE__ns8__SetDoor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__SetDoor() { _ns8__SetDoor::soap_default(NULL); }
	virtual ~_ns8__SetDoor() { }
};
#endif

#ifndef SOAP_TYPE__ns8__SetDoorResponse
#define SOAP_TYPE__ns8__SetDoorResponse (1443)
/* ns8:SetDoorResponse */
class SOAP_CMAC _ns8__SetDoorResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1443; } /* = unique type id SOAP_TYPE__ns8__SetDoorResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__SetDoorResponse() { _ns8__SetDoorResponse::soap_default(NULL); }
	virtual ~_ns8__SetDoorResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns8__ModifyDoor
#define SOAP_TYPE__ns8__ModifyDoor (1444)
/* ns8:ModifyDoor */
class SOAP_CMAC _ns8__ModifyDoor
{
public:
	ns8__Door *Door;	/* required element of type ns8:Door */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1444; } /* = unique type id SOAP_TYPE__ns8__ModifyDoor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__ModifyDoor() { _ns8__ModifyDoor::soap_default(NULL); }
	virtual ~_ns8__ModifyDoor() { }
};
#endif

#ifndef SOAP_TYPE__ns8__ModifyDoorResponse
#define SOAP_TYPE__ns8__ModifyDoorResponse (1445)
/* ns8:ModifyDoorResponse */
class SOAP_CMAC _ns8__ModifyDoorResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1445; } /* = unique type id SOAP_TYPE__ns8__ModifyDoorResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__ModifyDoorResponse() { _ns8__ModifyDoorResponse::soap_default(NULL); }
	virtual ~_ns8__ModifyDoorResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns8__DeleteDoor
#define SOAP_TYPE__ns8__DeleteDoor (1446)
/* ns8:DeleteDoor */
class SOAP_CMAC _ns8__DeleteDoor
{
public:
	std::string Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1446; } /* = unique type id SOAP_TYPE__ns8__DeleteDoor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__DeleteDoor() { _ns8__DeleteDoor::soap_default(NULL); }
	virtual ~_ns8__DeleteDoor() { }
};
#endif

#ifndef SOAP_TYPE__ns8__DeleteDoorResponse
#define SOAP_TYPE__ns8__DeleteDoorResponse (1447)
/* ns8:DeleteDoorResponse */
class SOAP_CMAC _ns8__DeleteDoorResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1447; } /* = unique type id SOAP_TYPE__ns8__DeleteDoorResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__DeleteDoorResponse() { _ns8__DeleteDoorResponse::soap_default(NULL); }
	virtual ~_ns8__DeleteDoorResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns8__GetDoorState
#define SOAP_TYPE__ns8__GetDoorState (1448)
/* ns8:GetDoorState */
class SOAP_CMAC _ns8__GetDoorState
{
public:
	std::string Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1448; } /* = unique type id SOAP_TYPE__ns8__GetDoorState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__GetDoorState() { _ns8__GetDoorState::soap_default(NULL); }
	virtual ~_ns8__GetDoorState() { }
};
#endif

#ifndef SOAP_TYPE__ns8__GetDoorStateResponse
#define SOAP_TYPE__ns8__GetDoorStateResponse (1449)
/* ns8:GetDoorStateResponse */
class SOAP_CMAC _ns8__GetDoorStateResponse
{
public:
	ns8__DoorState *DoorState;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns8:DoorState */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1449; } /* = unique type id SOAP_TYPE__ns8__GetDoorStateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__GetDoorStateResponse() { _ns8__GetDoorStateResponse::soap_default(NULL); }
	virtual ~_ns8__GetDoorStateResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns8__AccessDoor
#define SOAP_TYPE__ns8__AccessDoor (1450)
/* ns8:AccessDoor */
class SOAP_CMAC _ns8__AccessDoor
{
public:
	std::string Token;	/* required element of type ns2:ReferenceToken */
	bool *UseExtendedTime;	/* optional element of type xsd:boolean */
	LONG64 *AccessTime;	/* optional element of type xsd:duration */
	LONG64 *OpenTooLongTime;	/* optional element of type xsd:duration */
	LONG64 *PreAlarmTime;	/* optional element of type xsd:duration */
	ns8__AccessDoorExtension *Extension;	/* optional element of type ns8:AccessDoorExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1450; } /* = unique type id SOAP_TYPE__ns8__AccessDoor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__AccessDoor() { _ns8__AccessDoor::soap_default(NULL); }
	virtual ~_ns8__AccessDoor() { }
};
#endif

#ifndef SOAP_TYPE__ns8__AccessDoorResponse
#define SOAP_TYPE__ns8__AccessDoorResponse (1451)
/* ns8:AccessDoorResponse */
class SOAP_CMAC _ns8__AccessDoorResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1451; } /* = unique type id SOAP_TYPE__ns8__AccessDoorResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__AccessDoorResponse() { _ns8__AccessDoorResponse::soap_default(NULL); }
	virtual ~_ns8__AccessDoorResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns8__LockDoor
#define SOAP_TYPE__ns8__LockDoor (1452)
/* ns8:LockDoor */
class SOAP_CMAC _ns8__LockDoor
{
public:
	std::string Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1452; } /* = unique type id SOAP_TYPE__ns8__LockDoor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__LockDoor() { _ns8__LockDoor::soap_default(NULL); }
	virtual ~_ns8__LockDoor() { }
};
#endif

#ifndef SOAP_TYPE__ns8__LockDoorResponse
#define SOAP_TYPE__ns8__LockDoorResponse (1453)
/* ns8:LockDoorResponse */
class SOAP_CMAC _ns8__LockDoorResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1453; } /* = unique type id SOAP_TYPE__ns8__LockDoorResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__LockDoorResponse() { _ns8__LockDoorResponse::soap_default(NULL); }
	virtual ~_ns8__LockDoorResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns8__UnlockDoor
#define SOAP_TYPE__ns8__UnlockDoor (1454)
/* ns8:UnlockDoor */
class SOAP_CMAC _ns8__UnlockDoor
{
public:
	std::string Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1454; } /* = unique type id SOAP_TYPE__ns8__UnlockDoor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__UnlockDoor() { _ns8__UnlockDoor::soap_default(NULL); }
	virtual ~_ns8__UnlockDoor() { }
};
#endif

#ifndef SOAP_TYPE__ns8__UnlockDoorResponse
#define SOAP_TYPE__ns8__UnlockDoorResponse (1455)
/* ns8:UnlockDoorResponse */
class SOAP_CMAC _ns8__UnlockDoorResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1455; } /* = unique type id SOAP_TYPE__ns8__UnlockDoorResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__UnlockDoorResponse() { _ns8__UnlockDoorResponse::soap_default(NULL); }
	virtual ~_ns8__UnlockDoorResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns8__BlockDoor
#define SOAP_TYPE__ns8__BlockDoor (1456)
/* ns8:BlockDoor */
class SOAP_CMAC _ns8__BlockDoor
{
public:
	std::string Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1456; } /* = unique type id SOAP_TYPE__ns8__BlockDoor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__BlockDoor() { _ns8__BlockDoor::soap_default(NULL); }
	virtual ~_ns8__BlockDoor() { }
};
#endif

#ifndef SOAP_TYPE__ns8__BlockDoorResponse
#define SOAP_TYPE__ns8__BlockDoorResponse (1457)
/* ns8:BlockDoorResponse */
class SOAP_CMAC _ns8__BlockDoorResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1457; } /* = unique type id SOAP_TYPE__ns8__BlockDoorResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__BlockDoorResponse() { _ns8__BlockDoorResponse::soap_default(NULL); }
	virtual ~_ns8__BlockDoorResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns8__LockDownDoor
#define SOAP_TYPE__ns8__LockDownDoor (1458)
/* ns8:LockDownDoor */
class SOAP_CMAC _ns8__LockDownDoor
{
public:
	std::string Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1458; } /* = unique type id SOAP_TYPE__ns8__LockDownDoor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__LockDownDoor() { _ns8__LockDownDoor::soap_default(NULL); }
	virtual ~_ns8__LockDownDoor() { }
};
#endif

#ifndef SOAP_TYPE__ns8__LockDownDoorResponse
#define SOAP_TYPE__ns8__LockDownDoorResponse (1459)
/* ns8:LockDownDoorResponse */
class SOAP_CMAC _ns8__LockDownDoorResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1459; } /* = unique type id SOAP_TYPE__ns8__LockDownDoorResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__LockDownDoorResponse() { _ns8__LockDownDoorResponse::soap_default(NULL); }
	virtual ~_ns8__LockDownDoorResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns8__LockDownReleaseDoor
#define SOAP_TYPE__ns8__LockDownReleaseDoor (1460)
/* ns8:LockDownReleaseDoor */
class SOAP_CMAC _ns8__LockDownReleaseDoor
{
public:
	std::string Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1460; } /* = unique type id SOAP_TYPE__ns8__LockDownReleaseDoor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__LockDownReleaseDoor() { _ns8__LockDownReleaseDoor::soap_default(NULL); }
	virtual ~_ns8__LockDownReleaseDoor() { }
};
#endif

#ifndef SOAP_TYPE__ns8__LockDownReleaseDoorResponse
#define SOAP_TYPE__ns8__LockDownReleaseDoorResponse (1461)
/* ns8:LockDownReleaseDoorResponse */
class SOAP_CMAC _ns8__LockDownReleaseDoorResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1461; } /* = unique type id SOAP_TYPE__ns8__LockDownReleaseDoorResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__LockDownReleaseDoorResponse() { _ns8__LockDownReleaseDoorResponse::soap_default(NULL); }
	virtual ~_ns8__LockDownReleaseDoorResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns8__LockOpenDoor
#define SOAP_TYPE__ns8__LockOpenDoor (1462)
/* ns8:LockOpenDoor */
class SOAP_CMAC _ns8__LockOpenDoor
{
public:
	std::string Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1462; } /* = unique type id SOAP_TYPE__ns8__LockOpenDoor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__LockOpenDoor() { _ns8__LockOpenDoor::soap_default(NULL); }
	virtual ~_ns8__LockOpenDoor() { }
};
#endif

#ifndef SOAP_TYPE__ns8__LockOpenDoorResponse
#define SOAP_TYPE__ns8__LockOpenDoorResponse (1463)
/* ns8:LockOpenDoorResponse */
class SOAP_CMAC _ns8__LockOpenDoorResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1463; } /* = unique type id SOAP_TYPE__ns8__LockOpenDoorResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__LockOpenDoorResponse() { _ns8__LockOpenDoorResponse::soap_default(NULL); }
	virtual ~_ns8__LockOpenDoorResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns8__LockOpenReleaseDoor
#define SOAP_TYPE__ns8__LockOpenReleaseDoor (1464)
/* ns8:LockOpenReleaseDoor */
class SOAP_CMAC _ns8__LockOpenReleaseDoor
{
public:
	std::string Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1464; } /* = unique type id SOAP_TYPE__ns8__LockOpenReleaseDoor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__LockOpenReleaseDoor() { _ns8__LockOpenReleaseDoor::soap_default(NULL); }
	virtual ~_ns8__LockOpenReleaseDoor() { }
};
#endif

#ifndef SOAP_TYPE__ns8__LockOpenReleaseDoorResponse
#define SOAP_TYPE__ns8__LockOpenReleaseDoorResponse (1465)
/* ns8:LockOpenReleaseDoorResponse */
class SOAP_CMAC _ns8__LockOpenReleaseDoorResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1465; } /* = unique type id SOAP_TYPE__ns8__LockOpenReleaseDoorResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__LockOpenReleaseDoorResponse() { _ns8__LockOpenReleaseDoorResponse::soap_default(NULL); }
	virtual ~_ns8__LockOpenReleaseDoorResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns8__DoubleLockDoor
#define SOAP_TYPE__ns8__DoubleLockDoor (1466)
/* ns8:DoubleLockDoor */
class SOAP_CMAC _ns8__DoubleLockDoor
{
public:
	std::string Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1466; } /* = unique type id SOAP_TYPE__ns8__DoubleLockDoor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__DoubleLockDoor() { _ns8__DoubleLockDoor::soap_default(NULL); }
	virtual ~_ns8__DoubleLockDoor() { }
};
#endif

#ifndef SOAP_TYPE__ns8__DoubleLockDoorResponse
#define SOAP_TYPE__ns8__DoubleLockDoorResponse (1467)
/* ns8:DoubleLockDoorResponse */
class SOAP_CMAC _ns8__DoubleLockDoorResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1467; } /* = unique type id SOAP_TYPE__ns8__DoubleLockDoorResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__DoubleLockDoorResponse() { _ns8__DoubleLockDoorResponse::soap_default(NULL); }
	virtual ~_ns8__DoubleLockDoorResponse() { }
};
#endif

#ifndef SOAP_TYPE_tev__Capabilities
#define SOAP_TYPE_tev__Capabilities (1468)
/* tev:Capabilities */
class SOAP_CMAC tev__Capabilities : public xsd__anyType
{
public:
	std::vector<char * >__any;
	bool *WSSubscriptionPolicySupport;	/* optional attribute */
	bool *WSPullPointSupport;	/* optional attribute */
	bool *WSPausableSubscriptionManagerInterfaceSupport;	/* optional attribute */
	int *MaxNotificationProducers;	/* optional attribute */
	int *MaxPullPoints;	/* optional attribute */
	bool *PersistentNotificationStorage;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1468; } /* = unique type id SOAP_TYPE_tev__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tev__Capabilities() { tev__Capabilities::soap_default(NULL); }
	virtual ~tev__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE_tev__SubscriptionPolicy
#define SOAP_TYPE_tev__SubscriptionPolicy (1469)
/* tev:SubscriptionPolicy */
class SOAP_CMAC tev__SubscriptionPolicy : public xsd__anyType
{
public:
	std::vector<char * >__any;
	bool *ChangedOnly;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1469; } /* = unique type id SOAP_TYPE_tev__SubscriptionPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tev__SubscriptionPolicy() { tev__SubscriptionPolicy::soap_default(NULL); }
	virtual ~tev__SubscriptionPolicy() { }
};
#endif

#ifndef SOAP_TYPE__tev__GetServiceCapabilities
#define SOAP_TYPE__tev__GetServiceCapabilities (1470)
/* tev:GetServiceCapabilities */
class SOAP_CMAC _tev__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1470; } /* = unique type id SOAP_TYPE__tev__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__GetServiceCapabilities() { _tev__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_tev__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__tev__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tev__GetServiceCapabilitiesResponse (1471)
/* tev:GetServiceCapabilitiesResponse */
class SOAP_CMAC _tev__GetServiceCapabilitiesResponse
{
public:
	tev__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tev:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1471; } /* = unique type id SOAP_TYPE__tev__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__GetServiceCapabilitiesResponse() { _tev__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_tev__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy
#define SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy (3066)
/* tev:CreatePullPointSubscription-SubscriptionPolicy */
class SOAP_CMAC _tev__CreatePullPointSubscription_SubscriptionPolicy
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 3066; } /* = unique type id SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__CreatePullPointSubscription_SubscriptionPolicy() { _tev__CreatePullPointSubscription_SubscriptionPolicy::soap_default(NULL); }
	virtual ~_tev__CreatePullPointSubscription_SubscriptionPolicy() { }
};
#endif

#ifndef SOAP_TYPE__tev__CreatePullPointSubscription
#define SOAP_TYPE__tev__CreatePullPointSubscription (1472)
/* tev:CreatePullPointSubscription */
class SOAP_CMAC _tev__CreatePullPointSubscription
{
public:
	wsnt__FilterType *Filter;	/* optional element of type wsnt:FilterType */
	std::string *InitialTerminationTime;	/* optional element of type wsnt:AbsoluteOrRelativeTimeType */
	_tev__CreatePullPointSubscription_SubscriptionPolicy *SubscriptionPolicy;	/* optional element of type tev:CreatePullPointSubscription-SubscriptionPolicy */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1472; } /* = unique type id SOAP_TYPE__tev__CreatePullPointSubscription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__CreatePullPointSubscription() { _tev__CreatePullPointSubscription::soap_default(NULL); }
	virtual ~_tev__CreatePullPointSubscription() { }
};
#endif

#ifndef SOAP_TYPE__tev__CreatePullPointSubscriptionResponse
#define SOAP_TYPE__tev__CreatePullPointSubscriptionResponse (1473)
/* tev:CreatePullPointSubscriptionResponse */
class SOAP_CMAC _tev__CreatePullPointSubscriptionResponse
{
public:
	struct wsa5__EndpointReferenceType SubscriptionReference;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type wsa5:EndpointReferenceType */
	time_t wsnt__CurrentTime;	/* required element of type xsd:dateTime */
	time_t wsnt__TerminationTime;	/* required element of type xsd:dateTime */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1473; } /* = unique type id SOAP_TYPE__tev__CreatePullPointSubscriptionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__CreatePullPointSubscriptionResponse() { _tev__CreatePullPointSubscriptionResponse::soap_default(NULL); }
	virtual ~_tev__CreatePullPointSubscriptionResponse() { }
};
#endif

#ifndef SOAP_TYPE__tev__PullMessages
#define SOAP_TYPE__tev__PullMessages (1474)
/* tev:PullMessages */
class SOAP_CMAC _tev__PullMessages
{
public:
	LONG64 Timeout;	/* external */
	int MessageLimit;	/* required element of type xsd:int */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1474; } /* = unique type id SOAP_TYPE__tev__PullMessages */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__PullMessages() { _tev__PullMessages::soap_default(NULL); }
	virtual ~_tev__PullMessages() { }
};
#endif

#ifndef SOAP_TYPE__tev__PullMessagesResponse
#define SOAP_TYPE__tev__PullMessagesResponse (1475)
/* tev:PullMessagesResponse */
class SOAP_CMAC _tev__PullMessagesResponse
{
public:
	time_t CurrentTime;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:dateTime */
	time_t TerminationTime;	/* required element of type xsd:dateTime */
	std::vector<wsnt__NotificationMessageHolderType * >wsnt__NotificationMessage;	/* optional element of type wsnt:NotificationMessageHolderType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1475; } /* = unique type id SOAP_TYPE__tev__PullMessagesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__PullMessagesResponse() { _tev__PullMessagesResponse::soap_default(NULL); }
	virtual ~_tev__PullMessagesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tev__PullMessagesFaultResponse
#define SOAP_TYPE__tev__PullMessagesFaultResponse (1476)
/* tev:PullMessagesFaultResponse */
class SOAP_CMAC _tev__PullMessagesFaultResponse
{
public:
	LONG64 MaxTimeout;	/* external */
	int MaxMessageLimit;	/* required element of type xsd:int */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1476; } /* = unique type id SOAP_TYPE__tev__PullMessagesFaultResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__PullMessagesFaultResponse() { _tev__PullMessagesFaultResponse::soap_default(NULL); }
	virtual ~_tev__PullMessagesFaultResponse() { }
};
#endif

#ifndef SOAP_TYPE__tev__Seek
#define SOAP_TYPE__tev__Seek (1477)
/* tev:Seek */
class SOAP_CMAC _tev__Seek
{
public:
	time_t UtcTime;	/* required element of type xsd:dateTime */
	bool *Reverse;	/* optional element of type xsd:boolean */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1477; } /* = unique type id SOAP_TYPE__tev__Seek */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__Seek() { _tev__Seek::soap_default(NULL); }
	virtual ~_tev__Seek() { }
};
#endif

#ifndef SOAP_TYPE__tev__SeekResponse
#define SOAP_TYPE__tev__SeekResponse (1478)
/* tev:SeekResponse */
class SOAP_CMAC _tev__SeekResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1478; } /* = unique type id SOAP_TYPE__tev__SeekResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__SeekResponse() { _tev__SeekResponse::soap_default(NULL); }
	virtual ~_tev__SeekResponse() { }
};
#endif

#ifndef SOAP_TYPE__tev__SetSynchronizationPoint
#define SOAP_TYPE__tev__SetSynchronizationPoint (1479)
/* tev:SetSynchronizationPoint */
class SOAP_CMAC _tev__SetSynchronizationPoint
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1479; } /* = unique type id SOAP_TYPE__tev__SetSynchronizationPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__SetSynchronizationPoint() { _tev__SetSynchronizationPoint::soap_default(NULL); }
	virtual ~_tev__SetSynchronizationPoint() { }
};
#endif

#ifndef SOAP_TYPE__tev__SetSynchronizationPointResponse
#define SOAP_TYPE__tev__SetSynchronizationPointResponse (1480)
/* tev:SetSynchronizationPointResponse */
class SOAP_CMAC _tev__SetSynchronizationPointResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1480; } /* = unique type id SOAP_TYPE__tev__SetSynchronizationPointResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__SetSynchronizationPointResponse() { _tev__SetSynchronizationPointResponse::soap_default(NULL); }
	virtual ~_tev__SetSynchronizationPointResponse() { }
};
#endif

#ifndef SOAP_TYPE__tev__GetEventProperties
#define SOAP_TYPE__tev__GetEventProperties (1481)
/* tev:GetEventProperties */
class SOAP_CMAC _tev__GetEventProperties
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1481; } /* = unique type id SOAP_TYPE__tev__GetEventProperties */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__GetEventProperties() { _tev__GetEventProperties::soap_default(NULL); }
	virtual ~_tev__GetEventProperties() { }
};
#endif

#ifndef SOAP_TYPE__tev__GetEventPropertiesResponse
#define SOAP_TYPE__tev__GetEventPropertiesResponse (1482)
/* tev:GetEventPropertiesResponse */
class SOAP_CMAC _tev__GetEventPropertiesResponse
{
public:
	std::vector<std::string >TopicNamespaceLocation;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:anyURI */
	bool wsnt__FixedTopicSet;	/* required element of type xsd:boolean */
	wstop__TopicSetType *wstop__TopicSet;	/* required element of type wstop:TopicSetType */
	std::vector<std::string >wsnt__TopicExpressionDialect;	/* required element of type xsd:anyURI */
	std::vector<std::string >MessageContentFilterDialect;	/* required element of type xsd:anyURI */
	std::vector<std::string >ProducerPropertiesFilterDialect;	/* optional element of type xsd:anyURI */
	std::vector<std::string >MessageContentSchemaLocation;	/* required element of type xsd:anyURI */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1482; } /* = unique type id SOAP_TYPE__tev__GetEventPropertiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__GetEventPropertiesResponse() { _tev__GetEventPropertiesResponse::soap_default(NULL); }
	virtual ~_tev__GetEventPropertiesResponse() { }
};
#endif

#ifndef SOAP_TYPE_timg__Capabilities
#define SOAP_TYPE_timg__Capabilities (1485)
/* timg:Capabilities */
class SOAP_CMAC timg__Capabilities : public xsd__anyType
{
public:
	std::vector<char * >__any;
	bool *ImageStabilization;	/* optional attribute */
	bool *Presets;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1485; } /* = unique type id SOAP_TYPE_timg__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         timg__Capabilities() { timg__Capabilities::soap_default(NULL); }
	virtual ~timg__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE_timg__ImagingPreset
#define SOAP_TYPE_timg__ImagingPreset (1486)
/* timg:ImagingPreset */
class SOAP_CMAC timg__ImagingPreset : public xsd__anyType
{
public:
	std::string Name;	/* required element of type tt:Name */
	std::string token;	/* required attribute */
	std::string type;	/* required attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1486; } /* = unique type id SOAP_TYPE_timg__ImagingPreset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         timg__ImagingPreset() { timg__ImagingPreset::soap_default(NULL); }
	virtual ~timg__ImagingPreset() { }
};
#endif

#ifndef SOAP_TYPE__timg__GetServiceCapabilities
#define SOAP_TYPE__timg__GetServiceCapabilities (1487)
/* timg:GetServiceCapabilities */
class SOAP_CMAC _timg__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1487; } /* = unique type id SOAP_TYPE__timg__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__GetServiceCapabilities() { _timg__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_timg__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__timg__GetServiceCapabilitiesResponse
#define SOAP_TYPE__timg__GetServiceCapabilitiesResponse (1488)
/* timg:GetServiceCapabilitiesResponse */
class SOAP_CMAC _timg__GetServiceCapabilitiesResponse
{
public:
	timg__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type timg:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1488; } /* = unique type id SOAP_TYPE__timg__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__GetServiceCapabilitiesResponse() { _timg__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_timg__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__timg__GetImagingSettings
#define SOAP_TYPE__timg__GetImagingSettings (1489)
/* timg:GetImagingSettings */
class SOAP_CMAC _timg__GetImagingSettings
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1489; } /* = unique type id SOAP_TYPE__timg__GetImagingSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__GetImagingSettings() { _timg__GetImagingSettings::soap_default(NULL); }
	virtual ~_timg__GetImagingSettings() { }
};
#endif

#ifndef SOAP_TYPE__timg__GetImagingSettingsResponse
#define SOAP_TYPE__timg__GetImagingSettingsResponse (1490)
/* timg:GetImagingSettingsResponse */
class SOAP_CMAC _timg__GetImagingSettingsResponse
{
public:
	tt__ImagingSettings20 *ImagingSettings;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:ImagingSettings20 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1490; } /* = unique type id SOAP_TYPE__timg__GetImagingSettingsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__GetImagingSettingsResponse() { _timg__GetImagingSettingsResponse::soap_default(NULL); }
	virtual ~_timg__GetImagingSettingsResponse() { }
};
#endif

#ifndef SOAP_TYPE__timg__SetImagingSettings
#define SOAP_TYPE__timg__SetImagingSettings (1491)
/* timg:SetImagingSettings */
class SOAP_CMAC _timg__SetImagingSettings
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	tt__ImagingSettings20 *ImagingSettings;	/* required element of type tt:ImagingSettings20 */
	bool *ForcePersistence;	/* optional element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1491; } /* = unique type id SOAP_TYPE__timg__SetImagingSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__SetImagingSettings() { _timg__SetImagingSettings::soap_default(NULL); }
	virtual ~_timg__SetImagingSettings() { }
};
#endif

#ifndef SOAP_TYPE__timg__SetImagingSettingsResponse
#define SOAP_TYPE__timg__SetImagingSettingsResponse (1492)
/* timg:SetImagingSettingsResponse */
class SOAP_CMAC _timg__SetImagingSettingsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1492; } /* = unique type id SOAP_TYPE__timg__SetImagingSettingsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__SetImagingSettingsResponse() { _timg__SetImagingSettingsResponse::soap_default(NULL); }
	virtual ~_timg__SetImagingSettingsResponse() { }
};
#endif

#ifndef SOAP_TYPE__timg__GetOptions
#define SOAP_TYPE__timg__GetOptions (1493)
/* timg:GetOptions */
class SOAP_CMAC _timg__GetOptions
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1493; } /* = unique type id SOAP_TYPE__timg__GetOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__GetOptions() { _timg__GetOptions::soap_default(NULL); }
	virtual ~_timg__GetOptions() { }
};
#endif

#ifndef SOAP_TYPE__timg__GetOptionsResponse
#define SOAP_TYPE__timg__GetOptionsResponse (1494)
/* timg:GetOptionsResponse */
class SOAP_CMAC _timg__GetOptionsResponse
{
public:
	tt__ImagingOptions20 *ImagingOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:ImagingOptions20 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1494; } /* = unique type id SOAP_TYPE__timg__GetOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__GetOptionsResponse() { _timg__GetOptionsResponse::soap_default(NULL); }
	virtual ~_timg__GetOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__timg__Move
#define SOAP_TYPE__timg__Move (1495)
/* timg:Move */
class SOAP_CMAC _timg__Move
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	tt__FocusMove *Focus;	/* required element of type tt:FocusMove */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1495; } /* = unique type id SOAP_TYPE__timg__Move */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__Move() { _timg__Move::soap_default(NULL); }
	virtual ~_timg__Move() { }
};
#endif

#ifndef SOAP_TYPE__timg__MoveResponse
#define SOAP_TYPE__timg__MoveResponse (1496)
/* timg:MoveResponse */
class SOAP_CMAC _timg__MoveResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1496; } /* = unique type id SOAP_TYPE__timg__MoveResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__MoveResponse() { _timg__MoveResponse::soap_default(NULL); }
	virtual ~_timg__MoveResponse() { }
};
#endif

#ifndef SOAP_TYPE__timg__GetMoveOptions
#define SOAP_TYPE__timg__GetMoveOptions (1497)
/* timg:GetMoveOptions */
class SOAP_CMAC _timg__GetMoveOptions
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1497; } /* = unique type id SOAP_TYPE__timg__GetMoveOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__GetMoveOptions() { _timg__GetMoveOptions::soap_default(NULL); }
	virtual ~_timg__GetMoveOptions() { }
};
#endif

#ifndef SOAP_TYPE__timg__GetMoveOptionsResponse
#define SOAP_TYPE__timg__GetMoveOptionsResponse (1498)
/* timg:GetMoveOptionsResponse */
class SOAP_CMAC _timg__GetMoveOptionsResponse
{
public:
	tt__MoveOptions20 *MoveOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:MoveOptions20 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1498; } /* = unique type id SOAP_TYPE__timg__GetMoveOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__GetMoveOptionsResponse() { _timg__GetMoveOptionsResponse::soap_default(NULL); }
	virtual ~_timg__GetMoveOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__timg__Stop
#define SOAP_TYPE__timg__Stop (1499)
/* timg:Stop */
class SOAP_CMAC _timg__Stop
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1499; } /* = unique type id SOAP_TYPE__timg__Stop */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__Stop() { _timg__Stop::soap_default(NULL); }
	virtual ~_timg__Stop() { }
};
#endif

#ifndef SOAP_TYPE__timg__StopResponse
#define SOAP_TYPE__timg__StopResponse (1500)
/* timg:StopResponse */
class SOAP_CMAC _timg__StopResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1500; } /* = unique type id SOAP_TYPE__timg__StopResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__StopResponse() { _timg__StopResponse::soap_default(NULL); }
	virtual ~_timg__StopResponse() { }
};
#endif

#ifndef SOAP_TYPE__timg__GetStatus
#define SOAP_TYPE__timg__GetStatus (1501)
/* timg:GetStatus */
class SOAP_CMAC _timg__GetStatus
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1501; } /* = unique type id SOAP_TYPE__timg__GetStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__GetStatus() { _timg__GetStatus::soap_default(NULL); }
	virtual ~_timg__GetStatus() { }
};
#endif

#ifndef SOAP_TYPE__timg__GetStatusResponse
#define SOAP_TYPE__timg__GetStatusResponse (1502)
/* timg:GetStatusResponse */
class SOAP_CMAC _timg__GetStatusResponse
{
public:
	tt__ImagingStatus20 *Status;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:ImagingStatus20 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1502; } /* = unique type id SOAP_TYPE__timg__GetStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__GetStatusResponse() { _timg__GetStatusResponse::soap_default(NULL); }
	virtual ~_timg__GetStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__timg__GetPresets
#define SOAP_TYPE__timg__GetPresets (1503)
/* timg:GetPresets */
class SOAP_CMAC _timg__GetPresets
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1503; } /* = unique type id SOAP_TYPE__timg__GetPresets */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__GetPresets() { _timg__GetPresets::soap_default(NULL); }
	virtual ~_timg__GetPresets() { }
};
#endif

#ifndef SOAP_TYPE__timg__GetPresetsResponse
#define SOAP_TYPE__timg__GetPresetsResponse (1504)
/* timg:GetPresetsResponse */
class SOAP_CMAC _timg__GetPresetsResponse
{
public:
	std::vector<timg__ImagingPreset * >Preset;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type timg:ImagingPreset */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1504; } /* = unique type id SOAP_TYPE__timg__GetPresetsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__GetPresetsResponse() { _timg__GetPresetsResponse::soap_default(NULL); }
	virtual ~_timg__GetPresetsResponse() { }
};
#endif

#ifndef SOAP_TYPE__timg__GetCurrentPreset
#define SOAP_TYPE__timg__GetCurrentPreset (1505)
/* timg:GetCurrentPreset */
class SOAP_CMAC _timg__GetCurrentPreset
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1505; } /* = unique type id SOAP_TYPE__timg__GetCurrentPreset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__GetCurrentPreset() { _timg__GetCurrentPreset::soap_default(NULL); }
	virtual ~_timg__GetCurrentPreset() { }
};
#endif

#ifndef SOAP_TYPE__timg__GetCurrentPresetResponse
#define SOAP_TYPE__timg__GetCurrentPresetResponse (1506)
/* timg:GetCurrentPresetResponse */
class SOAP_CMAC _timg__GetCurrentPresetResponse
{
public:
	timg__ImagingPreset *Preset;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type timg:ImagingPreset */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1506; } /* = unique type id SOAP_TYPE__timg__GetCurrentPresetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__GetCurrentPresetResponse() { _timg__GetCurrentPresetResponse::soap_default(NULL); }
	virtual ~_timg__GetCurrentPresetResponse() { }
};
#endif

#ifndef SOAP_TYPE__timg__SetCurrentPreset
#define SOAP_TYPE__timg__SetCurrentPreset (1507)
/* timg:SetCurrentPreset */
class SOAP_CMAC _timg__SetCurrentPreset
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	std::string PresetToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1507; } /* = unique type id SOAP_TYPE__timg__SetCurrentPreset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__SetCurrentPreset() { _timg__SetCurrentPreset::soap_default(NULL); }
	virtual ~_timg__SetCurrentPreset() { }
};
#endif

#ifndef SOAP_TYPE__timg__SetCurrentPresetResponse
#define SOAP_TYPE__timg__SetCurrentPresetResponse (1508)
/* timg:SetCurrentPresetResponse */
class SOAP_CMAC _timg__SetCurrentPresetResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1508; } /* = unique type id SOAP_TYPE__timg__SetCurrentPresetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__SetCurrentPresetResponse() { _timg__SetCurrentPresetResponse::soap_default(NULL); }
	virtual ~_timg__SetCurrentPresetResponse() { }
};
#endif

#ifndef SOAP_TYPE_trt__Capabilities
#define SOAP_TYPE_trt__Capabilities (1509)
/* trt:Capabilities */
class SOAP_CMAC trt__Capabilities : public xsd__anyType
{
public:
	class trt__ProfileCapabilities *ProfileCapabilities;	/* required element of type trt:ProfileCapabilities */
	class trt__StreamingCapabilities *StreamingCapabilities;	/* required element of type trt:StreamingCapabilities */
	std::vector<char * >__any;
	bool *SnapshotUri;	/* optional attribute */
	bool *Rotation;	/* optional attribute */
	bool *VideoSourceMode;	/* optional attribute */
	bool *OSD;	/* optional attribute */
	bool *TemporaryOSDText;	/* optional attribute */
	bool *EXICompression;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1509; } /* = unique type id SOAP_TYPE_trt__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         trt__Capabilities() { trt__Capabilities::soap_default(NULL); }
	virtual ~trt__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE_trt__ProfileCapabilities
#define SOAP_TYPE_trt__ProfileCapabilities (1510)
/* trt:ProfileCapabilities */
class SOAP_CMAC trt__ProfileCapabilities : public xsd__anyType
{
public:
	std::vector<char * >__any;
	int *MaximumNumberOfProfiles;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1510; } /* = unique type id SOAP_TYPE_trt__ProfileCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         trt__ProfileCapabilities() { trt__ProfileCapabilities::soap_default(NULL); }
	virtual ~trt__ProfileCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_trt__StreamingCapabilities
#define SOAP_TYPE_trt__StreamingCapabilities (1511)
/* trt:StreamingCapabilities */
class SOAP_CMAC trt__StreamingCapabilities : public xsd__anyType
{
public:
	std::vector<char * >__any;
	bool *RTPMulticast;	/* optional attribute */
	bool *RTP_USCORETCP;	/* optional attribute */
	bool *RTP_USCORERTSP_USCORETCP;	/* optional attribute */
	bool *NonAggregateControl;	/* optional attribute */
	bool *NoRTSPStreaming;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1511; } /* = unique type id SOAP_TYPE_trt__StreamingCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         trt__StreamingCapabilities() { trt__StreamingCapabilities::soap_default(NULL); }
	virtual ~trt__StreamingCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_trt__VideoSourceMode
#define SOAP_TYPE_trt__VideoSourceMode (1512)
/* trt:VideoSourceMode */
class SOAP_CMAC trt__VideoSourceMode : public xsd__anyType
{
public:
	float MaxFramerate;	/* required element of type xsd:float */
	tt__VideoResolution *MaxResolution;	/* required element of type tt:VideoResolution */
	std::string Encodings;	/* required element of type trt:EncodingTypes */
	bool Reboot;	/* required element of type xsd:boolean */
	std::string *Description;	/* optional element of type tt:Description */
	class trt__VideoSourceModeExtension *Extension;	/* optional element of type trt:VideoSourceModeExtension */
	std::string token;	/* required attribute */
	bool *Enabled;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1512; } /* = unique type id SOAP_TYPE_trt__VideoSourceMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         trt__VideoSourceMode() { trt__VideoSourceMode::soap_default(NULL); }
	virtual ~trt__VideoSourceMode() { }
};
#endif

#ifndef SOAP_TYPE_trt__VideoSourceModeExtension
#define SOAP_TYPE_trt__VideoSourceModeExtension (1513)
/* trt:VideoSourceModeExtension */
class SOAP_CMAC trt__VideoSourceModeExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1513; } /* = unique type id SOAP_TYPE_trt__VideoSourceModeExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         trt__VideoSourceModeExtension() { trt__VideoSourceModeExtension::soap_default(NULL); }
	virtual ~trt__VideoSourceModeExtension() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetServiceCapabilities
#define SOAP_TYPE__trt__GetServiceCapabilities (1514)
/* trt:GetServiceCapabilities */
class SOAP_CMAC _trt__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1514; } /* = unique type id SOAP_TYPE__trt__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetServiceCapabilities() { _trt__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_trt__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetServiceCapabilitiesResponse
#define SOAP_TYPE__trt__GetServiceCapabilitiesResponse (1515)
/* trt:GetServiceCapabilitiesResponse */
class SOAP_CMAC _trt__GetServiceCapabilitiesResponse
{
public:
	trt__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type trt:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1515; } /* = unique type id SOAP_TYPE__trt__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetServiceCapabilitiesResponse() { _trt__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_trt__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSources
#define SOAP_TYPE__trt__GetVideoSources (1516)
/* trt:GetVideoSources */
class SOAP_CMAC _trt__GetVideoSources
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1516; } /* = unique type id SOAP_TYPE__trt__GetVideoSources */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSources() { _trt__GetVideoSources::soap_default(NULL); }
	virtual ~_trt__GetVideoSources() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourcesResponse
#define SOAP_TYPE__trt__GetVideoSourcesResponse (1517)
/* trt:GetVideoSourcesResponse */
class SOAP_CMAC _trt__GetVideoSourcesResponse
{
public:
	std::vector<class tt__VideoSource * >VideoSources;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:VideoSource */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1517; } /* = unique type id SOAP_TYPE__trt__GetVideoSourcesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourcesResponse() { _trt__GetVideoSourcesResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoSourcesResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSources
#define SOAP_TYPE__trt__GetAudioSources (1518)
/* trt:GetAudioSources */
class SOAP_CMAC _trt__GetAudioSources
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1518; } /* = unique type id SOAP_TYPE__trt__GetAudioSources */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSources() { _trt__GetAudioSources::soap_default(NULL); }
	virtual ~_trt__GetAudioSources() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourcesResponse
#define SOAP_TYPE__trt__GetAudioSourcesResponse (1519)
/* trt:GetAudioSourcesResponse */
class SOAP_CMAC _trt__GetAudioSourcesResponse
{
public:
	std::vector<class tt__AudioSource * >AudioSources;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioSource */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1519; } /* = unique type id SOAP_TYPE__trt__GetAudioSourcesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourcesResponse() { _trt__GetAudioSourcesResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioSourcesResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputs
#define SOAP_TYPE__trt__GetAudioOutputs (1520)
/* trt:GetAudioOutputs */
class SOAP_CMAC _trt__GetAudioOutputs
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1520; } /* = unique type id SOAP_TYPE__trt__GetAudioOutputs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputs() { _trt__GetAudioOutputs::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputs() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputsResponse
#define SOAP_TYPE__trt__GetAudioOutputsResponse (1521)
/* trt:GetAudioOutputsResponse */
class SOAP_CMAC _trt__GetAudioOutputsResponse
{
public:
	std::vector<class tt__AudioOutput * >AudioOutputs;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioOutput */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1521; } /* = unique type id SOAP_TYPE__trt__GetAudioOutputsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputsResponse() { _trt__GetAudioOutputsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__CreateProfile
#define SOAP_TYPE__trt__CreateProfile (1522)
/* trt:CreateProfile */
class SOAP_CMAC _trt__CreateProfile
{
public:
	std::string Name;	/* required element of type tt:Name */
	std::string *Token;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1522; } /* = unique type id SOAP_TYPE__trt__CreateProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__CreateProfile() { _trt__CreateProfile::soap_default(NULL); }
	virtual ~_trt__CreateProfile() { }
};
#endif

#ifndef SOAP_TYPE__trt__CreateProfileResponse
#define SOAP_TYPE__trt__CreateProfileResponse (1523)
/* trt:CreateProfileResponse */
class SOAP_CMAC _trt__CreateProfileResponse
{
public:
	tt__Profile *Profile;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Profile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1523; } /* = unique type id SOAP_TYPE__trt__CreateProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__CreateProfileResponse() { _trt__CreateProfileResponse::soap_default(NULL); }
	virtual ~_trt__CreateProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetProfile
#define SOAP_TYPE__trt__GetProfile (1524)
/* trt:GetProfile */
class SOAP_CMAC _trt__GetProfile
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1524; } /* = unique type id SOAP_TYPE__trt__GetProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetProfile() { _trt__GetProfile::soap_default(NULL); }
	virtual ~_trt__GetProfile() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetProfileResponse
#define SOAP_TYPE__trt__GetProfileResponse (1525)
/* trt:GetProfileResponse */
class SOAP_CMAC _trt__GetProfileResponse
{
public:
	tt__Profile *Profile;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Profile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1525; } /* = unique type id SOAP_TYPE__trt__GetProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetProfileResponse() { _trt__GetProfileResponse::soap_default(NULL); }
	virtual ~_trt__GetProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetProfiles
#define SOAP_TYPE__trt__GetProfiles (1526)
/* trt:GetProfiles */
class SOAP_CMAC _trt__GetProfiles
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1526; } /* = unique type id SOAP_TYPE__trt__GetProfiles */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetProfiles() { _trt__GetProfiles::soap_default(NULL); }
	virtual ~_trt__GetProfiles() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetProfilesResponse
#define SOAP_TYPE__trt__GetProfilesResponse (1527)
/* trt:GetProfilesResponse */
class SOAP_CMAC _trt__GetProfilesResponse
{
public:
	std::vector<tt__Profile * >Profiles;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:Profile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1527; } /* = unique type id SOAP_TYPE__trt__GetProfilesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetProfilesResponse() { _trt__GetProfilesResponse::soap_default(NULL); }
	virtual ~_trt__GetProfilesResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddVideoEncoderConfiguration
#define SOAP_TYPE__trt__AddVideoEncoderConfiguration (1528)
/* trt:AddVideoEncoderConfiguration */
class SOAP_CMAC _trt__AddVideoEncoderConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1528; } /* = unique type id SOAP_TYPE__trt__AddVideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddVideoEncoderConfiguration() { _trt__AddVideoEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__AddVideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse (1529)
/* trt:AddVideoEncoderConfigurationResponse */
class SOAP_CMAC _trt__AddVideoEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1529; } /* = unique type id SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddVideoEncoderConfigurationResponse() { _trt__AddVideoEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddVideoEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoEncoderConfiguration
#define SOAP_TYPE__trt__RemoveVideoEncoderConfiguration (1530)
/* trt:RemoveVideoEncoderConfiguration */
class SOAP_CMAC _trt__RemoveVideoEncoderConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1530; } /* = unique type id SOAP_TYPE__trt__RemoveVideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveVideoEncoderConfiguration() { _trt__RemoveVideoEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveVideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse (1531)
/* trt:RemoveVideoEncoderConfigurationResponse */
class SOAP_CMAC _trt__RemoveVideoEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1531; } /* = unique type id SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveVideoEncoderConfigurationResponse() { _trt__RemoveVideoEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveVideoEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddVideoSourceConfiguration
#define SOAP_TYPE__trt__AddVideoSourceConfiguration (1532)
/* trt:AddVideoSourceConfiguration */
class SOAP_CMAC _trt__AddVideoSourceConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1532; } /* = unique type id SOAP_TYPE__trt__AddVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddVideoSourceConfiguration() { _trt__AddVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__AddVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__AddVideoSourceConfigurationResponse (1533)
/* trt:AddVideoSourceConfigurationResponse */
class SOAP_CMAC _trt__AddVideoSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1533; } /* = unique type id SOAP_TYPE__trt__AddVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddVideoSourceConfigurationResponse() { _trt__AddVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoSourceConfiguration
#define SOAP_TYPE__trt__RemoveVideoSourceConfiguration (1534)
/* trt:RemoveVideoSourceConfiguration */
class SOAP_CMAC _trt__RemoveVideoSourceConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1534; } /* = unique type id SOAP_TYPE__trt__RemoveVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveVideoSourceConfiguration() { _trt__RemoveVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse (1535)
/* trt:RemoveVideoSourceConfigurationResponse */
class SOAP_CMAC _trt__RemoveVideoSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1535; } /* = unique type id SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveVideoSourceConfigurationResponse() { _trt__RemoveVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioEncoderConfiguration
#define SOAP_TYPE__trt__AddAudioEncoderConfiguration (1536)
/* trt:AddAudioEncoderConfiguration */
class SOAP_CMAC _trt__AddAudioEncoderConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1536; } /* = unique type id SOAP_TYPE__trt__AddAudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioEncoderConfiguration() { _trt__AddAudioEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__AddAudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse (1537)
/* trt:AddAudioEncoderConfigurationResponse */
class SOAP_CMAC _trt__AddAudioEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1537; } /* = unique type id SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioEncoderConfigurationResponse() { _trt__AddAudioEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddAudioEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioEncoderConfiguration
#define SOAP_TYPE__trt__RemoveAudioEncoderConfiguration (1538)
/* trt:RemoveAudioEncoderConfiguration */
class SOAP_CMAC _trt__RemoveAudioEncoderConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1538; } /* = unique type id SOAP_TYPE__trt__RemoveAudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioEncoderConfiguration() { _trt__RemoveAudioEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveAudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse (1539)
/* trt:RemoveAudioEncoderConfigurationResponse */
class SOAP_CMAC _trt__RemoveAudioEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1539; } /* = unique type id SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioEncoderConfigurationResponse() { _trt__RemoveAudioEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveAudioEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioSourceConfiguration
#define SOAP_TYPE__trt__AddAudioSourceConfiguration (1540)
/* trt:AddAudioSourceConfiguration */
class SOAP_CMAC _trt__AddAudioSourceConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1540; } /* = unique type id SOAP_TYPE__trt__AddAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioSourceConfiguration() { _trt__AddAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__AddAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__AddAudioSourceConfigurationResponse (1541)
/* trt:AddAudioSourceConfigurationResponse */
class SOAP_CMAC _trt__AddAudioSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1541; } /* = unique type id SOAP_TYPE__trt__AddAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioSourceConfigurationResponse() { _trt__AddAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioSourceConfiguration
#define SOAP_TYPE__trt__RemoveAudioSourceConfiguration (1542)
/* trt:RemoveAudioSourceConfiguration */
class SOAP_CMAC _trt__RemoveAudioSourceConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1542; } /* = unique type id SOAP_TYPE__trt__RemoveAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioSourceConfiguration() { _trt__RemoveAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse (1543)
/* trt:RemoveAudioSourceConfigurationResponse */
class SOAP_CMAC _trt__RemoveAudioSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1543; } /* = unique type id SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioSourceConfigurationResponse() { _trt__RemoveAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddPTZConfiguration
#define SOAP_TYPE__trt__AddPTZConfiguration (1544)
/* trt:AddPTZConfiguration */
class SOAP_CMAC _trt__AddPTZConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1544; } /* = unique type id SOAP_TYPE__trt__AddPTZConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddPTZConfiguration() { _trt__AddPTZConfiguration::soap_default(NULL); }
	virtual ~_trt__AddPTZConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddPTZConfigurationResponse
#define SOAP_TYPE__trt__AddPTZConfigurationResponse (1545)
/* trt:AddPTZConfigurationResponse */
class SOAP_CMAC _trt__AddPTZConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1545; } /* = unique type id SOAP_TYPE__trt__AddPTZConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddPTZConfigurationResponse() { _trt__AddPTZConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddPTZConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemovePTZConfiguration
#define SOAP_TYPE__trt__RemovePTZConfiguration (1546)
/* trt:RemovePTZConfiguration */
class SOAP_CMAC _trt__RemovePTZConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1546; } /* = unique type id SOAP_TYPE__trt__RemovePTZConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemovePTZConfiguration() { _trt__RemovePTZConfiguration::soap_default(NULL); }
	virtual ~_trt__RemovePTZConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemovePTZConfigurationResponse
#define SOAP_TYPE__trt__RemovePTZConfigurationResponse (1547)
/* trt:RemovePTZConfigurationResponse */
class SOAP_CMAC _trt__RemovePTZConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1547; } /* = unique type id SOAP_TYPE__trt__RemovePTZConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemovePTZConfigurationResponse() { _trt__RemovePTZConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemovePTZConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__AddVideoAnalyticsConfiguration (1548)
/* trt:AddVideoAnalyticsConfiguration */
class SOAP_CMAC _trt__AddVideoAnalyticsConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1548; } /* = unique type id SOAP_TYPE__trt__AddVideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddVideoAnalyticsConfiguration() { _trt__AddVideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~_trt__AddVideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse (1549)
/* trt:AddVideoAnalyticsConfigurationResponse */
class SOAP_CMAC _trt__AddVideoAnalyticsConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1549; } /* = unique type id SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddVideoAnalyticsConfigurationResponse() { _trt__AddVideoAnalyticsConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddVideoAnalyticsConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration (1550)
/* trt:RemoveVideoAnalyticsConfiguration */
class SOAP_CMAC _trt__RemoveVideoAnalyticsConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1550; } /* = unique type id SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveVideoAnalyticsConfiguration() { _trt__RemoveVideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveVideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse (1551)
/* trt:RemoveVideoAnalyticsConfigurationResponse */
class SOAP_CMAC _trt__RemoveVideoAnalyticsConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1551; } /* = unique type id SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveVideoAnalyticsConfigurationResponse() { _trt__RemoveVideoAnalyticsConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveVideoAnalyticsConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddMetadataConfiguration
#define SOAP_TYPE__trt__AddMetadataConfiguration (1552)
/* trt:AddMetadataConfiguration */
class SOAP_CMAC _trt__AddMetadataConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1552; } /* = unique type id SOAP_TYPE__trt__AddMetadataConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddMetadataConfiguration() { _trt__AddMetadataConfiguration::soap_default(NULL); }
	virtual ~_trt__AddMetadataConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddMetadataConfigurationResponse
#define SOAP_TYPE__trt__AddMetadataConfigurationResponse (1553)
/* trt:AddMetadataConfigurationResponse */
class SOAP_CMAC _trt__AddMetadataConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1553; } /* = unique type id SOAP_TYPE__trt__AddMetadataConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddMetadataConfigurationResponse() { _trt__AddMetadataConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddMetadataConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveMetadataConfiguration
#define SOAP_TYPE__trt__RemoveMetadataConfiguration (1554)
/* trt:RemoveMetadataConfiguration */
class SOAP_CMAC _trt__RemoveMetadataConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1554; } /* = unique type id SOAP_TYPE__trt__RemoveMetadataConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveMetadataConfiguration() { _trt__RemoveMetadataConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveMetadataConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveMetadataConfigurationResponse
#define SOAP_TYPE__trt__RemoveMetadataConfigurationResponse (1555)
/* trt:RemoveMetadataConfigurationResponse */
class SOAP_CMAC _trt__RemoveMetadataConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1555; } /* = unique type id SOAP_TYPE__trt__RemoveMetadataConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveMetadataConfigurationResponse() { _trt__RemoveMetadataConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveMetadataConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioOutputConfiguration
#define SOAP_TYPE__trt__AddAudioOutputConfiguration (1556)
/* trt:AddAudioOutputConfiguration */
class SOAP_CMAC _trt__AddAudioOutputConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1556; } /* = unique type id SOAP_TYPE__trt__AddAudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioOutputConfiguration() { _trt__AddAudioOutputConfiguration::soap_default(NULL); }
	virtual ~_trt__AddAudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__AddAudioOutputConfigurationResponse (1557)
/* trt:AddAudioOutputConfigurationResponse */
class SOAP_CMAC _trt__AddAudioOutputConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1557; } /* = unique type id SOAP_TYPE__trt__AddAudioOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioOutputConfigurationResponse() { _trt__AddAudioOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddAudioOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioOutputConfiguration
#define SOAP_TYPE__trt__RemoveAudioOutputConfiguration (1558)
/* trt:RemoveAudioOutputConfiguration */
class SOAP_CMAC _trt__RemoveAudioOutputConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1558; } /* = unique type id SOAP_TYPE__trt__RemoveAudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioOutputConfiguration() { _trt__RemoveAudioOutputConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveAudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse (1559)
/* trt:RemoveAudioOutputConfigurationResponse */
class SOAP_CMAC _trt__RemoveAudioOutputConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1559; } /* = unique type id SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioOutputConfigurationResponse() { _trt__RemoveAudioOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveAudioOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioDecoderConfiguration
#define SOAP_TYPE__trt__AddAudioDecoderConfiguration (1560)
/* trt:AddAudioDecoderConfiguration */
class SOAP_CMAC _trt__AddAudioDecoderConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1560; } /* = unique type id SOAP_TYPE__trt__AddAudioDecoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioDecoderConfiguration() { _trt__AddAudioDecoderConfiguration::soap_default(NULL); }
	virtual ~_trt__AddAudioDecoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse (1561)
/* trt:AddAudioDecoderConfigurationResponse */
class SOAP_CMAC _trt__AddAudioDecoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1561; } /* = unique type id SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioDecoderConfigurationResponse() { _trt__AddAudioDecoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddAudioDecoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioDecoderConfiguration
#define SOAP_TYPE__trt__RemoveAudioDecoderConfiguration (1562)
/* trt:RemoveAudioDecoderConfiguration */
class SOAP_CMAC _trt__RemoveAudioDecoderConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1562; } /* = unique type id SOAP_TYPE__trt__RemoveAudioDecoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioDecoderConfiguration() { _trt__RemoveAudioDecoderConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveAudioDecoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse (1563)
/* trt:RemoveAudioDecoderConfigurationResponse */
class SOAP_CMAC _trt__RemoveAudioDecoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1563; } /* = unique type id SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioDecoderConfigurationResponse() { _trt__RemoveAudioDecoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveAudioDecoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__DeleteProfile
#define SOAP_TYPE__trt__DeleteProfile (1564)
/* trt:DeleteProfile */
class SOAP_CMAC _trt__DeleteProfile
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1564; } /* = unique type id SOAP_TYPE__trt__DeleteProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__DeleteProfile() { _trt__DeleteProfile::soap_default(NULL); }
	virtual ~_trt__DeleteProfile() { }
};
#endif

#ifndef SOAP_TYPE__trt__DeleteProfileResponse
#define SOAP_TYPE__trt__DeleteProfileResponse (1565)
/* trt:DeleteProfileResponse */
class SOAP_CMAC _trt__DeleteProfileResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1565; } /* = unique type id SOAP_TYPE__trt__DeleteProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__DeleteProfileResponse() { _trt__DeleteProfileResponse::soap_default(NULL); }
	virtual ~_trt__DeleteProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurations
#define SOAP_TYPE__trt__GetVideoEncoderConfigurations (1566)
/* trt:GetVideoEncoderConfigurations */
class SOAP_CMAC _trt__GetVideoEncoderConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1566; } /* = unique type id SOAP_TYPE__trt__GetVideoEncoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoEncoderConfigurations() { _trt__GetVideoEncoderConfigurations::soap_default(NULL); }
	virtual ~_trt__GetVideoEncoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse (1567)
/* trt:GetVideoEncoderConfigurationsResponse */
class SOAP_CMAC _trt__GetVideoEncoderConfigurationsResponse
{
public:
	std::vector<tt__VideoEncoderConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:VideoEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1567; } /* = unique type id SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoEncoderConfigurationsResponse() { _trt__GetVideoEncoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoEncoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurations
#define SOAP_TYPE__trt__GetVideoSourceConfigurations (1568)
/* trt:GetVideoSourceConfigurations */
class SOAP_CMAC _trt__GetVideoSourceConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1568; } /* = unique type id SOAP_TYPE__trt__GetVideoSourceConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceConfigurations() { _trt__GetVideoSourceConfigurations::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse (1569)
/* trt:GetVideoSourceConfigurationsResponse */
class SOAP_CMAC _trt__GetVideoSourceConfigurationsResponse
{
public:
	std::vector<tt__VideoSourceConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:VideoSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1569; } /* = unique type id SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceConfigurationsResponse() { _trt__GetVideoSourceConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurations
#define SOAP_TYPE__trt__GetAudioEncoderConfigurations (1570)
/* trt:GetAudioEncoderConfigurations */
class SOAP_CMAC _trt__GetAudioEncoderConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1570; } /* = unique type id SOAP_TYPE__trt__GetAudioEncoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioEncoderConfigurations() { _trt__GetAudioEncoderConfigurations::soap_default(NULL); }
	virtual ~_trt__GetAudioEncoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse (1571)
/* trt:GetAudioEncoderConfigurationsResponse */
class SOAP_CMAC _trt__GetAudioEncoderConfigurationsResponse
{
public:
	std::vector<tt__AudioEncoderConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1571; } /* = unique type id SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioEncoderConfigurationsResponse() { _trt__GetAudioEncoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioEncoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurations
#define SOAP_TYPE__trt__GetAudioSourceConfigurations (1572)
/* trt:GetAudioSourceConfigurations */
class SOAP_CMAC _trt__GetAudioSourceConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1572; } /* = unique type id SOAP_TYPE__trt__GetAudioSourceConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourceConfigurations() { _trt__GetAudioSourceConfigurations::soap_default(NULL); }
	virtual ~_trt__GetAudioSourceConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse (1573)
/* trt:GetAudioSourceConfigurationsResponse */
class SOAP_CMAC _trt__GetAudioSourceConfigurationsResponse
{
public:
	std::vector<tt__AudioSourceConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1573; } /* = unique type id SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourceConfigurationsResponse() { _trt__GetAudioSourceConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioSourceConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfigurations
#define SOAP_TYPE__trt__GetVideoAnalyticsConfigurations (1574)
/* trt:GetVideoAnalyticsConfigurations */
class SOAP_CMAC _trt__GetVideoAnalyticsConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1574; } /* = unique type id SOAP_TYPE__trt__GetVideoAnalyticsConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoAnalyticsConfigurations() { _trt__GetVideoAnalyticsConfigurations::soap_default(NULL); }
	virtual ~_trt__GetVideoAnalyticsConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse
#define SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse (1575)
/* trt:GetVideoAnalyticsConfigurationsResponse */
class SOAP_CMAC _trt__GetVideoAnalyticsConfigurationsResponse
{
public:
	std::vector<tt__VideoAnalyticsConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:VideoAnalyticsConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1575; } /* = unique type id SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoAnalyticsConfigurationsResponse() { _trt__GetVideoAnalyticsConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoAnalyticsConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfigurations
#define SOAP_TYPE__trt__GetMetadataConfigurations (1576)
/* trt:GetMetadataConfigurations */
class SOAP_CMAC _trt__GetMetadataConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1576; } /* = unique type id SOAP_TYPE__trt__GetMetadataConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetMetadataConfigurations() { _trt__GetMetadataConfigurations::soap_default(NULL); }
	virtual ~_trt__GetMetadataConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfigurationsResponse
#define SOAP_TYPE__trt__GetMetadataConfigurationsResponse (1577)
/* trt:GetMetadataConfigurationsResponse */
class SOAP_CMAC _trt__GetMetadataConfigurationsResponse
{
public:
	std::vector<tt__MetadataConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:MetadataConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1577; } /* = unique type id SOAP_TYPE__trt__GetMetadataConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetMetadataConfigurationsResponse() { _trt__GetMetadataConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetMetadataConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurations
#define SOAP_TYPE__trt__GetAudioOutputConfigurations (1578)
/* trt:GetAudioOutputConfigurations */
class SOAP_CMAC _trt__GetAudioOutputConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1578; } /* = unique type id SOAP_TYPE__trt__GetAudioOutputConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputConfigurations() { _trt__GetAudioOutputConfigurations::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse (1579)
/* trt:GetAudioOutputConfigurationsResponse */
class SOAP_CMAC _trt__GetAudioOutputConfigurationsResponse
{
public:
	std::vector<tt__AudioOutputConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioOutputConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1579; } /* = unique type id SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputConfigurationsResponse() { _trt__GetAudioOutputConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurations
#define SOAP_TYPE__trt__GetAudioDecoderConfigurations (1580)
/* trt:GetAudioDecoderConfigurations */
class SOAP_CMAC _trt__GetAudioDecoderConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1580; } /* = unique type id SOAP_TYPE__trt__GetAudioDecoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioDecoderConfigurations() { _trt__GetAudioDecoderConfigurations::soap_default(NULL); }
	virtual ~_trt__GetAudioDecoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse (1581)
/* trt:GetAudioDecoderConfigurationsResponse */
class SOAP_CMAC _trt__GetAudioDecoderConfigurationsResponse
{
public:
	std::vector<tt__AudioDecoderConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioDecoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1581; } /* = unique type id SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioDecoderConfigurationsResponse() { _trt__GetAudioDecoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioDecoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfiguration
#define SOAP_TYPE__trt__GetVideoSourceConfiguration (1582)
/* trt:GetVideoSourceConfiguration */
class SOAP_CMAC _trt__GetVideoSourceConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1582; } /* = unique type id SOAP_TYPE__trt__GetVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceConfiguration() { _trt__GetVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__GetVideoSourceConfigurationResponse (1583)
/* trt:GetVideoSourceConfigurationResponse */
class SOAP_CMAC _trt__GetVideoSourceConfigurationResponse
{
public:
	tt__VideoSourceConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1583; } /* = unique type id SOAP_TYPE__trt__GetVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceConfigurationResponse() { _trt__GetVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfiguration
#define SOAP_TYPE__trt__GetVideoEncoderConfiguration (1584)
/* trt:GetVideoEncoderConfiguration */
class SOAP_CMAC _trt__GetVideoEncoderConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1584; } /* = unique type id SOAP_TYPE__trt__GetVideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoEncoderConfiguration() { _trt__GetVideoEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__GetVideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse (1585)
/* trt:GetVideoEncoderConfigurationResponse */
class SOAP_CMAC _trt__GetVideoEncoderConfigurationResponse
{
public:
	tt__VideoEncoderConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1585; } /* = unique type id SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoEncoderConfigurationResponse() { _trt__GetVideoEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfiguration
#define SOAP_TYPE__trt__GetAudioSourceConfiguration (1586)
/* trt:GetAudioSourceConfiguration */
class SOAP_CMAC _trt__GetAudioSourceConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1586; } /* = unique type id SOAP_TYPE__trt__GetAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourceConfiguration() { _trt__GetAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__GetAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__GetAudioSourceConfigurationResponse (1587)
/* trt:GetAudioSourceConfigurationResponse */
class SOAP_CMAC _trt__GetAudioSourceConfigurationResponse
{
public:
	tt__AudioSourceConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1587; } /* = unique type id SOAP_TYPE__trt__GetAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourceConfigurationResponse() { _trt__GetAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfiguration
#define SOAP_TYPE__trt__GetAudioEncoderConfiguration (1588)
/* trt:GetAudioEncoderConfiguration */
class SOAP_CMAC _trt__GetAudioEncoderConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1588; } /* = unique type id SOAP_TYPE__trt__GetAudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioEncoderConfiguration() { _trt__GetAudioEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__GetAudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse (1589)
/* trt:GetAudioEncoderConfigurationResponse */
class SOAP_CMAC _trt__GetAudioEncoderConfigurationResponse
{
public:
	tt__AudioEncoderConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1589; } /* = unique type id SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioEncoderConfigurationResponse() { _trt__GetAudioEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__GetVideoAnalyticsConfiguration (1590)
/* trt:GetVideoAnalyticsConfiguration */
class SOAP_CMAC _trt__GetVideoAnalyticsConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1590; } /* = unique type id SOAP_TYPE__trt__GetVideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoAnalyticsConfiguration() { _trt__GetVideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~_trt__GetVideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse (1591)
/* trt:GetVideoAnalyticsConfigurationResponse */
class SOAP_CMAC _trt__GetVideoAnalyticsConfigurationResponse
{
public:
	tt__VideoAnalyticsConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoAnalyticsConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1591; } /* = unique type id SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoAnalyticsConfigurationResponse() { _trt__GetVideoAnalyticsConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoAnalyticsConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfiguration
#define SOAP_TYPE__trt__GetMetadataConfiguration (1592)
/* trt:GetMetadataConfiguration */
class SOAP_CMAC _trt__GetMetadataConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1592; } /* = unique type id SOAP_TYPE__trt__GetMetadataConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetMetadataConfiguration() { _trt__GetMetadataConfiguration::soap_default(NULL); }
	virtual ~_trt__GetMetadataConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfigurationResponse
#define SOAP_TYPE__trt__GetMetadataConfigurationResponse (1593)
/* trt:GetMetadataConfigurationResponse */
class SOAP_CMAC _trt__GetMetadataConfigurationResponse
{
public:
	tt__MetadataConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:MetadataConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1593; } /* = unique type id SOAP_TYPE__trt__GetMetadataConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetMetadataConfigurationResponse() { _trt__GetMetadataConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetMetadataConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfiguration
#define SOAP_TYPE__trt__GetAudioOutputConfiguration (1594)
/* trt:GetAudioOutputConfiguration */
class SOAP_CMAC _trt__GetAudioOutputConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1594; } /* = unique type id SOAP_TYPE__trt__GetAudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputConfiguration() { _trt__GetAudioOutputConfiguration::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__GetAudioOutputConfigurationResponse (1595)
/* trt:GetAudioOutputConfigurationResponse */
class SOAP_CMAC _trt__GetAudioOutputConfigurationResponse
{
public:
	tt__AudioOutputConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioOutputConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1595; } /* = unique type id SOAP_TYPE__trt__GetAudioOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputConfigurationResponse() { _trt__GetAudioOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfiguration
#define SOAP_TYPE__trt__GetAudioDecoderConfiguration (1596)
/* trt:GetAudioDecoderConfiguration */
class SOAP_CMAC _trt__GetAudioDecoderConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1596; } /* = unique type id SOAP_TYPE__trt__GetAudioDecoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioDecoderConfiguration() { _trt__GetAudioDecoderConfiguration::soap_default(NULL); }
	virtual ~_trt__GetAudioDecoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse (1597)
/* trt:GetAudioDecoderConfigurationResponse */
class SOAP_CMAC _trt__GetAudioDecoderConfigurationResponse
{
public:
	tt__AudioDecoderConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioDecoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1597; } /* = unique type id SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioDecoderConfigurationResponse() { _trt__GetAudioDecoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioDecoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations
#define SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations (1598)
/* trt:GetCompatibleVideoEncoderConfigurations */
class SOAP_CMAC _trt__GetCompatibleVideoEncoderConfigurations
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1598; } /* = unique type id SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleVideoEncoderConfigurations() { _trt__GetCompatibleVideoEncoderConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleVideoEncoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse (1599)
/* trt:GetCompatibleVideoEncoderConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleVideoEncoderConfigurationsResponse
{
public:
	std::vector<tt__VideoEncoderConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:VideoEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1599; } /* = unique type id SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleVideoEncoderConfigurationsResponse() { _trt__GetCompatibleVideoEncoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleVideoEncoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations
#define SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations (1600)
/* trt:GetCompatibleVideoSourceConfigurations */
class SOAP_CMAC _trt__GetCompatibleVideoSourceConfigurations
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1600; } /* = unique type id SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleVideoSourceConfigurations() { _trt__GetCompatibleVideoSourceConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleVideoSourceConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse (1601)
/* trt:GetCompatibleVideoSourceConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleVideoSourceConfigurationsResponse
{
public:
	std::vector<tt__VideoSourceConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:VideoSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1601; } /* = unique type id SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleVideoSourceConfigurationsResponse() { _trt__GetCompatibleVideoSourceConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleVideoSourceConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations (1602)
/* trt:GetCompatibleAudioEncoderConfigurations */
class SOAP_CMAC _trt__GetCompatibleAudioEncoderConfigurations
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1602; } /* = unique type id SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioEncoderConfigurations() { _trt__GetCompatibleAudioEncoderConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioEncoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse (1603)
/* trt:GetCompatibleAudioEncoderConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleAudioEncoderConfigurationsResponse
{
public:
	std::vector<tt__AudioEncoderConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1603; } /* = unique type id SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioEncoderConfigurationsResponse() { _trt__GetCompatibleAudioEncoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioEncoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations (1604)
/* trt:GetCompatibleAudioSourceConfigurations */
class SOAP_CMAC _trt__GetCompatibleAudioSourceConfigurations
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1604; } /* = unique type id SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioSourceConfigurations() { _trt__GetCompatibleAudioSourceConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioSourceConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse (1605)
/* trt:GetCompatibleAudioSourceConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleAudioSourceConfigurationsResponse
{
public:
	std::vector<tt__AudioSourceConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1605; } /* = unique type id SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioSourceConfigurationsResponse() { _trt__GetCompatibleAudioSourceConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioSourceConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations
#define SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations (1606)
/* trt:GetCompatibleVideoAnalyticsConfigurations */
class SOAP_CMAC _trt__GetCompatibleVideoAnalyticsConfigurations
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1606; } /* = unique type id SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleVideoAnalyticsConfigurations() { _trt__GetCompatibleVideoAnalyticsConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleVideoAnalyticsConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse (1607)
/* trt:GetCompatibleVideoAnalyticsConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleVideoAnalyticsConfigurationsResponse
{
public:
	std::vector<tt__VideoAnalyticsConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:VideoAnalyticsConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1607; } /* = unique type id SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleVideoAnalyticsConfigurationsResponse() { _trt__GetCompatibleVideoAnalyticsConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleVideoAnalyticsConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleMetadataConfigurations
#define SOAP_TYPE__trt__GetCompatibleMetadataConfigurations (1608)
/* trt:GetCompatibleMetadataConfigurations */
class SOAP_CMAC _trt__GetCompatibleMetadataConfigurations
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1608; } /* = unique type id SOAP_TYPE__trt__GetCompatibleMetadataConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleMetadataConfigurations() { _trt__GetCompatibleMetadataConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleMetadataConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse (1609)
/* trt:GetCompatibleMetadataConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleMetadataConfigurationsResponse
{
public:
	std::vector<tt__MetadataConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:MetadataConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1609; } /* = unique type id SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleMetadataConfigurationsResponse() { _trt__GetCompatibleMetadataConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleMetadataConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations (1610)
/* trt:GetCompatibleAudioOutputConfigurations */
class SOAP_CMAC _trt__GetCompatibleAudioOutputConfigurations
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1610; } /* = unique type id SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioOutputConfigurations() { _trt__GetCompatibleAudioOutputConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioOutputConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse (1611)
/* trt:GetCompatibleAudioOutputConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleAudioOutputConfigurationsResponse
{
public:
	std::vector<tt__AudioOutputConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioOutputConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1611; } /* = unique type id SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioOutputConfigurationsResponse() { _trt__GetCompatibleAudioOutputConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioOutputConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations (1612)
/* trt:GetCompatibleAudioDecoderConfigurations */
class SOAP_CMAC _trt__GetCompatibleAudioDecoderConfigurations
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1612; } /* = unique type id SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioDecoderConfigurations() { _trt__GetCompatibleAudioDecoderConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioDecoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse (1613)
/* trt:GetCompatibleAudioDecoderConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleAudioDecoderConfigurationsResponse
{
public:
	std::vector<tt__AudioDecoderConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioDecoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1613; } /* = unique type id SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioDecoderConfigurationsResponse() { _trt__GetCompatibleAudioDecoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioDecoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetVideoEncoderConfiguration
#define SOAP_TYPE__trt__SetVideoEncoderConfiguration (1614)
/* trt:SetVideoEncoderConfiguration */
class SOAP_CMAC _trt__SetVideoEncoderConfiguration
{
public:
	tt__VideoEncoderConfiguration *Configuration;	/* required element of type tt:VideoEncoderConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1614; } /* = unique type id SOAP_TYPE__trt__SetVideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoEncoderConfiguration() { _trt__SetVideoEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__SetVideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse (1615)
/* trt:SetVideoEncoderConfigurationResponse */
class SOAP_CMAC _trt__SetVideoEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1615; } /* = unique type id SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoEncoderConfigurationResponse() { _trt__SetVideoEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetVideoEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetVideoSourceConfiguration
#define SOAP_TYPE__trt__SetVideoSourceConfiguration (1616)
/* trt:SetVideoSourceConfiguration */
class SOAP_CMAC _trt__SetVideoSourceConfiguration
{
public:
	tt__VideoSourceConfiguration *Configuration;	/* required element of type tt:VideoSourceConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1616; } /* = unique type id SOAP_TYPE__trt__SetVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoSourceConfiguration() { _trt__SetVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__SetVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__SetVideoSourceConfigurationResponse (1617)
/* trt:SetVideoSourceConfigurationResponse */
class SOAP_CMAC _trt__SetVideoSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1617; } /* = unique type id SOAP_TYPE__trt__SetVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoSourceConfigurationResponse() { _trt__SetVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioEncoderConfiguration
#define SOAP_TYPE__trt__SetAudioEncoderConfiguration (1618)
/* trt:SetAudioEncoderConfiguration */
class SOAP_CMAC _trt__SetAudioEncoderConfiguration
{
public:
	tt__AudioEncoderConfiguration *Configuration;	/* required element of type tt:AudioEncoderConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1618; } /* = unique type id SOAP_TYPE__trt__SetAudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioEncoderConfiguration() { _trt__SetAudioEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__SetAudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse (1619)
/* trt:SetAudioEncoderConfigurationResponse */
class SOAP_CMAC _trt__SetAudioEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1619; } /* = unique type id SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioEncoderConfigurationResponse() { _trt__SetAudioEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetAudioEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioSourceConfiguration
#define SOAP_TYPE__trt__SetAudioSourceConfiguration (1620)
/* trt:SetAudioSourceConfiguration */
class SOAP_CMAC _trt__SetAudioSourceConfiguration
{
public:
	tt__AudioSourceConfiguration *Configuration;	/* required element of type tt:AudioSourceConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1620; } /* = unique type id SOAP_TYPE__trt__SetAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioSourceConfiguration() { _trt__SetAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__SetAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__SetAudioSourceConfigurationResponse (1621)
/* trt:SetAudioSourceConfigurationResponse */
class SOAP_CMAC _trt__SetAudioSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1621; } /* = unique type id SOAP_TYPE__trt__SetAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioSourceConfigurationResponse() { _trt__SetAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__SetVideoAnalyticsConfiguration (1622)
/* trt:SetVideoAnalyticsConfiguration */
class SOAP_CMAC _trt__SetVideoAnalyticsConfiguration
{
public:
	tt__VideoAnalyticsConfiguration *Configuration;	/* required element of type tt:VideoAnalyticsConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1622; } /* = unique type id SOAP_TYPE__trt__SetVideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoAnalyticsConfiguration() { _trt__SetVideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~_trt__SetVideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse (1623)
/* trt:SetVideoAnalyticsConfigurationResponse */
class SOAP_CMAC _trt__SetVideoAnalyticsConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1623; } /* = unique type id SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoAnalyticsConfigurationResponse() { _trt__SetVideoAnalyticsConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetVideoAnalyticsConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetMetadataConfiguration
#define SOAP_TYPE__trt__SetMetadataConfiguration (1624)
/* trt:SetMetadataConfiguration */
class SOAP_CMAC _trt__SetMetadataConfiguration
{
public:
	tt__MetadataConfiguration *Configuration;	/* required element of type tt:MetadataConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1624; } /* = unique type id SOAP_TYPE__trt__SetMetadataConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetMetadataConfiguration() { _trt__SetMetadataConfiguration::soap_default(NULL); }
	virtual ~_trt__SetMetadataConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetMetadataConfigurationResponse
#define SOAP_TYPE__trt__SetMetadataConfigurationResponse (1625)
/* trt:SetMetadataConfigurationResponse */
class SOAP_CMAC _trt__SetMetadataConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1625; } /* = unique type id SOAP_TYPE__trt__SetMetadataConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetMetadataConfigurationResponse() { _trt__SetMetadataConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetMetadataConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioOutputConfiguration
#define SOAP_TYPE__trt__SetAudioOutputConfiguration (1626)
/* trt:SetAudioOutputConfiguration */
class SOAP_CMAC _trt__SetAudioOutputConfiguration
{
public:
	tt__AudioOutputConfiguration *Configuration;	/* required element of type tt:AudioOutputConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1626; } /* = unique type id SOAP_TYPE__trt__SetAudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioOutputConfiguration() { _trt__SetAudioOutputConfiguration::soap_default(NULL); }
	virtual ~_trt__SetAudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__SetAudioOutputConfigurationResponse (1627)
/* trt:SetAudioOutputConfigurationResponse */
class SOAP_CMAC _trt__SetAudioOutputConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1627; } /* = unique type id SOAP_TYPE__trt__SetAudioOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioOutputConfigurationResponse() { _trt__SetAudioOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetAudioOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioDecoderConfiguration
#define SOAP_TYPE__trt__SetAudioDecoderConfiguration (1628)
/* trt:SetAudioDecoderConfiguration */
class SOAP_CMAC _trt__SetAudioDecoderConfiguration
{
public:
	tt__AudioDecoderConfiguration *Configuration;	/* required element of type tt:AudioDecoderConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1628; } /* = unique type id SOAP_TYPE__trt__SetAudioDecoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioDecoderConfiguration() { _trt__SetAudioDecoderConfiguration::soap_default(NULL); }
	virtual ~_trt__SetAudioDecoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse (1629)
/* trt:SetAudioDecoderConfigurationResponse */
class SOAP_CMAC _trt__SetAudioDecoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1629; } /* = unique type id SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioDecoderConfigurationResponse() { _trt__SetAudioDecoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetAudioDecoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationOptions
#define SOAP_TYPE__trt__GetVideoSourceConfigurationOptions (1630)
/* trt:GetVideoSourceConfigurationOptions */
class SOAP_CMAC _trt__GetVideoSourceConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1630; } /* = unique type id SOAP_TYPE__trt__GetVideoSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceConfigurationOptions() { _trt__GetVideoSourceConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse (1631)
/* trt:GetVideoSourceConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetVideoSourceConfigurationOptionsResponse
{
public:
	tt__VideoSourceConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoSourceConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1631; } /* = unique type id SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceConfigurationOptionsResponse() { _trt__GetVideoSourceConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions (1632)
/* trt:GetVideoEncoderConfigurationOptions */
class SOAP_CMAC _trt__GetVideoEncoderConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1632; } /* = unique type id SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoEncoderConfigurationOptions() { _trt__GetVideoEncoderConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetVideoEncoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse (1633)
/* trt:GetVideoEncoderConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetVideoEncoderConfigurationOptionsResponse
{
public:
	tt__VideoEncoderConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoEncoderConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1633; } /* = unique type id SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoEncoderConfigurationOptionsResponse() { _trt__GetVideoEncoderConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoEncoderConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationOptions
#define SOAP_TYPE__trt__GetAudioSourceConfigurationOptions (1634)
/* trt:GetAudioSourceConfigurationOptions */
class SOAP_CMAC _trt__GetAudioSourceConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1634; } /* = unique type id SOAP_TYPE__trt__GetAudioSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourceConfigurationOptions() { _trt__GetAudioSourceConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetAudioSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse (1635)
/* trt:GetAudioSourceConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetAudioSourceConfigurationOptionsResponse
{
public:
	tt__AudioSourceConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioSourceConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1635; } /* = unique type id SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourceConfigurationOptionsResponse() { _trt__GetAudioSourceConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioSourceConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions (1636)
/* trt:GetAudioEncoderConfigurationOptions */
class SOAP_CMAC _trt__GetAudioEncoderConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1636; } /* = unique type id SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioEncoderConfigurationOptions() { _trt__GetAudioEncoderConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetAudioEncoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse (1637)
/* trt:GetAudioEncoderConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetAudioEncoderConfigurationOptionsResponse
{
public:
	tt__AudioEncoderConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioEncoderConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1637; } /* = unique type id SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioEncoderConfigurationOptionsResponse() { _trt__GetAudioEncoderConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioEncoderConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfigurationOptions
#define SOAP_TYPE__trt__GetMetadataConfigurationOptions (1638)
/* trt:GetMetadataConfigurationOptions */
class SOAP_CMAC _trt__GetMetadataConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1638; } /* = unique type id SOAP_TYPE__trt__GetMetadataConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetMetadataConfigurationOptions() { _trt__GetMetadataConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetMetadataConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse (1639)
/* trt:GetMetadataConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetMetadataConfigurationOptionsResponse
{
public:
	tt__MetadataConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:MetadataConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1639; } /* = unique type id SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetMetadataConfigurationOptionsResponse() { _trt__GetMetadataConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetMetadataConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationOptions
#define SOAP_TYPE__trt__GetAudioOutputConfigurationOptions (1640)
/* trt:GetAudioOutputConfigurationOptions */
class SOAP_CMAC _trt__GetAudioOutputConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1640; } /* = unique type id SOAP_TYPE__trt__GetAudioOutputConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputConfigurationOptions() { _trt__GetAudioOutputConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse (1641)
/* trt:GetAudioOutputConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetAudioOutputConfigurationOptionsResponse
{
public:
	tt__AudioOutputConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioOutputConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1641; } /* = unique type id SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputConfigurationOptionsResponse() { _trt__GetAudioOutputConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions (1642)
/* trt:GetAudioDecoderConfigurationOptions */
class SOAP_CMAC _trt__GetAudioDecoderConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1642; } /* = unique type id SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioDecoderConfigurationOptions() { _trt__GetAudioDecoderConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetAudioDecoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse (1643)
/* trt:GetAudioDecoderConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetAudioDecoderConfigurationOptionsResponse
{
public:
	tt__AudioDecoderConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioDecoderConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1643; } /* = unique type id SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioDecoderConfigurationOptionsResponse() { _trt__GetAudioDecoderConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioDecoderConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances
#define SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances (1644)
/* trt:GetGuaranteedNumberOfVideoEncoderInstances */
class SOAP_CMAC _trt__GetGuaranteedNumberOfVideoEncoderInstances
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1644; } /* = unique type id SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetGuaranteedNumberOfVideoEncoderInstances() { _trt__GetGuaranteedNumberOfVideoEncoderInstances::soap_default(NULL); }
	virtual ~_trt__GetGuaranteedNumberOfVideoEncoderInstances() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse
#define SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse (1645)
/* trt:GetGuaranteedNumberOfVideoEncoderInstancesResponse */
class SOAP_CMAC _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse
{
public:
	int TotalNumber;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	int *JPEG;	/* optional element of type xsd:int */
	int *H264;	/* optional element of type xsd:int */
	int *MPEG4;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1645; } /* = unique type id SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse() { _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse::soap_default(NULL); }
	virtual ~_trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetStreamUri
#define SOAP_TYPE__trt__GetStreamUri (1646)
/* trt:GetStreamUri */
class SOAP_CMAC _trt__GetStreamUri
{
public:
	tt__StreamSetup *StreamSetup;	/* required element of type tt:StreamSetup */
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1646; } /* = unique type id SOAP_TYPE__trt__GetStreamUri */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetStreamUri() { _trt__GetStreamUri::soap_default(NULL); }
	virtual ~_trt__GetStreamUri() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetStreamUriResponse
#define SOAP_TYPE__trt__GetStreamUriResponse (1647)
/* trt:GetStreamUriResponse */
class SOAP_CMAC _trt__GetStreamUriResponse
{
public:
	tt__MediaUri *MediaUri;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:MediaUri */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1647; } /* = unique type id SOAP_TYPE__trt__GetStreamUriResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetStreamUriResponse() { _trt__GetStreamUriResponse::soap_default(NULL); }
	virtual ~_trt__GetStreamUriResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__StartMulticastStreaming
#define SOAP_TYPE__trt__StartMulticastStreaming (1648)
/* trt:StartMulticastStreaming */
class SOAP_CMAC _trt__StartMulticastStreaming
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1648; } /* = unique type id SOAP_TYPE__trt__StartMulticastStreaming */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__StartMulticastStreaming() { _trt__StartMulticastStreaming::soap_default(NULL); }
	virtual ~_trt__StartMulticastStreaming() { }
};
#endif

#ifndef SOAP_TYPE__trt__StartMulticastStreamingResponse
#define SOAP_TYPE__trt__StartMulticastStreamingResponse (1649)
/* trt:StartMulticastStreamingResponse */
class SOAP_CMAC _trt__StartMulticastStreamingResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1649; } /* = unique type id SOAP_TYPE__trt__StartMulticastStreamingResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__StartMulticastStreamingResponse() { _trt__StartMulticastStreamingResponse::soap_default(NULL); }
	virtual ~_trt__StartMulticastStreamingResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__StopMulticastStreaming
#define SOAP_TYPE__trt__StopMulticastStreaming (1650)
/* trt:StopMulticastStreaming */
class SOAP_CMAC _trt__StopMulticastStreaming
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1650; } /* = unique type id SOAP_TYPE__trt__StopMulticastStreaming */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__StopMulticastStreaming() { _trt__StopMulticastStreaming::soap_default(NULL); }
	virtual ~_trt__StopMulticastStreaming() { }
};
#endif

#ifndef SOAP_TYPE__trt__StopMulticastStreamingResponse
#define SOAP_TYPE__trt__StopMulticastStreamingResponse (1651)
/* trt:StopMulticastStreamingResponse */
class SOAP_CMAC _trt__StopMulticastStreamingResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1651; } /* = unique type id SOAP_TYPE__trt__StopMulticastStreamingResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__StopMulticastStreamingResponse() { _trt__StopMulticastStreamingResponse::soap_default(NULL); }
	virtual ~_trt__StopMulticastStreamingResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetSynchronizationPoint
#define SOAP_TYPE__trt__SetSynchronizationPoint (1652)
/* trt:SetSynchronizationPoint */
class SOAP_CMAC _trt__SetSynchronizationPoint
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1652; } /* = unique type id SOAP_TYPE__trt__SetSynchronizationPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetSynchronizationPoint() { _trt__SetSynchronizationPoint::soap_default(NULL); }
	virtual ~_trt__SetSynchronizationPoint() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetSynchronizationPointResponse
#define SOAP_TYPE__trt__SetSynchronizationPointResponse (1653)
/* trt:SetSynchronizationPointResponse */
class SOAP_CMAC _trt__SetSynchronizationPointResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1653; } /* = unique type id SOAP_TYPE__trt__SetSynchronizationPointResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetSynchronizationPointResponse() { _trt__SetSynchronizationPointResponse::soap_default(NULL); }
	virtual ~_trt__SetSynchronizationPointResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetSnapshotUri
#define SOAP_TYPE__trt__GetSnapshotUri (1654)
/* trt:GetSnapshotUri */
class SOAP_CMAC _trt__GetSnapshotUri
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1654; } /* = unique type id SOAP_TYPE__trt__GetSnapshotUri */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetSnapshotUri() { _trt__GetSnapshotUri::soap_default(NULL); }
	virtual ~_trt__GetSnapshotUri() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetSnapshotUriResponse
#define SOAP_TYPE__trt__GetSnapshotUriResponse (1655)
/* trt:GetSnapshotUriResponse */
class SOAP_CMAC _trt__GetSnapshotUriResponse
{
public:
	tt__MediaUri *MediaUri;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:MediaUri */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1655; } /* = unique type id SOAP_TYPE__trt__GetSnapshotUriResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetSnapshotUriResponse() { _trt__GetSnapshotUriResponse::soap_default(NULL); }
	virtual ~_trt__GetSnapshotUriResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceModes
#define SOAP_TYPE__trt__GetVideoSourceModes (1656)
/* trt:GetVideoSourceModes */
class SOAP_CMAC _trt__GetVideoSourceModes
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1656; } /* = unique type id SOAP_TYPE__trt__GetVideoSourceModes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceModes() { _trt__GetVideoSourceModes::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceModes() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceModesResponse
#define SOAP_TYPE__trt__GetVideoSourceModesResponse (1657)
/* trt:GetVideoSourceModesResponse */
class SOAP_CMAC _trt__GetVideoSourceModesResponse
{
public:
	std::vector<trt__VideoSourceMode * >VideoSourceModes;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type trt:VideoSourceMode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1657; } /* = unique type id SOAP_TYPE__trt__GetVideoSourceModesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceModesResponse() { _trt__GetVideoSourceModesResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceModesResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetVideoSourceMode
#define SOAP_TYPE__trt__SetVideoSourceMode (1658)
/* trt:SetVideoSourceMode */
class SOAP_CMAC _trt__SetVideoSourceMode
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	std::string VideoSourceModeToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1658; } /* = unique type id SOAP_TYPE__trt__SetVideoSourceMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoSourceMode() { _trt__SetVideoSourceMode::soap_default(NULL); }
	virtual ~_trt__SetVideoSourceMode() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetVideoSourceModeResponse
#define SOAP_TYPE__trt__SetVideoSourceModeResponse (1659)
/* trt:SetVideoSourceModeResponse */
class SOAP_CMAC _trt__SetVideoSourceModeResponse
{
public:
	bool Reboot;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1659; } /* = unique type id SOAP_TYPE__trt__SetVideoSourceModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoSourceModeResponse() { _trt__SetVideoSourceModeResponse::soap_default(NULL); }
	virtual ~_trt__SetVideoSourceModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetOSDs
#define SOAP_TYPE__trt__GetOSDs (1660)
/* trt:GetOSDs */
class SOAP_CMAC _trt__GetOSDs
{
public:
	std::string *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1660; } /* = unique type id SOAP_TYPE__trt__GetOSDs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetOSDs() { _trt__GetOSDs::soap_default(NULL); }
	virtual ~_trt__GetOSDs() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetOSDsResponse
#define SOAP_TYPE__trt__GetOSDsResponse (1661)
/* trt:GetOSDsResponse */
class SOAP_CMAC _trt__GetOSDsResponse
{
public:
	std::vector<class tt__OSDConfiguration * >OSDs;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:OSDConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1661; } /* = unique type id SOAP_TYPE__trt__GetOSDsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetOSDsResponse() { _trt__GetOSDsResponse::soap_default(NULL); }
	virtual ~_trt__GetOSDsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetOSD
#define SOAP_TYPE__trt__GetOSD (1662)
/* trt:GetOSD */
class SOAP_CMAC _trt__GetOSD
{
public:
	std::string OSDToken;	/* required element of type tt:ReferenceToken */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1662; } /* = unique type id SOAP_TYPE__trt__GetOSD */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetOSD() { _trt__GetOSD::soap_default(NULL); }
	virtual ~_trt__GetOSD() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetOSDResponse
#define SOAP_TYPE__trt__GetOSDResponse (1663)
/* trt:GetOSDResponse */
class SOAP_CMAC _trt__GetOSDResponse
{
public:
	tt__OSDConfiguration *OSD;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:OSDConfiguration */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1663; } /* = unique type id SOAP_TYPE__trt__GetOSDResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetOSDResponse() { _trt__GetOSDResponse::soap_default(NULL); }
	virtual ~_trt__GetOSDResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetOSD
#define SOAP_TYPE__trt__SetOSD (1664)
/* trt:SetOSD */
class SOAP_CMAC _trt__SetOSD
{
public:
	tt__OSDConfiguration *OSD;	/* required element of type tt:OSDConfiguration */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1664; } /* = unique type id SOAP_TYPE__trt__SetOSD */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetOSD() { _trt__SetOSD::soap_default(NULL); }
	virtual ~_trt__SetOSD() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetOSDResponse
#define SOAP_TYPE__trt__SetOSDResponse (1665)
/* trt:SetOSDResponse */
class SOAP_CMAC _trt__SetOSDResponse
{
public:
	std::vector<char * >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1665; } /* = unique type id SOAP_TYPE__trt__SetOSDResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetOSDResponse() { _trt__SetOSDResponse::soap_default(NULL); }
	virtual ~_trt__SetOSDResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetOSDOptions
#define SOAP_TYPE__trt__GetOSDOptions (1666)
/* trt:GetOSDOptions */
class SOAP_CMAC _trt__GetOSDOptions
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1666; } /* = unique type id SOAP_TYPE__trt__GetOSDOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetOSDOptions() { _trt__GetOSDOptions::soap_default(NULL); }
	virtual ~_trt__GetOSDOptions() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetOSDOptionsResponse
#define SOAP_TYPE__trt__GetOSDOptionsResponse (1667)
/* trt:GetOSDOptionsResponse */
class SOAP_CMAC _trt__GetOSDOptionsResponse
{
public:
	tt__OSDConfigurationOptions *OSDOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:OSDConfigurationOptions */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1667; } /* = unique type id SOAP_TYPE__trt__GetOSDOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetOSDOptionsResponse() { _trt__GetOSDOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetOSDOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__CreateOSD
#define SOAP_TYPE__trt__CreateOSD (1668)
/* trt:CreateOSD */
class SOAP_CMAC _trt__CreateOSD
{
public:
	tt__OSDConfiguration *OSD;	/* required element of type tt:OSDConfiguration */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1668; } /* = unique type id SOAP_TYPE__trt__CreateOSD */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__CreateOSD() { _trt__CreateOSD::soap_default(NULL); }
	virtual ~_trt__CreateOSD() { }
};
#endif

#ifndef SOAP_TYPE__trt__CreateOSDResponse
#define SOAP_TYPE__trt__CreateOSDResponse (1669)
/* trt:CreateOSDResponse */
class SOAP_CMAC _trt__CreateOSDResponse
{
public:
	std::string OSDToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:ReferenceToken */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1669; } /* = unique type id SOAP_TYPE__trt__CreateOSDResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__CreateOSDResponse() { _trt__CreateOSDResponse::soap_default(NULL); }
	virtual ~_trt__CreateOSDResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__DeleteOSD
#define SOAP_TYPE__trt__DeleteOSD (1670)
/* trt:DeleteOSD */
class SOAP_CMAC _trt__DeleteOSD
{
public:
	std::string OSDToken;	/* required element of type tt:ReferenceToken */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1670; } /* = unique type id SOAP_TYPE__trt__DeleteOSD */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__DeleteOSD() { _trt__DeleteOSD::soap_default(NULL); }
	virtual ~_trt__DeleteOSD() { }
};
#endif

#ifndef SOAP_TYPE__trt__DeleteOSDResponse
#define SOAP_TYPE__trt__DeleteOSDResponse (1671)
/* trt:DeleteOSDResponse */
class SOAP_CMAC _trt__DeleteOSDResponse
{
public:
	std::vector<char * >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1671; } /* = unique type id SOAP_TYPE__trt__DeleteOSDResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__DeleteOSDResponse() { _trt__DeleteOSDResponse::soap_default(NULL); }
	virtual ~_trt__DeleteOSDResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns9__Capabilities2
#define SOAP_TYPE_ns9__Capabilities2 (1672)
/* ns9:Capabilities2 */
class SOAP_CMAC ns9__Capabilities2 : public xsd__anyType
{
public:
	class ns9__ProfileCapabilities *ProfileCapabilities;	/* required element of type ns9:ProfileCapabilities */
	class ns9__StreamingCapabilities *StreamingCapabilities;	/* required element of type ns9:StreamingCapabilities */
	std::vector<char * >__any;
	bool *SnapshotUri;	/* optional attribute */
	bool *Rotation;	/* optional attribute */
	bool *VideoSourceMode;	/* optional attribute */
	bool *OSD;	/* optional attribute */
	bool *TemporaryOSDText;	/* optional attribute */
	bool *Mask;	/* optional attribute */
	bool *SourceMask;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1672; } /* = unique type id SOAP_TYPE_ns9__Capabilities2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns9__Capabilities2() { ns9__Capabilities2::soap_default(NULL); }
	virtual ~ns9__Capabilities2() { }
};
#endif

#ifndef SOAP_TYPE_ns9__ProfileCapabilities
#define SOAP_TYPE_ns9__ProfileCapabilities (1673)
/* ns9:ProfileCapabilities */
class SOAP_CMAC ns9__ProfileCapabilities : public xsd__anyType
{
public:
	std::vector<char * >__any;
	int *MaximumNumberOfProfiles;	/* optional attribute */
	std::string *ConfigurationsSupported;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1673; } /* = unique type id SOAP_TYPE_ns9__ProfileCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns9__ProfileCapabilities() { ns9__ProfileCapabilities::soap_default(NULL); }
	virtual ~ns9__ProfileCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_ns9__StreamingCapabilities
#define SOAP_TYPE_ns9__StreamingCapabilities (1674)
/* ns9:StreamingCapabilities */
class SOAP_CMAC ns9__StreamingCapabilities : public xsd__anyType
{
public:
	std::vector<char * >__any;
	bool *RTSPStreaming;	/* optional attribute */
	bool *RTPMulticast;	/* optional attribute */
	bool *RTP_USCORERTSP_USCORETCP;	/* optional attribute */
	bool *NonAggregateControl;	/* optional attribute */
	std::string *RTSPWebSocketUri;	/* optional attribute */
	bool *AutoStartMulticast;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1674; } /* = unique type id SOAP_TYPE_ns9__StreamingCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns9__StreamingCapabilities() { ns9__StreamingCapabilities::soap_default(NULL); }
	virtual ~ns9__StreamingCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_ns9__ConfigurationRef
#define SOAP_TYPE_ns9__ConfigurationRef (1675)
/* ns9:ConfigurationRef */
class SOAP_CMAC ns9__ConfigurationRef : public xsd__anyType
{
public:
	std::string Type;	/* required element of type xsd:string */
	std::string *Token;	/* optional element of type tt:ReferenceToken */
public:
	virtual int soap_type() const { return 1675; } /* = unique type id SOAP_TYPE_ns9__ConfigurationRef */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns9__ConfigurationRef() { ns9__ConfigurationRef::soap_default(NULL); }
	virtual ~ns9__ConfigurationRef() { }
};
#endif

#ifndef SOAP_TYPE_ns9__ConfigurationSet
#define SOAP_TYPE_ns9__ConfigurationSet (1676)
/* ns9:ConfigurationSet */
class SOAP_CMAC ns9__ConfigurationSet : public xsd__anyType
{
public:
	tt__VideoSourceConfiguration *VideoSource;	/* optional element of type tt:VideoSourceConfiguration */
	tt__AudioSourceConfiguration *AudioSource;	/* optional element of type tt:AudioSourceConfiguration */
	class tt__VideoEncoder2Configuration *VideoEncoder;	/* optional element of type tt:VideoEncoder2Configuration */
	class tt__AudioEncoder2Configuration *AudioEncoder;	/* optional element of type tt:AudioEncoder2Configuration */
	tt__VideoAnalyticsConfiguration *Analytics;	/* optional element of type tt:VideoAnalyticsConfiguration */
	tt__PTZConfiguration *PTZ;	/* optional element of type tt:PTZConfiguration */
	tt__MetadataConfiguration *Metadata;	/* optional element of type tt:MetadataConfiguration */
	tt__AudioOutputConfiguration *AudioOutput;	/* optional element of type tt:AudioOutputConfiguration */
	tt__AudioDecoderConfiguration *AudioDecoder;	/* optional element of type tt:AudioDecoderConfiguration */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1676; } /* = unique type id SOAP_TYPE_ns9__ConfigurationSet */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns9__ConfigurationSet() { ns9__ConfigurationSet::soap_default(NULL); }
	virtual ~ns9__ConfigurationSet() { }
};
#endif

#ifndef SOAP_TYPE_ns9__MediaProfile
#define SOAP_TYPE_ns9__MediaProfile (1677)
/* ns9:MediaProfile */
class SOAP_CMAC ns9__MediaProfile : public xsd__anyType
{
public:
	std::string Name;	/* required element of type tt:Name */
	ns9__ConfigurationSet *Configurations;	/* optional element of type ns9:ConfigurationSet */
	std::string token;	/* required attribute */
	bool *fixed;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1677; } /* = unique type id SOAP_TYPE_ns9__MediaProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns9__MediaProfile() { ns9__MediaProfile::soap_default(NULL); }
	virtual ~ns9__MediaProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns9__GetConfiguration
#define SOAP_TYPE_ns9__GetConfiguration (1678)
/* ns9:GetConfiguration */
class SOAP_CMAC ns9__GetConfiguration : public xsd__anyType
{
public:
	std::string *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type tt:ReferenceToken */
public:
	virtual int soap_type() const { return 1678; } /* = unique type id SOAP_TYPE_ns9__GetConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns9__GetConfiguration() { ns9__GetConfiguration::soap_default(NULL); }
	virtual ~ns9__GetConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_ns9__SetConfigurationResponse
#define SOAP_TYPE_ns9__SetConfigurationResponse (1679)
/* Primitive ns9:SetConfigurationResponse schema type: */
class SOAP_CMAC ns9__SetConfigurationResponse : public xsd__anyType
{
public:
	virtual int soap_type() const { return 1679; } /* = unique type id SOAP_TYPE_ns9__SetConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns9__SetConfigurationResponse() { ns9__SetConfigurationResponse::soap_default(NULL); }
	virtual ~ns9__SetConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns9__EncoderInstance
#define SOAP_TYPE_ns9__EncoderInstance (1680)
/* ns9:EncoderInstance */
class SOAP_CMAC ns9__EncoderInstance : public xsd__anyType
{
public:
	std::string Encoding;	/* required element of type xsd:string */
	int Number;	/* required element of type xsd:int */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1680; } /* = unique type id SOAP_TYPE_ns9__EncoderInstance */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns9__EncoderInstance() { ns9__EncoderInstance::soap_default(NULL); }
	virtual ~ns9__EncoderInstance() { }
};
#endif

#ifndef SOAP_TYPE_ns9__EncoderInstanceInfo
#define SOAP_TYPE_ns9__EncoderInstanceInfo (1681)
/* ns9:EncoderInstanceInfo */
class SOAP_CMAC ns9__EncoderInstanceInfo : public xsd__anyType
{
public:
	std::vector<ns9__EncoderInstance * >Codec;	/* optional element of type ns9:EncoderInstance */
	int Total;	/* required element of type xsd:int */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1681; } /* = unique type id SOAP_TYPE_ns9__EncoderInstanceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns9__EncoderInstanceInfo() { ns9__EncoderInstanceInfo::soap_default(NULL); }
	virtual ~ns9__EncoderInstanceInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns9__StartStopMulticastStreaming
#define SOAP_TYPE_ns9__StartStopMulticastStreaming (1682)
/* ns9:StartStopMulticastStreaming */
class SOAP_CMAC ns9__StartStopMulticastStreaming : public xsd__anyType
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
public:
	virtual int soap_type() const { return 1682; } /* = unique type id SOAP_TYPE_ns9__StartStopMulticastStreaming */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns9__StartStopMulticastStreaming() { ns9__StartStopMulticastStreaming::soap_default(NULL); }
	virtual ~ns9__StartStopMulticastStreaming() { }
};
#endif

#ifndef SOAP_TYPE_ns9__VideoSourceMode
#define SOAP_TYPE_ns9__VideoSourceMode (1683)
/* ns9:VideoSourceMode */
class SOAP_CMAC ns9__VideoSourceMode : public xsd__anyType
{
public:
	float MaxFramerate;	/* required element of type xsd:float */
	tt__VideoResolution *MaxResolution;	/* required element of type tt:VideoResolution */
	std::string Encodings;	/* required element of type ns9:EncodingTypes */
	bool Reboot;	/* required element of type xsd:boolean */
	std::string *Description;	/* optional element of type tt:Description */
	std::vector<char * >__any;
	std::string token;	/* required attribute */
	bool *Enabled;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1683; } /* = unique type id SOAP_TYPE_ns9__VideoSourceMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns9__VideoSourceMode() { ns9__VideoSourceMode::soap_default(NULL); }
	virtual ~ns9__VideoSourceMode() { }
};
#endif

#ifndef SOAP_TYPE_ns9__Mask
#define SOAP_TYPE_ns9__Mask (1684)
/* ns9:Mask */
class SOAP_CMAC ns9__Mask : public xsd__anyType
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	tt__Polygon *Polygon;	/* required element of type tt:Polygon */
	std::string Type;	/* required element of type xsd:string */
	tt__Color *Color;	/* optional element of type tt:Color */
	bool Enabled;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	std::string *token;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1684; } /* = unique type id SOAP_TYPE_ns9__Mask */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns9__Mask() { ns9__Mask::soap_default(NULL); }
	virtual ~ns9__Mask() { }
};
#endif

#ifndef SOAP_TYPE_ns9__MaskOptions
#define SOAP_TYPE_ns9__MaskOptions (1685)
/* ns9:MaskOptions */
class SOAP_CMAC ns9__MaskOptions : public xsd__anyType
{
public:
	int MaxMasks;	/* required element of type xsd:int */
	int MaxPoints;	/* required element of type xsd:int */
	std::vector<std::string >Types;	/* required element of type xsd:string */
	tt__ColorOptions *Color;	/* required element of type tt:ColorOptions */
	std::vector<char * >__any;
	bool *RectangleOnly;	/* optional attribute */
	bool *SingleColorOnly;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1685; } /* = unique type id SOAP_TYPE_ns9__MaskOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns9__MaskOptions() { ns9__MaskOptions::soap_default(NULL); }
	virtual ~ns9__MaskOptions() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetServiceCapabilities
#define SOAP_TYPE__ns9__GetServiceCapabilities (1686)
/* ns9:GetServiceCapabilities */
class SOAP_CMAC _ns9__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1686; } /* = unique type id SOAP_TYPE__ns9__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetServiceCapabilities() { _ns9__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_ns9__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetServiceCapabilitiesResponse
#define SOAP_TYPE__ns9__GetServiceCapabilitiesResponse (1687)
/* ns9:GetServiceCapabilitiesResponse */
class SOAP_CMAC _ns9__GetServiceCapabilitiesResponse
{
public:
	ns9__Capabilities2 *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns9:Capabilities2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1687; } /* = unique type id SOAP_TYPE__ns9__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetServiceCapabilitiesResponse() { _ns9__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_ns9__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__CreateProfile
#define SOAP_TYPE__ns9__CreateProfile (1688)
/* ns9:CreateProfile */
class SOAP_CMAC _ns9__CreateProfile
{
public:
	std::string Name;	/* required element of type tt:Name */
	std::vector<ns9__ConfigurationRef * >Configuration;	/* optional element of type ns9:ConfigurationRef */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1688; } /* = unique type id SOAP_TYPE__ns9__CreateProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__CreateProfile() { _ns9__CreateProfile::soap_default(NULL); }
	virtual ~_ns9__CreateProfile() { }
};
#endif

#ifndef SOAP_TYPE__ns9__CreateProfileResponse
#define SOAP_TYPE__ns9__CreateProfileResponse (1689)
/* ns9:CreateProfileResponse */
class SOAP_CMAC _ns9__CreateProfileResponse
{
public:
	std::string Token;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1689; } /* = unique type id SOAP_TYPE__ns9__CreateProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__CreateProfileResponse() { _ns9__CreateProfileResponse::soap_default(NULL); }
	virtual ~_ns9__CreateProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetProfiles
#define SOAP_TYPE__ns9__GetProfiles (1690)
/* ns9:GetProfiles */
class SOAP_CMAC _ns9__GetProfiles
{
public:
	std::string *Token;	/* optional element of type tt:ReferenceToken */
	std::vector<std::string >Type;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1690; } /* = unique type id SOAP_TYPE__ns9__GetProfiles */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetProfiles() { _ns9__GetProfiles::soap_default(NULL); }
	virtual ~_ns9__GetProfiles() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetProfilesResponse
#define SOAP_TYPE__ns9__GetProfilesResponse (1691)
/* ns9:GetProfilesResponse */
class SOAP_CMAC _ns9__GetProfilesResponse
{
public:
	std::vector<ns9__MediaProfile * >Profiles;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns9:MediaProfile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1691; } /* = unique type id SOAP_TYPE__ns9__GetProfilesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetProfilesResponse() { _ns9__GetProfilesResponse::soap_default(NULL); }
	virtual ~_ns9__GetProfilesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__AddConfiguration
#define SOAP_TYPE__ns9__AddConfiguration (1692)
/* ns9:AddConfiguration */
class SOAP_CMAC _ns9__AddConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string *Name;	/* optional element of type tt:Name */
	std::vector<ns9__ConfigurationRef * >Configuration;	/* optional element of type ns9:ConfigurationRef */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1692; } /* = unique type id SOAP_TYPE__ns9__AddConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__AddConfiguration() { _ns9__AddConfiguration::soap_default(NULL); }
	virtual ~_ns9__AddConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__ns9__AddConfigurationResponse
#define SOAP_TYPE__ns9__AddConfigurationResponse (1693)
/* ns9:AddConfigurationResponse */
class SOAP_CMAC _ns9__AddConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1693; } /* = unique type id SOAP_TYPE__ns9__AddConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__AddConfigurationResponse() { _ns9__AddConfigurationResponse::soap_default(NULL); }
	virtual ~_ns9__AddConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__RemoveConfiguration
#define SOAP_TYPE__ns9__RemoveConfiguration (1694)
/* ns9:RemoveConfiguration */
class SOAP_CMAC _ns9__RemoveConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::vector<ns9__ConfigurationRef * >Configuration;	/* required element of type ns9:ConfigurationRef */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1694; } /* = unique type id SOAP_TYPE__ns9__RemoveConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__RemoveConfiguration() { _ns9__RemoveConfiguration::soap_default(NULL); }
	virtual ~_ns9__RemoveConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__ns9__RemoveConfigurationResponse
#define SOAP_TYPE__ns9__RemoveConfigurationResponse (1695)
/* ns9:RemoveConfigurationResponse */
class SOAP_CMAC _ns9__RemoveConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1695; } /* = unique type id SOAP_TYPE__ns9__RemoveConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__RemoveConfigurationResponse() { _ns9__RemoveConfigurationResponse::soap_default(NULL); }
	virtual ~_ns9__RemoveConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__DeleteProfile
#define SOAP_TYPE__ns9__DeleteProfile (1696)
/* ns9:DeleteProfile */
class SOAP_CMAC _ns9__DeleteProfile
{
public:
	std::string Token;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1696; } /* = unique type id SOAP_TYPE__ns9__DeleteProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__DeleteProfile() { _ns9__DeleteProfile::soap_default(NULL); }
	virtual ~_ns9__DeleteProfile() { }
};
#endif

#ifndef SOAP_TYPE__ns9__DeleteProfileResponse
#define SOAP_TYPE__ns9__DeleteProfileResponse (1697)
/* ns9:DeleteProfileResponse */
class SOAP_CMAC _ns9__DeleteProfileResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1697; } /* = unique type id SOAP_TYPE__ns9__DeleteProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__DeleteProfileResponse() { _ns9__DeleteProfileResponse::soap_default(NULL); }
	virtual ~_ns9__DeleteProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetVideoEncoderConfigurationsResponse
#define SOAP_TYPE__ns9__GetVideoEncoderConfigurationsResponse (1698)
/* ns9:GetVideoEncoderConfigurationsResponse */
class SOAP_CMAC _ns9__GetVideoEncoderConfigurationsResponse
{
public:
	std::vector<tt__VideoEncoder2Configuration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:VideoEncoder2Configuration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1698; } /* = unique type id SOAP_TYPE__ns9__GetVideoEncoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetVideoEncoderConfigurationsResponse() { _ns9__GetVideoEncoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_ns9__GetVideoEncoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetVideoSourceConfigurationsResponse
#define SOAP_TYPE__ns9__GetVideoSourceConfigurationsResponse (1699)
/* ns9:GetVideoSourceConfigurationsResponse */
class SOAP_CMAC _ns9__GetVideoSourceConfigurationsResponse
{
public:
	std::vector<tt__VideoSourceConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:VideoSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1699; } /* = unique type id SOAP_TYPE__ns9__GetVideoSourceConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetVideoSourceConfigurationsResponse() { _ns9__GetVideoSourceConfigurationsResponse::soap_default(NULL); }
	virtual ~_ns9__GetVideoSourceConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetAudioEncoderConfigurationsResponse
#define SOAP_TYPE__ns9__GetAudioEncoderConfigurationsResponse (1700)
/* ns9:GetAudioEncoderConfigurationsResponse */
class SOAP_CMAC _ns9__GetAudioEncoderConfigurationsResponse
{
public:
	std::vector<tt__AudioEncoder2Configuration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioEncoder2Configuration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1700; } /* = unique type id SOAP_TYPE__ns9__GetAudioEncoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetAudioEncoderConfigurationsResponse() { _ns9__GetAudioEncoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_ns9__GetAudioEncoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetAudioSourceConfigurationsResponse
#define SOAP_TYPE__ns9__GetAudioSourceConfigurationsResponse (1701)
/* ns9:GetAudioSourceConfigurationsResponse */
class SOAP_CMAC _ns9__GetAudioSourceConfigurationsResponse
{
public:
	std::vector<tt__AudioSourceConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1701; } /* = unique type id SOAP_TYPE__ns9__GetAudioSourceConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetAudioSourceConfigurationsResponse() { _ns9__GetAudioSourceConfigurationsResponse::soap_default(NULL); }
	virtual ~_ns9__GetAudioSourceConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetAnalyticsConfigurationsResponse
#define SOAP_TYPE__ns9__GetAnalyticsConfigurationsResponse (1702)
/* ns9:GetAnalyticsConfigurationsResponse */
class SOAP_CMAC _ns9__GetAnalyticsConfigurationsResponse
{
public:
	std::vector<tt__VideoAnalyticsConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:VideoAnalyticsConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1702; } /* = unique type id SOAP_TYPE__ns9__GetAnalyticsConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetAnalyticsConfigurationsResponse() { _ns9__GetAnalyticsConfigurationsResponse::soap_default(NULL); }
	virtual ~_ns9__GetAnalyticsConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetMetadataConfigurationsResponse
#define SOAP_TYPE__ns9__GetMetadataConfigurationsResponse (1703)
/* ns9:GetMetadataConfigurationsResponse */
class SOAP_CMAC _ns9__GetMetadataConfigurationsResponse
{
public:
	std::vector<tt__MetadataConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:MetadataConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1703; } /* = unique type id SOAP_TYPE__ns9__GetMetadataConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetMetadataConfigurationsResponse() { _ns9__GetMetadataConfigurationsResponse::soap_default(NULL); }
	virtual ~_ns9__GetMetadataConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetAudioOutputConfigurationsResponse
#define SOAP_TYPE__ns9__GetAudioOutputConfigurationsResponse (1704)
/* ns9:GetAudioOutputConfigurationsResponse */
class SOAP_CMAC _ns9__GetAudioOutputConfigurationsResponse
{
public:
	std::vector<tt__AudioOutputConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioOutputConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1704; } /* = unique type id SOAP_TYPE__ns9__GetAudioOutputConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetAudioOutputConfigurationsResponse() { _ns9__GetAudioOutputConfigurationsResponse::soap_default(NULL); }
	virtual ~_ns9__GetAudioOutputConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetAudioDecoderConfigurationsResponse
#define SOAP_TYPE__ns9__GetAudioDecoderConfigurationsResponse (1705)
/* ns9:GetAudioDecoderConfigurationsResponse */
class SOAP_CMAC _ns9__GetAudioDecoderConfigurationsResponse
{
public:
	std::vector<tt__AudioDecoderConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioDecoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1705; } /* = unique type id SOAP_TYPE__ns9__GetAudioDecoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetAudioDecoderConfigurationsResponse() { _ns9__GetAudioDecoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_ns9__GetAudioDecoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__SetVideoEncoderConfiguration
#define SOAP_TYPE__ns9__SetVideoEncoderConfiguration (1706)
/* ns9:SetVideoEncoderConfiguration */
class SOAP_CMAC _ns9__SetVideoEncoderConfiguration
{
public:
	tt__VideoEncoder2Configuration *Configuration;	/* required element of type tt:VideoEncoder2Configuration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1706; } /* = unique type id SOAP_TYPE__ns9__SetVideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__SetVideoEncoderConfiguration() { _ns9__SetVideoEncoderConfiguration::soap_default(NULL); }
	virtual ~_ns9__SetVideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__ns9__SetVideoSourceConfiguration
#define SOAP_TYPE__ns9__SetVideoSourceConfiguration (1707)
/* ns9:SetVideoSourceConfiguration */
class SOAP_CMAC _ns9__SetVideoSourceConfiguration
{
public:
	tt__VideoSourceConfiguration *Configuration;	/* required element of type tt:VideoSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1707; } /* = unique type id SOAP_TYPE__ns9__SetVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__SetVideoSourceConfiguration() { _ns9__SetVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_ns9__SetVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__ns9__SetAudioEncoderConfiguration
#define SOAP_TYPE__ns9__SetAudioEncoderConfiguration (1708)
/* ns9:SetAudioEncoderConfiguration */
class SOAP_CMAC _ns9__SetAudioEncoderConfiguration
{
public:
	tt__AudioEncoder2Configuration *Configuration;	/* required element of type tt:AudioEncoder2Configuration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1708; } /* = unique type id SOAP_TYPE__ns9__SetAudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__SetAudioEncoderConfiguration() { _ns9__SetAudioEncoderConfiguration::soap_default(NULL); }
	virtual ~_ns9__SetAudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__ns9__SetAudioSourceConfiguration
#define SOAP_TYPE__ns9__SetAudioSourceConfiguration (1709)
/* ns9:SetAudioSourceConfiguration */
class SOAP_CMAC _ns9__SetAudioSourceConfiguration
{
public:
	tt__AudioSourceConfiguration *Configuration;	/* required element of type tt:AudioSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1709; } /* = unique type id SOAP_TYPE__ns9__SetAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__SetAudioSourceConfiguration() { _ns9__SetAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_ns9__SetAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__ns9__SetMetadataConfiguration
#define SOAP_TYPE__ns9__SetMetadataConfiguration (1710)
/* ns9:SetMetadataConfiguration */
class SOAP_CMAC _ns9__SetMetadataConfiguration
{
public:
	tt__MetadataConfiguration *Configuration;	/* required element of type tt:MetadataConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1710; } /* = unique type id SOAP_TYPE__ns9__SetMetadataConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__SetMetadataConfiguration() { _ns9__SetMetadataConfiguration::soap_default(NULL); }
	virtual ~_ns9__SetMetadataConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__ns9__SetAudioOutputConfiguration
#define SOAP_TYPE__ns9__SetAudioOutputConfiguration (1711)
/* ns9:SetAudioOutputConfiguration */
class SOAP_CMAC _ns9__SetAudioOutputConfiguration
{
public:
	tt__AudioOutputConfiguration *Configuration;	/* required element of type tt:AudioOutputConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1711; } /* = unique type id SOAP_TYPE__ns9__SetAudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__SetAudioOutputConfiguration() { _ns9__SetAudioOutputConfiguration::soap_default(NULL); }
	virtual ~_ns9__SetAudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__ns9__SetAudioDecoderConfiguration
#define SOAP_TYPE__ns9__SetAudioDecoderConfiguration (1712)
/* ns9:SetAudioDecoderConfiguration */
class SOAP_CMAC _ns9__SetAudioDecoderConfiguration
{
public:
	tt__AudioDecoderConfiguration *Configuration;	/* required element of type tt:AudioDecoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1712; } /* = unique type id SOAP_TYPE__ns9__SetAudioDecoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__SetAudioDecoderConfiguration() { _ns9__SetAudioDecoderConfiguration::soap_default(NULL); }
	virtual ~_ns9__SetAudioDecoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetVideoSourceConfigurationOptionsResponse
#define SOAP_TYPE__ns9__GetVideoSourceConfigurationOptionsResponse (1713)
/* ns9:GetVideoSourceConfigurationOptionsResponse */
class SOAP_CMAC _ns9__GetVideoSourceConfigurationOptionsResponse
{
public:
	tt__VideoSourceConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoSourceConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1713; } /* = unique type id SOAP_TYPE__ns9__GetVideoSourceConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetVideoSourceConfigurationOptionsResponse() { _ns9__GetVideoSourceConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_ns9__GetVideoSourceConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetVideoEncoderConfigurationOptionsResponse
#define SOAP_TYPE__ns9__GetVideoEncoderConfigurationOptionsResponse (1714)
/* ns9:GetVideoEncoderConfigurationOptionsResponse */
class SOAP_CMAC _ns9__GetVideoEncoderConfigurationOptionsResponse
{
public:
	std::vector<tt__VideoEncoder2ConfigurationOptions * >Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoEncoder2ConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1714; } /* = unique type id SOAP_TYPE__ns9__GetVideoEncoderConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetVideoEncoderConfigurationOptionsResponse() { _ns9__GetVideoEncoderConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_ns9__GetVideoEncoderConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetAudioSourceConfigurationOptionsResponse
#define SOAP_TYPE__ns9__GetAudioSourceConfigurationOptionsResponse (1715)
/* ns9:GetAudioSourceConfigurationOptionsResponse */
class SOAP_CMAC _ns9__GetAudioSourceConfigurationOptionsResponse
{
public:
	tt__AudioSourceConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioSourceConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1715; } /* = unique type id SOAP_TYPE__ns9__GetAudioSourceConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetAudioSourceConfigurationOptionsResponse() { _ns9__GetAudioSourceConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_ns9__GetAudioSourceConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetAudioEncoderConfigurationOptionsResponse
#define SOAP_TYPE__ns9__GetAudioEncoderConfigurationOptionsResponse (1716)
/* ns9:GetAudioEncoderConfigurationOptionsResponse */
class SOAP_CMAC _ns9__GetAudioEncoderConfigurationOptionsResponse
{
public:
	std::vector<tt__AudioEncoder2ConfigurationOptions * >Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioEncoder2ConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1716; } /* = unique type id SOAP_TYPE__ns9__GetAudioEncoderConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetAudioEncoderConfigurationOptionsResponse() { _ns9__GetAudioEncoderConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_ns9__GetAudioEncoderConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetMetadataConfigurationOptionsResponse
#define SOAP_TYPE__ns9__GetMetadataConfigurationOptionsResponse (1717)
/* ns9:GetMetadataConfigurationOptionsResponse */
class SOAP_CMAC _ns9__GetMetadataConfigurationOptionsResponse
{
public:
	tt__MetadataConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:MetadataConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1717; } /* = unique type id SOAP_TYPE__ns9__GetMetadataConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetMetadataConfigurationOptionsResponse() { _ns9__GetMetadataConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_ns9__GetMetadataConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetAudioOutputConfigurationOptionsResponse
#define SOAP_TYPE__ns9__GetAudioOutputConfigurationOptionsResponse (1718)
/* ns9:GetAudioOutputConfigurationOptionsResponse */
class SOAP_CMAC _ns9__GetAudioOutputConfigurationOptionsResponse
{
public:
	tt__AudioOutputConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioOutputConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1718; } /* = unique type id SOAP_TYPE__ns9__GetAudioOutputConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetAudioOutputConfigurationOptionsResponse() { _ns9__GetAudioOutputConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_ns9__GetAudioOutputConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetAudioDecoderConfigurationOptionsResponse
#define SOAP_TYPE__ns9__GetAudioDecoderConfigurationOptionsResponse (1719)
/* ns9:GetAudioDecoderConfigurationOptionsResponse */
class SOAP_CMAC _ns9__GetAudioDecoderConfigurationOptionsResponse
{
public:
	std::vector<tt__AudioEncoder2ConfigurationOptions * >Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioEncoder2ConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1719; } /* = unique type id SOAP_TYPE__ns9__GetAudioDecoderConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetAudioDecoderConfigurationOptionsResponse() { _ns9__GetAudioDecoderConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_ns9__GetAudioDecoderConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetVideoEncoderInstances
#define SOAP_TYPE__ns9__GetVideoEncoderInstances (1720)
/* ns9:GetVideoEncoderInstances */
class SOAP_CMAC _ns9__GetVideoEncoderInstances
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1720; } /* = unique type id SOAP_TYPE__ns9__GetVideoEncoderInstances */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetVideoEncoderInstances() { _ns9__GetVideoEncoderInstances::soap_default(NULL); }
	virtual ~_ns9__GetVideoEncoderInstances() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetVideoEncoderInstancesResponse
#define SOAP_TYPE__ns9__GetVideoEncoderInstancesResponse (1721)
/* ns9:GetVideoEncoderInstancesResponse */
class SOAP_CMAC _ns9__GetVideoEncoderInstancesResponse
{
public:
	ns9__EncoderInstanceInfo *Info;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns9:EncoderInstanceInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1721; } /* = unique type id SOAP_TYPE__ns9__GetVideoEncoderInstancesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetVideoEncoderInstancesResponse() { _ns9__GetVideoEncoderInstancesResponse::soap_default(NULL); }
	virtual ~_ns9__GetVideoEncoderInstancesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetStreamUri
#define SOAP_TYPE__ns9__GetStreamUri (1722)
/* ns9:GetStreamUri */
class SOAP_CMAC _ns9__GetStreamUri
{
public:
	std::string Protocol;	/* required element of type xsd:string */
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1722; } /* = unique type id SOAP_TYPE__ns9__GetStreamUri */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetStreamUri() { _ns9__GetStreamUri::soap_default(NULL); }
	virtual ~_ns9__GetStreamUri() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetStreamUriResponse
#define SOAP_TYPE__ns9__GetStreamUriResponse (1723)
/* ns9:GetStreamUriResponse */
class SOAP_CMAC _ns9__GetStreamUriResponse
{
public:
	std::string Uri;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1723; } /* = unique type id SOAP_TYPE__ns9__GetStreamUriResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetStreamUriResponse() { _ns9__GetStreamUriResponse::soap_default(NULL); }
	virtual ~_ns9__GetStreamUriResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__SetSynchronizationPoint
#define SOAP_TYPE__ns9__SetSynchronizationPoint (1724)
/* ns9:SetSynchronizationPoint */
class SOAP_CMAC _ns9__SetSynchronizationPoint
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1724; } /* = unique type id SOAP_TYPE__ns9__SetSynchronizationPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__SetSynchronizationPoint() { _ns9__SetSynchronizationPoint::soap_default(NULL); }
	virtual ~_ns9__SetSynchronizationPoint() { }
};
#endif

#ifndef SOAP_TYPE__ns9__SetSynchronizationPointResponse
#define SOAP_TYPE__ns9__SetSynchronizationPointResponse (1725)
/* ns9:SetSynchronizationPointResponse */
class SOAP_CMAC _ns9__SetSynchronizationPointResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1725; } /* = unique type id SOAP_TYPE__ns9__SetSynchronizationPointResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__SetSynchronizationPointResponse() { _ns9__SetSynchronizationPointResponse::soap_default(NULL); }
	virtual ~_ns9__SetSynchronizationPointResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetSnapshotUri
#define SOAP_TYPE__ns9__GetSnapshotUri (1726)
/* ns9:GetSnapshotUri */
class SOAP_CMAC _ns9__GetSnapshotUri
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1726; } /* = unique type id SOAP_TYPE__ns9__GetSnapshotUri */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetSnapshotUri() { _ns9__GetSnapshotUri::soap_default(NULL); }
	virtual ~_ns9__GetSnapshotUri() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetSnapshotUriResponse
#define SOAP_TYPE__ns9__GetSnapshotUriResponse (1727)
/* ns9:GetSnapshotUriResponse */
class SOAP_CMAC _ns9__GetSnapshotUriResponse
{
public:
	std::string Uri;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1727; } /* = unique type id SOAP_TYPE__ns9__GetSnapshotUriResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetSnapshotUriResponse() { _ns9__GetSnapshotUriResponse::soap_default(NULL); }
	virtual ~_ns9__GetSnapshotUriResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetVideoSourceModes
#define SOAP_TYPE__ns9__GetVideoSourceModes (1728)
/* ns9:GetVideoSourceModes */
class SOAP_CMAC _ns9__GetVideoSourceModes
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1728; } /* = unique type id SOAP_TYPE__ns9__GetVideoSourceModes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetVideoSourceModes() { _ns9__GetVideoSourceModes::soap_default(NULL); }
	virtual ~_ns9__GetVideoSourceModes() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetVideoSourceModesResponse
#define SOAP_TYPE__ns9__GetVideoSourceModesResponse (1729)
/* ns9:GetVideoSourceModesResponse */
class SOAP_CMAC _ns9__GetVideoSourceModesResponse
{
public:
	std::vector<ns9__VideoSourceMode * >VideoSourceModes;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns9:VideoSourceMode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1729; } /* = unique type id SOAP_TYPE__ns9__GetVideoSourceModesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetVideoSourceModesResponse() { _ns9__GetVideoSourceModesResponse::soap_default(NULL); }
	virtual ~_ns9__GetVideoSourceModesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__SetVideoSourceMode
#define SOAP_TYPE__ns9__SetVideoSourceMode (1730)
/* ns9:SetVideoSourceMode */
class SOAP_CMAC _ns9__SetVideoSourceMode
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	std::string VideoSourceModeToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1730; } /* = unique type id SOAP_TYPE__ns9__SetVideoSourceMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__SetVideoSourceMode() { _ns9__SetVideoSourceMode::soap_default(NULL); }
	virtual ~_ns9__SetVideoSourceMode() { }
};
#endif

#ifndef SOAP_TYPE__ns9__SetVideoSourceModeResponse
#define SOAP_TYPE__ns9__SetVideoSourceModeResponse (1731)
/* ns9:SetVideoSourceModeResponse */
class SOAP_CMAC _ns9__SetVideoSourceModeResponse
{
public:
	bool Reboot;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1731; } /* = unique type id SOAP_TYPE__ns9__SetVideoSourceModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__SetVideoSourceModeResponse() { _ns9__SetVideoSourceModeResponse::soap_default(NULL); }
	virtual ~_ns9__SetVideoSourceModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetOSDs
#define SOAP_TYPE__ns9__GetOSDs (1732)
/* ns9:GetOSDs */
class SOAP_CMAC _ns9__GetOSDs
{
public:
	std::string *OSDToken;	/* optional element of type tt:ReferenceToken */
	std::string *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1732; } /* = unique type id SOAP_TYPE__ns9__GetOSDs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetOSDs() { _ns9__GetOSDs::soap_default(NULL); }
	virtual ~_ns9__GetOSDs() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetOSDsResponse
#define SOAP_TYPE__ns9__GetOSDsResponse (1733)
/* ns9:GetOSDsResponse */
class SOAP_CMAC _ns9__GetOSDsResponse
{
public:
	std::vector<tt__OSDConfiguration * >OSDs;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:OSDConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1733; } /* = unique type id SOAP_TYPE__ns9__GetOSDsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetOSDsResponse() { _ns9__GetOSDsResponse::soap_default(NULL); }
	virtual ~_ns9__GetOSDsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__SetOSD
#define SOAP_TYPE__ns9__SetOSD (1734)
/* ns9:SetOSD */
class SOAP_CMAC _ns9__SetOSD
{
public:
	tt__OSDConfiguration *OSD;	/* required element of type tt:OSDConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1734; } /* = unique type id SOAP_TYPE__ns9__SetOSD */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__SetOSD() { _ns9__SetOSD::soap_default(NULL); }
	virtual ~_ns9__SetOSD() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetOSDOptions
#define SOAP_TYPE__ns9__GetOSDOptions (1735)
/* ns9:GetOSDOptions */
class SOAP_CMAC _ns9__GetOSDOptions
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1735; } /* = unique type id SOAP_TYPE__ns9__GetOSDOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetOSDOptions() { _ns9__GetOSDOptions::soap_default(NULL); }
	virtual ~_ns9__GetOSDOptions() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetOSDOptionsResponse
#define SOAP_TYPE__ns9__GetOSDOptionsResponse (1736)
/* ns9:GetOSDOptionsResponse */
class SOAP_CMAC _ns9__GetOSDOptionsResponse
{
public:
	tt__OSDConfigurationOptions *OSDOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:OSDConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1736; } /* = unique type id SOAP_TYPE__ns9__GetOSDOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetOSDOptionsResponse() { _ns9__GetOSDOptionsResponse::soap_default(NULL); }
	virtual ~_ns9__GetOSDOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__CreateOSD
#define SOAP_TYPE__ns9__CreateOSD (1737)
/* ns9:CreateOSD */
class SOAP_CMAC _ns9__CreateOSD
{
public:
	tt__OSDConfiguration *OSD;	/* required element of type tt:OSDConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1737; } /* = unique type id SOAP_TYPE__ns9__CreateOSD */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__CreateOSD() { _ns9__CreateOSD::soap_default(NULL); }
	virtual ~_ns9__CreateOSD() { }
};
#endif

#ifndef SOAP_TYPE__ns9__CreateOSDResponse
#define SOAP_TYPE__ns9__CreateOSDResponse (1738)
/* ns9:CreateOSDResponse */
class SOAP_CMAC _ns9__CreateOSDResponse
{
public:
	std::string OSDToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1738; } /* = unique type id SOAP_TYPE__ns9__CreateOSDResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__CreateOSDResponse() { _ns9__CreateOSDResponse::soap_default(NULL); }
	virtual ~_ns9__CreateOSDResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__DeleteOSD
#define SOAP_TYPE__ns9__DeleteOSD (1739)
/* ns9:DeleteOSD */
class SOAP_CMAC _ns9__DeleteOSD
{
public:
	std::string OSDToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1739; } /* = unique type id SOAP_TYPE__ns9__DeleteOSD */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__DeleteOSD() { _ns9__DeleteOSD::soap_default(NULL); }
	virtual ~_ns9__DeleteOSD() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetMasks
#define SOAP_TYPE__ns9__GetMasks (1740)
/* ns9:GetMasks */
class SOAP_CMAC _ns9__GetMasks
{
public:
	std::string *Token;	/* optional element of type tt:ReferenceToken */
	std::string *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1740; } /* = unique type id SOAP_TYPE__ns9__GetMasks */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetMasks() { _ns9__GetMasks::soap_default(NULL); }
	virtual ~_ns9__GetMasks() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetMasksResponse
#define SOAP_TYPE__ns9__GetMasksResponse (1741)
/* ns9:GetMasksResponse */
class SOAP_CMAC _ns9__GetMasksResponse
{
public:
	std::vector<ns9__Mask * >Masks;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns9:Mask */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1741; } /* = unique type id SOAP_TYPE__ns9__GetMasksResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetMasksResponse() { _ns9__GetMasksResponse::soap_default(NULL); }
	virtual ~_ns9__GetMasksResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__SetMask
#define SOAP_TYPE__ns9__SetMask (1742)
/* ns9:SetMask */
class SOAP_CMAC _ns9__SetMask
{
public:
	ns9__Mask *Mask;	/* required element of type ns9:Mask */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1742; } /* = unique type id SOAP_TYPE__ns9__SetMask */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__SetMask() { _ns9__SetMask::soap_default(NULL); }
	virtual ~_ns9__SetMask() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetMaskOptions
#define SOAP_TYPE__ns9__GetMaskOptions (1743)
/* ns9:GetMaskOptions */
class SOAP_CMAC _ns9__GetMaskOptions
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1743; } /* = unique type id SOAP_TYPE__ns9__GetMaskOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetMaskOptions() { _ns9__GetMaskOptions::soap_default(NULL); }
	virtual ~_ns9__GetMaskOptions() { }
};
#endif

#ifndef SOAP_TYPE__ns9__GetMaskOptionsResponse
#define SOAP_TYPE__ns9__GetMaskOptionsResponse (1744)
/* ns9:GetMaskOptionsResponse */
class SOAP_CMAC _ns9__GetMaskOptionsResponse
{
public:
	ns9__MaskOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns9:MaskOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1744; } /* = unique type id SOAP_TYPE__ns9__GetMaskOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__GetMaskOptionsResponse() { _ns9__GetMaskOptionsResponse::soap_default(NULL); }
	virtual ~_ns9__GetMaskOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__CreateMask
#define SOAP_TYPE__ns9__CreateMask (1745)
/* ns9:CreateMask */
class SOAP_CMAC _ns9__CreateMask
{
public:
	ns9__Mask *Mask;	/* required element of type ns9:Mask */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1745; } /* = unique type id SOAP_TYPE__ns9__CreateMask */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__CreateMask() { _ns9__CreateMask::soap_default(NULL); }
	virtual ~_ns9__CreateMask() { }
};
#endif

#ifndef SOAP_TYPE__ns9__CreateMaskResponse
#define SOAP_TYPE__ns9__CreateMaskResponse (1746)
/* ns9:CreateMaskResponse */
class SOAP_CMAC _ns9__CreateMaskResponse
{
public:
	std::string Token;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1746; } /* = unique type id SOAP_TYPE__ns9__CreateMaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__CreateMaskResponse() { _ns9__CreateMaskResponse::soap_default(NULL); }
	virtual ~_ns9__CreateMaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns9__DeleteMask
#define SOAP_TYPE__ns9__DeleteMask (1747)
/* ns9:DeleteMask */
class SOAP_CMAC _ns9__DeleteMask
{
public:
	std::string Token;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1747; } /* = unique type id SOAP_TYPE__ns9__DeleteMask */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns9__DeleteMask() { _ns9__DeleteMask::soap_default(NULL); }
	virtual ~_ns9__DeleteMask() { }
};
#endif

#ifndef SOAP_TYPE_ns10__Usage
#define SOAP_TYPE_ns10__Usage (1748)
/* ns10:Usage */
class SOAP_CMAC ns10__Usage : public xsd__anyType
{
public:
	std::string *Pan;	/* optional element of type xsd:positiveInteger */
	std::string *Tilt;	/* optional element of type xsd:positiveInteger */
	std::string *Zoom;	/* optional element of type xsd:positiveInteger */
	std::string *Roll;	/* optional element of type xsd:positiveInteger */
	std::string *Focus;	/* optional element of type xsd:positiveInteger */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1748; } /* = unique type id SOAP_TYPE_ns10__Usage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns10__Usage() { ns10__Usage::soap_default(NULL); }
	virtual ~ns10__Usage() { }
};
#endif

#ifndef SOAP_TYPE_ns10__SourceCapabilities
#define SOAP_TYPE_ns10__SourceCapabilities (1749)
/* ns10:SourceCapabilities */
class SOAP_CMAC ns10__SourceCapabilities : public xsd__anyType
{
public:
	std::vector<char * >__any;
	std::string VideoSourceToken;	/* required attribute */
	std::string *MaximumPanMoves;	/* optional attribute */
	std::string *MaximumTiltMoves;	/* optional attribute */
	std::string *MaximumZoomMoves;	/* optional attribute */
	std::string *MaximumRollMoves;	/* optional attribute */
	bool *AutoLevel;	/* optional attribute */
	std::string *MaximumFocusMoves;	/* optional attribute */
	bool *AutoFocus;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1749; } /* = unique type id SOAP_TYPE_ns10__SourceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns10__SourceCapabilities() { ns10__SourceCapabilities::soap_default(NULL); }
	virtual ~ns10__SourceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_ns10__Capabilities
#define SOAP_TYPE_ns10__Capabilities (1750)
/* ns10:Capabilities */
class SOAP_CMAC ns10__Capabilities : public xsd__anyType
{
public:
	LONG64 DefaultTimeout;	/* external */
	std::vector<ns10__SourceCapabilities * >Source;	/* optional element of type ns10:SourceCapabilities */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1750; } /* = unique type id SOAP_TYPE_ns10__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns10__Capabilities() { ns10__Capabilities::soap_default(NULL); }
	virtual ~ns10__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE__ns10__GetServiceCapabilities
#define SOAP_TYPE__ns10__GetServiceCapabilities (1751)
/* ns10:GetServiceCapabilities */
class SOAP_CMAC _ns10__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1751; } /* = unique type id SOAP_TYPE__ns10__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns10__GetServiceCapabilities() { _ns10__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_ns10__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__ns10__GetServiceCapabilitiesResponse
#define SOAP_TYPE__ns10__GetServiceCapabilitiesResponse (1752)
/* ns10:GetServiceCapabilitiesResponse */
class SOAP_CMAC _ns10__GetServiceCapabilitiesResponse
{
public:
	ns10__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns10:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1752; } /* = unique type id SOAP_TYPE__ns10__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns10__GetServiceCapabilitiesResponse() { _ns10__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_ns10__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns10__PanMove
#define SOAP_TYPE__ns10__PanMove (1753)
/* ns10:PanMove */
class SOAP_CMAC _ns10__PanMove
{
public:
	std::string VideoSource;	/* required element of type tt:ReferenceToken */
	enum ns10__PanDirection Direction;	/* required element of type ns10:PanDirection */
	LONG64 *Timeout;	/* optional element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1753; } /* = unique type id SOAP_TYPE__ns10__PanMove */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns10__PanMove() { _ns10__PanMove::soap_default(NULL); }
	virtual ~_ns10__PanMove() { }
};
#endif

#ifndef SOAP_TYPE__ns10__PanMoveResponse
#define SOAP_TYPE__ns10__PanMoveResponse (1754)
/* ns10:PanMoveResponse */
class SOAP_CMAC _ns10__PanMoveResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1754; } /* = unique type id SOAP_TYPE__ns10__PanMoveResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns10__PanMoveResponse() { _ns10__PanMoveResponse::soap_default(NULL); }
	virtual ~_ns10__PanMoveResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns10__TiltMove
#define SOAP_TYPE__ns10__TiltMove (1755)
/* ns10:TiltMove */
class SOAP_CMAC _ns10__TiltMove
{
public:
	std::string VideoSource;	/* required element of type tt:ReferenceToken */
	enum ns10__TiltDirection Direction;	/* required element of type ns10:TiltDirection */
	LONG64 *Timeout;	/* optional element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1755; } /* = unique type id SOAP_TYPE__ns10__TiltMove */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns10__TiltMove() { _ns10__TiltMove::soap_default(NULL); }
	virtual ~_ns10__TiltMove() { }
};
#endif

#ifndef SOAP_TYPE__ns10__TiltMoveResponse
#define SOAP_TYPE__ns10__TiltMoveResponse (1756)
/* ns10:TiltMoveResponse */
class SOAP_CMAC _ns10__TiltMoveResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1756; } /* = unique type id SOAP_TYPE__ns10__TiltMoveResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns10__TiltMoveResponse() { _ns10__TiltMoveResponse::soap_default(NULL); }
	virtual ~_ns10__TiltMoveResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns10__ZoomMove
#define SOAP_TYPE__ns10__ZoomMove (1757)
/* ns10:ZoomMove */
class SOAP_CMAC _ns10__ZoomMove
{
public:
	std::string VideoSource;	/* required element of type tt:ReferenceToken */
	enum ns10__ZoomDirection Direction;	/* required element of type ns10:ZoomDirection */
	LONG64 *Timeout;	/* optional element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1757; } /* = unique type id SOAP_TYPE__ns10__ZoomMove */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns10__ZoomMove() { _ns10__ZoomMove::soap_default(NULL); }
	virtual ~_ns10__ZoomMove() { }
};
#endif

#ifndef SOAP_TYPE__ns10__ZoomMoveResponse
#define SOAP_TYPE__ns10__ZoomMoveResponse (1758)
/* ns10:ZoomMoveResponse */
class SOAP_CMAC _ns10__ZoomMoveResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1758; } /* = unique type id SOAP_TYPE__ns10__ZoomMoveResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns10__ZoomMoveResponse() { _ns10__ZoomMoveResponse::soap_default(NULL); }
	virtual ~_ns10__ZoomMoveResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns10__RollMove
#define SOAP_TYPE__ns10__RollMove (1759)
/* ns10:RollMove */
class SOAP_CMAC _ns10__RollMove
{
public:
	std::string VideoSource;	/* required element of type tt:ReferenceToken */
	enum ns10__RollDirection Direction;	/* required element of type ns10:RollDirection */
	LONG64 *Timeout;	/* optional element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1759; } /* = unique type id SOAP_TYPE__ns10__RollMove */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns10__RollMove() { _ns10__RollMove::soap_default(NULL); }
	virtual ~_ns10__RollMove() { }
};
#endif

#ifndef SOAP_TYPE__ns10__RollMoveResponse
#define SOAP_TYPE__ns10__RollMoveResponse (1760)
/* ns10:RollMoveResponse */
class SOAP_CMAC _ns10__RollMoveResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1760; } /* = unique type id SOAP_TYPE__ns10__RollMoveResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns10__RollMoveResponse() { _ns10__RollMoveResponse::soap_default(NULL); }
	virtual ~_ns10__RollMoveResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns10__FocusMove
#define SOAP_TYPE__ns10__FocusMove (1761)
/* ns10:FocusMove */
class SOAP_CMAC _ns10__FocusMove
{
public:
	std::string VideoSource;	/* required element of type tt:ReferenceToken */
	enum ns10__FocusDirection Direction;	/* required element of type ns10:FocusDirection */
	LONG64 *Timeout;	/* optional element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1761; } /* = unique type id SOAP_TYPE__ns10__FocusMove */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns10__FocusMove() { _ns10__FocusMove::soap_default(NULL); }
	virtual ~_ns10__FocusMove() { }
};
#endif

#ifndef SOAP_TYPE__ns10__FocusMoveResponse
#define SOAP_TYPE__ns10__FocusMoveResponse (1762)
/* ns10:FocusMoveResponse */
class SOAP_CMAC _ns10__FocusMoveResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1762; } /* = unique type id SOAP_TYPE__ns10__FocusMoveResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns10__FocusMoveResponse() { _ns10__FocusMoveResponse::soap_default(NULL); }
	virtual ~_ns10__FocusMoveResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns10__Stop
#define SOAP_TYPE__ns10__Stop (1763)
/* ns10:Stop */
class SOAP_CMAC _ns10__Stop
{
public:
	std::string VideoSource;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1763; } /* = unique type id SOAP_TYPE__ns10__Stop */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns10__Stop() { _ns10__Stop::soap_default(NULL); }
	virtual ~_ns10__Stop() { }
};
#endif

#ifndef SOAP_TYPE__ns10__StopResponse
#define SOAP_TYPE__ns10__StopResponse (1764)
/* ns10:StopResponse */
class SOAP_CMAC _ns10__StopResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1764; } /* = unique type id SOAP_TYPE__ns10__StopResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns10__StopResponse() { _ns10__StopResponse::soap_default(NULL); }
	virtual ~_ns10__StopResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns10__GetUsage
#define SOAP_TYPE__ns10__GetUsage (1765)
/* ns10:GetUsage */
class SOAP_CMAC _ns10__GetUsage
{
public:
	std::string VideoSource;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1765; } /* = unique type id SOAP_TYPE__ns10__GetUsage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns10__GetUsage() { _ns10__GetUsage::soap_default(NULL); }
	virtual ~_ns10__GetUsage() { }
};
#endif

#ifndef SOAP_TYPE__ns10__GetUsageResponse
#define SOAP_TYPE__ns10__GetUsageResponse (1766)
/* ns10:GetUsageResponse */
class SOAP_CMAC _ns10__GetUsageResponse
{
public:
	ns10__Usage *Usage;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns10:Usage */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1766; } /* = unique type id SOAP_TYPE__ns10__GetUsageResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns10__GetUsageResponse() { _ns10__GetUsageResponse::soap_default(NULL); }
	virtual ~_ns10__GetUsageResponse() { }
};
#endif

#ifndef SOAP_TYPE_tptz__Capabilities
#define SOAP_TYPE_tptz__Capabilities (1767)
/* tptz:Capabilities */
class SOAP_CMAC tptz__Capabilities : public xsd__anyType
{
public:
	std::vector<char * >__any;
	bool *EFlip;	/* optional attribute */
	bool *Reverse;	/* optional attribute */
	bool *GetCompatibleConfigurations;	/* optional attribute */
	bool *MoveStatus;	/* optional attribute */
	bool *StatusPosition;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1767; } /* = unique type id SOAP_TYPE_tptz__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tptz__Capabilities() { tptz__Capabilities::soap_default(NULL); }
	virtual ~tptz__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetServiceCapabilities
#define SOAP_TYPE__tptz__GetServiceCapabilities (1768)
/* tptz:GetServiceCapabilities */
class SOAP_CMAC _tptz__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1768; } /* = unique type id SOAP_TYPE__tptz__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetServiceCapabilities() { _tptz__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_tptz__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tptz__GetServiceCapabilitiesResponse (1769)
/* tptz:GetServiceCapabilitiesResponse */
class SOAP_CMAC _tptz__GetServiceCapabilitiesResponse
{
public:
	tptz__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tptz:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1769; } /* = unique type id SOAP_TYPE__tptz__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetServiceCapabilitiesResponse() { _tptz__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_tptz__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetNodes
#define SOAP_TYPE__tptz__GetNodes (1770)
/* tptz:GetNodes */
class SOAP_CMAC _tptz__GetNodes
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1770; } /* = unique type id SOAP_TYPE__tptz__GetNodes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetNodes() { _tptz__GetNodes::soap_default(NULL); }
	virtual ~_tptz__GetNodes() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetNodesResponse
#define SOAP_TYPE__tptz__GetNodesResponse (1771)
/* tptz:GetNodesResponse */
class SOAP_CMAC _tptz__GetNodesResponse
{
public:
	std::vector<class tt__PTZNode * >PTZNode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:PTZNode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1771; } /* = unique type id SOAP_TYPE__tptz__GetNodesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetNodesResponse() { _tptz__GetNodesResponse::soap_default(NULL); }
	virtual ~_tptz__GetNodesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetNode
#define SOAP_TYPE__tptz__GetNode (1772)
/* tptz:GetNode */
class SOAP_CMAC _tptz__GetNode
{
public:
	std::string NodeToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1772; } /* = unique type id SOAP_TYPE__tptz__GetNode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetNode() { _tptz__GetNode::soap_default(NULL); }
	virtual ~_tptz__GetNode() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetNodeResponse
#define SOAP_TYPE__tptz__GetNodeResponse (1773)
/* tptz:GetNodeResponse */
class SOAP_CMAC _tptz__GetNodeResponse
{
public:
	tt__PTZNode *PTZNode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:PTZNode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1773; } /* = unique type id SOAP_TYPE__tptz__GetNodeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetNodeResponse() { _tptz__GetNodeResponse::soap_default(NULL); }
	virtual ~_tptz__GetNodeResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurations
#define SOAP_TYPE__tptz__GetConfigurations (1774)
/* tptz:GetConfigurations */
class SOAP_CMAC _tptz__GetConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1774; } /* = unique type id SOAP_TYPE__tptz__GetConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetConfigurations() { _tptz__GetConfigurations::soap_default(NULL); }
	virtual ~_tptz__GetConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurationsResponse
#define SOAP_TYPE__tptz__GetConfigurationsResponse (1775)
/* tptz:GetConfigurationsResponse */
class SOAP_CMAC _tptz__GetConfigurationsResponse
{
public:
	std::vector<tt__PTZConfiguration * >PTZConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:PTZConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1775; } /* = unique type id SOAP_TYPE__tptz__GetConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetConfigurationsResponse() { _tptz__GetConfigurationsResponse::soap_default(NULL); }
	virtual ~_tptz__GetConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetConfiguration
#define SOAP_TYPE__tptz__GetConfiguration (1776)
/* tptz:GetConfiguration */
class SOAP_CMAC _tptz__GetConfiguration
{
public:
	std::string PTZConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1776; } /* = unique type id SOAP_TYPE__tptz__GetConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetConfiguration() { _tptz__GetConfiguration::soap_default(NULL); }
	virtual ~_tptz__GetConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurationResponse
#define SOAP_TYPE__tptz__GetConfigurationResponse (1777)
/* tptz:GetConfigurationResponse */
class SOAP_CMAC _tptz__GetConfigurationResponse
{
public:
	tt__PTZConfiguration *PTZConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:PTZConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1777; } /* = unique type id SOAP_TYPE__tptz__GetConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetConfigurationResponse() { _tptz__GetConfigurationResponse::soap_default(NULL); }
	virtual ~_tptz__GetConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__SetConfiguration
#define SOAP_TYPE__tptz__SetConfiguration (1778)
/* tptz:SetConfiguration */
class SOAP_CMAC _tptz__SetConfiguration
{
public:
	tt__PTZConfiguration *PTZConfiguration;	/* required element of type tt:PTZConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1778; } /* = unique type id SOAP_TYPE__tptz__SetConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__SetConfiguration() { _tptz__SetConfiguration::soap_default(NULL); }
	virtual ~_tptz__SetConfiguration() { }
};
#endif

#ifndef SOAP_TYPE___tptz__SetConfigurationResponse_sequence
#define SOAP_TYPE___tptz__SetConfigurationResponse_sequence (3136)
/* Operation wrapper: */
class SOAP_CMAC __tptz__SetConfigurationResponse_sequence
{
public:
	virtual int soap_type() const { return 3136; } /* = unique type id SOAP_TYPE___tptz__SetConfigurationResponse_sequence */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __tptz__SetConfigurationResponse_sequence() { __tptz__SetConfigurationResponse_sequence::soap_default(NULL); }
	virtual ~__tptz__SetConfigurationResponse_sequence() { }
};
#endif

#ifndef SOAP_TYPE__tptz__SetConfigurationResponse
#define SOAP_TYPE__tptz__SetConfigurationResponse (1779)
/* tptz:SetConfigurationResponse */
class SOAP_CMAC _tptz__SetConfigurationResponse
{
public:
	std::vector<__tptz__SetConfigurationResponse_sequence >__SetConfigurationResponse_sequence;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1779; } /* = unique type id SOAP_TYPE__tptz__SetConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__SetConfigurationResponse() { _tptz__SetConfigurationResponse::soap_default(NULL); }
	virtual ~_tptz__SetConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurationOptions
#define SOAP_TYPE__tptz__GetConfigurationOptions (1780)
/* tptz:GetConfigurationOptions */
class SOAP_CMAC _tptz__GetConfigurationOptions
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1780; } /* = unique type id SOAP_TYPE__tptz__GetConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetConfigurationOptions() { _tptz__GetConfigurationOptions::soap_default(NULL); }
	virtual ~_tptz__GetConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurationOptionsResponse
#define SOAP_TYPE__tptz__GetConfigurationOptionsResponse (1781)
/* tptz:GetConfigurationOptionsResponse */
class SOAP_CMAC _tptz__GetConfigurationOptionsResponse
{
public:
	tt__PTZConfigurationOptions *PTZConfigurationOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:PTZConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1781; } /* = unique type id SOAP_TYPE__tptz__GetConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetConfigurationOptionsResponse() { _tptz__GetConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_tptz__GetConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__SendAuxiliaryCommand
#define SOAP_TYPE__tptz__SendAuxiliaryCommand (1782)
/* tptz:SendAuxiliaryCommand */
class SOAP_CMAC _tptz__SendAuxiliaryCommand
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string AuxiliaryData;	/* required element of type tt:AuxiliaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1782; } /* = unique type id SOAP_TYPE__tptz__SendAuxiliaryCommand */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__SendAuxiliaryCommand() { _tptz__SendAuxiliaryCommand::soap_default(NULL); }
	virtual ~_tptz__SendAuxiliaryCommand() { }
};
#endif

#ifndef SOAP_TYPE__tptz__SendAuxiliaryCommandResponse
#define SOAP_TYPE__tptz__SendAuxiliaryCommandResponse (1783)
/* tptz:SendAuxiliaryCommandResponse */
class SOAP_CMAC _tptz__SendAuxiliaryCommandResponse
{
public:
	std::string AuxiliaryResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AuxiliaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1783; } /* = unique type id SOAP_TYPE__tptz__SendAuxiliaryCommandResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__SendAuxiliaryCommandResponse() { _tptz__SendAuxiliaryCommandResponse::soap_default(NULL); }
	virtual ~_tptz__SendAuxiliaryCommandResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetPresets
#define SOAP_TYPE__tptz__GetPresets (1784)
/* tptz:GetPresets */
class SOAP_CMAC _tptz__GetPresets
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1784; } /* = unique type id SOAP_TYPE__tptz__GetPresets */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetPresets() { _tptz__GetPresets::soap_default(NULL); }
	virtual ~_tptz__GetPresets() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetPresetsResponse
#define SOAP_TYPE__tptz__GetPresetsResponse (1785)
/* tptz:GetPresetsResponse */
class SOAP_CMAC _tptz__GetPresetsResponse
{
public:
	std::vector<tt__PTZPreset * >Preset;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:PTZPreset */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1785; } /* = unique type id SOAP_TYPE__tptz__GetPresetsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetPresetsResponse() { _tptz__GetPresetsResponse::soap_default(NULL); }
	virtual ~_tptz__GetPresetsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__SetPreset
#define SOAP_TYPE__tptz__SetPreset (1786)
/* tptz:SetPreset */
class SOAP_CMAC _tptz__SetPreset
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string *PresetName;	/* optional element of type xsd:string */
	std::string *PresetToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1786; } /* = unique type id SOAP_TYPE__tptz__SetPreset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__SetPreset() { _tptz__SetPreset::soap_default(NULL); }
	virtual ~_tptz__SetPreset() { }
};
#endif

#ifndef SOAP_TYPE__tptz__SetPresetResponse
#define SOAP_TYPE__tptz__SetPresetResponse (1787)
/* tptz:SetPresetResponse */
class SOAP_CMAC _tptz__SetPresetResponse
{
public:
	std::string PresetToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1787; } /* = unique type id SOAP_TYPE__tptz__SetPresetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__SetPresetResponse() { _tptz__SetPresetResponse::soap_default(NULL); }
	virtual ~_tptz__SetPresetResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__RemovePreset
#define SOAP_TYPE__tptz__RemovePreset (1788)
/* tptz:RemovePreset */
class SOAP_CMAC _tptz__RemovePreset
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string PresetToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1788; } /* = unique type id SOAP_TYPE__tptz__RemovePreset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__RemovePreset() { _tptz__RemovePreset::soap_default(NULL); }
	virtual ~_tptz__RemovePreset() { }
};
#endif

#ifndef SOAP_TYPE__tptz__RemovePresetResponse
#define SOAP_TYPE__tptz__RemovePresetResponse (1789)
/* tptz:RemovePresetResponse */
class SOAP_CMAC _tptz__RemovePresetResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1789; } /* = unique type id SOAP_TYPE__tptz__RemovePresetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__RemovePresetResponse() { _tptz__RemovePresetResponse::soap_default(NULL); }
	virtual ~_tptz__RemovePresetResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GotoPreset
#define SOAP_TYPE__tptz__GotoPreset (1790)
/* tptz:GotoPreset */
class SOAP_CMAC _tptz__GotoPreset
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string PresetToken;	/* required element of type tt:ReferenceToken */
	tt__PTZSpeed *Speed;	/* optional element of type tt:PTZSpeed */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1790; } /* = unique type id SOAP_TYPE__tptz__GotoPreset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GotoPreset() { _tptz__GotoPreset::soap_default(NULL); }
	virtual ~_tptz__GotoPreset() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GotoPresetResponse
#define SOAP_TYPE__tptz__GotoPresetResponse (1791)
/* tptz:GotoPresetResponse */
class SOAP_CMAC _tptz__GotoPresetResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1791; } /* = unique type id SOAP_TYPE__tptz__GotoPresetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GotoPresetResponse() { _tptz__GotoPresetResponse::soap_default(NULL); }
	virtual ~_tptz__GotoPresetResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetStatus
#define SOAP_TYPE__tptz__GetStatus (1792)
/* tptz:GetStatus */
class SOAP_CMAC _tptz__GetStatus
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1792; } /* = unique type id SOAP_TYPE__tptz__GetStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetStatus() { _tptz__GetStatus::soap_default(NULL); }
	virtual ~_tptz__GetStatus() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetStatusResponse
#define SOAP_TYPE__tptz__GetStatusResponse (1793)
/* tptz:GetStatusResponse */
class SOAP_CMAC _tptz__GetStatusResponse
{
public:
	tt__PTZStatus *PTZStatus;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:PTZStatus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1793; } /* = unique type id SOAP_TYPE__tptz__GetStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetStatusResponse() { _tptz__GetStatusResponse::soap_default(NULL); }
	virtual ~_tptz__GetStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GotoHomePosition
#define SOAP_TYPE__tptz__GotoHomePosition (1794)
/* tptz:GotoHomePosition */
class SOAP_CMAC _tptz__GotoHomePosition
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	tt__PTZSpeed *Speed;	/* optional element of type tt:PTZSpeed */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1794; } /* = unique type id SOAP_TYPE__tptz__GotoHomePosition */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GotoHomePosition() { _tptz__GotoHomePosition::soap_default(NULL); }
	virtual ~_tptz__GotoHomePosition() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GotoHomePositionResponse
#define SOAP_TYPE__tptz__GotoHomePositionResponse (1795)
/* tptz:GotoHomePositionResponse */
class SOAP_CMAC _tptz__GotoHomePositionResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1795; } /* = unique type id SOAP_TYPE__tptz__GotoHomePositionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GotoHomePositionResponse() { _tptz__GotoHomePositionResponse::soap_default(NULL); }
	virtual ~_tptz__GotoHomePositionResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__SetHomePosition
#define SOAP_TYPE__tptz__SetHomePosition (1796)
/* tptz:SetHomePosition */
class SOAP_CMAC _tptz__SetHomePosition
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1796; } /* = unique type id SOAP_TYPE__tptz__SetHomePosition */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__SetHomePosition() { _tptz__SetHomePosition::soap_default(NULL); }
	virtual ~_tptz__SetHomePosition() { }
};
#endif

#ifndef SOAP_TYPE__tptz__SetHomePositionResponse
#define SOAP_TYPE__tptz__SetHomePositionResponse (1797)
/* tptz:SetHomePositionResponse */
class SOAP_CMAC _tptz__SetHomePositionResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1797; } /* = unique type id SOAP_TYPE__tptz__SetHomePositionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__SetHomePositionResponse() { _tptz__SetHomePositionResponse::soap_default(NULL); }
	virtual ~_tptz__SetHomePositionResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__ContinuousMove
#define SOAP_TYPE__tptz__ContinuousMove (1798)
/* tptz:ContinuousMove */
class SOAP_CMAC _tptz__ContinuousMove
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	tt__PTZSpeed *Velocity;	/* required element of type tt:PTZSpeed */
	LONG64 *Timeout;	/* optional element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1798; } /* = unique type id SOAP_TYPE__tptz__ContinuousMove */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__ContinuousMove() { _tptz__ContinuousMove::soap_default(NULL); }
	virtual ~_tptz__ContinuousMove() { }
};
#endif

#ifndef SOAP_TYPE__tptz__ContinuousMoveResponse
#define SOAP_TYPE__tptz__ContinuousMoveResponse (1799)
/* tptz:ContinuousMoveResponse */
class SOAP_CMAC _tptz__ContinuousMoveResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1799; } /* = unique type id SOAP_TYPE__tptz__ContinuousMoveResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__ContinuousMoveResponse() { _tptz__ContinuousMoveResponse::soap_default(NULL); }
	virtual ~_tptz__ContinuousMoveResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__RelativeMove
#define SOAP_TYPE__tptz__RelativeMove (1800)
/* tptz:RelativeMove */
class SOAP_CMAC _tptz__RelativeMove
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	tt__PTZVector *Translation;	/* required element of type tt:PTZVector */
	tt__PTZSpeed *Speed;	/* optional element of type tt:PTZSpeed */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1800; } /* = unique type id SOAP_TYPE__tptz__RelativeMove */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__RelativeMove() { _tptz__RelativeMove::soap_default(NULL); }
	virtual ~_tptz__RelativeMove() { }
};
#endif

#ifndef SOAP_TYPE__tptz__RelativeMoveResponse
#define SOAP_TYPE__tptz__RelativeMoveResponse (1801)
/* tptz:RelativeMoveResponse */
class SOAP_CMAC _tptz__RelativeMoveResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1801; } /* = unique type id SOAP_TYPE__tptz__RelativeMoveResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__RelativeMoveResponse() { _tptz__RelativeMoveResponse::soap_default(NULL); }
	virtual ~_tptz__RelativeMoveResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__AbsoluteMove
#define SOAP_TYPE__tptz__AbsoluteMove (1802)
/* tptz:AbsoluteMove */
class SOAP_CMAC _tptz__AbsoluteMove
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	tt__PTZVector *Position;	/* required element of type tt:PTZVector */
	tt__PTZSpeed *Speed;	/* optional element of type tt:PTZSpeed */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1802; } /* = unique type id SOAP_TYPE__tptz__AbsoluteMove */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__AbsoluteMove() { _tptz__AbsoluteMove::soap_default(NULL); }
	virtual ~_tptz__AbsoluteMove() { }
};
#endif

#ifndef SOAP_TYPE__tptz__AbsoluteMoveResponse
#define SOAP_TYPE__tptz__AbsoluteMoveResponse (1803)
/* tptz:AbsoluteMoveResponse */
class SOAP_CMAC _tptz__AbsoluteMoveResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1803; } /* = unique type id SOAP_TYPE__tptz__AbsoluteMoveResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__AbsoluteMoveResponse() { _tptz__AbsoluteMoveResponse::soap_default(NULL); }
	virtual ~_tptz__AbsoluteMoveResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GeoMove
#define SOAP_TYPE__tptz__GeoMove (1804)
/* tptz:GeoMove */
class SOAP_CMAC _tptz__GeoMove
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	tt__GeoLocation *Target;	/* required element of type tt:GeoLocation */
	tt__PTZSpeed *Speed;	/* optional element of type tt:PTZSpeed */
	float *AreaHeight;	/* optional element of type xsd:float */
	float *AreaWidth;	/* optional element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1804; } /* = unique type id SOAP_TYPE__tptz__GeoMove */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GeoMove() { _tptz__GeoMove::soap_default(NULL); }
	virtual ~_tptz__GeoMove() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GeoMoveResponse
#define SOAP_TYPE__tptz__GeoMoveResponse (1805)
/* tptz:GeoMoveResponse */
class SOAP_CMAC _tptz__GeoMoveResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1805; } /* = unique type id SOAP_TYPE__tptz__GeoMoveResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GeoMoveResponse() { _tptz__GeoMoveResponse::soap_default(NULL); }
	virtual ~_tptz__GeoMoveResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__Stop
#define SOAP_TYPE__tptz__Stop (1806)
/* tptz:Stop */
class SOAP_CMAC _tptz__Stop
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	bool *PanTilt;	/* optional element of type xsd:boolean */
	bool *Zoom;	/* optional element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1806; } /* = unique type id SOAP_TYPE__tptz__Stop */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__Stop() { _tptz__Stop::soap_default(NULL); }
	virtual ~_tptz__Stop() { }
};
#endif

#ifndef SOAP_TYPE__tptz__StopResponse
#define SOAP_TYPE__tptz__StopResponse (1807)
/* tptz:StopResponse */
class SOAP_CMAC _tptz__StopResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1807; } /* = unique type id SOAP_TYPE__tptz__StopResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__StopResponse() { _tptz__StopResponse::soap_default(NULL); }
	virtual ~_tptz__StopResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTours
#define SOAP_TYPE__tptz__GetPresetTours (1808)
/* tptz:GetPresetTours */
class SOAP_CMAC _tptz__GetPresetTours
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1808; } /* = unique type id SOAP_TYPE__tptz__GetPresetTours */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetPresetTours() { _tptz__GetPresetTours::soap_default(NULL); }
	virtual ~_tptz__GetPresetTours() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetPresetToursResponse
#define SOAP_TYPE__tptz__GetPresetToursResponse (1809)
/* tptz:GetPresetToursResponse */
class SOAP_CMAC _tptz__GetPresetToursResponse
{
public:
	std::vector<tt__PresetTour * >PresetTour;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:PresetTour */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1809; } /* = unique type id SOAP_TYPE__tptz__GetPresetToursResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetPresetToursResponse() { _tptz__GetPresetToursResponse::soap_default(NULL); }
	virtual ~_tptz__GetPresetToursResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTour
#define SOAP_TYPE__tptz__GetPresetTour (1810)
/* tptz:GetPresetTour */
class SOAP_CMAC _tptz__GetPresetTour
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string PresetTourToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1810; } /* = unique type id SOAP_TYPE__tptz__GetPresetTour */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetPresetTour() { _tptz__GetPresetTour::soap_default(NULL); }
	virtual ~_tptz__GetPresetTour() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTourResponse
#define SOAP_TYPE__tptz__GetPresetTourResponse (1811)
/* tptz:GetPresetTourResponse */
class SOAP_CMAC _tptz__GetPresetTourResponse
{
public:
	tt__PresetTour *PresetTour;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:PresetTour */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1811; } /* = unique type id SOAP_TYPE__tptz__GetPresetTourResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetPresetTourResponse() { _tptz__GetPresetTourResponse::soap_default(NULL); }
	virtual ~_tptz__GetPresetTourResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTourOptions
#define SOAP_TYPE__tptz__GetPresetTourOptions (1812)
/* tptz:GetPresetTourOptions */
class SOAP_CMAC _tptz__GetPresetTourOptions
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string *PresetTourToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1812; } /* = unique type id SOAP_TYPE__tptz__GetPresetTourOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetPresetTourOptions() { _tptz__GetPresetTourOptions::soap_default(NULL); }
	virtual ~_tptz__GetPresetTourOptions() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTourOptionsResponse
#define SOAP_TYPE__tptz__GetPresetTourOptionsResponse (1813)
/* tptz:GetPresetTourOptionsResponse */
class SOAP_CMAC _tptz__GetPresetTourOptionsResponse
{
public:
	tt__PTZPresetTourOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:PTZPresetTourOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1813; } /* = unique type id SOAP_TYPE__tptz__GetPresetTourOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetPresetTourOptionsResponse() { _tptz__GetPresetTourOptionsResponse::soap_default(NULL); }
	virtual ~_tptz__GetPresetTourOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__CreatePresetTour
#define SOAP_TYPE__tptz__CreatePresetTour (1814)
/* tptz:CreatePresetTour */
class SOAP_CMAC _tptz__CreatePresetTour
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1814; } /* = unique type id SOAP_TYPE__tptz__CreatePresetTour */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__CreatePresetTour() { _tptz__CreatePresetTour::soap_default(NULL); }
	virtual ~_tptz__CreatePresetTour() { }
};
#endif

#ifndef SOAP_TYPE__tptz__CreatePresetTourResponse
#define SOAP_TYPE__tptz__CreatePresetTourResponse (1815)
/* tptz:CreatePresetTourResponse */
class SOAP_CMAC _tptz__CreatePresetTourResponse
{
public:
	std::string PresetTourToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1815; } /* = unique type id SOAP_TYPE__tptz__CreatePresetTourResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__CreatePresetTourResponse() { _tptz__CreatePresetTourResponse::soap_default(NULL); }
	virtual ~_tptz__CreatePresetTourResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__ModifyPresetTour
#define SOAP_TYPE__tptz__ModifyPresetTour (1816)
/* tptz:ModifyPresetTour */
class SOAP_CMAC _tptz__ModifyPresetTour
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	tt__PresetTour *PresetTour;	/* required element of type tt:PresetTour */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1816; } /* = unique type id SOAP_TYPE__tptz__ModifyPresetTour */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__ModifyPresetTour() { _tptz__ModifyPresetTour::soap_default(NULL); }
	virtual ~_tptz__ModifyPresetTour() { }
};
#endif

#ifndef SOAP_TYPE__tptz__ModifyPresetTourResponse
#define SOAP_TYPE__tptz__ModifyPresetTourResponse (1817)
/* tptz:ModifyPresetTourResponse */
class SOAP_CMAC _tptz__ModifyPresetTourResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1817; } /* = unique type id SOAP_TYPE__tptz__ModifyPresetTourResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__ModifyPresetTourResponse() { _tptz__ModifyPresetTourResponse::soap_default(NULL); }
	virtual ~_tptz__ModifyPresetTourResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__OperatePresetTour
#define SOAP_TYPE__tptz__OperatePresetTour (1818)
/* tptz:OperatePresetTour */
class SOAP_CMAC _tptz__OperatePresetTour
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string PresetTourToken;	/* required element of type tt:ReferenceToken */
	enum tt__PTZPresetTourOperation Operation;	/* required element of type tt:PTZPresetTourOperation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1818; } /* = unique type id SOAP_TYPE__tptz__OperatePresetTour */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__OperatePresetTour() { _tptz__OperatePresetTour::soap_default(NULL); }
	virtual ~_tptz__OperatePresetTour() { }
};
#endif

#ifndef SOAP_TYPE__tptz__OperatePresetTourResponse
#define SOAP_TYPE__tptz__OperatePresetTourResponse (1819)
/* tptz:OperatePresetTourResponse */
class SOAP_CMAC _tptz__OperatePresetTourResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1819; } /* = unique type id SOAP_TYPE__tptz__OperatePresetTourResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__OperatePresetTourResponse() { _tptz__OperatePresetTourResponse::soap_default(NULL); }
	virtual ~_tptz__OperatePresetTourResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__RemovePresetTour
#define SOAP_TYPE__tptz__RemovePresetTour (1820)
/* tptz:RemovePresetTour */
class SOAP_CMAC _tptz__RemovePresetTour
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string PresetTourToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1820; } /* = unique type id SOAP_TYPE__tptz__RemovePresetTour */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__RemovePresetTour() { _tptz__RemovePresetTour::soap_default(NULL); }
	virtual ~_tptz__RemovePresetTour() { }
};
#endif

#ifndef SOAP_TYPE__tptz__RemovePresetTourResponse
#define SOAP_TYPE__tptz__RemovePresetTourResponse (1821)
/* tptz:RemovePresetTourResponse */
class SOAP_CMAC _tptz__RemovePresetTourResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1821; } /* = unique type id SOAP_TYPE__tptz__RemovePresetTourResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__RemovePresetTourResponse() { _tptz__RemovePresetTourResponse::soap_default(NULL); }
	virtual ~_tptz__RemovePresetTourResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetCompatibleConfigurations
#define SOAP_TYPE__tptz__GetCompatibleConfigurations (1822)
/* tptz:GetCompatibleConfigurations */
class SOAP_CMAC _tptz__GetCompatibleConfigurations
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1822; } /* = unique type id SOAP_TYPE__tptz__GetCompatibleConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetCompatibleConfigurations() { _tptz__GetCompatibleConfigurations::soap_default(NULL); }
	virtual ~_tptz__GetCompatibleConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse
#define SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse (1823)
/* tptz:GetCompatibleConfigurationsResponse */
class SOAP_CMAC _tptz__GetCompatibleConfigurationsResponse
{
public:
	std::vector<tt__PTZConfiguration * >PTZConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:PTZConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1823; } /* = unique type id SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetCompatibleConfigurationsResponse() { _tptz__GetCompatibleConfigurationsResponse::soap_default(NULL); }
	virtual ~_tptz__GetCompatibleConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE_trv__Capabilities
#define SOAP_TYPE_trv__Capabilities (1824)
/* trv:Capabilities */
class SOAP_CMAC trv__Capabilities : public xsd__anyType
{
public:
	std::vector<char * >__any;
	bool *RTP_USCOREMulticast;	/* optional attribute */
	bool *RTP_USCORETCP;	/* optional attribute */
	bool *RTP_USCORERTSP_USCORETCP;	/* optional attribute */
	int SupportedReceivers;	/* required attribute */
	int *MaximumRTSPURILength;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1824; } /* = unique type id SOAP_TYPE_trv__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         trv__Capabilities() { trv__Capabilities::soap_default(NULL); }
	virtual ~trv__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE__trv__GetServiceCapabilities
#define SOAP_TYPE__trv__GetServiceCapabilities (1825)
/* trv:GetServiceCapabilities */
class SOAP_CMAC _trv__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1825; } /* = unique type id SOAP_TYPE__trv__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__GetServiceCapabilities() { _trv__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_trv__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__trv__GetServiceCapabilitiesResponse
#define SOAP_TYPE__trv__GetServiceCapabilitiesResponse (1826)
/* trv:GetServiceCapabilitiesResponse */
class SOAP_CMAC _trv__GetServiceCapabilitiesResponse
{
public:
	trv__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type trv:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1826; } /* = unique type id SOAP_TYPE__trv__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__GetServiceCapabilitiesResponse() { _trv__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_trv__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__trv__GetReceivers
#define SOAP_TYPE__trv__GetReceivers (1827)
/* trv:GetReceivers */
class SOAP_CMAC _trv__GetReceivers
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1827; } /* = unique type id SOAP_TYPE__trv__GetReceivers */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__GetReceivers() { _trv__GetReceivers::soap_default(NULL); }
	virtual ~_trv__GetReceivers() { }
};
#endif

#ifndef SOAP_TYPE__trv__GetReceiversResponse
#define SOAP_TYPE__trv__GetReceiversResponse (1828)
/* trv:GetReceiversResponse */
class SOAP_CMAC _trv__GetReceiversResponse
{
public:
	std::vector<tt__Receiver * >Receivers;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:Receiver */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1828; } /* = unique type id SOAP_TYPE__trv__GetReceiversResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__GetReceiversResponse() { _trv__GetReceiversResponse::soap_default(NULL); }
	virtual ~_trv__GetReceiversResponse() { }
};
#endif

#ifndef SOAP_TYPE__trv__GetReceiver
#define SOAP_TYPE__trv__GetReceiver (1829)
/* trv:GetReceiver */
class SOAP_CMAC _trv__GetReceiver
{
public:
	std::string ReceiverToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1829; } /* = unique type id SOAP_TYPE__trv__GetReceiver */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__GetReceiver() { _trv__GetReceiver::soap_default(NULL); }
	virtual ~_trv__GetReceiver() { }
};
#endif

#ifndef SOAP_TYPE__trv__GetReceiverResponse
#define SOAP_TYPE__trv__GetReceiverResponse (1830)
/* trv:GetReceiverResponse */
class SOAP_CMAC _trv__GetReceiverResponse
{
public:
	tt__Receiver *Receiver;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Receiver */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1830; } /* = unique type id SOAP_TYPE__trv__GetReceiverResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__GetReceiverResponse() { _trv__GetReceiverResponse::soap_default(NULL); }
	virtual ~_trv__GetReceiverResponse() { }
};
#endif

#ifndef SOAP_TYPE__trv__CreateReceiver
#define SOAP_TYPE__trv__CreateReceiver (1831)
/* trv:CreateReceiver */
class SOAP_CMAC _trv__CreateReceiver
{
public:
	tt__ReceiverConfiguration *Configuration;	/* required element of type tt:ReceiverConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1831; } /* = unique type id SOAP_TYPE__trv__CreateReceiver */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__CreateReceiver() { _trv__CreateReceiver::soap_default(NULL); }
	virtual ~_trv__CreateReceiver() { }
};
#endif

#ifndef SOAP_TYPE__trv__CreateReceiverResponse
#define SOAP_TYPE__trv__CreateReceiverResponse (1832)
/* trv:CreateReceiverResponse */
class SOAP_CMAC _trv__CreateReceiverResponse
{
public:
	tt__Receiver *Receiver;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Receiver */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1832; } /* = unique type id SOAP_TYPE__trv__CreateReceiverResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__CreateReceiverResponse() { _trv__CreateReceiverResponse::soap_default(NULL); }
	virtual ~_trv__CreateReceiverResponse() { }
};
#endif

#ifndef SOAP_TYPE__trv__DeleteReceiver
#define SOAP_TYPE__trv__DeleteReceiver (1833)
/* trv:DeleteReceiver */
class SOAP_CMAC _trv__DeleteReceiver
{
public:
	std::string ReceiverToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1833; } /* = unique type id SOAP_TYPE__trv__DeleteReceiver */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__DeleteReceiver() { _trv__DeleteReceiver::soap_default(NULL); }
	virtual ~_trv__DeleteReceiver() { }
};
#endif

#ifndef SOAP_TYPE__trv__DeleteReceiverResponse
#define SOAP_TYPE__trv__DeleteReceiverResponse (1834)
/* trv:DeleteReceiverResponse */
class SOAP_CMAC _trv__DeleteReceiverResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1834; } /* = unique type id SOAP_TYPE__trv__DeleteReceiverResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__DeleteReceiverResponse() { _trv__DeleteReceiverResponse::soap_default(NULL); }
	virtual ~_trv__DeleteReceiverResponse() { }
};
#endif

#ifndef SOAP_TYPE__trv__ConfigureReceiver
#define SOAP_TYPE__trv__ConfigureReceiver (1835)
/* trv:ConfigureReceiver */
class SOAP_CMAC _trv__ConfigureReceiver
{
public:
	std::string ReceiverToken;	/* required element of type tt:ReferenceToken */
	tt__ReceiverConfiguration *Configuration;	/* required element of type tt:ReceiverConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1835; } /* = unique type id SOAP_TYPE__trv__ConfigureReceiver */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__ConfigureReceiver() { _trv__ConfigureReceiver::soap_default(NULL); }
	virtual ~_trv__ConfigureReceiver() { }
};
#endif

#ifndef SOAP_TYPE__trv__ConfigureReceiverResponse
#define SOAP_TYPE__trv__ConfigureReceiverResponse (1836)
/* trv:ConfigureReceiverResponse */
class SOAP_CMAC _trv__ConfigureReceiverResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1836; } /* = unique type id SOAP_TYPE__trv__ConfigureReceiverResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__ConfigureReceiverResponse() { _trv__ConfigureReceiverResponse::soap_default(NULL); }
	virtual ~_trv__ConfigureReceiverResponse() { }
};
#endif

#ifndef SOAP_TYPE__trv__SetReceiverMode
#define SOAP_TYPE__trv__SetReceiverMode (1837)
/* trv:SetReceiverMode */
class SOAP_CMAC _trv__SetReceiverMode
{
public:
	std::string ReceiverToken;	/* required element of type tt:ReferenceToken */
	enum tt__ReceiverMode Mode;	/* required element of type tt:ReceiverMode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1837; } /* = unique type id SOAP_TYPE__trv__SetReceiverMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__SetReceiverMode() { _trv__SetReceiverMode::soap_default(NULL); }
	virtual ~_trv__SetReceiverMode() { }
};
#endif

#ifndef SOAP_TYPE__trv__SetReceiverModeResponse
#define SOAP_TYPE__trv__SetReceiverModeResponse (1838)
/* trv:SetReceiverModeResponse */
class SOAP_CMAC _trv__SetReceiverModeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1838; } /* = unique type id SOAP_TYPE__trv__SetReceiverModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__SetReceiverModeResponse() { _trv__SetReceiverModeResponse::soap_default(NULL); }
	virtual ~_trv__SetReceiverModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__trv__GetReceiverState
#define SOAP_TYPE__trv__GetReceiverState (1839)
/* trv:GetReceiverState */
class SOAP_CMAC _trv__GetReceiverState
{
public:
	std::string ReceiverToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1839; } /* = unique type id SOAP_TYPE__trv__GetReceiverState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__GetReceiverState() { _trv__GetReceiverState::soap_default(NULL); }
	virtual ~_trv__GetReceiverState() { }
};
#endif

#ifndef SOAP_TYPE__trv__GetReceiverStateResponse
#define SOAP_TYPE__trv__GetReceiverStateResponse (1840)
/* trv:GetReceiverStateResponse */
class SOAP_CMAC _trv__GetReceiverStateResponse
{
public:
	tt__ReceiverStateInformation *ReceiverState;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:ReceiverStateInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1840; } /* = unique type id SOAP_TYPE__trv__GetReceiverStateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__GetReceiverStateResponse() { _trv__GetReceiverStateResponse::soap_default(NULL); }
	virtual ~_trv__GetReceiverStateResponse() { }
};
#endif

#ifndef SOAP_TYPE_trc__Capabilities
#define SOAP_TYPE_trc__Capabilities (1841)
/* trc:Capabilities */
class SOAP_CMAC trc__Capabilities : public xsd__anyType
{
public:
	std::vector<char * >__any;
	bool *DynamicRecordings;	/* optional attribute */
	bool *DynamicTracks;	/* optional attribute */
	std::string *Encoding;	/* optional attribute */
	float *MaxRate;	/* optional attribute */
	float *MaxTotalRate;	/* optional attribute */
	float *MaxRecordings;	/* optional attribute */
	int *MaxRecordingJobs;	/* optional attribute */
	bool *Options;	/* optional attribute */
	bool *MetadataRecording;	/* optional attribute */
	std::string *SupportedExportFileFormats;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1841; } /* = unique type id SOAP_TYPE_trc__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         trc__Capabilities() { trc__Capabilities::soap_default(NULL); }
	virtual ~trc__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE_trc__RecordingOptions
#define SOAP_TYPE_trc__RecordingOptions (1842)
/* trc:RecordingOptions */
class SOAP_CMAC trc__RecordingOptions : public xsd__anyType
{
public:
	class trc__JobOptions *Job;	/* required element of type trc:JobOptions */
	class trc__TrackOptions *Track;	/* required element of type trc:TrackOptions */
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1842; } /* = unique type id SOAP_TYPE_trc__RecordingOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         trc__RecordingOptions() { trc__RecordingOptions::soap_default(NULL); }
	virtual ~trc__RecordingOptions() { }
};
#endif

#ifndef SOAP_TYPE_trc__JobOptions
#define SOAP_TYPE_trc__JobOptions (1843)
/* Primitive trc:JobOptions schema type: */
class SOAP_CMAC trc__JobOptions : public xsd__anyType
{
public:
	int *Spare;	/* optional attribute */
	std::string *CompatibleSources;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1843; } /* = unique type id SOAP_TYPE_trc__JobOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         trc__JobOptions() { trc__JobOptions::soap_default(NULL); }
	virtual ~trc__JobOptions() { }
};
#endif

#ifndef SOAP_TYPE_trc__TrackOptions
#define SOAP_TYPE_trc__TrackOptions (1844)
/* Primitive trc:TrackOptions schema type: */
class SOAP_CMAC trc__TrackOptions : public xsd__anyType
{
public:
	int *SpareTotal;	/* optional attribute */
	int *SpareVideo;	/* optional attribute */
	int *SpareAudio;	/* optional attribute */
	int *SpareMetadata;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1844; } /* = unique type id SOAP_TYPE_trc__TrackOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         trc__TrackOptions() { trc__TrackOptions::soap_default(NULL); }
	virtual ~trc__TrackOptions() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetServiceCapabilities
#define SOAP_TYPE__trc__GetServiceCapabilities (1845)
/* trc:GetServiceCapabilities */
class SOAP_CMAC _trc__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1845; } /* = unique type id SOAP_TYPE__trc__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetServiceCapabilities() { _trc__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_trc__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetServiceCapabilitiesResponse
#define SOAP_TYPE__trc__GetServiceCapabilitiesResponse (1846)
/* trc:GetServiceCapabilitiesResponse */
class SOAP_CMAC _trc__GetServiceCapabilitiesResponse
{
public:
	trc__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type trc:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1846; } /* = unique type id SOAP_TYPE__trc__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetServiceCapabilitiesResponse() { _trc__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_trc__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__CreateRecording
#define SOAP_TYPE__trc__CreateRecording (1847)
/* trc:CreateRecording */
class SOAP_CMAC _trc__CreateRecording
{
public:
	tt__RecordingConfiguration *RecordingConfiguration;	/* required element of type tt:RecordingConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1847; } /* = unique type id SOAP_TYPE__trc__CreateRecording */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__CreateRecording() { _trc__CreateRecording::soap_default(NULL); }
	virtual ~_trc__CreateRecording() { }
};
#endif

#ifndef SOAP_TYPE__trc__CreateRecordingResponse
#define SOAP_TYPE__trc__CreateRecordingResponse (1848)
/* trc:CreateRecordingResponse */
class SOAP_CMAC _trc__CreateRecordingResponse
{
public:
	std::string RecordingToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:RecordingReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1848; } /* = unique type id SOAP_TYPE__trc__CreateRecordingResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__CreateRecordingResponse() { _trc__CreateRecordingResponse::soap_default(NULL); }
	virtual ~_trc__CreateRecordingResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__DeleteRecording
#define SOAP_TYPE__trc__DeleteRecording (1849)
/* trc:DeleteRecording */
class SOAP_CMAC _trc__DeleteRecording
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1849; } /* = unique type id SOAP_TYPE__trc__DeleteRecording */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__DeleteRecording() { _trc__DeleteRecording::soap_default(NULL); }
	virtual ~_trc__DeleteRecording() { }
};
#endif

#ifndef SOAP_TYPE__trc__DeleteRecordingResponse
#define SOAP_TYPE__trc__DeleteRecordingResponse (1850)
/* trc:DeleteRecordingResponse */
class SOAP_CMAC _trc__DeleteRecordingResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1850; } /* = unique type id SOAP_TYPE__trc__DeleteRecordingResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__DeleteRecordingResponse() { _trc__DeleteRecordingResponse::soap_default(NULL); }
	virtual ~_trc__DeleteRecordingResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetRecordings
#define SOAP_TYPE__trc__GetRecordings (1851)
/* trc:GetRecordings */
class SOAP_CMAC _trc__GetRecordings
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1851; } /* = unique type id SOAP_TYPE__trc__GetRecordings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetRecordings() { _trc__GetRecordings::soap_default(NULL); }
	virtual ~_trc__GetRecordings() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetRecordingsResponse
#define SOAP_TYPE__trc__GetRecordingsResponse (1852)
/* trc:GetRecordingsResponse */
class SOAP_CMAC _trc__GetRecordingsResponse
{
public:
	std::vector<tt__GetRecordingsResponseItem * >RecordingItem;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:GetRecordingsResponseItem */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1852; } /* = unique type id SOAP_TYPE__trc__GetRecordingsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetRecordingsResponse() { _trc__GetRecordingsResponse::soap_default(NULL); }
	virtual ~_trc__GetRecordingsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__SetRecordingConfiguration
#define SOAP_TYPE__trc__SetRecordingConfiguration (1853)
/* trc:SetRecordingConfiguration */
class SOAP_CMAC _trc__SetRecordingConfiguration
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	tt__RecordingConfiguration *RecordingConfiguration;	/* required element of type tt:RecordingConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1853; } /* = unique type id SOAP_TYPE__trc__SetRecordingConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__SetRecordingConfiguration() { _trc__SetRecordingConfiguration::soap_default(NULL); }
	virtual ~_trc__SetRecordingConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trc__SetRecordingConfigurationResponse
#define SOAP_TYPE__trc__SetRecordingConfigurationResponse (1854)
/* trc:SetRecordingConfigurationResponse */
class SOAP_CMAC _trc__SetRecordingConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1854; } /* = unique type id SOAP_TYPE__trc__SetRecordingConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__SetRecordingConfigurationResponse() { _trc__SetRecordingConfigurationResponse::soap_default(NULL); }
	virtual ~_trc__SetRecordingConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetRecordingConfiguration
#define SOAP_TYPE__trc__GetRecordingConfiguration (1855)
/* trc:GetRecordingConfiguration */
class SOAP_CMAC _trc__GetRecordingConfiguration
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1855; } /* = unique type id SOAP_TYPE__trc__GetRecordingConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetRecordingConfiguration() { _trc__GetRecordingConfiguration::soap_default(NULL); }
	virtual ~_trc__GetRecordingConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetRecordingConfigurationResponse
#define SOAP_TYPE__trc__GetRecordingConfigurationResponse (1856)
/* trc:GetRecordingConfigurationResponse */
class SOAP_CMAC _trc__GetRecordingConfigurationResponse
{
public:
	tt__RecordingConfiguration *RecordingConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:RecordingConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1856; } /* = unique type id SOAP_TYPE__trc__GetRecordingConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetRecordingConfigurationResponse() { _trc__GetRecordingConfigurationResponse::soap_default(NULL); }
	virtual ~_trc__GetRecordingConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__CreateTrack
#define SOAP_TYPE__trc__CreateTrack (1857)
/* trc:CreateTrack */
class SOAP_CMAC _trc__CreateTrack
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	tt__TrackConfiguration *TrackConfiguration;	/* required element of type tt:TrackConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1857; } /* = unique type id SOAP_TYPE__trc__CreateTrack */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__CreateTrack() { _trc__CreateTrack::soap_default(NULL); }
	virtual ~_trc__CreateTrack() { }
};
#endif

#ifndef SOAP_TYPE__trc__CreateTrackResponse
#define SOAP_TYPE__trc__CreateTrackResponse (1858)
/* trc:CreateTrackResponse */
class SOAP_CMAC _trc__CreateTrackResponse
{
public:
	std::string TrackToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:TrackReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1858; } /* = unique type id SOAP_TYPE__trc__CreateTrackResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__CreateTrackResponse() { _trc__CreateTrackResponse::soap_default(NULL); }
	virtual ~_trc__CreateTrackResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__DeleteTrack
#define SOAP_TYPE__trc__DeleteTrack (1859)
/* trc:DeleteTrack */
class SOAP_CMAC _trc__DeleteTrack
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	std::string TrackToken;	/* required element of type tt:TrackReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1859; } /* = unique type id SOAP_TYPE__trc__DeleteTrack */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__DeleteTrack() { _trc__DeleteTrack::soap_default(NULL); }
	virtual ~_trc__DeleteTrack() { }
};
#endif

#ifndef SOAP_TYPE__trc__DeleteTrackResponse
#define SOAP_TYPE__trc__DeleteTrackResponse (1860)
/* trc:DeleteTrackResponse */
class SOAP_CMAC _trc__DeleteTrackResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1860; } /* = unique type id SOAP_TYPE__trc__DeleteTrackResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__DeleteTrackResponse() { _trc__DeleteTrackResponse::soap_default(NULL); }
	virtual ~_trc__DeleteTrackResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetTrackConfiguration
#define SOAP_TYPE__trc__GetTrackConfiguration (1861)
/* trc:GetTrackConfiguration */
class SOAP_CMAC _trc__GetTrackConfiguration
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	std::string TrackToken;	/* required element of type tt:TrackReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1861; } /* = unique type id SOAP_TYPE__trc__GetTrackConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetTrackConfiguration() { _trc__GetTrackConfiguration::soap_default(NULL); }
	virtual ~_trc__GetTrackConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetTrackConfigurationResponse
#define SOAP_TYPE__trc__GetTrackConfigurationResponse (1862)
/* trc:GetTrackConfigurationResponse */
class SOAP_CMAC _trc__GetTrackConfigurationResponse
{
public:
	tt__TrackConfiguration *TrackConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:TrackConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1862; } /* = unique type id SOAP_TYPE__trc__GetTrackConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetTrackConfigurationResponse() { _trc__GetTrackConfigurationResponse::soap_default(NULL); }
	virtual ~_trc__GetTrackConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__SetTrackConfiguration
#define SOAP_TYPE__trc__SetTrackConfiguration (1863)
/* trc:SetTrackConfiguration */
class SOAP_CMAC _trc__SetTrackConfiguration
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	std::string TrackToken;	/* required element of type tt:TrackReference */
	tt__TrackConfiguration *TrackConfiguration;	/* required element of type tt:TrackConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1863; } /* = unique type id SOAP_TYPE__trc__SetTrackConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__SetTrackConfiguration() { _trc__SetTrackConfiguration::soap_default(NULL); }
	virtual ~_trc__SetTrackConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trc__SetTrackConfigurationResponse
#define SOAP_TYPE__trc__SetTrackConfigurationResponse (1864)
/* trc:SetTrackConfigurationResponse */
class SOAP_CMAC _trc__SetTrackConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1864; } /* = unique type id SOAP_TYPE__trc__SetTrackConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__SetTrackConfigurationResponse() { _trc__SetTrackConfigurationResponse::soap_default(NULL); }
	virtual ~_trc__SetTrackConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__CreateRecordingJob
#define SOAP_TYPE__trc__CreateRecordingJob (1865)
/* trc:CreateRecordingJob */
class SOAP_CMAC _trc__CreateRecordingJob
{
public:
	tt__RecordingJobConfiguration *JobConfiguration;	/* required element of type tt:RecordingJobConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1865; } /* = unique type id SOAP_TYPE__trc__CreateRecordingJob */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__CreateRecordingJob() { _trc__CreateRecordingJob::soap_default(NULL); }
	virtual ~_trc__CreateRecordingJob() { }
};
#endif

#ifndef SOAP_TYPE__trc__CreateRecordingJobResponse
#define SOAP_TYPE__trc__CreateRecordingJobResponse (1866)
/* trc:CreateRecordingJobResponse */
class SOAP_CMAC _trc__CreateRecordingJobResponse
{
public:
	std::string JobToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:RecordingJobReference */
	tt__RecordingJobConfiguration *JobConfiguration;	/* required element of type tt:RecordingJobConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1866; } /* = unique type id SOAP_TYPE__trc__CreateRecordingJobResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__CreateRecordingJobResponse() { _trc__CreateRecordingJobResponse::soap_default(NULL); }
	virtual ~_trc__CreateRecordingJobResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__DeleteRecordingJob
#define SOAP_TYPE__trc__DeleteRecordingJob (1867)
/* trc:DeleteRecordingJob */
class SOAP_CMAC _trc__DeleteRecordingJob
{
public:
	std::string JobToken;	/* required element of type tt:RecordingJobReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1867; } /* = unique type id SOAP_TYPE__trc__DeleteRecordingJob */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__DeleteRecordingJob() { _trc__DeleteRecordingJob::soap_default(NULL); }
	virtual ~_trc__DeleteRecordingJob() { }
};
#endif

#ifndef SOAP_TYPE__trc__DeleteRecordingJobResponse
#define SOAP_TYPE__trc__DeleteRecordingJobResponse (1868)
/* trc:DeleteRecordingJobResponse */
class SOAP_CMAC _trc__DeleteRecordingJobResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1868; } /* = unique type id SOAP_TYPE__trc__DeleteRecordingJobResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__DeleteRecordingJobResponse() { _trc__DeleteRecordingJobResponse::soap_default(NULL); }
	virtual ~_trc__DeleteRecordingJobResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetRecordingJobs
#define SOAP_TYPE__trc__GetRecordingJobs (1869)
/* trc:GetRecordingJobs */
class SOAP_CMAC _trc__GetRecordingJobs
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1869; } /* = unique type id SOAP_TYPE__trc__GetRecordingJobs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetRecordingJobs() { _trc__GetRecordingJobs::soap_default(NULL); }
	virtual ~_trc__GetRecordingJobs() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetRecordingJobsResponse
#define SOAP_TYPE__trc__GetRecordingJobsResponse (1870)
/* trc:GetRecordingJobsResponse */
class SOAP_CMAC _trc__GetRecordingJobsResponse
{
public:
	std::vector<tt__GetRecordingJobsResponseItem * >JobItem;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:GetRecordingJobsResponseItem */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1870; } /* = unique type id SOAP_TYPE__trc__GetRecordingJobsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetRecordingJobsResponse() { _trc__GetRecordingJobsResponse::soap_default(NULL); }
	virtual ~_trc__GetRecordingJobsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__SetRecordingJobConfiguration
#define SOAP_TYPE__trc__SetRecordingJobConfiguration (1871)
/* trc:SetRecordingJobConfiguration */
class SOAP_CMAC _trc__SetRecordingJobConfiguration
{
public:
	std::string JobToken;	/* required element of type tt:RecordingJobReference */
	tt__RecordingJobConfiguration *JobConfiguration;	/* required element of type tt:RecordingJobConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1871; } /* = unique type id SOAP_TYPE__trc__SetRecordingJobConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__SetRecordingJobConfiguration() { _trc__SetRecordingJobConfiguration::soap_default(NULL); }
	virtual ~_trc__SetRecordingJobConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trc__SetRecordingJobConfigurationResponse
#define SOAP_TYPE__trc__SetRecordingJobConfigurationResponse (1872)
/* trc:SetRecordingJobConfigurationResponse */
class SOAP_CMAC _trc__SetRecordingJobConfigurationResponse
{
public:
	tt__RecordingJobConfiguration *JobConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:RecordingJobConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1872; } /* = unique type id SOAP_TYPE__trc__SetRecordingJobConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__SetRecordingJobConfigurationResponse() { _trc__SetRecordingJobConfigurationResponse::soap_default(NULL); }
	virtual ~_trc__SetRecordingJobConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetRecordingJobConfiguration
#define SOAP_TYPE__trc__GetRecordingJobConfiguration (1873)
/* trc:GetRecordingJobConfiguration */
class SOAP_CMAC _trc__GetRecordingJobConfiguration
{
public:
	std::string JobToken;	/* required element of type tt:RecordingJobReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1873; } /* = unique type id SOAP_TYPE__trc__GetRecordingJobConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetRecordingJobConfiguration() { _trc__GetRecordingJobConfiguration::soap_default(NULL); }
	virtual ~_trc__GetRecordingJobConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetRecordingJobConfigurationResponse
#define SOAP_TYPE__trc__GetRecordingJobConfigurationResponse (1874)
/* trc:GetRecordingJobConfigurationResponse */
class SOAP_CMAC _trc__GetRecordingJobConfigurationResponse
{
public:
	tt__RecordingJobConfiguration *JobConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:RecordingJobConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1874; } /* = unique type id SOAP_TYPE__trc__GetRecordingJobConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetRecordingJobConfigurationResponse() { _trc__GetRecordingJobConfigurationResponse::soap_default(NULL); }
	virtual ~_trc__GetRecordingJobConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__SetRecordingJobMode
#define SOAP_TYPE__trc__SetRecordingJobMode (1875)
/* trc:SetRecordingJobMode */
class SOAP_CMAC _trc__SetRecordingJobMode
{
public:
	std::string JobToken;	/* required element of type tt:RecordingJobReference */
	std::string Mode;	/* required element of type tt:RecordingJobMode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1875; } /* = unique type id SOAP_TYPE__trc__SetRecordingJobMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__SetRecordingJobMode() { _trc__SetRecordingJobMode::soap_default(NULL); }
	virtual ~_trc__SetRecordingJobMode() { }
};
#endif

#ifndef SOAP_TYPE__trc__SetRecordingJobModeResponse
#define SOAP_TYPE__trc__SetRecordingJobModeResponse (1876)
/* trc:SetRecordingJobModeResponse */
class SOAP_CMAC _trc__SetRecordingJobModeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1876; } /* = unique type id SOAP_TYPE__trc__SetRecordingJobModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__SetRecordingJobModeResponse() { _trc__SetRecordingJobModeResponse::soap_default(NULL); }
	virtual ~_trc__SetRecordingJobModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetRecordingJobState
#define SOAP_TYPE__trc__GetRecordingJobState (1877)
/* trc:GetRecordingJobState */
class SOAP_CMAC _trc__GetRecordingJobState
{
public:
	std::string JobToken;	/* required element of type tt:RecordingJobReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1877; } /* = unique type id SOAP_TYPE__trc__GetRecordingJobState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetRecordingJobState() { _trc__GetRecordingJobState::soap_default(NULL); }
	virtual ~_trc__GetRecordingJobState() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetRecordingJobStateResponse
#define SOAP_TYPE__trc__GetRecordingJobStateResponse (1878)
/* trc:GetRecordingJobStateResponse */
class SOAP_CMAC _trc__GetRecordingJobStateResponse
{
public:
	tt__RecordingJobStateInformation *State;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:RecordingJobStateInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1878; } /* = unique type id SOAP_TYPE__trc__GetRecordingJobStateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetRecordingJobStateResponse() { _trc__GetRecordingJobStateResponse::soap_default(NULL); }
	virtual ~_trc__GetRecordingJobStateResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetRecordingOptions
#define SOAP_TYPE__trc__GetRecordingOptions (1879)
/* trc:GetRecordingOptions */
class SOAP_CMAC _trc__GetRecordingOptions
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1879; } /* = unique type id SOAP_TYPE__trc__GetRecordingOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetRecordingOptions() { _trc__GetRecordingOptions::soap_default(NULL); }
	virtual ~_trc__GetRecordingOptions() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetRecordingOptionsResponse
#define SOAP_TYPE__trc__GetRecordingOptionsResponse (1880)
/* trc:GetRecordingOptionsResponse */
class SOAP_CMAC _trc__GetRecordingOptionsResponse
{
public:
	trc__RecordingOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type trc:RecordingOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1880; } /* = unique type id SOAP_TYPE__trc__GetRecordingOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetRecordingOptionsResponse() { _trc__GetRecordingOptionsResponse::soap_default(NULL); }
	virtual ~_trc__GetRecordingOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__ExportRecordedData
#define SOAP_TYPE__trc__ExportRecordedData (1881)
/* trc:ExportRecordedData */
class SOAP_CMAC _trc__ExportRecordedData
{
public:
	time_t *StartPoint;	/* optional element of type xsd:dateTime */
	time_t *EndPoint;	/* optional element of type xsd:dateTime */
	tt__SearchScope *SearchScope;	/* required element of type tt:SearchScope */
	std::string FileFormat;	/* required element of type xsd:string */
	tt__StorageReferencePath *StorageDestination;	/* required element of type tt:StorageReferencePath */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1881; } /* = unique type id SOAP_TYPE__trc__ExportRecordedData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__ExportRecordedData() { _trc__ExportRecordedData::soap_default(NULL); }
	virtual ~_trc__ExportRecordedData() { }
};
#endif

#ifndef SOAP_TYPE__trc__ExportRecordedDataResponse_Extension
#define SOAP_TYPE__trc__ExportRecordedDataResponse_Extension (3161)
/* trc:ExportRecordedDataResponse-Extension */
class SOAP_CMAC _trc__ExportRecordedDataResponse_Extension
{
public:
	char *__any;
public:
	virtual int soap_type() const { return 3161; } /* = unique type id SOAP_TYPE__trc__ExportRecordedDataResponse_Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__ExportRecordedDataResponse_Extension() { _trc__ExportRecordedDataResponse_Extension::soap_default(NULL); }
	virtual ~_trc__ExportRecordedDataResponse_Extension() { }
};
#endif

#ifndef SOAP_TYPE__trc__ExportRecordedDataResponse
#define SOAP_TYPE__trc__ExportRecordedDataResponse (1882)
/* trc:ExportRecordedDataResponse */
class SOAP_CMAC _trc__ExportRecordedDataResponse
{
public:
	std::string OperationToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:ReferenceToken */
	std::vector<std::string >FileNames;	/* optional element of type xsd:string */
	_trc__ExportRecordedDataResponse_Extension *Extension;	/* optional element of type trc:ExportRecordedDataResponse-Extension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1882; } /* = unique type id SOAP_TYPE__trc__ExportRecordedDataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__ExportRecordedDataResponse() { _trc__ExportRecordedDataResponse::soap_default(NULL); }
	virtual ~_trc__ExportRecordedDataResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__StopExportRecordedData
#define SOAP_TYPE__trc__StopExportRecordedData (1883)
/* trc:StopExportRecordedData */
class SOAP_CMAC _trc__StopExportRecordedData
{
public:
	std::string OperationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1883; } /* = unique type id SOAP_TYPE__trc__StopExportRecordedData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__StopExportRecordedData() { _trc__StopExportRecordedData::soap_default(NULL); }
	virtual ~_trc__StopExportRecordedData() { }
};
#endif

#ifndef SOAP_TYPE__trc__StopExportRecordedDataResponse
#define SOAP_TYPE__trc__StopExportRecordedDataResponse (1884)
/* trc:StopExportRecordedDataResponse */
class SOAP_CMAC _trc__StopExportRecordedDataResponse
{
public:
	float Progress;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:float */
	tt__ArrayOfFileProgress *FileProgressStatus;	/* required element of type tt:ArrayOfFileProgress */
	char *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1884; } /* = unique type id SOAP_TYPE__trc__StopExportRecordedDataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__StopExportRecordedDataResponse() { _trc__StopExportRecordedDataResponse::soap_default(NULL); }
	virtual ~_trc__StopExportRecordedDataResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetExportRecordedDataState
#define SOAP_TYPE__trc__GetExportRecordedDataState (1885)
/* trc:GetExportRecordedDataState */
class SOAP_CMAC _trc__GetExportRecordedDataState
{
public:
	std::string OperationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1885; } /* = unique type id SOAP_TYPE__trc__GetExportRecordedDataState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetExportRecordedDataState() { _trc__GetExportRecordedDataState::soap_default(NULL); }
	virtual ~_trc__GetExportRecordedDataState() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetExportRecordedDataStateResponse
#define SOAP_TYPE__trc__GetExportRecordedDataStateResponse (1886)
/* trc:GetExportRecordedDataStateResponse */
class SOAP_CMAC _trc__GetExportRecordedDataStateResponse
{
public:
	float Progress;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:float */
	tt__ArrayOfFileProgress *FileProgressStatus;	/* required element of type tt:ArrayOfFileProgress */
	char *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1886; } /* = unique type id SOAP_TYPE__trc__GetExportRecordedDataStateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetExportRecordedDataStateResponse() { _trc__GetExportRecordedDataStateResponse::soap_default(NULL); }
	virtual ~_trc__GetExportRecordedDataStateResponse() { }
};
#endif

#ifndef SOAP_TYPE_trp__Capabilities
#define SOAP_TYPE_trp__Capabilities (1887)
/* trp:Capabilities */
class SOAP_CMAC trp__Capabilities : public xsd__anyType
{
public:
	std::vector<char * >__any;
	bool *ReversePlayback;	/* optional attribute */
	std::string *SessionTimeoutRange;	/* optional attribute */
	bool *RTP_USCORERTSP_USCORETCP;	/* optional attribute */
	std::string *RTSPWebSocketUri;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1887; } /* = unique type id SOAP_TYPE_trp__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         trp__Capabilities() { trp__Capabilities::soap_default(NULL); }
	virtual ~trp__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE__trp__GetServiceCapabilities
#define SOAP_TYPE__trp__GetServiceCapabilities (1888)
/* trp:GetServiceCapabilities */
class SOAP_CMAC _trp__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1888; } /* = unique type id SOAP_TYPE__trp__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trp__GetServiceCapabilities() { _trp__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_trp__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__trp__GetServiceCapabilitiesResponse
#define SOAP_TYPE__trp__GetServiceCapabilitiesResponse (1889)
/* trp:GetServiceCapabilitiesResponse */
class SOAP_CMAC _trp__GetServiceCapabilitiesResponse
{
public:
	trp__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type trp:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1889; } /* = unique type id SOAP_TYPE__trp__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trp__GetServiceCapabilitiesResponse() { _trp__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_trp__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__trp__GetReplayUri
#define SOAP_TYPE__trp__GetReplayUri (1890)
/* trp:GetReplayUri */
class SOAP_CMAC _trp__GetReplayUri
{
public:
	tt__StreamSetup *StreamSetup;	/* required element of type tt:StreamSetup */
	std::string RecordingToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1890; } /* = unique type id SOAP_TYPE__trp__GetReplayUri */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trp__GetReplayUri() { _trp__GetReplayUri::soap_default(NULL); }
	virtual ~_trp__GetReplayUri() { }
};
#endif

#ifndef SOAP_TYPE__trp__GetReplayUriResponse
#define SOAP_TYPE__trp__GetReplayUriResponse (1891)
/* trp:GetReplayUriResponse */
class SOAP_CMAC _trp__GetReplayUriResponse
{
public:
	std::string Uri;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1891; } /* = unique type id SOAP_TYPE__trp__GetReplayUriResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trp__GetReplayUriResponse() { _trp__GetReplayUriResponse::soap_default(NULL); }
	virtual ~_trp__GetReplayUriResponse() { }
};
#endif

#ifndef SOAP_TYPE__trp__SetReplayConfiguration
#define SOAP_TYPE__trp__SetReplayConfiguration (1892)
/* trp:SetReplayConfiguration */
class SOAP_CMAC _trp__SetReplayConfiguration
{
public:
	tt__ReplayConfiguration *Configuration;	/* required element of type tt:ReplayConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1892; } /* = unique type id SOAP_TYPE__trp__SetReplayConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trp__SetReplayConfiguration() { _trp__SetReplayConfiguration::soap_default(NULL); }
	virtual ~_trp__SetReplayConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trp__SetReplayConfigurationResponse
#define SOAP_TYPE__trp__SetReplayConfigurationResponse (1893)
/* trp:SetReplayConfigurationResponse */
class SOAP_CMAC _trp__SetReplayConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1893; } /* = unique type id SOAP_TYPE__trp__SetReplayConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trp__SetReplayConfigurationResponse() { _trp__SetReplayConfigurationResponse::soap_default(NULL); }
	virtual ~_trp__SetReplayConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trp__GetReplayConfiguration
#define SOAP_TYPE__trp__GetReplayConfiguration (1894)
/* trp:GetReplayConfiguration */
class SOAP_CMAC _trp__GetReplayConfiguration
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1894; } /* = unique type id SOAP_TYPE__trp__GetReplayConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trp__GetReplayConfiguration() { _trp__GetReplayConfiguration::soap_default(NULL); }
	virtual ~_trp__GetReplayConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trp__GetReplayConfigurationResponse
#define SOAP_TYPE__trp__GetReplayConfigurationResponse (1895)
/* trp:GetReplayConfigurationResponse */
class SOAP_CMAC _trp__GetReplayConfigurationResponse
{
public:
	tt__ReplayConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:ReplayConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1895; } /* = unique type id SOAP_TYPE__trp__GetReplayConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trp__GetReplayConfigurationResponse() { _trp__GetReplayConfigurationResponse::soap_default(NULL); }
	virtual ~_trp__GetReplayConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns11__ServiceCapabilities
#define SOAP_TYPE_ns11__ServiceCapabilities (1896)
/* ns11:ServiceCapabilities */
class SOAP_CMAC ns11__ServiceCapabilities : public xsd__anyType
{
public:
	std::vector<char * >__any;
	unsigned int MaxLimit;	/* required attribute */
	unsigned int MaxSchedules;	/* required attribute */
	unsigned int MaxTimePeriodsPerDay;	/* required attribute */
	unsigned int MaxSpecialDayGroups;	/* required attribute */
	unsigned int MaxDaysInSpecialDayGroup;	/* required attribute */
	unsigned int MaxSpecialDaysSchedules;	/* required attribute */
	bool ExtendedRecurrenceSupported;	/* required attribute */
	bool SpecialDaysSupported;	/* required attribute */
	bool StateReportingSupported;	/* required attribute */
	bool ClientSuppliedTokenSupported;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1896; } /* = unique type id SOAP_TYPE_ns11__ServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns11__ServiceCapabilities() { ns11__ServiceCapabilities::soap_default(NULL); }
	virtual ~ns11__ServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_ns11__ScheduleExtension
#define SOAP_TYPE_ns11__ScheduleExtension (1899)
/* ns11:ScheduleExtension */
class SOAP_CMAC ns11__ScheduleExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1899; } /* = unique type id SOAP_TYPE_ns11__ScheduleExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns11__ScheduleExtension() { ns11__ScheduleExtension::soap_default(NULL); }
	virtual ~ns11__ScheduleExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns11__SpecialDaysSchedule
#define SOAP_TYPE_ns11__SpecialDaysSchedule (1900)
/* ns11:SpecialDaysSchedule */
class SOAP_CMAC ns11__SpecialDaysSchedule : public xsd__anyType
{
public:
	std::string GroupToken;	/* required element of type ns2:ReferenceToken */
	std::vector<class ns11__TimePeriod * >TimeRange;	/* optional element of type ns11:TimePeriod */
	class ns11__SpecialDaysScheduleExtension *Extension;	/* optional element of type ns11:SpecialDaysScheduleExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1900; } /* = unique type id SOAP_TYPE_ns11__SpecialDaysSchedule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns11__SpecialDaysSchedule() { ns11__SpecialDaysSchedule::soap_default(NULL); }
	virtual ~ns11__SpecialDaysSchedule() { }
};
#endif

#ifndef SOAP_TYPE_ns11__SpecialDaysScheduleExtension
#define SOAP_TYPE_ns11__SpecialDaysScheduleExtension (1901)
/* ns11:SpecialDaysScheduleExtension */
class SOAP_CMAC ns11__SpecialDaysScheduleExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1901; } /* = unique type id SOAP_TYPE_ns11__SpecialDaysScheduleExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns11__SpecialDaysScheduleExtension() { ns11__SpecialDaysScheduleExtension::soap_default(NULL); }
	virtual ~ns11__SpecialDaysScheduleExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns11__ScheduleState
#define SOAP_TYPE_ns11__ScheduleState (1902)
/* ns11:ScheduleState */
class SOAP_CMAC ns11__ScheduleState : public xsd__anyType
{
public:
	bool Active;	/* required element of type xsd:boolean */
	bool *SpecialDay;	/* optional element of type xsd:boolean */
	class ns11__ScheduleStateExtension *Extension;	/* optional element of type ns11:ScheduleStateExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1902; } /* = unique type id SOAP_TYPE_ns11__ScheduleState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns11__ScheduleState() { ns11__ScheduleState::soap_default(NULL); }
	virtual ~ns11__ScheduleState() { }
};
#endif

#ifndef SOAP_TYPE_ns11__ScheduleStateExtension
#define SOAP_TYPE_ns11__ScheduleStateExtension (1903)
/* ns11:ScheduleStateExtension */
class SOAP_CMAC ns11__ScheduleStateExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1903; } /* = unique type id SOAP_TYPE_ns11__ScheduleStateExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns11__ScheduleStateExtension() { ns11__ScheduleStateExtension::soap_default(NULL); }
	virtual ~ns11__ScheduleStateExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns11__TimePeriod
#define SOAP_TYPE_ns11__TimePeriod (1904)
/* ns11:TimePeriod */
class SOAP_CMAC ns11__TimePeriod : public xsd__anyType
{
public:
	std::string From;	/* required element of type xsd:time */
	std::string *Until;	/* optional element of type xsd:time */
	class ns11__TimePeriodExtension *Extension;	/* optional element of type ns11:TimePeriodExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1904; } /* = unique type id SOAP_TYPE_ns11__TimePeriod */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns11__TimePeriod() { ns11__TimePeriod::soap_default(NULL); }
	virtual ~ns11__TimePeriod() { }
};
#endif

#ifndef SOAP_TYPE_ns11__TimePeriodExtension
#define SOAP_TYPE_ns11__TimePeriodExtension (1905)
/* ns11:TimePeriodExtension */
class SOAP_CMAC ns11__TimePeriodExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1905; } /* = unique type id SOAP_TYPE_ns11__TimePeriodExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns11__TimePeriodExtension() { ns11__TimePeriodExtension::soap_default(NULL); }
	virtual ~ns11__TimePeriodExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns11__SpecialDayGroupExtension
#define SOAP_TYPE_ns11__SpecialDayGroupExtension (1908)
/* ns11:SpecialDayGroupExtension */
class SOAP_CMAC ns11__SpecialDayGroupExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1908; } /* = unique type id SOAP_TYPE_ns11__SpecialDayGroupExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns11__SpecialDayGroupExtension() { ns11__SpecialDayGroupExtension::soap_default(NULL); }
	virtual ~ns11__SpecialDayGroupExtension() { }
};
#endif

#ifndef SOAP_TYPE__ns11__GetServiceCapabilities
#define SOAP_TYPE__ns11__GetServiceCapabilities (1909)
/* ns11:GetServiceCapabilities */
class SOAP_CMAC _ns11__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1909; } /* = unique type id SOAP_TYPE__ns11__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__GetServiceCapabilities() { _ns11__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_ns11__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__ns11__GetServiceCapabilitiesResponse
#define SOAP_TYPE__ns11__GetServiceCapabilitiesResponse (1910)
/* ns11:GetServiceCapabilitiesResponse */
class SOAP_CMAC _ns11__GetServiceCapabilitiesResponse
{
public:
	ns11__ServiceCapabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns11:ServiceCapabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1910; } /* = unique type id SOAP_TYPE__ns11__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__GetServiceCapabilitiesResponse() { _ns11__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_ns11__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns11__GetScheduleState
#define SOAP_TYPE__ns11__GetScheduleState (1911)
/* ns11:GetScheduleState */
class SOAP_CMAC _ns11__GetScheduleState
{
public:
	std::string Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1911; } /* = unique type id SOAP_TYPE__ns11__GetScheduleState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__GetScheduleState() { _ns11__GetScheduleState::soap_default(NULL); }
	virtual ~_ns11__GetScheduleState() { }
};
#endif

#ifndef SOAP_TYPE__ns11__GetScheduleStateResponse
#define SOAP_TYPE__ns11__GetScheduleStateResponse (1912)
/* ns11:GetScheduleStateResponse */
class SOAP_CMAC _ns11__GetScheduleStateResponse
{
public:
	ns11__ScheduleState *ScheduleState;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns11:ScheduleState */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1912; } /* = unique type id SOAP_TYPE__ns11__GetScheduleStateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__GetScheduleStateResponse() { _ns11__GetScheduleStateResponse::soap_default(NULL); }
	virtual ~_ns11__GetScheduleStateResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns11__GetScheduleInfo
#define SOAP_TYPE__ns11__GetScheduleInfo (1913)
/* ns11:GetScheduleInfo */
class SOAP_CMAC _ns11__GetScheduleInfo
{
public:
	std::vector<std::string >Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1913; } /* = unique type id SOAP_TYPE__ns11__GetScheduleInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__GetScheduleInfo() { _ns11__GetScheduleInfo::soap_default(NULL); }
	virtual ~_ns11__GetScheduleInfo() { }
};
#endif

#ifndef SOAP_TYPE__ns11__GetScheduleInfoResponse
#define SOAP_TYPE__ns11__GetScheduleInfoResponse (1914)
/* ns11:GetScheduleInfoResponse */
class SOAP_CMAC _ns11__GetScheduleInfoResponse
{
public:
	std::vector<class ns11__ScheduleInfo * >ScheduleInfo;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns11:ScheduleInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1914; } /* = unique type id SOAP_TYPE__ns11__GetScheduleInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__GetScheduleInfoResponse() { _ns11__GetScheduleInfoResponse::soap_default(NULL); }
	virtual ~_ns11__GetScheduleInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns11__GetScheduleInfoList
#define SOAP_TYPE__ns11__GetScheduleInfoList (1915)
/* ns11:GetScheduleInfoList */
class SOAP_CMAC _ns11__GetScheduleInfoList
{
public:
	int *Limit;	/* optional element of type xsd:int */
	std::string *StartReference;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1915; } /* = unique type id SOAP_TYPE__ns11__GetScheduleInfoList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__GetScheduleInfoList() { _ns11__GetScheduleInfoList::soap_default(NULL); }
	virtual ~_ns11__GetScheduleInfoList() { }
};
#endif

#ifndef SOAP_TYPE__ns11__GetScheduleInfoListResponse
#define SOAP_TYPE__ns11__GetScheduleInfoListResponse (1916)
/* ns11:GetScheduleInfoListResponse */
class SOAP_CMAC _ns11__GetScheduleInfoListResponse
{
public:
	std::string *NextStartReference;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	std::vector<ns11__ScheduleInfo * >ScheduleInfo;	/* optional element of type ns11:ScheduleInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1916; } /* = unique type id SOAP_TYPE__ns11__GetScheduleInfoListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__GetScheduleInfoListResponse() { _ns11__GetScheduleInfoListResponse::soap_default(NULL); }
	virtual ~_ns11__GetScheduleInfoListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns11__GetSchedules
#define SOAP_TYPE__ns11__GetSchedules (1917)
/* ns11:GetSchedules */
class SOAP_CMAC _ns11__GetSchedules
{
public:
	std::vector<std::string >Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1917; } /* = unique type id SOAP_TYPE__ns11__GetSchedules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__GetSchedules() { _ns11__GetSchedules::soap_default(NULL); }
	virtual ~_ns11__GetSchedules() { }
};
#endif

#ifndef SOAP_TYPE__ns11__GetSchedulesResponse
#define SOAP_TYPE__ns11__GetSchedulesResponse (1918)
/* ns11:GetSchedulesResponse */
class SOAP_CMAC _ns11__GetSchedulesResponse
{
public:
	std::vector<class ns11__Schedule * >Schedule;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns11:Schedule */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1918; } /* = unique type id SOAP_TYPE__ns11__GetSchedulesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__GetSchedulesResponse() { _ns11__GetSchedulesResponse::soap_default(NULL); }
	virtual ~_ns11__GetSchedulesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns11__GetScheduleList
#define SOAP_TYPE__ns11__GetScheduleList (1919)
/* ns11:GetScheduleList */
class SOAP_CMAC _ns11__GetScheduleList
{
public:
	int *Limit;	/* optional element of type xsd:int */
	std::string *StartReference;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1919; } /* = unique type id SOAP_TYPE__ns11__GetScheduleList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__GetScheduleList() { _ns11__GetScheduleList::soap_default(NULL); }
	virtual ~_ns11__GetScheduleList() { }
};
#endif

#ifndef SOAP_TYPE__ns11__GetScheduleListResponse
#define SOAP_TYPE__ns11__GetScheduleListResponse (1920)
/* ns11:GetScheduleListResponse */
class SOAP_CMAC _ns11__GetScheduleListResponse
{
public:
	std::string *NextStartReference;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	std::vector<ns11__Schedule * >Schedule;	/* optional element of type ns11:Schedule */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1920; } /* = unique type id SOAP_TYPE__ns11__GetScheduleListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__GetScheduleListResponse() { _ns11__GetScheduleListResponse::soap_default(NULL); }
	virtual ~_ns11__GetScheduleListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns11__CreateSchedule
#define SOAP_TYPE__ns11__CreateSchedule (1921)
/* ns11:CreateSchedule */
class SOAP_CMAC _ns11__CreateSchedule
{
public:
	ns11__Schedule *Schedule;	/* required element of type ns11:Schedule */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1921; } /* = unique type id SOAP_TYPE__ns11__CreateSchedule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__CreateSchedule() { _ns11__CreateSchedule::soap_default(NULL); }
	virtual ~_ns11__CreateSchedule() { }
};
#endif

#ifndef SOAP_TYPE__ns11__CreateScheduleResponse
#define SOAP_TYPE__ns11__CreateScheduleResponse (1922)
/* ns11:CreateScheduleResponse */
class SOAP_CMAC _ns11__CreateScheduleResponse
{
public:
	std::string Token;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1922; } /* = unique type id SOAP_TYPE__ns11__CreateScheduleResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__CreateScheduleResponse() { _ns11__CreateScheduleResponse::soap_default(NULL); }
	virtual ~_ns11__CreateScheduleResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns11__SetSchedule
#define SOAP_TYPE__ns11__SetSchedule (1923)
/* ns11:SetSchedule */
class SOAP_CMAC _ns11__SetSchedule
{
public:
	ns11__Schedule *Schedule;	/* required element of type ns11:Schedule */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1923; } /* = unique type id SOAP_TYPE__ns11__SetSchedule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__SetSchedule() { _ns11__SetSchedule::soap_default(NULL); }
	virtual ~_ns11__SetSchedule() { }
};
#endif

#ifndef SOAP_TYPE__ns11__SetScheduleResponse
#define SOAP_TYPE__ns11__SetScheduleResponse (1924)
/* ns11:SetScheduleResponse */
class SOAP_CMAC _ns11__SetScheduleResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1924; } /* = unique type id SOAP_TYPE__ns11__SetScheduleResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__SetScheduleResponse() { _ns11__SetScheduleResponse::soap_default(NULL); }
	virtual ~_ns11__SetScheduleResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns11__ModifySchedule
#define SOAP_TYPE__ns11__ModifySchedule (1925)
/* ns11:ModifySchedule */
class SOAP_CMAC _ns11__ModifySchedule
{
public:
	ns11__Schedule *Schedule;	/* required element of type ns11:Schedule */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1925; } /* = unique type id SOAP_TYPE__ns11__ModifySchedule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__ModifySchedule() { _ns11__ModifySchedule::soap_default(NULL); }
	virtual ~_ns11__ModifySchedule() { }
};
#endif

#ifndef SOAP_TYPE__ns11__ModifyScheduleResponse
#define SOAP_TYPE__ns11__ModifyScheduleResponse (1926)
/* ns11:ModifyScheduleResponse */
class SOAP_CMAC _ns11__ModifyScheduleResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1926; } /* = unique type id SOAP_TYPE__ns11__ModifyScheduleResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__ModifyScheduleResponse() { _ns11__ModifyScheduleResponse::soap_default(NULL); }
	virtual ~_ns11__ModifyScheduleResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns11__DeleteSchedule
#define SOAP_TYPE__ns11__DeleteSchedule (1927)
/* ns11:DeleteSchedule */
class SOAP_CMAC _ns11__DeleteSchedule
{
public:
	std::string Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1927; } /* = unique type id SOAP_TYPE__ns11__DeleteSchedule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__DeleteSchedule() { _ns11__DeleteSchedule::soap_default(NULL); }
	virtual ~_ns11__DeleteSchedule() { }
};
#endif

#ifndef SOAP_TYPE__ns11__DeleteScheduleResponse
#define SOAP_TYPE__ns11__DeleteScheduleResponse (1928)
/* ns11:DeleteScheduleResponse */
class SOAP_CMAC _ns11__DeleteScheduleResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1928; } /* = unique type id SOAP_TYPE__ns11__DeleteScheduleResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__DeleteScheduleResponse() { _ns11__DeleteScheduleResponse::soap_default(NULL); }
	virtual ~_ns11__DeleteScheduleResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns11__GetSpecialDayGroupInfo
#define SOAP_TYPE__ns11__GetSpecialDayGroupInfo (1929)
/* ns11:GetSpecialDayGroupInfo */
class SOAP_CMAC _ns11__GetSpecialDayGroupInfo
{
public:
	std::vector<std::string >Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1929; } /* = unique type id SOAP_TYPE__ns11__GetSpecialDayGroupInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__GetSpecialDayGroupInfo() { _ns11__GetSpecialDayGroupInfo::soap_default(NULL); }
	virtual ~_ns11__GetSpecialDayGroupInfo() { }
};
#endif

#ifndef SOAP_TYPE__ns11__GetSpecialDayGroupInfoResponse
#define SOAP_TYPE__ns11__GetSpecialDayGroupInfoResponse (1930)
/* ns11:GetSpecialDayGroupInfoResponse */
class SOAP_CMAC _ns11__GetSpecialDayGroupInfoResponse
{
public:
	std::vector<class ns11__SpecialDayGroupInfo * >SpecialDayGroupInfo;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns11:SpecialDayGroupInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1930; } /* = unique type id SOAP_TYPE__ns11__GetSpecialDayGroupInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__GetSpecialDayGroupInfoResponse() { _ns11__GetSpecialDayGroupInfoResponse::soap_default(NULL); }
	virtual ~_ns11__GetSpecialDayGroupInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns11__GetSpecialDayGroupInfoList
#define SOAP_TYPE__ns11__GetSpecialDayGroupInfoList (1931)
/* ns11:GetSpecialDayGroupInfoList */
class SOAP_CMAC _ns11__GetSpecialDayGroupInfoList
{
public:
	int *Limit;	/* optional element of type xsd:int */
	std::string *StartReference;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1931; } /* = unique type id SOAP_TYPE__ns11__GetSpecialDayGroupInfoList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__GetSpecialDayGroupInfoList() { _ns11__GetSpecialDayGroupInfoList::soap_default(NULL); }
	virtual ~_ns11__GetSpecialDayGroupInfoList() { }
};
#endif

#ifndef SOAP_TYPE__ns11__GetSpecialDayGroupInfoListResponse
#define SOAP_TYPE__ns11__GetSpecialDayGroupInfoListResponse (1932)
/* ns11:GetSpecialDayGroupInfoListResponse */
class SOAP_CMAC _ns11__GetSpecialDayGroupInfoListResponse
{
public:
	std::string *NextStartReference;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	std::vector<ns11__SpecialDayGroupInfo * >SpecialDayGroupInfo;	/* optional element of type ns11:SpecialDayGroupInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1932; } /* = unique type id SOAP_TYPE__ns11__GetSpecialDayGroupInfoListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__GetSpecialDayGroupInfoListResponse() { _ns11__GetSpecialDayGroupInfoListResponse::soap_default(NULL); }
	virtual ~_ns11__GetSpecialDayGroupInfoListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns11__GetSpecialDayGroups
#define SOAP_TYPE__ns11__GetSpecialDayGroups (1933)
/* ns11:GetSpecialDayGroups */
class SOAP_CMAC _ns11__GetSpecialDayGroups
{
public:
	std::vector<std::string >Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1933; } /* = unique type id SOAP_TYPE__ns11__GetSpecialDayGroups */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__GetSpecialDayGroups() { _ns11__GetSpecialDayGroups::soap_default(NULL); }
	virtual ~_ns11__GetSpecialDayGroups() { }
};
#endif

#ifndef SOAP_TYPE__ns11__GetSpecialDayGroupsResponse
#define SOAP_TYPE__ns11__GetSpecialDayGroupsResponse (1934)
/* ns11:GetSpecialDayGroupsResponse */
class SOAP_CMAC _ns11__GetSpecialDayGroupsResponse
{
public:
	std::vector<class ns11__SpecialDayGroup * >SpecialDayGroup;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns11:SpecialDayGroup */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1934; } /* = unique type id SOAP_TYPE__ns11__GetSpecialDayGroupsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__GetSpecialDayGroupsResponse() { _ns11__GetSpecialDayGroupsResponse::soap_default(NULL); }
	virtual ~_ns11__GetSpecialDayGroupsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns11__GetSpecialDayGroupList
#define SOAP_TYPE__ns11__GetSpecialDayGroupList (1935)
/* ns11:GetSpecialDayGroupList */
class SOAP_CMAC _ns11__GetSpecialDayGroupList
{
public:
	int *Limit;	/* optional element of type xsd:int */
	std::string *StartReference;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1935; } /* = unique type id SOAP_TYPE__ns11__GetSpecialDayGroupList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__GetSpecialDayGroupList() { _ns11__GetSpecialDayGroupList::soap_default(NULL); }
	virtual ~_ns11__GetSpecialDayGroupList() { }
};
#endif

#ifndef SOAP_TYPE__ns11__GetSpecialDayGroupListResponse
#define SOAP_TYPE__ns11__GetSpecialDayGroupListResponse (1936)
/* ns11:GetSpecialDayGroupListResponse */
class SOAP_CMAC _ns11__GetSpecialDayGroupListResponse
{
public:
	std::string *NextStartReference;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	std::vector<ns11__SpecialDayGroup * >SpecialDayGroup;	/* optional element of type ns11:SpecialDayGroup */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1936; } /* = unique type id SOAP_TYPE__ns11__GetSpecialDayGroupListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__GetSpecialDayGroupListResponse() { _ns11__GetSpecialDayGroupListResponse::soap_default(NULL); }
	virtual ~_ns11__GetSpecialDayGroupListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns11__CreateSpecialDayGroup
#define SOAP_TYPE__ns11__CreateSpecialDayGroup (1937)
/* ns11:CreateSpecialDayGroup */
class SOAP_CMAC _ns11__CreateSpecialDayGroup
{
public:
	ns11__SpecialDayGroup *SpecialDayGroup;	/* required element of type ns11:SpecialDayGroup */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1937; } /* = unique type id SOAP_TYPE__ns11__CreateSpecialDayGroup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__CreateSpecialDayGroup() { _ns11__CreateSpecialDayGroup::soap_default(NULL); }
	virtual ~_ns11__CreateSpecialDayGroup() { }
};
#endif

#ifndef SOAP_TYPE__ns11__CreateSpecialDayGroupResponse
#define SOAP_TYPE__ns11__CreateSpecialDayGroupResponse (1938)
/* ns11:CreateSpecialDayGroupResponse */
class SOAP_CMAC _ns11__CreateSpecialDayGroupResponse
{
public:
	std::string Token;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1938; } /* = unique type id SOAP_TYPE__ns11__CreateSpecialDayGroupResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__CreateSpecialDayGroupResponse() { _ns11__CreateSpecialDayGroupResponse::soap_default(NULL); }
	virtual ~_ns11__CreateSpecialDayGroupResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns11__SetSpecialDayGroup
#define SOAP_TYPE__ns11__SetSpecialDayGroup (1939)
/* ns11:SetSpecialDayGroup */
class SOAP_CMAC _ns11__SetSpecialDayGroup
{
public:
	ns11__SpecialDayGroup *SpecialDayGroup;	/* required element of type ns11:SpecialDayGroup */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1939; } /* = unique type id SOAP_TYPE__ns11__SetSpecialDayGroup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__SetSpecialDayGroup() { _ns11__SetSpecialDayGroup::soap_default(NULL); }
	virtual ~_ns11__SetSpecialDayGroup() { }
};
#endif

#ifndef SOAP_TYPE__ns11__SetSpecialDayGroupResponse
#define SOAP_TYPE__ns11__SetSpecialDayGroupResponse (1940)
/* ns11:SetSpecialDayGroupResponse */
class SOAP_CMAC _ns11__SetSpecialDayGroupResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1940; } /* = unique type id SOAP_TYPE__ns11__SetSpecialDayGroupResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__SetSpecialDayGroupResponse() { _ns11__SetSpecialDayGroupResponse::soap_default(NULL); }
	virtual ~_ns11__SetSpecialDayGroupResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns11__ModifySpecialDayGroup
#define SOAP_TYPE__ns11__ModifySpecialDayGroup (1941)
/* ns11:ModifySpecialDayGroup */
class SOAP_CMAC _ns11__ModifySpecialDayGroup
{
public:
	ns11__SpecialDayGroup *SpecialDayGroup;	/* required element of type ns11:SpecialDayGroup */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1941; } /* = unique type id SOAP_TYPE__ns11__ModifySpecialDayGroup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__ModifySpecialDayGroup() { _ns11__ModifySpecialDayGroup::soap_default(NULL); }
	virtual ~_ns11__ModifySpecialDayGroup() { }
};
#endif

#ifndef SOAP_TYPE__ns11__ModifySpecialDayGroupResponse
#define SOAP_TYPE__ns11__ModifySpecialDayGroupResponse (1942)
/* ns11:ModifySpecialDayGroupResponse */
class SOAP_CMAC _ns11__ModifySpecialDayGroupResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1942; } /* = unique type id SOAP_TYPE__ns11__ModifySpecialDayGroupResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__ModifySpecialDayGroupResponse() { _ns11__ModifySpecialDayGroupResponse::soap_default(NULL); }
	virtual ~_ns11__ModifySpecialDayGroupResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns11__DeleteSpecialDayGroup
#define SOAP_TYPE__ns11__DeleteSpecialDayGroup (1943)
/* ns11:DeleteSpecialDayGroup */
class SOAP_CMAC _ns11__DeleteSpecialDayGroup
{
public:
	std::string Token;	/* required element of type ns2:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1943; } /* = unique type id SOAP_TYPE__ns11__DeleteSpecialDayGroup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__DeleteSpecialDayGroup() { _ns11__DeleteSpecialDayGroup::soap_default(NULL); }
	virtual ~_ns11__DeleteSpecialDayGroup() { }
};
#endif

#ifndef SOAP_TYPE__ns11__DeleteSpecialDayGroupResponse
#define SOAP_TYPE__ns11__DeleteSpecialDayGroupResponse (1944)
/* ns11:DeleteSpecialDayGroupResponse */
class SOAP_CMAC _ns11__DeleteSpecialDayGroupResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1944; } /* = unique type id SOAP_TYPE__ns11__DeleteSpecialDayGroupResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns11__DeleteSpecialDayGroupResponse() { _ns11__DeleteSpecialDayGroupResponse::soap_default(NULL); }
	virtual ~_ns11__DeleteSpecialDayGroupResponse() { }
};
#endif

#ifndef SOAP_TYPE_tse__Capabilities
#define SOAP_TYPE_tse__Capabilities (1945)
/* tse:Capabilities */
class SOAP_CMAC tse__Capabilities : public xsd__anyType
{
public:
	std::vector<char * >__any;
	bool *MetadataSearch;	/* optional attribute */
	bool *GeneralStartEvents;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1945; } /* = unique type id SOAP_TYPE_tse__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tse__Capabilities() { tse__Capabilities::soap_default(NULL); }
	virtual ~tse__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetServiceCapabilities
#define SOAP_TYPE__tse__GetServiceCapabilities (1946)
/* tse:GetServiceCapabilities */
class SOAP_CMAC _tse__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1946; } /* = unique type id SOAP_TYPE__tse__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetServiceCapabilities() { _tse__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_tse__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tse__GetServiceCapabilitiesResponse (1947)
/* tse:GetServiceCapabilitiesResponse */
class SOAP_CMAC _tse__GetServiceCapabilitiesResponse
{
public:
	tse__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tse:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1947; } /* = unique type id SOAP_TYPE__tse__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetServiceCapabilitiesResponse() { _tse__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_tse__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetRecordingSummary
#define SOAP_TYPE__tse__GetRecordingSummary (1948)
/* tse:GetRecordingSummary */
class SOAP_CMAC _tse__GetRecordingSummary
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1948; } /* = unique type id SOAP_TYPE__tse__GetRecordingSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetRecordingSummary() { _tse__GetRecordingSummary::soap_default(NULL); }
	virtual ~_tse__GetRecordingSummary() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetRecordingSummaryResponse
#define SOAP_TYPE__tse__GetRecordingSummaryResponse (1949)
/* tse:GetRecordingSummaryResponse */
class SOAP_CMAC _tse__GetRecordingSummaryResponse
{
public:
	tt__RecordingSummary *Summary;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:RecordingSummary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1949; } /* = unique type id SOAP_TYPE__tse__GetRecordingSummaryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetRecordingSummaryResponse() { _tse__GetRecordingSummaryResponse::soap_default(NULL); }
	virtual ~_tse__GetRecordingSummaryResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetRecordingInformation
#define SOAP_TYPE__tse__GetRecordingInformation (1950)
/* tse:GetRecordingInformation */
class SOAP_CMAC _tse__GetRecordingInformation
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1950; } /* = unique type id SOAP_TYPE__tse__GetRecordingInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetRecordingInformation() { _tse__GetRecordingInformation::soap_default(NULL); }
	virtual ~_tse__GetRecordingInformation() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetRecordingInformationResponse
#define SOAP_TYPE__tse__GetRecordingInformationResponse (1951)
/* tse:GetRecordingInformationResponse */
class SOAP_CMAC _tse__GetRecordingInformationResponse
{
public:
	tt__RecordingInformation *RecordingInformation;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:RecordingInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1951; } /* = unique type id SOAP_TYPE__tse__GetRecordingInformationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetRecordingInformationResponse() { _tse__GetRecordingInformationResponse::soap_default(NULL); }
	virtual ~_tse__GetRecordingInformationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetMediaAttributes
#define SOAP_TYPE__tse__GetMediaAttributes (1952)
/* tse:GetMediaAttributes */
class SOAP_CMAC _tse__GetMediaAttributes
{
public:
	std::vector<std::string >RecordingTokens;	/* optional element of type tt:RecordingReference */
	time_t Time;	/* required element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1952; } /* = unique type id SOAP_TYPE__tse__GetMediaAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetMediaAttributes() { _tse__GetMediaAttributes::soap_default(NULL); }
	virtual ~_tse__GetMediaAttributes() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetMediaAttributesResponse
#define SOAP_TYPE__tse__GetMediaAttributesResponse (1953)
/* tse:GetMediaAttributesResponse */
class SOAP_CMAC _tse__GetMediaAttributesResponse
{
public:
	std::vector<tt__MediaAttributes * >MediaAttributes;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:MediaAttributes */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1953; } /* = unique type id SOAP_TYPE__tse__GetMediaAttributesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetMediaAttributesResponse() { _tse__GetMediaAttributesResponse::soap_default(NULL); }
	virtual ~_tse__GetMediaAttributesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__FindRecordings
#define SOAP_TYPE__tse__FindRecordings (1954)
/* tse:FindRecordings */
class SOAP_CMAC _tse__FindRecordings
{
public:
	tt__SearchScope *Scope;	/* required element of type tt:SearchScope */
	int *MaxMatches;	/* optional element of type xsd:int */
	LONG64 KeepAliveTime;	/* external */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1954; } /* = unique type id SOAP_TYPE__tse__FindRecordings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__FindRecordings() { _tse__FindRecordings::soap_default(NULL); }
	virtual ~_tse__FindRecordings() { }
};
#endif

#ifndef SOAP_TYPE__tse__FindRecordingsResponse
#define SOAP_TYPE__tse__FindRecordingsResponse (1955)
/* tse:FindRecordingsResponse */
class SOAP_CMAC _tse__FindRecordingsResponse
{
public:
	std::string SearchToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:JobToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1955; } /* = unique type id SOAP_TYPE__tse__FindRecordingsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__FindRecordingsResponse() { _tse__FindRecordingsResponse::soap_default(NULL); }
	virtual ~_tse__FindRecordingsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetRecordingSearchResults
#define SOAP_TYPE__tse__GetRecordingSearchResults (1956)
/* tse:GetRecordingSearchResults */
class SOAP_CMAC _tse__GetRecordingSearchResults
{
public:
	std::string SearchToken;	/* required element of type tt:JobToken */
	int *MinResults;	/* optional element of type xsd:int */
	int *MaxResults;	/* optional element of type xsd:int */
	LONG64 *WaitTime;	/* optional element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1956; } /* = unique type id SOAP_TYPE__tse__GetRecordingSearchResults */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetRecordingSearchResults() { _tse__GetRecordingSearchResults::soap_default(NULL); }
	virtual ~_tse__GetRecordingSearchResults() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetRecordingSearchResultsResponse
#define SOAP_TYPE__tse__GetRecordingSearchResultsResponse (1957)
/* tse:GetRecordingSearchResultsResponse */
class SOAP_CMAC _tse__GetRecordingSearchResultsResponse
{
public:
	tt__FindRecordingResultList *ResultList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:FindRecordingResultList */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1957; } /* = unique type id SOAP_TYPE__tse__GetRecordingSearchResultsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetRecordingSearchResultsResponse() { _tse__GetRecordingSearchResultsResponse::soap_default(NULL); }
	virtual ~_tse__GetRecordingSearchResultsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__FindEvents
#define SOAP_TYPE__tse__FindEvents (1958)
/* tse:FindEvents */
class SOAP_CMAC _tse__FindEvents
{
public:
	time_t StartPoint;	/* required element of type xsd:dateTime */
	time_t *EndPoint;	/* optional element of type xsd:dateTime */
	tt__SearchScope *Scope;	/* required element of type tt:SearchScope */
	class tt__EventFilter *SearchFilter;	/* required element of type tt:EventFilter */
	bool IncludeStartState;	/* required element of type xsd:boolean */
	int *MaxMatches;	/* optional element of type xsd:int */
	LONG64 KeepAliveTime;	/* external */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1958; } /* = unique type id SOAP_TYPE__tse__FindEvents */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__FindEvents() { _tse__FindEvents::soap_default(NULL); }
	virtual ~_tse__FindEvents() { }
};
#endif

#ifndef SOAP_TYPE__tse__FindEventsResponse
#define SOAP_TYPE__tse__FindEventsResponse (1959)
/* tse:FindEventsResponse */
class SOAP_CMAC _tse__FindEventsResponse
{
public:
	std::string SearchToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:JobToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1959; } /* = unique type id SOAP_TYPE__tse__FindEventsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__FindEventsResponse() { _tse__FindEventsResponse::soap_default(NULL); }
	virtual ~_tse__FindEventsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetEventSearchResults
#define SOAP_TYPE__tse__GetEventSearchResults (1960)
/* tse:GetEventSearchResults */
class SOAP_CMAC _tse__GetEventSearchResults
{
public:
	std::string SearchToken;	/* required element of type tt:JobToken */
	int *MinResults;	/* optional element of type xsd:int */
	int *MaxResults;	/* optional element of type xsd:int */
	LONG64 *WaitTime;	/* optional element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1960; } /* = unique type id SOAP_TYPE__tse__GetEventSearchResults */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetEventSearchResults() { _tse__GetEventSearchResults::soap_default(NULL); }
	virtual ~_tse__GetEventSearchResults() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetEventSearchResultsResponse
#define SOAP_TYPE__tse__GetEventSearchResultsResponse (1961)
/* tse:GetEventSearchResultsResponse */
class SOAP_CMAC _tse__GetEventSearchResultsResponse
{
public:
	tt__FindEventResultList *ResultList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:FindEventResultList */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1961; } /* = unique type id SOAP_TYPE__tse__GetEventSearchResultsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetEventSearchResultsResponse() { _tse__GetEventSearchResultsResponse::soap_default(NULL); }
	virtual ~_tse__GetEventSearchResultsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__FindPTZPosition
#define SOAP_TYPE__tse__FindPTZPosition (1962)
/* tse:FindPTZPosition */
class SOAP_CMAC _tse__FindPTZPosition
{
public:
	time_t StartPoint;	/* required element of type xsd:dateTime */
	time_t *EndPoint;	/* optional element of type xsd:dateTime */
	tt__SearchScope *Scope;	/* required element of type tt:SearchScope */
	tt__PTZPositionFilter *SearchFilter;	/* required element of type tt:PTZPositionFilter */
	int *MaxMatches;	/* optional element of type xsd:int */
	LONG64 KeepAliveTime;	/* external */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1962; } /* = unique type id SOAP_TYPE__tse__FindPTZPosition */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__FindPTZPosition() { _tse__FindPTZPosition::soap_default(NULL); }
	virtual ~_tse__FindPTZPosition() { }
};
#endif

#ifndef SOAP_TYPE__tse__FindPTZPositionResponse
#define SOAP_TYPE__tse__FindPTZPositionResponse (1963)
/* tse:FindPTZPositionResponse */
class SOAP_CMAC _tse__FindPTZPositionResponse
{
public:
	std::string SearchToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:JobToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1963; } /* = unique type id SOAP_TYPE__tse__FindPTZPositionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__FindPTZPositionResponse() { _tse__FindPTZPositionResponse::soap_default(NULL); }
	virtual ~_tse__FindPTZPositionResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetPTZPositionSearchResults
#define SOAP_TYPE__tse__GetPTZPositionSearchResults (1964)
/* tse:GetPTZPositionSearchResults */
class SOAP_CMAC _tse__GetPTZPositionSearchResults
{
public:
	std::string SearchToken;	/* required element of type tt:JobToken */
	int *MinResults;	/* optional element of type xsd:int */
	int *MaxResults;	/* optional element of type xsd:int */
	LONG64 *WaitTime;	/* optional element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1964; } /* = unique type id SOAP_TYPE__tse__GetPTZPositionSearchResults */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetPTZPositionSearchResults() { _tse__GetPTZPositionSearchResults::soap_default(NULL); }
	virtual ~_tse__GetPTZPositionSearchResults() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetPTZPositionSearchResultsResponse
#define SOAP_TYPE__tse__GetPTZPositionSearchResultsResponse (1965)
/* tse:GetPTZPositionSearchResultsResponse */
class SOAP_CMAC _tse__GetPTZPositionSearchResultsResponse
{
public:
	tt__FindPTZPositionResultList *ResultList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:FindPTZPositionResultList */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1965; } /* = unique type id SOAP_TYPE__tse__GetPTZPositionSearchResultsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetPTZPositionSearchResultsResponse() { _tse__GetPTZPositionSearchResultsResponse::soap_default(NULL); }
	virtual ~_tse__GetPTZPositionSearchResultsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__FindMetadata
#define SOAP_TYPE__tse__FindMetadata (1966)
/* tse:FindMetadata */
class SOAP_CMAC _tse__FindMetadata
{
public:
	time_t StartPoint;	/* required element of type xsd:dateTime */
	time_t *EndPoint;	/* optional element of type xsd:dateTime */
	tt__SearchScope *Scope;	/* required element of type tt:SearchScope */
	tt__MetadataFilter *MetadataFilter;	/* required element of type tt:MetadataFilter */
	int *MaxMatches;	/* optional element of type xsd:int */
	LONG64 KeepAliveTime;	/* external */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1966; } /* = unique type id SOAP_TYPE__tse__FindMetadata */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__FindMetadata() { _tse__FindMetadata::soap_default(NULL); }
	virtual ~_tse__FindMetadata() { }
};
#endif

#ifndef SOAP_TYPE__tse__FindMetadataResponse
#define SOAP_TYPE__tse__FindMetadataResponse (1967)
/* tse:FindMetadataResponse */
class SOAP_CMAC _tse__FindMetadataResponse
{
public:
	std::string SearchToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:JobToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1967; } /* = unique type id SOAP_TYPE__tse__FindMetadataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__FindMetadataResponse() { _tse__FindMetadataResponse::soap_default(NULL); }
	virtual ~_tse__FindMetadataResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetMetadataSearchResults
#define SOAP_TYPE__tse__GetMetadataSearchResults (1968)
/* tse:GetMetadataSearchResults */
class SOAP_CMAC _tse__GetMetadataSearchResults
{
public:
	std::string SearchToken;	/* required element of type tt:JobToken */
	int *MinResults;	/* optional element of type xsd:int */
	int *MaxResults;	/* optional element of type xsd:int */
	LONG64 *WaitTime;	/* optional element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1968; } /* = unique type id SOAP_TYPE__tse__GetMetadataSearchResults */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetMetadataSearchResults() { _tse__GetMetadataSearchResults::soap_default(NULL); }
	virtual ~_tse__GetMetadataSearchResults() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetMetadataSearchResultsResponse
#define SOAP_TYPE__tse__GetMetadataSearchResultsResponse (1969)
/* tse:GetMetadataSearchResultsResponse */
class SOAP_CMAC _tse__GetMetadataSearchResultsResponse
{
public:
	tt__FindMetadataResultList *ResultList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:FindMetadataResultList */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1969; } /* = unique type id SOAP_TYPE__tse__GetMetadataSearchResultsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetMetadataSearchResultsResponse() { _tse__GetMetadataSearchResultsResponse::soap_default(NULL); }
	virtual ~_tse__GetMetadataSearchResultsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetSearchState
#define SOAP_TYPE__tse__GetSearchState (1970)
/* tse:GetSearchState */
class SOAP_CMAC _tse__GetSearchState
{
public:
	std::string SearchToken;	/* required element of type tt:JobToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1970; } /* = unique type id SOAP_TYPE__tse__GetSearchState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetSearchState() { _tse__GetSearchState::soap_default(NULL); }
	virtual ~_tse__GetSearchState() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetSearchStateResponse
#define SOAP_TYPE__tse__GetSearchStateResponse (1971)
/* tse:GetSearchStateResponse */
class SOAP_CMAC _tse__GetSearchStateResponse
{
public:
	enum tt__SearchState State;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:SearchState */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1971; } /* = unique type id SOAP_TYPE__tse__GetSearchStateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetSearchStateResponse() { _tse__GetSearchStateResponse::soap_default(NULL); }
	virtual ~_tse__GetSearchStateResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__EndSearch
#define SOAP_TYPE__tse__EndSearch (1972)
/* tse:EndSearch */
class SOAP_CMAC _tse__EndSearch
{
public:
	std::string SearchToken;	/* required element of type tt:JobToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1972; } /* = unique type id SOAP_TYPE__tse__EndSearch */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__EndSearch() { _tse__EndSearch::soap_default(NULL); }
	virtual ~_tse__EndSearch() { }
};
#endif

#ifndef SOAP_TYPE__tse__EndSearchResponse
#define SOAP_TYPE__tse__EndSearchResponse (1973)
/* tse:EndSearchResponse */
class SOAP_CMAC _tse__EndSearchResponse
{
public:
	time_t Endpoint;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1973; } /* = unique type id SOAP_TYPE__tse__EndSearchResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__EndSearchResponse() { _tse__EndSearchResponse::soap_default(NULL); }
	virtual ~_tse__EndSearchResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns12__ColorPalette
#define SOAP_TYPE_ns12__ColorPalette (1974)
/* ns12:ColorPalette */
class SOAP_CMAC ns12__ColorPalette : public xsd__anyType
{
public:
	std::string Name;	/* required element of type tt:Name */
	std::vector<char * >__any;
	std::string token;	/* required attribute */
	std::string Type;	/* required attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1974; } /* = unique type id SOAP_TYPE_ns12__ColorPalette */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns12__ColorPalette() { ns12__ColorPalette::soap_default(NULL); }
	virtual ~ns12__ColorPalette() { }
};
#endif

#ifndef SOAP_TYPE_ns12__NUCTable
#define SOAP_TYPE_ns12__NUCTable (1975)
/* ns12:NUCTable */
class SOAP_CMAC ns12__NUCTable : public xsd__anyType
{
public:
	std::string Name;	/* required element of type tt:Name */
	std::vector<char * >__any;
	std::string token;	/* required attribute */
	float *LowTemperature;	/* optional attribute */
	float *HighTemperature;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1975; } /* = unique type id SOAP_TYPE_ns12__NUCTable */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns12__NUCTable() { ns12__NUCTable::soap_default(NULL); }
	virtual ~ns12__NUCTable() { }
};
#endif

#ifndef SOAP_TYPE_ns12__Cooler
#define SOAP_TYPE_ns12__Cooler (1976)
/* ns12:Cooler */
class SOAP_CMAC ns12__Cooler : public xsd__anyType
{
public:
	bool Enabled;	/* required element of type xsd:boolean */
	float *RunTime;	/* optional element of type xsd:float */
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1976; } /* = unique type id SOAP_TYPE_ns12__Cooler */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns12__Cooler() { ns12__Cooler::soap_default(NULL); }
	virtual ~ns12__Cooler() { }
};
#endif

#ifndef SOAP_TYPE_ns12__CoolerOptions
#define SOAP_TYPE_ns12__CoolerOptions (1977)
/* ns12:CoolerOptions */
class SOAP_CMAC ns12__CoolerOptions : public xsd__anyType
{
public:
	bool *Enabled;	/* optional element of type xsd:boolean */
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1977; } /* = unique type id SOAP_TYPE_ns12__CoolerOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns12__CoolerOptions() { ns12__CoolerOptions::soap_default(NULL); }
	virtual ~ns12__CoolerOptions() { }
};
#endif

#ifndef SOAP_TYPE_ns12__RadiometryGlobalParameters
#define SOAP_TYPE_ns12__RadiometryGlobalParameters (1978)
/* ns12:RadiometryGlobalParameters */
class SOAP_CMAC ns12__RadiometryGlobalParameters : public xsd__anyType
{
public:
	float ReflectedAmbientTemperature;	/* required element of type xsd:float */
	float Emissivity;	/* required element of type xsd:float */
	float DistanceToObject;	/* required element of type xsd:float */
	float *RelativeHumidity;	/* optional element of type xsd:float */
	float *AtmosphericTemperature;	/* optional element of type xsd:float */
	float *AtmosphericTransmittance;	/* optional element of type xsd:float */
	float *ExtOpticsTemperature;	/* optional element of type xsd:float */
	float *ExtOpticsTransmittance;	/* optional element of type xsd:float */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1978; } /* = unique type id SOAP_TYPE_ns12__RadiometryGlobalParameters */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns12__RadiometryGlobalParameters() { ns12__RadiometryGlobalParameters::soap_default(NULL); }
	virtual ~ns12__RadiometryGlobalParameters() { }
};
#endif

#ifndef SOAP_TYPE_ns12__RadiometryGlobalParameterOptions
#define SOAP_TYPE_ns12__RadiometryGlobalParameterOptions (1979)
/* ns12:RadiometryGlobalParameterOptions */
class SOAP_CMAC ns12__RadiometryGlobalParameterOptions : public xsd__anyType
{
public:
	tt__FloatRange *ReflectedAmbientTemperature;	/* required element of type tt:FloatRange */
	tt__FloatRange *Emissivity;	/* required element of type tt:FloatRange */
	tt__FloatRange *DistanceToObject;	/* required element of type tt:FloatRange */
	tt__FloatRange *RelativeHumidity;	/* optional element of type tt:FloatRange */
	tt__FloatRange *AtmosphericTemperature;	/* optional element of type tt:FloatRange */
	tt__FloatRange *AtmosphericTransmittance;	/* optional element of type tt:FloatRange */
	tt__FloatRange *ExtOpticsTemperature;	/* optional element of type tt:FloatRange */
	tt__FloatRange *ExtOpticsTransmittance;	/* optional element of type tt:FloatRange */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1979; } /* = unique type id SOAP_TYPE_ns12__RadiometryGlobalParameterOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns12__RadiometryGlobalParameterOptions() { ns12__RadiometryGlobalParameterOptions::soap_default(NULL); }
	virtual ~ns12__RadiometryGlobalParameterOptions() { }
};
#endif

#ifndef SOAP_TYPE_ns12__Configuration
#define SOAP_TYPE_ns12__Configuration (1980)
/* ns12:Configuration */
class SOAP_CMAC ns12__Configuration : public xsd__anyType
{
public:
	ns12__ColorPalette *ColorPalette;	/* required element of type ns12:ColorPalette */
	enum ns12__Polarity Polarity;	/* required element of type ns12:Polarity */
	ns12__NUCTable *NUCTable;	/* optional element of type ns12:NUCTable */
	ns12__Cooler *Cooler;	/* optional element of type ns12:Cooler */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1980; } /* = unique type id SOAP_TYPE_ns12__Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns12__Configuration() { ns12__Configuration::soap_default(NULL); }
	virtual ~ns12__Configuration() { }
};
#endif

#ifndef SOAP_TYPE_ns12__Configurations
#define SOAP_TYPE_ns12__Configurations (1981)
/* ns12:Configurations */
class SOAP_CMAC ns12__Configurations : public xsd__anyType
{
public:
	ns12__Configuration *Configuration;	/* required element of type ns12:Configuration */
	std::vector<char * >__any;
	std::string token;	/* required attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1981; } /* = unique type id SOAP_TYPE_ns12__Configurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns12__Configurations() { ns12__Configurations::soap_default(NULL); }
	virtual ~ns12__Configurations() { }
};
#endif

#ifndef SOAP_TYPE_ns12__RadiometryConfiguration
#define SOAP_TYPE_ns12__RadiometryConfiguration (1982)
/* ns12:RadiometryConfiguration */
class SOAP_CMAC ns12__RadiometryConfiguration : public xsd__anyType
{
public:
	ns12__RadiometryGlobalParameters *RadiometryGlobalParameters;	/* optional element of type ns12:RadiometryGlobalParameters */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1982; } /* = unique type id SOAP_TYPE_ns12__RadiometryConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns12__RadiometryConfiguration() { ns12__RadiometryConfiguration::soap_default(NULL); }
	virtual ~ns12__RadiometryConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_ns12__ConfigurationOptions
#define SOAP_TYPE_ns12__ConfigurationOptions (1983)
/* ns12:ConfigurationOptions */
class SOAP_CMAC ns12__ConfigurationOptions : public xsd__anyType
{
public:
	std::vector<ns12__ColorPalette * >ColorPalette;	/* required element of type ns12:ColorPalette */
	std::vector<ns12__NUCTable * >NUCTable;	/* optional element of type ns12:NUCTable */
	ns12__CoolerOptions *CoolerOptions;	/* optional element of type ns12:CoolerOptions */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1983; } /* = unique type id SOAP_TYPE_ns12__ConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns12__ConfigurationOptions() { ns12__ConfigurationOptions::soap_default(NULL); }
	virtual ~ns12__ConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_ns12__RadiometryConfigurationOptions
#define SOAP_TYPE_ns12__RadiometryConfigurationOptions (1984)
/* ns12:RadiometryConfigurationOptions */
class SOAP_CMAC ns12__RadiometryConfigurationOptions : public xsd__anyType
{
public:
	ns12__RadiometryGlobalParameterOptions *RadiometryGlobalParameterOptions;	/* optional element of type ns12:RadiometryGlobalParameterOptions */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1984; } /* = unique type id SOAP_TYPE_ns12__RadiometryConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns12__RadiometryConfigurationOptions() { ns12__RadiometryConfigurationOptions::soap_default(NULL); }
	virtual ~ns12__RadiometryConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_ns12__Capabilities
#define SOAP_TYPE_ns12__Capabilities (1985)
/* ns12:Capabilities */
class SOAP_CMAC ns12__Capabilities : public xsd__anyType
{
public:
	std::vector<char * >__any;
	bool *Radiometry;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1985; } /* = unique type id SOAP_TYPE_ns12__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns12__Capabilities() { ns12__Capabilities::soap_default(NULL); }
	virtual ~ns12__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE__ns12__GetServiceCapabilities
#define SOAP_TYPE__ns12__GetServiceCapabilities (1986)
/* ns12:GetServiceCapabilities */
class SOAP_CMAC _ns12__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1986; } /* = unique type id SOAP_TYPE__ns12__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns12__GetServiceCapabilities() { _ns12__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_ns12__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__ns12__GetServiceCapabilitiesResponse
#define SOAP_TYPE__ns12__GetServiceCapabilitiesResponse (1987)
/* ns12:GetServiceCapabilitiesResponse */
class SOAP_CMAC _ns12__GetServiceCapabilitiesResponse
{
public:
	ns12__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns12:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1987; } /* = unique type id SOAP_TYPE__ns12__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns12__GetServiceCapabilitiesResponse() { _ns12__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_ns12__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns12__GetConfigurationOptions
#define SOAP_TYPE__ns12__GetConfigurationOptions (1988)
/* ns12:GetConfigurationOptions */
class SOAP_CMAC _ns12__GetConfigurationOptions
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1988; } /* = unique type id SOAP_TYPE__ns12__GetConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns12__GetConfigurationOptions() { _ns12__GetConfigurationOptions::soap_default(NULL); }
	virtual ~_ns12__GetConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__ns12__GetConfigurationOptionsResponse
#define SOAP_TYPE__ns12__GetConfigurationOptionsResponse (1989)
/* ns12:GetConfigurationOptionsResponse */
class SOAP_CMAC _ns12__GetConfigurationOptionsResponse
{
public:
	ns12__ConfigurationOptions *ConfigurationOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns12:ConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1989; } /* = unique type id SOAP_TYPE__ns12__GetConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns12__GetConfigurationOptionsResponse() { _ns12__GetConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_ns12__GetConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns12__GetConfiguration
#define SOAP_TYPE__ns12__GetConfiguration (1990)
/* ns12:GetConfiguration */
class SOAP_CMAC _ns12__GetConfiguration
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1990; } /* = unique type id SOAP_TYPE__ns12__GetConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns12__GetConfiguration() { _ns12__GetConfiguration::soap_default(NULL); }
	virtual ~_ns12__GetConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__ns12__GetConfigurationResponse
#define SOAP_TYPE__ns12__GetConfigurationResponse (1991)
/* ns12:GetConfigurationResponse */
class SOAP_CMAC _ns12__GetConfigurationResponse
{
public:
	ns12__Configuration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns12:Configuration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1991; } /* = unique type id SOAP_TYPE__ns12__GetConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns12__GetConfigurationResponse() { _ns12__GetConfigurationResponse::soap_default(NULL); }
	virtual ~_ns12__GetConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns12__GetConfigurations
#define SOAP_TYPE__ns12__GetConfigurations (1992)
/* ns12:GetConfigurations */
class SOAP_CMAC _ns12__GetConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1992; } /* = unique type id SOAP_TYPE__ns12__GetConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns12__GetConfigurations() { _ns12__GetConfigurations::soap_default(NULL); }
	virtual ~_ns12__GetConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__ns12__GetConfigurationsResponse
#define SOAP_TYPE__ns12__GetConfigurationsResponse (1993)
/* ns12:GetConfigurationsResponse */
class SOAP_CMAC _ns12__GetConfigurationsResponse
{
public:
	std::vector<ns12__Configurations * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns12:Configurations */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1993; } /* = unique type id SOAP_TYPE__ns12__GetConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns12__GetConfigurationsResponse() { _ns12__GetConfigurationsResponse::soap_default(NULL); }
	virtual ~_ns12__GetConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns12__SetConfiguration
#define SOAP_TYPE__ns12__SetConfiguration (1994)
/* ns12:SetConfiguration */
class SOAP_CMAC _ns12__SetConfiguration
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	ns12__Configuration *Configuration;	/* required element of type ns12:Configuration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1994; } /* = unique type id SOAP_TYPE__ns12__SetConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns12__SetConfiguration() { _ns12__SetConfiguration::soap_default(NULL); }
	virtual ~_ns12__SetConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__ns12__SetConfigurationResponse
#define SOAP_TYPE__ns12__SetConfigurationResponse (1995)
/* ns12:SetConfigurationResponse */
class SOAP_CMAC _ns12__SetConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1995; } /* = unique type id SOAP_TYPE__ns12__SetConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns12__SetConfigurationResponse() { _ns12__SetConfigurationResponse::soap_default(NULL); }
	virtual ~_ns12__SetConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns12__GetRadiometryConfigurationOptions
#define SOAP_TYPE__ns12__GetRadiometryConfigurationOptions (1996)
/* ns12:GetRadiometryConfigurationOptions */
class SOAP_CMAC _ns12__GetRadiometryConfigurationOptions
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1996; } /* = unique type id SOAP_TYPE__ns12__GetRadiometryConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns12__GetRadiometryConfigurationOptions() { _ns12__GetRadiometryConfigurationOptions::soap_default(NULL); }
	virtual ~_ns12__GetRadiometryConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__ns12__GetRadiometryConfigurationOptionsResponse
#define SOAP_TYPE__ns12__GetRadiometryConfigurationOptionsResponse (1997)
/* ns12:GetRadiometryConfigurationOptionsResponse */
class SOAP_CMAC _ns12__GetRadiometryConfigurationOptionsResponse
{
public:
	ns12__RadiometryConfigurationOptions *ConfigurationOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns12:RadiometryConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1997; } /* = unique type id SOAP_TYPE__ns12__GetRadiometryConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns12__GetRadiometryConfigurationOptionsResponse() { _ns12__GetRadiometryConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_ns12__GetRadiometryConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns12__GetRadiometryConfiguration
#define SOAP_TYPE__ns12__GetRadiometryConfiguration (1998)
/* ns12:GetRadiometryConfiguration */
class SOAP_CMAC _ns12__GetRadiometryConfiguration
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1998; } /* = unique type id SOAP_TYPE__ns12__GetRadiometryConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns12__GetRadiometryConfiguration() { _ns12__GetRadiometryConfiguration::soap_default(NULL); }
	virtual ~_ns12__GetRadiometryConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__ns12__GetRadiometryConfigurationResponse
#define SOAP_TYPE__ns12__GetRadiometryConfigurationResponse (1999)
/* ns12:GetRadiometryConfigurationResponse */
class SOAP_CMAC _ns12__GetRadiometryConfigurationResponse
{
public:
	ns12__RadiometryConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns12:RadiometryConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1999; } /* = unique type id SOAP_TYPE__ns12__GetRadiometryConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns12__GetRadiometryConfigurationResponse() { _ns12__GetRadiometryConfigurationResponse::soap_default(NULL); }
	virtual ~_ns12__GetRadiometryConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns12__SetRadiometryConfiguration
#define SOAP_TYPE__ns12__SetRadiometryConfiguration (2000)
/* ns12:SetRadiometryConfiguration */
class SOAP_CMAC _ns12__SetRadiometryConfiguration
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	ns12__RadiometryConfiguration *Configuration;	/* required element of type ns12:RadiometryConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2000; } /* = unique type id SOAP_TYPE__ns12__SetRadiometryConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns12__SetRadiometryConfiguration() { _ns12__SetRadiometryConfiguration::soap_default(NULL); }
	virtual ~_ns12__SetRadiometryConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__ns12__SetRadiometryConfigurationResponse
#define SOAP_TYPE__ns12__SetRadiometryConfigurationResponse (2001)
/* ns12:SetRadiometryConfigurationResponse */
class SOAP_CMAC _ns12__SetRadiometryConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2001; } /* = unique type id SOAP_TYPE__ns12__SetRadiometryConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns12__SetRadiometryConfigurationResponse() { _ns12__SetRadiometryConfigurationResponse::soap_default(NULL); }
	virtual ~_ns12__SetRadiometryConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AccessPointInfoBase
#define SOAP_TYPE_ns1__AccessPointInfoBase (193)
/* ns1:AccessPointInfoBase */
class SOAP_CMAC ns1__AccessPointInfoBase : public ns2__DataEntity
{
public:
	std::string Name;	/* required element of type ns2:Name */
	std::string *Description;	/* optional element of type ns2:Description */
	std::string *AreaFrom;	/* optional element of type ns2:ReferenceToken */
	std::string *AreaTo;	/* optional element of type ns2:ReferenceToken */
	std::string *EntityType;	/* optional element of type xsd:QName */
	std::string Entity;	/* required element of type ns2:ReferenceToken */
public:
	virtual int soap_type() const { return 193; } /* = unique type id SOAP_TYPE_ns1__AccessPointInfoBase */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AccessPointInfoBase() { ns1__AccessPointInfoBase::soap_default(NULL); }
	virtual ~ns1__AccessPointInfoBase() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AreaInfoBase
#define SOAP_TYPE_ns1__AreaInfoBase (199)
/* ns1:AreaInfoBase */
class SOAP_CMAC ns1__AreaInfoBase : public ns2__DataEntity
{
public:
	std::string Name;	/* required element of type ns2:Name */
	std::string *Description;	/* optional element of type ns2:Description */
public:
	virtual int soap_type() const { return 199; } /* = unique type id SOAP_TYPE_ns1__AreaInfoBase */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AreaInfoBase() { ns1__AreaInfoBase::soap_default(NULL); }
	virtual ~ns1__AreaInfoBase() { }
};
#endif

#ifndef SOAP_TYPE_ns3__AccessProfileInfo
#define SOAP_TYPE_ns3__AccessProfileInfo (255)
/* ns3:AccessProfileInfo */
class SOAP_CMAC ns3__AccessProfileInfo : public ns2__DataEntity
{
public:
	std::string Name;	/* required element of type ns2:Name */
	std::string *Description;	/* optional element of type ns2:Description */
public:
	virtual int soap_type() const { return 255; } /* = unique type id SOAP_TYPE_ns3__AccessProfileInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__AccessProfileInfo() { ns3__AccessProfileInfo::soap_default(NULL); }
	virtual ~ns3__AccessProfileInfo() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSource
#define SOAP_TYPE_tt__VideoSource (356)
/* tt:VideoSource */
class SOAP_CMAC tt__VideoSource : public tt__DeviceEntity
{
public:
	float Framerate;	/* required element of type xsd:float */
	tt__VideoResolution *Resolution;	/* required element of type tt:VideoResolution */
	tt__ImagingSettings *Imaging;	/* optional element of type tt:ImagingSettings */
	tt__VideoSourceExtension *Extension;	/* optional element of type tt:VideoSourceExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 356; } /* = unique type id SOAP_TYPE_tt__VideoSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSource() { tt__VideoSource::soap_default(NULL); }
	virtual ~tt__VideoSource() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioSource
#define SOAP_TYPE_tt__AudioSource (359)
/* tt:AudioSource */
class SOAP_CMAC tt__AudioSource : public tt__DeviceEntity
{
public:
	int Channels;	/* required element of type xsd:int */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 359; } /* = unique type id SOAP_TYPE_tt__AudioSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioSource() { tt__AudioSource::soap_default(NULL); }
	virtual ~tt__AudioSource() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfiguration
#define SOAP_TYPE_tt__VideoSourceConfiguration (364)
/* tt:VideoSourceConfiguration */
class SOAP_CMAC tt__VideoSourceConfiguration : public tt__ConfigurationEntity
{
public:
	std::string SourceToken;	/* required element of type tt:ReferenceToken */
	tt__IntRectangle *Bounds;	/* required element of type tt:IntRectangle */
	std::vector<char * >__any;
	tt__VideoSourceConfigurationExtension *Extension;	/* optional element of type tt:VideoSourceConfigurationExtension */
	std::string *ViewMode;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 364; } /* = unique type id SOAP_TYPE_tt__VideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceConfiguration() { tt__VideoSourceConfiguration::soap_default(NULL); }
	virtual ~tt__VideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoEncoderConfiguration
#define SOAP_TYPE_tt__VideoEncoderConfiguration (378)
/* tt:VideoEncoderConfiguration */
class SOAP_CMAC tt__VideoEncoderConfiguration : public tt__ConfigurationEntity
{
public:
	enum tt__VideoEncoding Encoding;	/* required element of type tt:VideoEncoding */
	tt__VideoResolution *Resolution;	/* required element of type tt:VideoResolution */
	float Quality;	/* required element of type xsd:float */
	tt__VideoRateControl *RateControl;	/* optional element of type tt:VideoRateControl */
	tt__Mpeg4Configuration *MPEG4;	/* optional element of type tt:Mpeg4Configuration */
	tt__H264Configuration *H264;	/* optional element of type tt:H264Configuration */
	tt__MulticastConfiguration *Multicast;	/* required element of type tt:MulticastConfiguration */
	LONG64 SessionTimeout;	/* external */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 378; } /* = unique type id SOAP_TYPE_tt__VideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoEncoderConfiguration() { tt__VideoEncoderConfiguration::soap_default(NULL); }
	virtual ~tt__VideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__JpegOptions2
#define SOAP_TYPE_tt__JpegOptions2 (387)
/* tt:JpegOptions2 */
class SOAP_CMAC tt__JpegOptions2 : public tt__JpegOptions
{
public:
	tt__IntRange *BitrateRange;	/* required element of type tt:IntRange */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 387; } /* = unique type id SOAP_TYPE_tt__JpegOptions2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__JpegOptions2() { tt__JpegOptions2::soap_default(NULL); }
	virtual ~tt__JpegOptions2() { }
};
#endif

#ifndef SOAP_TYPE_tt__Mpeg4Options2
#define SOAP_TYPE_tt__Mpeg4Options2 (389)
/* tt:Mpeg4Options2 */
class SOAP_CMAC tt__Mpeg4Options2 : public tt__Mpeg4Options
{
public:
	tt__IntRange *BitrateRange;	/* required element of type tt:IntRange */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 389; } /* = unique type id SOAP_TYPE_tt__Mpeg4Options2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Mpeg4Options2() { tt__Mpeg4Options2::soap_default(NULL); }
	virtual ~tt__Mpeg4Options2() { }
};
#endif

#ifndef SOAP_TYPE_tt__H264Options2
#define SOAP_TYPE_tt__H264Options2 (391)
/* tt:H264Options2 */
class SOAP_CMAC tt__H264Options2 : public tt__H264Options
{
public:
	tt__IntRange *BitrateRange;	/* required element of type tt:IntRange */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 391; } /* = unique type id SOAP_TYPE_tt__H264Options2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__H264Options2() { tt__H264Options2::soap_default(NULL); }
	virtual ~tt__H264Options2() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoEncoder2Configuration
#define SOAP_TYPE_tt__VideoEncoder2Configuration (392)
/* tt:VideoEncoder2Configuration */
class SOAP_CMAC tt__VideoEncoder2Configuration : public tt__ConfigurationEntity
{
public:
	std::string Encoding;	/* required element of type xsd:string */
	tt__VideoResolution2 *Resolution;	/* required element of type tt:VideoResolution2 */
	tt__VideoRateControl2 *RateControl;	/* optional element of type tt:VideoRateControl2 */
	tt__MulticastConfiguration *Multicast;	/* optional element of type tt:MulticastConfiguration */
	float Quality;	/* required element of type xsd:float */
	std::vector<char * >__any;
	int *GovLength;	/* optional attribute */
	std::string *Profile;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 392; } /* = unique type id SOAP_TYPE_tt__VideoEncoder2Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoEncoder2Configuration() { tt__VideoEncoder2Configuration::soap_default(NULL); }
	virtual ~tt__VideoEncoder2Configuration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioSourceConfiguration
#define SOAP_TYPE_tt__AudioSourceConfiguration (396)
/* tt:AudioSourceConfiguration */
class SOAP_CMAC tt__AudioSourceConfiguration : public tt__ConfigurationEntity
{
public:
	std::string SourceToken;	/* required element of type tt:ReferenceToken */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 396; } /* = unique type id SOAP_TYPE_tt__AudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioSourceConfiguration() { tt__AudioSourceConfiguration::soap_default(NULL); }
	virtual ~tt__AudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioEncoderConfiguration
#define SOAP_TYPE_tt__AudioEncoderConfiguration (399)
/* tt:AudioEncoderConfiguration */
class SOAP_CMAC tt__AudioEncoderConfiguration : public tt__ConfigurationEntity
{
public:
	enum tt__AudioEncoding Encoding;	/* required element of type tt:AudioEncoding */
	int Bitrate;	/* required element of type xsd:int */
	int SampleRate;	/* required element of type xsd:int */
	tt__MulticastConfiguration *Multicast;	/* required element of type tt:MulticastConfiguration */
	LONG64 SessionTimeout;	/* external */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 399; } /* = unique type id SOAP_TYPE_tt__AudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioEncoderConfiguration() { tt__AudioEncoderConfiguration::soap_default(NULL); }
	virtual ~tt__AudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioEncoder2Configuration
#define SOAP_TYPE_tt__AudioEncoder2Configuration (402)
/* tt:AudioEncoder2Configuration */
class SOAP_CMAC tt__AudioEncoder2Configuration : public tt__ConfigurationEntity
{
public:
	std::string Encoding;	/* required element of type xsd:string */
	tt__MulticastConfiguration *Multicast;	/* optional element of type tt:MulticastConfiguration */
	int Bitrate;	/* required element of type xsd:int */
	int SampleRate;	/* required element of type xsd:int */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 402; } /* = unique type id SOAP_TYPE_tt__AudioEncoder2Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioEncoder2Configuration() { tt__AudioEncoder2Configuration::soap_default(NULL); }
	virtual ~tt__AudioEncoder2Configuration() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoAnalyticsConfiguration
#define SOAP_TYPE_tt__VideoAnalyticsConfiguration (404)
/* tt:VideoAnalyticsConfiguration */
class SOAP_CMAC tt__VideoAnalyticsConfiguration : public tt__ConfigurationEntity
{
public:
	tt__AnalyticsEngineConfiguration *AnalyticsEngineConfiguration;	/* required element of type tt:AnalyticsEngineConfiguration */
	tt__RuleEngineConfiguration *RuleEngineConfiguration;	/* required element of type tt:RuleEngineConfiguration */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 404; } /* = unique type id SOAP_TYPE_tt__VideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoAnalyticsConfiguration() { tt__VideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~tt__VideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataConfiguration
#define SOAP_TYPE_tt__MetadataConfiguration (405)
/* tt:MetadataConfiguration */
class SOAP_CMAC tt__MetadataConfiguration : public tt__ConfigurationEntity
{
public:
	tt__PTZFilter *PTZStatus;	/* optional element of type tt:PTZFilter */
	tt__EventSubscription *Events;	/* optional element of type tt:EventSubscription */
	bool *Analytics;	/* optional element of type xsd:boolean */
	tt__MulticastConfiguration *Multicast;	/* required element of type tt:MulticastConfiguration */
	LONG64 SessionTimeout;	/* external */
	std::vector<char * >__any;
	tt__AnalyticsEngineConfiguration *AnalyticsEngineConfiguration;	/* optional element of type tt:AnalyticsEngineConfiguration */
	tt__MetadataConfigurationExtension *Extension;	/* optional element of type tt:MetadataConfigurationExtension */
	std::string *CompressionType;	/* optional attribute */
	bool *GeoLocation;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 405; } /* = unique type id SOAP_TYPE_tt__MetadataConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataConfiguration() { tt__MetadataConfiguration::soap_default(NULL); }
	virtual ~tt__MetadataConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoOutput
#define SOAP_TYPE_tt__VideoOutput (414)
/* tt:VideoOutput */
class SOAP_CMAC tt__VideoOutput : public tt__DeviceEntity
{
public:
	tt__Layout *Layout;	/* required element of type tt:Layout */
	tt__VideoResolution *Resolution;	/* optional element of type tt:VideoResolution */
	float *RefreshRate;	/* optional element of type xsd:float */
	float *AspectRatio;	/* optional element of type xsd:float */
	tt__VideoOutputExtension *Extension;	/* optional element of type tt:VideoOutputExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 414; } /* = unique type id SOAP_TYPE_tt__VideoOutput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoOutput() { tt__VideoOutput::soap_default(NULL); }
	virtual ~tt__VideoOutput() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoOutputConfiguration
#define SOAP_TYPE_tt__VideoOutputConfiguration (416)
/* tt:VideoOutputConfiguration */
class SOAP_CMAC tt__VideoOutputConfiguration : public tt__ConfigurationEntity
{
public:
	std::string OutputToken;	/* required element of type tt:ReferenceToken */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 416; } /* = unique type id SOAP_TYPE_tt__VideoOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoOutputConfiguration() { tt__VideoOutputConfiguration::soap_default(NULL); }
	virtual ~tt__VideoOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioOutput
#define SOAP_TYPE_tt__AudioOutput (423)
/* tt:AudioOutput */
class SOAP_CMAC tt__AudioOutput : public tt__DeviceEntity
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 423; } /* = unique type id SOAP_TYPE_tt__AudioOutput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioOutput() { tt__AudioOutput::soap_default(NULL); }
	virtual ~tt__AudioOutput() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioOutputConfiguration
#define SOAP_TYPE_tt__AudioOutputConfiguration (424)
/* tt:AudioOutputConfiguration */
class SOAP_CMAC tt__AudioOutputConfiguration : public tt__ConfigurationEntity
{
public:
	std::string OutputToken;	/* required element of type tt:ReferenceToken */
	std::string *SendPrimacy;	/* optional element of type xsd:anyURI */
	int OutputLevel;	/* required element of type xsd:int */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 424; } /* = unique type id SOAP_TYPE_tt__AudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioOutputConfiguration() { tt__AudioOutputConfiguration::soap_default(NULL); }
	virtual ~tt__AudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioDecoderConfiguration
#define SOAP_TYPE_tt__AudioDecoderConfiguration (426)
/* tt:AudioDecoderConfiguration */
class SOAP_CMAC tt__AudioDecoderConfiguration : public tt__ConfigurationEntity
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 426; } /* = unique type id SOAP_TYPE_tt__AudioDecoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioDecoderConfiguration() { tt__AudioDecoderConfiguration::soap_default(NULL); }
	virtual ~tt__AudioDecoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterface
#define SOAP_TYPE_tt__NetworkInterface (437)
/* tt:NetworkInterface */
class SOAP_CMAC tt__NetworkInterface : public tt__DeviceEntity
{
public:
	bool Enabled;	/* required element of type xsd:boolean */
	tt__NetworkInterfaceInfo *Info;	/* optional element of type tt:NetworkInterfaceInfo */
	tt__NetworkInterfaceLink *Link;	/* optional element of type tt:NetworkInterfaceLink */
	tt__IPv4NetworkInterface *IPv4;	/* optional element of type tt:IPv4NetworkInterface */
	tt__IPv6NetworkInterface *IPv6;	/* optional element of type tt:IPv6NetworkInterface */
	tt__NetworkInterfaceExtension *Extension;	/* optional element of type tt:NetworkInterfaceExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 437; } /* = unique type id SOAP_TYPE_tt__NetworkInterface */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterface() { tt__NetworkInterface::soap_default(NULL); }
	virtual ~tt__NetworkInterface() { }
};
#endif

#ifndef SOAP_TYPE_tt__CertificateUsage
#define SOAP_TYPE_tt__CertificateUsage (541)
/* Primitive tt:CertificateUsage schema type: */
class SOAP_CMAC tt__CertificateUsage : public xsd__anyType
{
public:
	std::string __item;
	bool Critical;	/* required attribute */
public:
	virtual int soap_type() const { return 541; } /* = unique type id SOAP_TYPE_tt__CertificateUsage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CertificateUsage() { tt__CertificateUsage::soap_default(NULL); }
	virtual ~tt__CertificateUsage() { }
};
#endif

#ifndef SOAP_TYPE_tt__RelayOutput
#define SOAP_TYPE_tt__RelayOutput (550)
/* tt:RelayOutput */
class SOAP_CMAC tt__RelayOutput : public tt__DeviceEntity
{
public:
	tt__RelayOutputSettings *Properties;	/* required element of type tt:RelayOutputSettings */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 550; } /* = unique type id SOAP_TYPE_tt__RelayOutput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RelayOutput() { tt__RelayOutput::soap_default(NULL); }
	virtual ~tt__RelayOutput() { }
};
#endif

#ifndef SOAP_TYPE_tt__DigitalInput
#define SOAP_TYPE_tt__DigitalInput (551)
/* tt:DigitalInput */
class SOAP_CMAC tt__DigitalInput : public tt__DeviceEntity
{
public:
	std::vector<char * >__any;
	enum tt__DigitalIdleState *IdleState;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 551; } /* = unique type id SOAP_TYPE_tt__DigitalInput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DigitalInput() { tt__DigitalInput::soap_default(NULL); }
	virtual ~tt__DigitalInput() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZNode
#define SOAP_TYPE_tt__PTZNode (552)
/* tt:PTZNode */
class SOAP_CMAC tt__PTZNode : public tt__DeviceEntity
{
public:
	std::string *Name;	/* optional element of type tt:Name */
	tt__PTZSpaces *SupportedPTZSpaces;	/* required element of type tt:PTZSpaces */
	int MaximumNumberOfPresets;	/* required element of type xsd:int */
	bool HomeSupported;	/* required element of type xsd:boolean */
	std::vector<std::string >AuxiliaryCommands;	/* optional element of type tt:AuxiliaryData */
	tt__PTZNodeExtension *Extension;	/* optional element of type tt:PTZNodeExtension */
	bool *FixedHomePosition;	/* optional attribute */
	bool *GeoMove;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 552; } /* = unique type id SOAP_TYPE_tt__PTZNode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZNode() { tt__PTZNode::soap_default(NULL); }
	virtual ~tt__PTZNode() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZConfiguration
#define SOAP_TYPE_tt__PTZConfiguration (557)
/* tt:PTZConfiguration */
class SOAP_CMAC tt__PTZConfiguration : public tt__ConfigurationEntity
{
public:
	std::string NodeToken;	/* required element of type tt:ReferenceToken */
	std::string *DefaultAbsolutePantTiltPositionSpace;	/* optional element of type xsd:anyURI */
	std::string *DefaultAbsoluteZoomPositionSpace;	/* optional element of type xsd:anyURI */
	std::string *DefaultRelativePanTiltTranslationSpace;	/* optional element of type xsd:anyURI */
	std::string *DefaultRelativeZoomTranslationSpace;	/* optional element of type xsd:anyURI */
	std::string *DefaultContinuousPanTiltVelocitySpace;	/* optional element of type xsd:anyURI */
	std::string *DefaultContinuousZoomVelocitySpace;	/* optional element of type xsd:anyURI */
	tt__PTZSpeed *DefaultPTZSpeed;	/* optional element of type tt:PTZSpeed */
	LONG64 *DefaultPTZTimeout;	/* optional element of type xsd:duration */
	tt__PanTiltLimits *PanTiltLimits;	/* optional element of type tt:PanTiltLimits */
	tt__ZoomLimits *ZoomLimits;	/* optional element of type tt:ZoomLimits */
	tt__PTZConfigurationExtension *Extension;	/* optional element of type tt:PTZConfigurationExtension */
	int *MoveRamp;	/* optional attribute */
	int *PresetRamp;	/* optional attribute */
	int *PresetTourRamp;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 557; } /* = unique type id SOAP_TYPE_tt__PTZConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZConfiguration() { tt__PTZConfiguration::soap_default(NULL); }
	virtual ~tt__PTZConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__EventFilter
#define SOAP_TYPE_tt__EventFilter (708)
/* tt:EventFilter */
class SOAP_CMAC tt__EventFilter : public wsnt__FilterType
{
public:
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 708; } /* = unique type id SOAP_TYPE_tt__EventFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EventFilter() { tt__EventFilter::soap_default(NULL); }
	virtual ~tt__EventFilter() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngine
#define SOAP_TYPE_tt__AnalyticsEngine (744)
/* tt:AnalyticsEngine */
class SOAP_CMAC tt__AnalyticsEngine : public tt__ConfigurationEntity
{
public:
	tt__AnalyticsDeviceEngineConfiguration *AnalyticsEngineConfiguration;	/* required element of type tt:AnalyticsDeviceEngineConfiguration */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 744; } /* = unique type id SOAP_TYPE_tt__AnalyticsEngine */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsEngine() { tt__AnalyticsEngine::soap_default(NULL); }
	virtual ~tt__AnalyticsEngine() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineInput
#define SOAP_TYPE_tt__AnalyticsEngineInput (750)
/* tt:AnalyticsEngineInput */
class SOAP_CMAC tt__AnalyticsEngineInput : public tt__ConfigurationEntity
{
public:
	tt__SourceIdentification *SourceIdentification;	/* required element of type tt:SourceIdentification */
	tt__VideoEncoderConfiguration *VideoInput;	/* required element of type tt:VideoEncoderConfiguration */
	tt__MetadataInput *MetadataInput;	/* required element of type tt:MetadataInput */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 750; } /* = unique type id SOAP_TYPE_tt__AnalyticsEngineInput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsEngineInput() { tt__AnalyticsEngineInput::soap_default(NULL); }
	virtual ~tt__AnalyticsEngineInput() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineControl
#define SOAP_TYPE_tt__AnalyticsEngineControl (755)
/* tt:AnalyticsEngineControl */
class SOAP_CMAC tt__AnalyticsEngineControl : public tt__ConfigurationEntity
{
public:
	std::string EngineToken;	/* required element of type tt:ReferenceToken */
	std::string EngineConfigToken;	/* required element of type tt:ReferenceToken */
	std::vector<std::string >InputToken;	/* required element of type tt:ReferenceToken */
	std::vector<std::string >ReceiverToken;	/* required element of type tt:ReferenceToken */
	tt__MulticastConfiguration *Multicast;	/* optional element of type tt:MulticastConfiguration */
	tt__Config *Subscription;	/* required element of type tt:Config */
	enum tt__ModeOfOperation Mode;	/* required element of type tt:ModeOfOperation */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 755; } /* = unique type id SOAP_TYPE_tt__AnalyticsEngineControl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsEngineControl() { tt__AnalyticsEngineControl::soap_default(NULL); }
	virtual ~tt__AnalyticsEngineControl() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDConfiguration
#define SOAP_TYPE_tt__OSDConfiguration (782)
/* tt:OSDConfiguration */
class SOAP_CMAC tt__OSDConfiguration : public tt__DeviceEntity
{
public:
	class tt__OSDReference *VideoSourceConfigurationToken;	/* required element of type tt:OSDReference */
	enum tt__OSDType Type;	/* required element of type tt:OSDType */
	tt__OSDPosConfiguration *Position;	/* required element of type tt:OSDPosConfiguration */
	tt__OSDTextConfiguration *TextString;	/* optional element of type tt:OSDTextConfiguration */
	tt__OSDImgConfiguration *Image;	/* optional element of type tt:OSDImgConfiguration */
	tt__OSDConfigurationExtension *Extension;	/* optional element of type tt:OSDConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 782; } /* = unique type id SOAP_TYPE_tt__OSDConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDConfiguration() { tt__OSDConfiguration::soap_default(NULL); }
	virtual ~tt__OSDConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType
#define SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType (815)
/* wsnt:SubscribeCreationFailedFaultType */
class SOAP_CMAC wsnt__SubscribeCreationFailedFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 815; } /* = unique type id SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__SubscribeCreationFailedFaultType() { wsnt__SubscribeCreationFailedFaultType::soap_default(NULL); }
	virtual ~wsnt__SubscribeCreationFailedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__InvalidFilterFaultType
#define SOAP_TYPE_wsnt__InvalidFilterFaultType (816)
/* wsnt:InvalidFilterFaultType */
class SOAP_CMAC wsnt__InvalidFilterFaultType : public wsrfbf__BaseFaultType
{
public:
	std::vector<std::string >UnknownFilter;	/* required element of type xsd:QName */
public:
	virtual int soap_type() const { return 816; } /* = unique type id SOAP_TYPE_wsnt__InvalidFilterFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__InvalidFilterFaultType() { wsnt__InvalidFilterFaultType::soap_default(NULL); }
	virtual ~wsnt__InvalidFilterFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType
#define SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType (817)
/* wsnt:TopicExpressionDialectUnknownFaultType */
class SOAP_CMAC wsnt__TopicExpressionDialectUnknownFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 817; } /* = unique type id SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__TopicExpressionDialectUnknownFaultType() { wsnt__TopicExpressionDialectUnknownFaultType::soap_default(NULL); }
	virtual ~wsnt__TopicExpressionDialectUnknownFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType (818)
/* wsnt:InvalidTopicExpressionFaultType */
class SOAP_CMAC wsnt__InvalidTopicExpressionFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 818; } /* = unique type id SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__InvalidTopicExpressionFaultType() { wsnt__InvalidTopicExpressionFaultType::soap_default(NULL); }
	virtual ~wsnt__InvalidTopicExpressionFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__TopicNotSupportedFaultType
#define SOAP_TYPE_wsnt__TopicNotSupportedFaultType (819)
/* wsnt:TopicNotSupportedFaultType */
class SOAP_CMAC wsnt__TopicNotSupportedFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 819; } /* = unique type id SOAP_TYPE_wsnt__TopicNotSupportedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__TopicNotSupportedFaultType() { wsnt__TopicNotSupportedFaultType::soap_default(NULL); }
	virtual ~wsnt__TopicNotSupportedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType
#define SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType (820)
/* wsnt:MultipleTopicsSpecifiedFaultType */
class SOAP_CMAC wsnt__MultipleTopicsSpecifiedFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 820; } /* = unique type id SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__MultipleTopicsSpecifiedFaultType() { wsnt__MultipleTopicsSpecifiedFaultType::soap_default(NULL); }
	virtual ~wsnt__MultipleTopicsSpecifiedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType (821)
/* wsnt:InvalidProducerPropertiesExpressionFaultType */
class SOAP_CMAC wsnt__InvalidProducerPropertiesExpressionFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 821; } /* = unique type id SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__InvalidProducerPropertiesExpressionFaultType() { wsnt__InvalidProducerPropertiesExpressionFaultType::soap_default(NULL); }
	virtual ~wsnt__InvalidProducerPropertiesExpressionFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType (822)
/* wsnt:InvalidMessageContentExpressionFaultType */
class SOAP_CMAC wsnt__InvalidMessageContentExpressionFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 822; } /* = unique type id SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__InvalidMessageContentExpressionFaultType() { wsnt__InvalidMessageContentExpressionFaultType::soap_default(NULL); }
	virtual ~wsnt__InvalidMessageContentExpressionFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType
#define SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType (823)
/* wsnt:UnrecognizedPolicyRequestFaultType */
class SOAP_CMAC wsnt__UnrecognizedPolicyRequestFaultType : public wsrfbf__BaseFaultType
{
public:
	std::vector<std::string >UnrecognizedPolicy;	/* optional element of type xsd:QName */
public:
	virtual int soap_type() const { return 823; } /* = unique type id SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnrecognizedPolicyRequestFaultType() { wsnt__UnrecognizedPolicyRequestFaultType::soap_default(NULL); }
	virtual ~wsnt__UnrecognizedPolicyRequestFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType
#define SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType (824)
/* wsnt:UnsupportedPolicyRequestFaultType */
class SOAP_CMAC wsnt__UnsupportedPolicyRequestFaultType : public wsrfbf__BaseFaultType
{
public:
	std::vector<std::string >UnsupportedPolicy;	/* optional element of type xsd:QName */
public:
	virtual int soap_type() const { return 824; } /* = unique type id SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnsupportedPolicyRequestFaultType() { wsnt__UnsupportedPolicyRequestFaultType::soap_default(NULL); }
	virtual ~wsnt__UnsupportedPolicyRequestFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType
#define SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType (825)
/* wsnt:NotifyMessageNotSupportedFaultType */
class SOAP_CMAC wsnt__NotifyMessageNotSupportedFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 825; } /* = unique type id SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__NotifyMessageNotSupportedFaultType() { wsnt__NotifyMessageNotSupportedFaultType::soap_default(NULL); }
	virtual ~wsnt__NotifyMessageNotSupportedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType
#define SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType (826)
/* wsnt:UnacceptableInitialTerminationTimeFaultType */
class SOAP_CMAC wsnt__UnacceptableInitialTerminationTimeFaultType : public wsrfbf__BaseFaultType
{
public:
	time_t MinimumTime;	/* required element of type xsd:dateTime */
	time_t *MaximumTime;	/* optional element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 826; } /* = unique type id SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnacceptableInitialTerminationTimeFaultType() { wsnt__UnacceptableInitialTerminationTimeFaultType::soap_default(NULL); }
	virtual ~wsnt__UnacceptableInitialTerminationTimeFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType
#define SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType (827)
/* wsnt:NoCurrentMessageOnTopicFaultType */
class SOAP_CMAC wsnt__NoCurrentMessageOnTopicFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 827; } /* = unique type id SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__NoCurrentMessageOnTopicFaultType() { wsnt__NoCurrentMessageOnTopicFaultType::soap_default(NULL); }
	virtual ~wsnt__NoCurrentMessageOnTopicFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnableToGetMessagesFaultType
#define SOAP_TYPE_wsnt__UnableToGetMessagesFaultType (828)
/* wsnt:UnableToGetMessagesFaultType */
class SOAP_CMAC wsnt__UnableToGetMessagesFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 828; } /* = unique type id SOAP_TYPE_wsnt__UnableToGetMessagesFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnableToGetMessagesFaultType() { wsnt__UnableToGetMessagesFaultType::soap_default(NULL); }
	virtual ~wsnt__UnableToGetMessagesFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType
#define SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType (829)
/* wsnt:UnableToDestroyPullPointFaultType */
class SOAP_CMAC wsnt__UnableToDestroyPullPointFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 829; } /* = unique type id SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnableToDestroyPullPointFaultType() { wsnt__UnableToDestroyPullPointFaultType::soap_default(NULL); }
	virtual ~wsnt__UnableToDestroyPullPointFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType
#define SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType (830)
/* wsnt:UnableToCreatePullPointFaultType */
class SOAP_CMAC wsnt__UnableToCreatePullPointFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 830; } /* = unique type id SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnableToCreatePullPointFaultType() { wsnt__UnableToCreatePullPointFaultType::soap_default(NULL); }
	virtual ~wsnt__UnableToCreatePullPointFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType
#define SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType (831)
/* wsnt:UnacceptableTerminationTimeFaultType */
class SOAP_CMAC wsnt__UnacceptableTerminationTimeFaultType : public wsrfbf__BaseFaultType
{
public:
	time_t MinimumTime;	/* required element of type xsd:dateTime */
	time_t *MaximumTime;	/* optional element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 831; } /* = unique type id SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnacceptableTerminationTimeFaultType() { wsnt__UnacceptableTerminationTimeFaultType::soap_default(NULL); }
	virtual ~wsnt__UnacceptableTerminationTimeFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType
#define SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType (832)
/* wsnt:UnableToDestroySubscriptionFaultType */
class SOAP_CMAC wsnt__UnableToDestroySubscriptionFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 832; } /* = unique type id SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnableToDestroySubscriptionFaultType() { wsnt__UnableToDestroySubscriptionFaultType::soap_default(NULL); }
	virtual ~wsnt__UnableToDestroySubscriptionFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__PauseFailedFaultType
#define SOAP_TYPE_wsnt__PauseFailedFaultType (833)
/* wsnt:PauseFailedFaultType */
class SOAP_CMAC wsnt__PauseFailedFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 833; } /* = unique type id SOAP_TYPE_wsnt__PauseFailedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__PauseFailedFaultType() { wsnt__PauseFailedFaultType::soap_default(NULL); }
	virtual ~wsnt__PauseFailedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__ResumeFailedFaultType
#define SOAP_TYPE_wsnt__ResumeFailedFaultType (834)
/* wsnt:ResumeFailedFaultType */
class SOAP_CMAC wsnt__ResumeFailedFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 834; } /* = unique type id SOAP_TYPE_wsnt__ResumeFailedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__ResumeFailedFaultType() { wsnt__ResumeFailedFaultType::soap_default(NULL); }
	virtual ~wsnt__ResumeFailedFaultType() { }
};
#endif

#ifndef SOAP_TYPE__wstop__TopicNamespaceType_Topic
#define SOAP_TYPE__wstop__TopicNamespaceType_Topic (3243)
/* wstop:TopicNamespaceType-Topic */
class SOAP_CMAC _wstop__TopicNamespaceType_Topic
{
public:
	wstop__Documentation *documentation;	/* optional element of type wstop:Documentation */
	char *__anyAttribute;	/* optional attribute */
	wstop__QueryExpressionType *MessagePattern;	/* optional element of type wstop:QueryExpressionType */
	std::vector<class wstop__TopicType * >Topic;	/* optional element of type wstop:TopicType */
	std::vector<char * >__any;
	std::string name;	/* required attribute */
	std::string *messageTypes;	/* optional attribute */
	bool final;	/* optional attribute */
	std::string *parent;	/* optional attribute */
public:
	virtual int soap_type() const { return 3243; } /* = unique type id SOAP_TYPE__wstop__TopicNamespaceType_Topic */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wstop__TopicNamespaceType_Topic() { _wstop__TopicNamespaceType_Topic::soap_default(NULL); }
	virtual ~_wstop__TopicNamespaceType_Topic() { }
};
#endif

#ifndef SOAP_TYPE_wstop__TopicNamespaceType
#define SOAP_TYPE_wstop__TopicNamespaceType (861)
/* wstop:TopicNamespaceType */
class SOAP_CMAC wstop__TopicNamespaceType : public wstop__ExtensibleDocumented
{
public:
	std::vector<_wstop__TopicNamespaceType_Topic >*Topic;	/* optional element of type wstop:TopicNamespaceType-Topic */
	std::vector<char * >__any;
	std::string *name;	/* optional attribute */
	std::string targetNamespace;	/* required attribute */
	bool final;	/* optional attribute */
public:
	virtual int soap_type() const { return 861; } /* = unique type id SOAP_TYPE_wstop__TopicNamespaceType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__TopicNamespaceType() { wstop__TopicNamespaceType::soap_default(NULL); }
	virtual ~wstop__TopicNamespaceType() { }
};
#endif

#ifndef SOAP_TYPE_wstop__TopicType
#define SOAP_TYPE_wstop__TopicType (862)
/* wstop:TopicType */
class SOAP_CMAC wstop__TopicType : public wstop__ExtensibleDocumented
{
public:
	wstop__QueryExpressionType *MessagePattern;	/* optional element of type wstop:QueryExpressionType */
	std::vector<wstop__TopicType * >Topic;	/* optional element of type wstop:TopicType */
	std::vector<char * >__any;
	std::string name;	/* required attribute */
	std::string *messageTypes;	/* optional attribute */
	bool final;	/* optional attribute */
public:
	virtual int soap_type() const { return 862; } /* = unique type id SOAP_TYPE_wstop__TopicType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__TopicType() { wstop__TopicType::soap_default(NULL); }
	virtual ~wstop__TopicType() { }
};
#endif

#ifndef SOAP_TYPE_wstop__TopicSetType
#define SOAP_TYPE_wstop__TopicSetType (863)
/* wstop:TopicSetType */
class SOAP_CMAC wstop__TopicSetType : public wstop__ExtensibleDocumented
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 863; } /* = unique type id SOAP_TYPE_wstop__TopicSetType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__TopicSetType() { wstop__TopicSetType::soap_default(NULL); }
	virtual ~wstop__TopicSetType() { }
};
#endif

#ifndef SOAP_TYPE_ns6__AuthenticationProfileInfo
#define SOAP_TYPE_ns6__AuthenticationProfileInfo (1044)
/* ns6:AuthenticationProfileInfo */
class SOAP_CMAC ns6__AuthenticationProfileInfo : public ns2__DataEntity
{
public:
	std::string Name;	/* required element of type ns2:Name */
	std::string *Description;	/* optional element of type ns2:Description */
public:
	virtual int soap_type() const { return 1044; } /* = unique type id SOAP_TYPE_ns6__AuthenticationProfileInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__AuthenticationProfileInfo() { ns6__AuthenticationProfileInfo::soap_default(NULL); }
	virtual ~ns6__AuthenticationProfileInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns6__SecurityLevelInfo
#define SOAP_TYPE_ns6__SecurityLevelInfo (1055)
/* ns6:SecurityLevelInfo */
class SOAP_CMAC ns6__SecurityLevelInfo : public ns2__DataEntity
{
public:
	std::string Name;	/* required element of type ns2:Name */
	int Priority;	/* required element of type xsd:int */
	std::string *Description;	/* optional element of type ns2:Description */
public:
	virtual int soap_type() const { return 1055; } /* = unique type id SOAP_TYPE_ns6__SecurityLevelInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__SecurityLevelInfo() { ns6__SecurityLevelInfo::soap_default(NULL); }
	virtual ~ns6__SecurityLevelInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns7__CredentialInfo
#define SOAP_TYPE_ns7__CredentialInfo (1094)
/* ns7:CredentialInfo */
class SOAP_CMAC ns7__CredentialInfo : public ns2__DataEntity
{
public:
	std::string *Description;	/* optional element of type ns2:Description */
	std::string CredentialHolderReference;	/* required element of type xsd:string */
	time_t *ValidFrom;	/* optional element of type xsd:dateTime */
	time_t *ValidTo;	/* optional element of type xsd:dateTime */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1094; } /* = unique type id SOAP_TYPE_ns7__CredentialInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__CredentialInfo() { ns7__CredentialInfo::soap_default(NULL); }
	virtual ~ns7__CredentialInfo() { }
};
#endif

#ifndef SOAP_TYPE_tmd__SerialPort
#define SOAP_TYPE_tmd__SerialPort (1156)
/* tmd:SerialPort */
class SOAP_CMAC tmd__SerialPort : public tt__DeviceEntity
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1156; } /* = unique type id SOAP_TYPE_tmd__SerialPort */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__SerialPort() { tmd__SerialPort::soap_default(NULL); }
	virtual ~tmd__SerialPort() { }
};
#endif

#ifndef SOAP_TYPE_tds__StorageConfiguration
#define SOAP_TYPE_tds__StorageConfiguration (1216)
/* tds:StorageConfiguration */
class SOAP_CMAC tds__StorageConfiguration : public tt__DeviceEntity
{
public:
	tds__StorageConfigurationData *Data;	/* required element of type tds:StorageConfigurationData */
public:
	virtual int soap_type() const { return 1216; } /* = unique type id SOAP_TYPE_tds__StorageConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tds__StorageConfiguration() { tds__StorageConfiguration::soap_default(NULL); }
	virtual ~tds__StorageConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_ns8__DoorInfoBase
#define SOAP_TYPE_ns8__DoorInfoBase (1419)
/* ns8:DoorInfoBase */
class SOAP_CMAC ns8__DoorInfoBase : public ns2__DataEntity
{
public:
	std::string Name;	/* required element of type ns2:Name */
	std::string *Description;	/* optional element of type ns2:Description */
public:
	virtual int soap_type() const { return 1419; } /* = unique type id SOAP_TYPE_ns8__DoorInfoBase */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__DoorInfoBase() { ns8__DoorInfoBase::soap_default(NULL); }
	virtual ~ns8__DoorInfoBase() { }
};
#endif

#ifndef SOAP_TYPE_wsrfr__ResourceUnknownFaultType
#define SOAP_TYPE_wsrfr__ResourceUnknownFaultType (1483)
/* wsrfr:ResourceUnknownFaultType */
class SOAP_CMAC wsrfr__ResourceUnknownFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 1483; } /* = unique type id SOAP_TYPE_wsrfr__ResourceUnknownFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsrfr__ResourceUnknownFaultType() { wsrfr__ResourceUnknownFaultType::soap_default(NULL); }
	virtual ~wsrfr__ResourceUnknownFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsrfr__ResourceUnavailableFaultType
#define SOAP_TYPE_wsrfr__ResourceUnavailableFaultType (1484)
/* wsrfr:ResourceUnavailableFaultType */
class SOAP_CMAC wsrfr__ResourceUnavailableFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 1484; } /* = unique type id SOAP_TYPE_wsrfr__ResourceUnavailableFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsrfr__ResourceUnavailableFaultType() { wsrfr__ResourceUnavailableFaultType::soap_default(NULL); }
	virtual ~wsrfr__ResourceUnavailableFaultType() { }
};
#endif

#ifndef SOAP_TYPE_ns11__ScheduleInfo
#define SOAP_TYPE_ns11__ScheduleInfo (1897)
/* ns11:ScheduleInfo */
class SOAP_CMAC ns11__ScheduleInfo : public ns2__DataEntity
{
public:
	std::string Name;	/* required element of type ns2:Name */
	std::string *Description;	/* optional element of type ns2:Description */
public:
	virtual int soap_type() const { return 1897; } /* = unique type id SOAP_TYPE_ns11__ScheduleInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns11__ScheduleInfo() { ns11__ScheduleInfo::soap_default(NULL); }
	virtual ~ns11__ScheduleInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns11__SpecialDayGroupInfo
#define SOAP_TYPE_ns11__SpecialDayGroupInfo (1906)
/* ns11:SpecialDayGroupInfo */
class SOAP_CMAC ns11__SpecialDayGroupInfo : public ns2__DataEntity
{
public:
	std::string Name;	/* required element of type ns2:Name */
	std::string *Description;	/* optional element of type ns2:Description */
public:
	virtual int soap_type() const { return 1906; } /* = unique type id SOAP_TYPE_ns11__SpecialDayGroupInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns11__SpecialDayGroupInfo() { ns11__SpecialDayGroupInfo::soap_default(NULL); }
	virtual ~ns11__SpecialDayGroupInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AccessPointInfo
#define SOAP_TYPE_ns1__AccessPointInfo (194)
/* ns1:AccessPointInfo */
class SOAP_CMAC ns1__AccessPointInfo : public ns1__AccessPointInfoBase
{
public:
	ns1__AccessPointCapabilities *Capabilities;	/* required element of type ns1:AccessPointCapabilities */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 194; } /* = unique type id SOAP_TYPE_ns1__AccessPointInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AccessPointInfo() { ns1__AccessPointInfo::soap_default(NULL); }
	virtual ~ns1__AccessPointInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AreaInfo
#define SOAP_TYPE_ns1__AreaInfo (200)
/* ns1:AreaInfo */
class SOAP_CMAC ns1__AreaInfo : public ns1__AreaInfoBase
{
public:
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 200; } /* = unique type id SOAP_TYPE_ns1__AreaInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AreaInfo() { ns1__AreaInfo::soap_default(NULL); }
	virtual ~ns1__AreaInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns3__AccessProfile
#define SOAP_TYPE_ns3__AccessProfile (256)
/* ns3:AccessProfile */
class SOAP_CMAC ns3__AccessProfile : public ns3__AccessProfileInfo
{
public:
	std::vector<ns3__AccessPolicy * >AccessPolicy;	/* optional element of type ns3:AccessPolicy */
	ns3__AccessProfileExtension *Extension;	/* optional element of type ns3:AccessProfileExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 256; } /* = unique type id SOAP_TYPE_ns3__AccessProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__AccessProfile() { ns3__AccessProfile::soap_default(NULL); }
	virtual ~ns3__AccessProfile() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDReference
#define SOAP_TYPE_tt__OSDReference (766)
/* Primitive tt:OSDReference schema type: */
class SOAP_CMAC tt__OSDReference : public xsd__anyType
{
public:
	std::string __item;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 766; } /* = unique type id SOAP_TYPE_tt__OSDReference */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDReference() { tt__OSDReference::soap_default(NULL); }
	virtual ~tt__OSDReference() { }
};
#endif

#ifndef SOAP_TYPE_ns6__AuthenticationProfile
#define SOAP_TYPE_ns6__AuthenticationProfile (1045)
/* ns6:AuthenticationProfile */
class SOAP_CMAC ns6__AuthenticationProfile : public ns6__AuthenticationProfileInfo
{
public:
	std::string DefaultSecurityLevelToken;	/* required element of type ns2:ReferenceToken */
	std::vector<ns6__AuthenticationPolicy * >AuthenticationPolicy;	/* optional element of type ns6:AuthenticationPolicy */
	ns6__AuthenticationProfileExtension *Extension;	/* optional element of type ns6:AuthenticationProfileExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1045; } /* = unique type id SOAP_TYPE_ns6__AuthenticationProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__AuthenticationProfile() { ns6__AuthenticationProfile::soap_default(NULL); }
	virtual ~ns6__AuthenticationProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns6__SecurityLevel
#define SOAP_TYPE_ns6__SecurityLevel (1056)
/* ns6:SecurityLevel */
class SOAP_CMAC ns6__SecurityLevel : public ns6__SecurityLevelInfo
{
public:
	std::vector<ns6__RecognitionGroup * >RecognitionGroup;	/* optional element of type ns6:RecognitionGroup */
	ns6__SecurityLevelExtension *Extension;	/* optional element of type ns6:SecurityLevelExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1056; } /* = unique type id SOAP_TYPE_ns6__SecurityLevel */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__SecurityLevel() { ns6__SecurityLevel::soap_default(NULL); }
	virtual ~ns6__SecurityLevel() { }
};
#endif

#ifndef SOAP_TYPE_ns7__Credential
#define SOAP_TYPE_ns7__Credential (1095)
/* ns7:Credential */
class SOAP_CMAC ns7__Credential : public ns7__CredentialInfo
{
public:
	std::vector<ns7__CredentialIdentifier * >CredentialIdentifier;	/* required element of type ns7:CredentialIdentifier */
	std::vector<ns7__CredentialAccessProfile * >CredentialAccessProfile;	/* optional element of type ns7:CredentialAccessProfile */
	bool ExtendedGrantTime;	/* optional element of type xsd:boolean */
	std::vector<ns2__Attribute * >Attribute;	/* optional element of type ns2:Attribute */
	ns7__CredentialExtension *Extension;	/* optional element of type ns7:CredentialExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1095; } /* = unique type id SOAP_TYPE_ns7__Credential */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__Credential() { ns7__Credential::soap_default(NULL); }
	virtual ~ns7__Credential() { }
};
#endif

#ifndef SOAP_TYPE_ns8__DoorInfo
#define SOAP_TYPE_ns8__DoorInfo (1420)
/* ns8:DoorInfo */
class SOAP_CMAC ns8__DoorInfo : public ns8__DoorInfoBase
{
public:
	ns8__DoorCapabilities *Capabilities;	/* required element of type ns8:DoorCapabilities */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1420; } /* = unique type id SOAP_TYPE_ns8__DoorInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__DoorInfo() { ns8__DoorInfo::soap_default(NULL); }
	virtual ~ns8__DoorInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns11__Schedule
#define SOAP_TYPE_ns11__Schedule (1898)
/* ns11:Schedule */
class SOAP_CMAC ns11__Schedule : public ns11__ScheduleInfo
{
public:
	std::string Standard;	/* required element of type xsd:string */
	std::vector<ns11__SpecialDaysSchedule * >SpecialDays;	/* optional element of type ns11:SpecialDaysSchedule */
	ns11__ScheduleExtension *Extension;	/* optional element of type ns11:ScheduleExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1898; } /* = unique type id SOAP_TYPE_ns11__Schedule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns11__Schedule() { ns11__Schedule::soap_default(NULL); }
	virtual ~ns11__Schedule() { }
};
#endif

#ifndef SOAP_TYPE_ns11__SpecialDayGroup
#define SOAP_TYPE_ns11__SpecialDayGroup (1907)
/* ns11:SpecialDayGroup */
class SOAP_CMAC ns11__SpecialDayGroup : public ns11__SpecialDayGroupInfo
{
public:
	std::string *Days;	/* optional element of type xsd:string */
	ns11__SpecialDayGroupExtension *Extension;	/* optional element of type ns11:SpecialDayGroupExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1907; } /* = unique type id SOAP_TYPE_ns11__SpecialDayGroup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns11__SpecialDayGroup() { ns11__SpecialDayGroup::soap_default(NULL); }
	virtual ~ns11__SpecialDayGroup() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AccessPoint
#define SOAP_TYPE_ns1__AccessPoint (195)
/* ns1:AccessPoint */
class SOAP_CMAC ns1__AccessPoint : public ns1__AccessPointInfo
{
public:
	std::string *AuthenticationProfileToken;	/* optional element of type ns2:ReferenceToken */
	ns1__AccessPointExtension *Extension;	/* optional element of type ns1:AccessPointExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 195; } /* = unique type id SOAP_TYPE_ns1__AccessPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AccessPoint() { ns1__AccessPoint::soap_default(NULL); }
	virtual ~ns1__AccessPoint() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Area
#define SOAP_TYPE_ns1__Area (201)
/* ns1:Area */
class SOAP_CMAC ns1__Area : public ns1__AreaInfo
{
public:
	ns1__AreaExtension *Extension;	/* optional element of type ns1:AreaExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 201; } /* = unique type id SOAP_TYPE_ns1__Area */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Area() { ns1__Area::soap_default(NULL); }
	virtual ~ns1__Area() { }
};
#endif

#ifndef SOAP_TYPE_ns8__Door
#define SOAP_TYPE_ns8__Door (1421)
/* ns8:Door */
class SOAP_CMAC ns8__Door : public ns8__DoorInfo
{
public:
	std::string DoorType;	/* required element of type ns2:Name */
	ns8__Timings *Timings;	/* required element of type ns8:Timings */
	ns8__DoorExtension *Extension;	/* optional element of type ns8:DoorExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1421; } /* = unique type id SOAP_TYPE_ns8__Door */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__Door() { ns8__Door::soap_default(NULL); }
	virtual ~ns8__Door() { }
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (48)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	wsnt__InvalidFilterFaultType *wsnt__InvalidFilterFault;	/* optional element of type wsnt:InvalidFilterFaultType */
	wsnt__InvalidMessageContentExpressionFaultType *wsnt__InvalidMessageContentExpressionFault;	/* optional element of type wsnt:InvalidMessageContentExpressionFaultType */
	wsnt__InvalidProducerPropertiesExpressionFaultType *wsnt__InvalidProducerPropertiesExpressionFault;	/* optional element of type wsnt:InvalidProducerPropertiesExpressionFaultType */
	wsnt__InvalidTopicExpressionFaultType *wsnt__InvalidTopicExpressionFault;	/* optional element of type wsnt:InvalidTopicExpressionFaultType */
	wsnt__MultipleTopicsSpecifiedFaultType *wsnt__MultipleTopicsSpecifiedFault;	/* optional element of type wsnt:MultipleTopicsSpecifiedFaultType */
	wsnt__NoCurrentMessageOnTopicFaultType *wsnt__NoCurrentMessageOnTopicFault;	/* optional element of type wsnt:NoCurrentMessageOnTopicFaultType */
	wsnt__NotifyMessageNotSupportedFaultType *wsnt__NotifyMessageNotSupportedFault;	/* optional element of type wsnt:NotifyMessageNotSupportedFaultType */
	wsnt__PauseFailedFaultType *wsnt__PauseFailedFault;	/* optional element of type wsnt:PauseFailedFaultType */
	_tev__PullMessagesFaultResponse *tev__PullMessagesFaultResponse;	/* optional element of type tev:PullMessagesFaultResponse */
	wsrfr__ResourceUnknownFaultType *wsrfr__ResourceUnknownFault;	/* optional element of type wsrfr:ResourceUnknownFaultType */
	wsnt__ResumeFailedFaultType *wsnt__ResumeFailedFault;	/* optional element of type wsnt:ResumeFailedFaultType */
	wsnt__SubscribeCreationFailedFaultType *wsnt__SubscribeCreationFailedFault;	/* optional element of type wsnt:SubscribeCreationFailedFaultType */
	wsnt__TopicExpressionDialectUnknownFaultType *wsnt__TopicExpressionDialectUnknownFault;	/* optional element of type wsnt:TopicExpressionDialectUnknownFaultType */
	wsnt__TopicNotSupportedFaultType *wsnt__TopicNotSupportedFault;	/* optional element of type wsnt:TopicNotSupportedFaultType */
	wsnt__UnableToCreatePullPointFaultType *wsnt__UnableToCreatePullPointFault;	/* optional element of type wsnt:UnableToCreatePullPointFaultType */
	wsnt__UnableToDestroyPullPointFaultType *wsnt__UnableToDestroyPullPointFault;	/* optional element of type wsnt:UnableToDestroyPullPointFaultType */
	wsnt__UnableToDestroySubscriptionFaultType *wsnt__UnableToDestroySubscriptionFault;	/* optional element of type wsnt:UnableToDestroySubscriptionFaultType */
	wsnt__UnableToGetMessagesFaultType *wsnt__UnableToGetMessagesFault;	/* optional element of type wsnt:UnableToGetMessagesFaultType */
	wsnt__UnacceptableInitialTerminationTimeFaultType *wsnt__UnacceptableInitialTerminationTimeFault;	/* optional element of type wsnt:UnacceptableInitialTerminationTimeFaultType */
	wsnt__UnacceptableTerminationTimeFaultType *wsnt__UnacceptableTerminationTimeFault;	/* optional element of type wsnt:UnacceptableTerminationTimeFaultType */
	wsnt__UnrecognizedPolicyRequestFaultType *wsnt__UnrecognizedPolicyRequestFault;	/* optional element of type wsnt:UnrecognizedPolicyRequestFaultType */
	wsnt__UnsupportedPolicyRequestFaultType *wsnt__UnsupportedPolicyRequestFault;	/* optional element of type wsnt:UnsupportedPolicyRequestFaultType */
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 48; } /* = unique type id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef SOAP_TYPE___name__GetServiceCapabilities
#define SOAP_TYPE___name__GetServiceCapabilities (3299)
/* Operation wrapper: */
struct __name__GetServiceCapabilities
{
public:
	_ns5__GetServiceCapabilities *ns5__GetServiceCapabilities;	/* optional element of type ns5:GetServiceCapabilities */
public:
	int soap_type() const { return 3299; } /* = unique type id SOAP_TYPE___name__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___name10__Subscribe
#define SOAP_TYPE___name10__Subscribe (3303)
/* Operation wrapper: */
struct __name10__Subscribe
{
public:
	_wsnt__Subscribe *wsnt__Subscribe;	/* optional element of type wsnt:Subscribe */
public:
	int soap_type() const { return 3303; } /* = unique type id SOAP_TYPE___name10__Subscribe */
};
#endif

#ifndef SOAP_TYPE___name10__GetCurrentMessage
#define SOAP_TYPE___name10__GetCurrentMessage (3307)
/* Operation wrapper: */
struct __name10__GetCurrentMessage
{
public:
	_wsnt__GetCurrentMessage *wsnt__GetCurrentMessage;	/* optional element of type wsnt:GetCurrentMessage */
public:
	int soap_type() const { return 3307; } /* = unique type id SOAP_TYPE___name10__GetCurrentMessage */
};
#endif

#ifndef SOAP_TYPE___name11__Notify
#define SOAP_TYPE___name11__Notify (3310)
/* Operation wrapper: */
struct __name11__Notify
{
public:
	_wsnt__Notify *wsnt__Notify;	/* optional element of type wsnt:Notify */
public:
	int soap_type() const { return 3310; } /* = unique type id SOAP_TYPE___name11__Notify */
};
#endif

#ifndef SOAP_TYPE___name12__GetMessages
#define SOAP_TYPE___name12__GetMessages (3314)
/* Operation wrapper: */
struct __name12__GetMessages
{
public:
	_wsnt__GetMessages *wsnt__GetMessages;	/* optional element of type wsnt:GetMessages */
public:
	int soap_type() const { return 3314; } /* = unique type id SOAP_TYPE___name12__GetMessages */
};
#endif

#ifndef SOAP_TYPE___name12__DestroyPullPoint
#define SOAP_TYPE___name12__DestroyPullPoint (3318)
/* Operation wrapper: */
struct __name12__DestroyPullPoint
{
public:
	_wsnt__DestroyPullPoint *wsnt__DestroyPullPoint;	/* optional element of type wsnt:DestroyPullPoint */
public:
	int soap_type() const { return 3318; } /* = unique type id SOAP_TYPE___name12__DestroyPullPoint */
};
#endif

#ifndef SOAP_TYPE___name12__Notify
#define SOAP_TYPE___name12__Notify (3320)
/* Operation wrapper: */
struct __name12__Notify
{
public:
	_wsnt__Notify *wsnt__Notify;	/* optional element of type wsnt:Notify */
public:
	int soap_type() const { return 3320; } /* = unique type id SOAP_TYPE___name12__Notify */
};
#endif

#ifndef SOAP_TYPE___name13__CreatePullPoint
#define SOAP_TYPE___name13__CreatePullPoint (3324)
/* Operation wrapper: */
struct __name13__CreatePullPoint
{
public:
	_wsnt__CreatePullPoint *wsnt__CreatePullPoint;	/* optional element of type wsnt:CreatePullPoint */
public:
	int soap_type() const { return 3324; } /* = unique type id SOAP_TYPE___name13__CreatePullPoint */
};
#endif

#ifndef SOAP_TYPE___name14__Renew
#define SOAP_TYPE___name14__Renew (3328)
/* Operation wrapper: */
struct __name14__Renew
{
public:
	_wsnt__Renew *wsnt__Renew;	/* optional element of type wsnt:Renew */
public:
	int soap_type() const { return 3328; } /* = unique type id SOAP_TYPE___name14__Renew */
};
#endif

#ifndef SOAP_TYPE___name14__Unsubscribe
#define SOAP_TYPE___name14__Unsubscribe (3332)
/* Operation wrapper: */
struct __name14__Unsubscribe
{
public:
	_wsnt__Unsubscribe *wsnt__Unsubscribe;	/* optional element of type wsnt:Unsubscribe */
public:
	int soap_type() const { return 3332; } /* = unique type id SOAP_TYPE___name14__Unsubscribe */
};
#endif

#ifndef SOAP_TYPE___name14__PauseSubscription
#define SOAP_TYPE___name14__PauseSubscription (3336)
/* Operation wrapper: */
struct __name14__PauseSubscription
{
public:
	_wsnt__PauseSubscription *wsnt__PauseSubscription;	/* optional element of type wsnt:PauseSubscription */
public:
	int soap_type() const { return 3336; } /* = unique type id SOAP_TYPE___name14__PauseSubscription */
};
#endif

#ifndef SOAP_TYPE___name14__ResumeSubscription
#define SOAP_TYPE___name14__ResumeSubscription (3340)
/* Operation wrapper: */
struct __name14__ResumeSubscription
{
public:
	_wsnt__ResumeSubscription *wsnt__ResumeSubscription;	/* optional element of type wsnt:ResumeSubscription */
public:
	int soap_type() const { return 3340; } /* = unique type id SOAP_TYPE___name14__ResumeSubscription */
};
#endif

#ifndef SOAP_TYPE___name2__CreateRSAKeyPair
#define SOAP_TYPE___name2__CreateRSAKeyPair (3344)
/* Operation wrapper: */
struct __name2__CreateRSAKeyPair
{
public:
	_ns5__CreateRSAKeyPair *ns5__CreateRSAKeyPair;	/* optional element of type ns5:CreateRSAKeyPair */
public:
	int soap_type() const { return 3344; } /* = unique type id SOAP_TYPE___name2__CreateRSAKeyPair */
};
#endif

#ifndef SOAP_TYPE___name2__UploadKeyPairInPKCS8
#define SOAP_TYPE___name2__UploadKeyPairInPKCS8 (3348)
/* Operation wrapper: */
struct __name2__UploadKeyPairInPKCS8
{
public:
	_ns5__UploadKeyPairInPKCS8 *ns5__UploadKeyPairInPKCS8;	/* optional element of type ns5:UploadKeyPairInPKCS8 */
public:
	int soap_type() const { return 3348; } /* = unique type id SOAP_TYPE___name2__UploadKeyPairInPKCS8 */
};
#endif

#ifndef SOAP_TYPE___name2__UploadCertificateWithPrivateKeyInPKCS12
#define SOAP_TYPE___name2__UploadCertificateWithPrivateKeyInPKCS12 (3352)
/* Operation wrapper: */
struct __name2__UploadCertificateWithPrivateKeyInPKCS12
{
public:
	_ns5__UploadCertificateWithPrivateKeyInPKCS12 *ns5__UploadCertificateWithPrivateKeyInPKCS12;	/* optional element of type ns5:UploadCertificateWithPrivateKeyInPKCS12 */
public:
	int soap_type() const { return 3352; } /* = unique type id SOAP_TYPE___name2__UploadCertificateWithPrivateKeyInPKCS12 */
};
#endif

#ifndef SOAP_TYPE___name2__GetKeyStatus
#define SOAP_TYPE___name2__GetKeyStatus (3356)
/* Operation wrapper: */
struct __name2__GetKeyStatus
{
public:
	_ns5__GetKeyStatus *ns5__GetKeyStatus;	/* optional element of type ns5:GetKeyStatus */
public:
	int soap_type() const { return 3356; } /* = unique type id SOAP_TYPE___name2__GetKeyStatus */
};
#endif

#ifndef SOAP_TYPE___name2__GetPrivateKeyStatus
#define SOAP_TYPE___name2__GetPrivateKeyStatus (3360)
/* Operation wrapper: */
struct __name2__GetPrivateKeyStatus
{
public:
	_ns5__GetPrivateKeyStatus *ns5__GetPrivateKeyStatus;	/* optional element of type ns5:GetPrivateKeyStatus */
public:
	int soap_type() const { return 3360; } /* = unique type id SOAP_TYPE___name2__GetPrivateKeyStatus */
};
#endif

#ifndef SOAP_TYPE___name2__GetAllKeys
#define SOAP_TYPE___name2__GetAllKeys (3364)
/* Operation wrapper: */
struct __name2__GetAllKeys
{
public:
	_ns5__GetAllKeys *ns5__GetAllKeys;	/* optional element of type ns5:GetAllKeys */
public:
	int soap_type() const { return 3364; } /* = unique type id SOAP_TYPE___name2__GetAllKeys */
};
#endif

#ifndef SOAP_TYPE___name2__DeleteKey
#define SOAP_TYPE___name2__DeleteKey (3368)
/* Operation wrapper: */
struct __name2__DeleteKey
{
public:
	_ns5__DeleteKey *ns5__DeleteKey;	/* optional element of type ns5:DeleteKey */
public:
	int soap_type() const { return 3368; } /* = unique type id SOAP_TYPE___name2__DeleteKey */
};
#endif

#ifndef SOAP_TYPE___name2__CreatePKCS10CSR
#define SOAP_TYPE___name2__CreatePKCS10CSR (3372)
/* Operation wrapper: */
struct __name2__CreatePKCS10CSR
{
public:
	_ns5__CreatePKCS10CSR *ns5__CreatePKCS10CSR;	/* optional element of type ns5:CreatePKCS10CSR */
public:
	int soap_type() const { return 3372; } /* = unique type id SOAP_TYPE___name2__CreatePKCS10CSR */
};
#endif

#ifndef SOAP_TYPE___name2__CreateSelfSignedCertificate
#define SOAP_TYPE___name2__CreateSelfSignedCertificate (3376)
/* Operation wrapper: */
struct __name2__CreateSelfSignedCertificate
{
public:
	_ns5__CreateSelfSignedCertificate *ns5__CreateSelfSignedCertificate;	/* optional element of type ns5:CreateSelfSignedCertificate */
public:
	int soap_type() const { return 3376; } /* = unique type id SOAP_TYPE___name2__CreateSelfSignedCertificate */
};
#endif

#ifndef SOAP_TYPE___name2__UploadCertificate
#define SOAP_TYPE___name2__UploadCertificate (3380)
/* Operation wrapper: */
struct __name2__UploadCertificate
{
public:
	_ns5__UploadCertificate *ns5__UploadCertificate;	/* optional element of type ns5:UploadCertificate */
public:
	int soap_type() const { return 3380; } /* = unique type id SOAP_TYPE___name2__UploadCertificate */
};
#endif

#ifndef SOAP_TYPE___name2__GetCertificate
#define SOAP_TYPE___name2__GetCertificate (3384)
/* Operation wrapper: */
struct __name2__GetCertificate
{
public:
	_ns5__GetCertificate *ns5__GetCertificate;	/* optional element of type ns5:GetCertificate */
public:
	int soap_type() const { return 3384; } /* = unique type id SOAP_TYPE___name2__GetCertificate */
};
#endif

#ifndef SOAP_TYPE___name2__GetAllCertificates
#define SOAP_TYPE___name2__GetAllCertificates (3388)
/* Operation wrapper: */
struct __name2__GetAllCertificates
{
public:
	_ns5__GetAllCertificates *ns5__GetAllCertificates;	/* optional element of type ns5:GetAllCertificates */
public:
	int soap_type() const { return 3388; } /* = unique type id SOAP_TYPE___name2__GetAllCertificates */
};
#endif

#ifndef SOAP_TYPE___name2__DeleteCertificate
#define SOAP_TYPE___name2__DeleteCertificate (3392)
/* Operation wrapper: */
struct __name2__DeleteCertificate
{
public:
	_ns5__DeleteCertificate *ns5__DeleteCertificate;	/* optional element of type ns5:DeleteCertificate */
public:
	int soap_type() const { return 3392; } /* = unique type id SOAP_TYPE___name2__DeleteCertificate */
};
#endif

#ifndef SOAP_TYPE___name2__CreateCertificationPath
#define SOAP_TYPE___name2__CreateCertificationPath (3396)
/* Operation wrapper: */
struct __name2__CreateCertificationPath
{
public:
	_ns5__CreateCertificationPath *ns5__CreateCertificationPath;	/* optional element of type ns5:CreateCertificationPath */
public:
	int soap_type() const { return 3396; } /* = unique type id SOAP_TYPE___name2__CreateCertificationPath */
};
#endif

#ifndef SOAP_TYPE___name2__GetCertificationPath
#define SOAP_TYPE___name2__GetCertificationPath (3400)
/* Operation wrapper: */
struct __name2__GetCertificationPath
{
public:
	_ns5__GetCertificationPath *ns5__GetCertificationPath;	/* optional element of type ns5:GetCertificationPath */
public:
	int soap_type() const { return 3400; } /* = unique type id SOAP_TYPE___name2__GetCertificationPath */
};
#endif

#ifndef SOAP_TYPE___name2__GetAllCertificationPaths
#define SOAP_TYPE___name2__GetAllCertificationPaths (3404)
/* Operation wrapper: */
struct __name2__GetAllCertificationPaths
{
public:
	_ns5__GetAllCertificationPaths *ns5__GetAllCertificationPaths;	/* optional element of type ns5:GetAllCertificationPaths */
public:
	int soap_type() const { return 3404; } /* = unique type id SOAP_TYPE___name2__GetAllCertificationPaths */
};
#endif

#ifndef SOAP_TYPE___name2__DeleteCertificationPath
#define SOAP_TYPE___name2__DeleteCertificationPath (3408)
/* Operation wrapper: */
struct __name2__DeleteCertificationPath
{
public:
	_ns5__DeleteCertificationPath *ns5__DeleteCertificationPath;	/* optional element of type ns5:DeleteCertificationPath */
public:
	int soap_type() const { return 3408; } /* = unique type id SOAP_TYPE___name2__DeleteCertificationPath */
};
#endif

#ifndef SOAP_TYPE___name2__UploadPassphrase
#define SOAP_TYPE___name2__UploadPassphrase (3412)
/* Operation wrapper: */
struct __name2__UploadPassphrase
{
public:
	_ns5__UploadPassphrase *ns5__UploadPassphrase;	/* optional element of type ns5:UploadPassphrase */
public:
	int soap_type() const { return 3412; } /* = unique type id SOAP_TYPE___name2__UploadPassphrase */
};
#endif

#ifndef SOAP_TYPE___name2__GetAllPassphrases
#define SOAP_TYPE___name2__GetAllPassphrases (3416)
/* Operation wrapper: */
struct __name2__GetAllPassphrases
{
public:
	_ns5__GetAllPassphrases *ns5__GetAllPassphrases;	/* optional element of type ns5:GetAllPassphrases */
public:
	int soap_type() const { return 3416; } /* = unique type id SOAP_TYPE___name2__GetAllPassphrases */
};
#endif

#ifndef SOAP_TYPE___name2__DeletePassphrase
#define SOAP_TYPE___name2__DeletePassphrase (3420)
/* Operation wrapper: */
struct __name2__DeletePassphrase
{
public:
	_ns5__DeletePassphrase *ns5__DeletePassphrase;	/* optional element of type ns5:DeletePassphrase */
public:
	int soap_type() const { return 3420; } /* = unique type id SOAP_TYPE___name2__DeletePassphrase */
};
#endif

#ifndef SOAP_TYPE___name2__UploadCRL
#define SOAP_TYPE___name2__UploadCRL (3424)
/* Operation wrapper: */
struct __name2__UploadCRL
{
public:
	_ns5__UploadCRL *ns5__UploadCRL;	/* optional element of type ns5:UploadCRL */
public:
	int soap_type() const { return 3424; } /* = unique type id SOAP_TYPE___name2__UploadCRL */
};
#endif

#ifndef SOAP_TYPE___name2__GetCRL
#define SOAP_TYPE___name2__GetCRL (3428)
/* Operation wrapper: */
struct __name2__GetCRL
{
public:
	_ns5__GetCRL *ns5__GetCRL;	/* optional element of type ns5:GetCRL */
public:
	int soap_type() const { return 3428; } /* = unique type id SOAP_TYPE___name2__GetCRL */
};
#endif

#ifndef SOAP_TYPE___name2__GetAllCRLs
#define SOAP_TYPE___name2__GetAllCRLs (3432)
/* Operation wrapper: */
struct __name2__GetAllCRLs
{
public:
	_ns5__GetAllCRLs *ns5__GetAllCRLs;	/* optional element of type ns5:GetAllCRLs */
public:
	int soap_type() const { return 3432; } /* = unique type id SOAP_TYPE___name2__GetAllCRLs */
};
#endif

#ifndef SOAP_TYPE___name2__DeleteCRL
#define SOAP_TYPE___name2__DeleteCRL (3436)
/* Operation wrapper: */
struct __name2__DeleteCRL
{
public:
	_ns5__DeleteCRL *ns5__DeleteCRL;	/* optional element of type ns5:DeleteCRL */
public:
	int soap_type() const { return 3436; } /* = unique type id SOAP_TYPE___name2__DeleteCRL */
};
#endif

#ifndef SOAP_TYPE___name2__CreateCertPathValidationPolicy
#define SOAP_TYPE___name2__CreateCertPathValidationPolicy (3440)
/* Operation wrapper: */
struct __name2__CreateCertPathValidationPolicy
{
public:
	_ns5__CreateCertPathValidationPolicy *ns5__CreateCertPathValidationPolicy;	/* optional element of type ns5:CreateCertPathValidationPolicy */
public:
	int soap_type() const { return 3440; } /* = unique type id SOAP_TYPE___name2__CreateCertPathValidationPolicy */
};
#endif

#ifndef SOAP_TYPE___name2__GetCertPathValidationPolicy
#define SOAP_TYPE___name2__GetCertPathValidationPolicy (3444)
/* Operation wrapper: */
struct __name2__GetCertPathValidationPolicy
{
public:
	_ns5__GetCertPathValidationPolicy *ns5__GetCertPathValidationPolicy;	/* optional element of type ns5:GetCertPathValidationPolicy */
public:
	int soap_type() const { return 3444; } /* = unique type id SOAP_TYPE___name2__GetCertPathValidationPolicy */
};
#endif

#ifndef SOAP_TYPE___name2__GetAllCertPathValidationPolicies
#define SOAP_TYPE___name2__GetAllCertPathValidationPolicies (3448)
/* Operation wrapper: */
struct __name2__GetAllCertPathValidationPolicies
{
public:
	_ns5__GetAllCertPathValidationPolicies *ns5__GetAllCertPathValidationPolicies;	/* optional element of type ns5:GetAllCertPathValidationPolicies */
public:
	int soap_type() const { return 3448; } /* = unique type id SOAP_TYPE___name2__GetAllCertPathValidationPolicies */
};
#endif

#ifndef SOAP_TYPE___name2__DeleteCertPathValidationPolicy
#define SOAP_TYPE___name2__DeleteCertPathValidationPolicy (3452)
/* Operation wrapper: */
struct __name2__DeleteCertPathValidationPolicy
{
public:
	_ns5__DeleteCertPathValidationPolicy *ns5__DeleteCertPathValidationPolicy;	/* optional element of type ns5:DeleteCertPathValidationPolicy */
public:
	int soap_type() const { return 3452; } /* = unique type id SOAP_TYPE___name2__DeleteCertPathValidationPolicy */
};
#endif

#ifndef SOAP_TYPE___name3__AddServerCertificateAssignment
#define SOAP_TYPE___name3__AddServerCertificateAssignment (3456)
/* Operation wrapper: */
struct __name3__AddServerCertificateAssignment
{
public:
	_ns5__AddServerCertificateAssignment *ns5__AddServerCertificateAssignment;	/* optional element of type ns5:AddServerCertificateAssignment */
public:
	int soap_type() const { return 3456; } /* = unique type id SOAP_TYPE___name3__AddServerCertificateAssignment */
};
#endif

#ifndef SOAP_TYPE___name3__RemoveServerCertificateAssignment
#define SOAP_TYPE___name3__RemoveServerCertificateAssignment (3460)
/* Operation wrapper: */
struct __name3__RemoveServerCertificateAssignment
{
public:
	_ns5__RemoveServerCertificateAssignment *ns5__RemoveServerCertificateAssignment;	/* optional element of type ns5:RemoveServerCertificateAssignment */
public:
	int soap_type() const { return 3460; } /* = unique type id SOAP_TYPE___name3__RemoveServerCertificateAssignment */
};
#endif

#ifndef SOAP_TYPE___name3__ReplaceServerCertificateAssignment
#define SOAP_TYPE___name3__ReplaceServerCertificateAssignment (3464)
/* Operation wrapper: */
struct __name3__ReplaceServerCertificateAssignment
{
public:
	_ns5__ReplaceServerCertificateAssignment *ns5__ReplaceServerCertificateAssignment;	/* optional element of type ns5:ReplaceServerCertificateAssignment */
public:
	int soap_type() const { return 3464; } /* = unique type id SOAP_TYPE___name3__ReplaceServerCertificateAssignment */
};
#endif

#ifndef SOAP_TYPE___name3__GetAssignedServerCertificates
#define SOAP_TYPE___name3__GetAssignedServerCertificates (3468)
/* Operation wrapper: */
struct __name3__GetAssignedServerCertificates
{
public:
	_ns5__GetAssignedServerCertificates *ns5__GetAssignedServerCertificates;	/* optional element of type ns5:GetAssignedServerCertificates */
public:
	int soap_type() const { return 3468; } /* = unique type id SOAP_TYPE___name3__GetAssignedServerCertificates */
};
#endif

#ifndef SOAP_TYPE___name3__SetClientAuthenticationRequired
#define SOAP_TYPE___name3__SetClientAuthenticationRequired (3472)
/* Operation wrapper: */
struct __name3__SetClientAuthenticationRequired
{
public:
	_ns5__SetClientAuthenticationRequired *ns5__SetClientAuthenticationRequired;	/* optional element of type ns5:SetClientAuthenticationRequired */
public:
	int soap_type() const { return 3472; } /* = unique type id SOAP_TYPE___name3__SetClientAuthenticationRequired */
};
#endif

#ifndef SOAP_TYPE___name3__GetClientAuthenticationRequired
#define SOAP_TYPE___name3__GetClientAuthenticationRequired (3476)
/* Operation wrapper: */
struct __name3__GetClientAuthenticationRequired
{
public:
	_ns5__GetClientAuthenticationRequired *ns5__GetClientAuthenticationRequired;	/* optional element of type ns5:GetClientAuthenticationRequired */
public:
	int soap_type() const { return 3476; } /* = unique type id SOAP_TYPE___name3__GetClientAuthenticationRequired */
};
#endif

#ifndef SOAP_TYPE___name3__AddCertPathValidationPolicyAssignment
#define SOAP_TYPE___name3__AddCertPathValidationPolicyAssignment (3480)
/* Operation wrapper: */
struct __name3__AddCertPathValidationPolicyAssignment
{
public:
	_ns5__AddCertPathValidationPolicyAssignment *ns5__AddCertPathValidationPolicyAssignment;	/* optional element of type ns5:AddCertPathValidationPolicyAssignment */
public:
	int soap_type() const { return 3480; } /* = unique type id SOAP_TYPE___name3__AddCertPathValidationPolicyAssignment */
};
#endif

#ifndef SOAP_TYPE___name3__RemoveCertPathValidationPolicyAssignment
#define SOAP_TYPE___name3__RemoveCertPathValidationPolicyAssignment (3484)
/* Operation wrapper: */
struct __name3__RemoveCertPathValidationPolicyAssignment
{
public:
	_ns5__RemoveCertPathValidationPolicyAssignment *ns5__RemoveCertPathValidationPolicyAssignment;	/* optional element of type ns5:RemoveCertPathValidationPolicyAssignment */
public:
	int soap_type() const { return 3484; } /* = unique type id SOAP_TYPE___name3__RemoveCertPathValidationPolicyAssignment */
};
#endif

#ifndef SOAP_TYPE___name3__ReplaceCertPathValidationPolicyAssignment
#define SOAP_TYPE___name3__ReplaceCertPathValidationPolicyAssignment (3488)
/* Operation wrapper: */
struct __name3__ReplaceCertPathValidationPolicyAssignment
{
public:
	_ns5__ReplaceCertPathValidationPolicyAssignment *ns5__ReplaceCertPathValidationPolicyAssignment;	/* optional element of type ns5:ReplaceCertPathValidationPolicyAssignment */
public:
	int soap_type() const { return 3488; } /* = unique type id SOAP_TYPE___name3__ReplaceCertPathValidationPolicyAssignment */
};
#endif

#ifndef SOAP_TYPE___name3__GetAssignedCertPathValidationPolicies
#define SOAP_TYPE___name3__GetAssignedCertPathValidationPolicies (3492)
/* Operation wrapper: */
struct __name3__GetAssignedCertPathValidationPolicies
{
public:
	_ns5__GetAssignedCertPathValidationPolicies *ns5__GetAssignedCertPathValidationPolicies;	/* optional element of type ns5:GetAssignedCertPathValidationPolicies */
public:
	int soap_type() const { return 3492; } /* = unique type id SOAP_TYPE___name3__GetAssignedCertPathValidationPolicies */
};
#endif

#ifndef SOAP_TYPE___name4__AddDot1XConfiguration
#define SOAP_TYPE___name4__AddDot1XConfiguration (3496)
/* Operation wrapper: */
struct __name4__AddDot1XConfiguration
{
public:
	_ns5__AddDot1XConfiguration *ns5__AddDot1XConfiguration;	/* optional element of type ns5:AddDot1XConfiguration */
public:
	int soap_type() const { return 3496; } /* = unique type id SOAP_TYPE___name4__AddDot1XConfiguration */
};
#endif

#ifndef SOAP_TYPE___name4__GetAllDot1XConfigurations
#define SOAP_TYPE___name4__GetAllDot1XConfigurations (3500)
/* Operation wrapper: */
struct __name4__GetAllDot1XConfigurations
{
public:
	_ns5__GetAllDot1XConfigurations *ns5__GetAllDot1XConfigurations;	/* optional element of type ns5:GetAllDot1XConfigurations */
public:
	int soap_type() const { return 3500; } /* = unique type id SOAP_TYPE___name4__GetAllDot1XConfigurations */
};
#endif

#ifndef SOAP_TYPE___name4__GetDot1XConfiguration
#define SOAP_TYPE___name4__GetDot1XConfiguration (3504)
/* Operation wrapper: */
struct __name4__GetDot1XConfiguration
{
public:
	_ns5__GetDot1XConfiguration *ns5__GetDot1XConfiguration;	/* optional element of type ns5:GetDot1XConfiguration */
public:
	int soap_type() const { return 3504; } /* = unique type id SOAP_TYPE___name4__GetDot1XConfiguration */
};
#endif

#ifndef SOAP_TYPE___name4__DeleteDot1XConfiguration
#define SOAP_TYPE___name4__DeleteDot1XConfiguration (3508)
/* Operation wrapper: */
struct __name4__DeleteDot1XConfiguration
{
public:
	_ns5__DeleteDot1XConfiguration *ns5__DeleteDot1XConfiguration;	/* optional element of type ns5:DeleteDot1XConfiguration */
public:
	int soap_type() const { return 3508; } /* = unique type id SOAP_TYPE___name4__DeleteDot1XConfiguration */
};
#endif

#ifndef SOAP_TYPE___name4__SetNetworkInterfaceDot1XConfiguration
#define SOAP_TYPE___name4__SetNetworkInterfaceDot1XConfiguration (3512)
/* Operation wrapper: */
struct __name4__SetNetworkInterfaceDot1XConfiguration
{
public:
	_ns5__SetNetworkInterfaceDot1XConfiguration *ns5__SetNetworkInterfaceDot1XConfiguration;	/* optional element of type ns5:SetNetworkInterfaceDot1XConfiguration */
public:
	int soap_type() const { return 3512; } /* = unique type id SOAP_TYPE___name4__SetNetworkInterfaceDot1XConfiguration */
};
#endif

#ifndef SOAP_TYPE___name4__GetNetworkInterfaceDot1XConfiguration
#define SOAP_TYPE___name4__GetNetworkInterfaceDot1XConfiguration (3516)
/* Operation wrapper: */
struct __name4__GetNetworkInterfaceDot1XConfiguration
{
public:
	_ns5__GetNetworkInterfaceDot1XConfiguration *ns5__GetNetworkInterfaceDot1XConfiguration;	/* optional element of type ns5:GetNetworkInterfaceDot1XConfiguration */
public:
	int soap_type() const { return 3516; } /* = unique type id SOAP_TYPE___name4__GetNetworkInterfaceDot1XConfiguration */
};
#endif

#ifndef SOAP_TYPE___name4__DeleteNetworkInterfaceDot1XConfiguration
#define SOAP_TYPE___name4__DeleteNetworkInterfaceDot1XConfiguration (3520)
/* Operation wrapper: */
struct __name4__DeleteNetworkInterfaceDot1XConfiguration
{
public:
	_ns5__DeleteNetworkInterfaceDot1XConfiguration *ns5__DeleteNetworkInterfaceDot1XConfiguration;	/* optional element of type ns5:DeleteNetworkInterfaceDot1XConfiguration */
public:
	int soap_type() const { return 3520; } /* = unique type id SOAP_TYPE___name4__DeleteNetworkInterfaceDot1XConfiguration */
};
#endif

#ifndef SOAP_TYPE___name5__GetSupportedRules
#define SOAP_TYPE___name5__GetSupportedRules (3524)
/* Operation wrapper: */
struct __name5__GetSupportedRules
{
public:
	_tan__GetSupportedRules *tan__GetSupportedRules;	/* optional element of type tan:GetSupportedRules */
public:
	int soap_type() const { return 3524; } /* = unique type id SOAP_TYPE___name5__GetSupportedRules */
};
#endif

#ifndef SOAP_TYPE___name5__CreateRules
#define SOAP_TYPE___name5__CreateRules (3528)
/* Operation wrapper: */
struct __name5__CreateRules
{
public:
	_tan__CreateRules *tan__CreateRules;	/* optional element of type tan:CreateRules */
public:
	int soap_type() const { return 3528; } /* = unique type id SOAP_TYPE___name5__CreateRules */
};
#endif

#ifndef SOAP_TYPE___name5__DeleteRules
#define SOAP_TYPE___name5__DeleteRules (3532)
/* Operation wrapper: */
struct __name5__DeleteRules
{
public:
	_tan__DeleteRules *tan__DeleteRules;	/* optional element of type tan:DeleteRules */
public:
	int soap_type() const { return 3532; } /* = unique type id SOAP_TYPE___name5__DeleteRules */
};
#endif

#ifndef SOAP_TYPE___name5__GetRules
#define SOAP_TYPE___name5__GetRules (3536)
/* Operation wrapper: */
struct __name5__GetRules
{
public:
	_tan__GetRules *tan__GetRules;	/* optional element of type tan:GetRules */
public:
	int soap_type() const { return 3536; } /* = unique type id SOAP_TYPE___name5__GetRules */
};
#endif

#ifndef SOAP_TYPE___name5__GetRuleOptions
#define SOAP_TYPE___name5__GetRuleOptions (3540)
/* Operation wrapper: */
struct __name5__GetRuleOptions
{
public:
	_tan__GetRuleOptions *tan__GetRuleOptions;	/* optional element of type tan:GetRuleOptions */
public:
	int soap_type() const { return 3540; } /* = unique type id SOAP_TYPE___name5__GetRuleOptions */
};
#endif

#ifndef SOAP_TYPE___name5__ModifyRules
#define SOAP_TYPE___name5__ModifyRules (3544)
/* Operation wrapper: */
struct __name5__ModifyRules
{
public:
	_tan__ModifyRules *tan__ModifyRules;	/* optional element of type tan:ModifyRules */
public:
	int soap_type() const { return 3544; } /* = unique type id SOAP_TYPE___name5__ModifyRules */
};
#endif

#ifndef SOAP_TYPE___name6__GetServiceCapabilities
#define SOAP_TYPE___name6__GetServiceCapabilities (3548)
/* Operation wrapper: */
struct __name6__GetServiceCapabilities
{
public:
	_tan__GetServiceCapabilities *tan__GetServiceCapabilities;	/* optional element of type tan:GetServiceCapabilities */
public:
	int soap_type() const { return 3548; } /* = unique type id SOAP_TYPE___name6__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___name6__GetSupportedAnalyticsModules
#define SOAP_TYPE___name6__GetSupportedAnalyticsModules (3552)
/* Operation wrapper: */
struct __name6__GetSupportedAnalyticsModules
{
public:
	_tan__GetSupportedAnalyticsModules *tan__GetSupportedAnalyticsModules;	/* optional element of type tan:GetSupportedAnalyticsModules */
public:
	int soap_type() const { return 3552; } /* = unique type id SOAP_TYPE___name6__GetSupportedAnalyticsModules */
};
#endif

#ifndef SOAP_TYPE___name6__CreateAnalyticsModules
#define SOAP_TYPE___name6__CreateAnalyticsModules (3556)
/* Operation wrapper: */
struct __name6__CreateAnalyticsModules
{
public:
	_tan__CreateAnalyticsModules *tan__CreateAnalyticsModules;	/* optional element of type tan:CreateAnalyticsModules */
public:
	int soap_type() const { return 3556; } /* = unique type id SOAP_TYPE___name6__CreateAnalyticsModules */
};
#endif

#ifndef SOAP_TYPE___name6__DeleteAnalyticsModules
#define SOAP_TYPE___name6__DeleteAnalyticsModules (3560)
/* Operation wrapper: */
struct __name6__DeleteAnalyticsModules
{
public:
	_tan__DeleteAnalyticsModules *tan__DeleteAnalyticsModules;	/* optional element of type tan:DeleteAnalyticsModules */
public:
	int soap_type() const { return 3560; } /* = unique type id SOAP_TYPE___name6__DeleteAnalyticsModules */
};
#endif

#ifndef SOAP_TYPE___name6__GetAnalyticsModules
#define SOAP_TYPE___name6__GetAnalyticsModules (3564)
/* Operation wrapper: */
struct __name6__GetAnalyticsModules
{
public:
	_tan__GetAnalyticsModules *tan__GetAnalyticsModules;	/* optional element of type tan:GetAnalyticsModules */
public:
	int soap_type() const { return 3564; } /* = unique type id SOAP_TYPE___name6__GetAnalyticsModules */
};
#endif

#ifndef SOAP_TYPE___name6__GetAnalyticsModuleOptions
#define SOAP_TYPE___name6__GetAnalyticsModuleOptions (3568)
/* Operation wrapper: */
struct __name6__GetAnalyticsModuleOptions
{
public:
	_tan__GetAnalyticsModuleOptions *tan__GetAnalyticsModuleOptions;	/* optional element of type tan:GetAnalyticsModuleOptions */
public:
	int soap_type() const { return 3568; } /* = unique type id SOAP_TYPE___name6__GetAnalyticsModuleOptions */
};
#endif

#ifndef SOAP_TYPE___name6__ModifyAnalyticsModules
#define SOAP_TYPE___name6__ModifyAnalyticsModules (3572)
/* Operation wrapper: */
struct __name6__ModifyAnalyticsModules
{
public:
	_tan__ModifyAnalyticsModules *tan__ModifyAnalyticsModules;	/* optional element of type tan:ModifyAnalyticsModules */
public:
	int soap_type() const { return 3572; } /* = unique type id SOAP_TYPE___name6__ModifyAnalyticsModules */
};
#endif

#ifndef SOAP_TYPE___name7__PullMessages
#define SOAP_TYPE___name7__PullMessages (3576)
/* Operation wrapper: */
struct __name7__PullMessages
{
public:
	_tev__PullMessages *tev__PullMessages;	/* optional element of type tev:PullMessages */
public:
	int soap_type() const { return 3576; } /* = unique type id SOAP_TYPE___name7__PullMessages */
};
#endif

#ifndef SOAP_TYPE___name7__Seek
#define SOAP_TYPE___name7__Seek (3580)
/* Operation wrapper: */
struct __name7__Seek
{
public:
	_tev__Seek *tev__Seek;	/* optional element of type tev:Seek */
public:
	int soap_type() const { return 3580; } /* = unique type id SOAP_TYPE___name7__Seek */
};
#endif

#ifndef SOAP_TYPE___name7__SetSynchronizationPoint
#define SOAP_TYPE___name7__SetSynchronizationPoint (3584)
/* Operation wrapper: */
struct __name7__SetSynchronizationPoint
{
public:
	_tev__SetSynchronizationPoint *tev__SetSynchronizationPoint;	/* optional element of type tev:SetSynchronizationPoint */
public:
	int soap_type() const { return 3584; } /* = unique type id SOAP_TYPE___name7__SetSynchronizationPoint */
};
#endif

#ifndef SOAP_TYPE___name7__Unsubscribe
#define SOAP_TYPE___name7__Unsubscribe (3586)
/* Operation wrapper: */
struct __name7__Unsubscribe
{
public:
	_wsnt__Unsubscribe *wsnt__Unsubscribe;	/* optional element of type wsnt:Unsubscribe */
public:
	int soap_type() const { return 3586; } /* = unique type id SOAP_TYPE___name7__Unsubscribe */
};
#endif

#ifndef SOAP_TYPE___name8__GetServiceCapabilities
#define SOAP_TYPE___name8__GetServiceCapabilities (3590)
/* Operation wrapper: */
struct __name8__GetServiceCapabilities
{
public:
	_tev__GetServiceCapabilities *tev__GetServiceCapabilities;	/* optional element of type tev:GetServiceCapabilities */
public:
	int soap_type() const { return 3590; } /* = unique type id SOAP_TYPE___name8__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___name8__CreatePullPointSubscription
#define SOAP_TYPE___name8__CreatePullPointSubscription (3594)
/* Operation wrapper: */
struct __name8__CreatePullPointSubscription
{
public:
	_tev__CreatePullPointSubscription *tev__CreatePullPointSubscription;	/* optional element of type tev:CreatePullPointSubscription */
public:
	int soap_type() const { return 3594; } /* = unique type id SOAP_TYPE___name8__CreatePullPointSubscription */
};
#endif

#ifndef SOAP_TYPE___name8__GetEventProperties
#define SOAP_TYPE___name8__GetEventProperties (3598)
/* Operation wrapper: */
struct __name8__GetEventProperties
{
public:
	_tev__GetEventProperties *tev__GetEventProperties;	/* optional element of type tev:GetEventProperties */
public:
	int soap_type() const { return 3598; } /* = unique type id SOAP_TYPE___name8__GetEventProperties */
};
#endif

#ifndef SOAP_TYPE___name9__Renew
#define SOAP_TYPE___name9__Renew (3600)
/* Operation wrapper: */
struct __name9__Renew
{
public:
	_wsnt__Renew *wsnt__Renew;	/* optional element of type wsnt:Renew */
public:
	int soap_type() const { return 3600; } /* = unique type id SOAP_TYPE___name9__Renew */
};
#endif

#ifndef SOAP_TYPE___name9__Unsubscribe
#define SOAP_TYPE___name9__Unsubscribe (3602)
/* Operation wrapper: */
struct __name9__Unsubscribe
{
public:
	_wsnt__Unsubscribe *wsnt__Unsubscribe;	/* optional element of type wsnt:Unsubscribe */
public:
	int soap_type() const { return 3602; } /* = unique type id SOAP_TYPE___name9__Unsubscribe */
};
#endif

#ifndef SOAP_TYPE___ns1__GetServiceCapabilities
#define SOAP_TYPE___ns1__GetServiceCapabilities (3606)
/* Operation wrapper: */
struct __ns1__GetServiceCapabilities
{
public:
	_ns1__GetServiceCapabilities *ns1__GetServiceCapabilities;	/* optional element of type ns1:GetServiceCapabilities */
public:
	int soap_type() const { return 3606; } /* = unique type id SOAP_TYPE___ns1__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___ns1__GetAccessPointInfoList
#define SOAP_TYPE___ns1__GetAccessPointInfoList (3610)
/* Operation wrapper: */
struct __ns1__GetAccessPointInfoList
{
public:
	_ns1__GetAccessPointInfoList *ns1__GetAccessPointInfoList;	/* optional element of type ns1:GetAccessPointInfoList */
public:
	int soap_type() const { return 3610; } /* = unique type id SOAP_TYPE___ns1__GetAccessPointInfoList */
};
#endif

#ifndef SOAP_TYPE___ns1__GetAccessPointInfo
#define SOAP_TYPE___ns1__GetAccessPointInfo (3614)
/* Operation wrapper: */
struct __ns1__GetAccessPointInfo
{
public:
	_ns1__GetAccessPointInfo *ns1__GetAccessPointInfo;	/* optional element of type ns1:GetAccessPointInfo */
public:
	int soap_type() const { return 3614; } /* = unique type id SOAP_TYPE___ns1__GetAccessPointInfo */
};
#endif

#ifndef SOAP_TYPE___ns1__GetAccessPointList
#define SOAP_TYPE___ns1__GetAccessPointList (3618)
/* Operation wrapper: */
struct __ns1__GetAccessPointList
{
public:
	_ns1__GetAccessPointList *ns1__GetAccessPointList;	/* optional element of type ns1:GetAccessPointList */
public:
	int soap_type() const { return 3618; } /* = unique type id SOAP_TYPE___ns1__GetAccessPointList */
};
#endif

#ifndef SOAP_TYPE___ns1__GetAccessPoints
#define SOAP_TYPE___ns1__GetAccessPoints (3622)
/* Operation wrapper: */
struct __ns1__GetAccessPoints
{
public:
	_ns1__GetAccessPoints *ns1__GetAccessPoints;	/* optional element of type ns1:GetAccessPoints */
public:
	int soap_type() const { return 3622; } /* = unique type id SOAP_TYPE___ns1__GetAccessPoints */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateAccessPoint
#define SOAP_TYPE___ns1__CreateAccessPoint (3626)
/* Operation wrapper: */
struct __ns1__CreateAccessPoint
{
public:
	_ns1__CreateAccessPoint *ns1__CreateAccessPoint;	/* optional element of type ns1:CreateAccessPoint */
public:
	int soap_type() const { return 3626; } /* = unique type id SOAP_TYPE___ns1__CreateAccessPoint */
};
#endif

#ifndef SOAP_TYPE___ns1__SetAccessPoint
#define SOAP_TYPE___ns1__SetAccessPoint (3630)
/* Operation wrapper: */
struct __ns1__SetAccessPoint
{
public:
	_ns1__SetAccessPoint *ns1__SetAccessPoint;	/* optional element of type ns1:SetAccessPoint */
public:
	int soap_type() const { return 3630; } /* = unique type id SOAP_TYPE___ns1__SetAccessPoint */
};
#endif

#ifndef SOAP_TYPE___ns1__ModifyAccessPoint
#define SOAP_TYPE___ns1__ModifyAccessPoint (3634)
/* Operation wrapper: */
struct __ns1__ModifyAccessPoint
{
public:
	_ns1__ModifyAccessPoint *ns1__ModifyAccessPoint;	/* optional element of type ns1:ModifyAccessPoint */
public:
	int soap_type() const { return 3634; } /* = unique type id SOAP_TYPE___ns1__ModifyAccessPoint */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteAccessPoint
#define SOAP_TYPE___ns1__DeleteAccessPoint (3638)
/* Operation wrapper: */
struct __ns1__DeleteAccessPoint
{
public:
	_ns1__DeleteAccessPoint *ns1__DeleteAccessPoint;	/* optional element of type ns1:DeleteAccessPoint */
public:
	int soap_type() const { return 3638; } /* = unique type id SOAP_TYPE___ns1__DeleteAccessPoint */
};
#endif

#ifndef SOAP_TYPE___ns1__SetAccessPointAuthenticationProfile
#define SOAP_TYPE___ns1__SetAccessPointAuthenticationProfile (3642)
/* Operation wrapper: */
struct __ns1__SetAccessPointAuthenticationProfile
{
public:
	_ns1__SetAccessPointAuthenticationProfile *ns1__SetAccessPointAuthenticationProfile;	/* optional element of type ns1:SetAccessPointAuthenticationProfile */
public:
	int soap_type() const { return 3642; } /* = unique type id SOAP_TYPE___ns1__SetAccessPointAuthenticationProfile */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteAccessPointAuthenticationProfile
#define SOAP_TYPE___ns1__DeleteAccessPointAuthenticationProfile (3646)
/* Operation wrapper: */
struct __ns1__DeleteAccessPointAuthenticationProfile
{
public:
	_ns1__DeleteAccessPointAuthenticationProfile *ns1__DeleteAccessPointAuthenticationProfile;	/* optional element of type ns1:DeleteAccessPointAuthenticationProfile */
public:
	int soap_type() const { return 3646; } /* = unique type id SOAP_TYPE___ns1__DeleteAccessPointAuthenticationProfile */
};
#endif

#ifndef SOAP_TYPE___ns1__GetAreaInfoList
#define SOAP_TYPE___ns1__GetAreaInfoList (3650)
/* Operation wrapper: */
struct __ns1__GetAreaInfoList
{
public:
	_ns1__GetAreaInfoList *ns1__GetAreaInfoList;	/* optional element of type ns1:GetAreaInfoList */
public:
	int soap_type() const { return 3650; } /* = unique type id SOAP_TYPE___ns1__GetAreaInfoList */
};
#endif

#ifndef SOAP_TYPE___ns1__GetAreaInfo
#define SOAP_TYPE___ns1__GetAreaInfo (3654)
/* Operation wrapper: */
struct __ns1__GetAreaInfo
{
public:
	_ns1__GetAreaInfo *ns1__GetAreaInfo;	/* optional element of type ns1:GetAreaInfo */
public:
	int soap_type() const { return 3654; } /* = unique type id SOAP_TYPE___ns1__GetAreaInfo */
};
#endif

#ifndef SOAP_TYPE___ns1__GetAreaList
#define SOAP_TYPE___ns1__GetAreaList (3658)
/* Operation wrapper: */
struct __ns1__GetAreaList
{
public:
	_ns1__GetAreaList *ns1__GetAreaList;	/* optional element of type ns1:GetAreaList */
public:
	int soap_type() const { return 3658; } /* = unique type id SOAP_TYPE___ns1__GetAreaList */
};
#endif

#ifndef SOAP_TYPE___ns1__GetAreas
#define SOAP_TYPE___ns1__GetAreas (3662)
/* Operation wrapper: */
struct __ns1__GetAreas
{
public:
	_ns1__GetAreas *ns1__GetAreas;	/* optional element of type ns1:GetAreas */
public:
	int soap_type() const { return 3662; } /* = unique type id SOAP_TYPE___ns1__GetAreas */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateArea
#define SOAP_TYPE___ns1__CreateArea (3666)
/* Operation wrapper: */
struct __ns1__CreateArea
{
public:
	_ns1__CreateArea *ns1__CreateArea;	/* optional element of type ns1:CreateArea */
public:
	int soap_type() const { return 3666; } /* = unique type id SOAP_TYPE___ns1__CreateArea */
};
#endif

#ifndef SOAP_TYPE___ns1__SetArea
#define SOAP_TYPE___ns1__SetArea (3670)
/* Operation wrapper: */
struct __ns1__SetArea
{
public:
	_ns1__SetArea *ns1__SetArea;	/* optional element of type ns1:SetArea */
public:
	int soap_type() const { return 3670; } /* = unique type id SOAP_TYPE___ns1__SetArea */
};
#endif

#ifndef SOAP_TYPE___ns1__ModifyArea
#define SOAP_TYPE___ns1__ModifyArea (3674)
/* Operation wrapper: */
struct __ns1__ModifyArea
{
public:
	_ns1__ModifyArea *ns1__ModifyArea;	/* optional element of type ns1:ModifyArea */
public:
	int soap_type() const { return 3674; } /* = unique type id SOAP_TYPE___ns1__ModifyArea */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteArea
#define SOAP_TYPE___ns1__DeleteArea (3678)
/* Operation wrapper: */
struct __ns1__DeleteArea
{
public:
	_ns1__DeleteArea *ns1__DeleteArea;	/* optional element of type ns1:DeleteArea */
public:
	int soap_type() const { return 3678; } /* = unique type id SOAP_TYPE___ns1__DeleteArea */
};
#endif

#ifndef SOAP_TYPE___ns1__GetAccessPointState
#define SOAP_TYPE___ns1__GetAccessPointState (3682)
/* Operation wrapper: */
struct __ns1__GetAccessPointState
{
public:
	_ns1__GetAccessPointState *ns1__GetAccessPointState;	/* optional element of type ns1:GetAccessPointState */
public:
	int soap_type() const { return 3682; } /* = unique type id SOAP_TYPE___ns1__GetAccessPointState */
};
#endif

#ifndef SOAP_TYPE___ns1__EnableAccessPoint
#define SOAP_TYPE___ns1__EnableAccessPoint (3686)
/* Operation wrapper: */
struct __ns1__EnableAccessPoint
{
public:
	_ns1__EnableAccessPoint *ns1__EnableAccessPoint;	/* optional element of type ns1:EnableAccessPoint */
public:
	int soap_type() const { return 3686; } /* = unique type id SOAP_TYPE___ns1__EnableAccessPoint */
};
#endif

#ifndef SOAP_TYPE___ns1__DisableAccessPoint
#define SOAP_TYPE___ns1__DisableAccessPoint (3690)
/* Operation wrapper: */
struct __ns1__DisableAccessPoint
{
public:
	_ns1__DisableAccessPoint *ns1__DisableAccessPoint;	/* optional element of type ns1:DisableAccessPoint */
public:
	int soap_type() const { return 3690; } /* = unique type id SOAP_TYPE___ns1__DisableAccessPoint */
};
#endif

#ifndef SOAP_TYPE___ns1__ExternalAuthorization
#define SOAP_TYPE___ns1__ExternalAuthorization (3694)
/* Operation wrapper: */
struct __ns1__ExternalAuthorization
{
public:
	_ns1__ExternalAuthorization *ns1__ExternalAuthorization;	/* optional element of type ns1:ExternalAuthorization */
public:
	int soap_type() const { return 3694; } /* = unique type id SOAP_TYPE___ns1__ExternalAuthorization */
};
#endif

#ifndef SOAP_TYPE___ns10__GetServiceCapabilities
#define SOAP_TYPE___ns10__GetServiceCapabilities (3698)
/* Operation wrapper: */
struct __ns10__GetServiceCapabilities
{
public:
	_ns10__GetServiceCapabilities *ns10__GetServiceCapabilities;	/* optional element of type ns10:GetServiceCapabilities */
public:
	int soap_type() const { return 3698; } /* = unique type id SOAP_TYPE___ns10__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___ns10__PanMove
#define SOAP_TYPE___ns10__PanMove (3702)
/* Operation wrapper: */
struct __ns10__PanMove
{
public:
	_ns10__PanMove *ns10__PanMove;	/* optional element of type ns10:PanMove */
public:
	int soap_type() const { return 3702; } /* = unique type id SOAP_TYPE___ns10__PanMove */
};
#endif

#ifndef SOAP_TYPE___ns10__TiltMove
#define SOAP_TYPE___ns10__TiltMove (3706)
/* Operation wrapper: */
struct __ns10__TiltMove
{
public:
	_ns10__TiltMove *ns10__TiltMove;	/* optional element of type ns10:TiltMove */
public:
	int soap_type() const { return 3706; } /* = unique type id SOAP_TYPE___ns10__TiltMove */
};
#endif

#ifndef SOAP_TYPE___ns10__ZoomMove
#define SOAP_TYPE___ns10__ZoomMove (3710)
/* Operation wrapper: */
struct __ns10__ZoomMove
{
public:
	_ns10__ZoomMove *ns10__ZoomMove;	/* optional element of type ns10:ZoomMove */
public:
	int soap_type() const { return 3710; } /* = unique type id SOAP_TYPE___ns10__ZoomMove */
};
#endif

#ifndef SOAP_TYPE___ns10__RollMove
#define SOAP_TYPE___ns10__RollMove (3714)
/* Operation wrapper: */
struct __ns10__RollMove
{
public:
	_ns10__RollMove *ns10__RollMove;	/* optional element of type ns10:RollMove */
public:
	int soap_type() const { return 3714; } /* = unique type id SOAP_TYPE___ns10__RollMove */
};
#endif

#ifndef SOAP_TYPE___ns10__FocusMove
#define SOAP_TYPE___ns10__FocusMove (3718)
/* Operation wrapper: */
struct __ns10__FocusMove
{
public:
	_ns10__FocusMove *ns10__FocusMove;	/* optional element of type ns10:FocusMove */
public:
	int soap_type() const { return 3718; } /* = unique type id SOAP_TYPE___ns10__FocusMove */
};
#endif

#ifndef SOAP_TYPE___ns10__Stop
#define SOAP_TYPE___ns10__Stop (3722)
/* Operation wrapper: */
struct __ns10__Stop
{
public:
	_ns10__Stop *ns10__Stop;	/* optional element of type ns10:Stop */
public:
	int soap_type() const { return 3722; } /* = unique type id SOAP_TYPE___ns10__Stop */
};
#endif

#ifndef SOAP_TYPE___ns10__GetUsage
#define SOAP_TYPE___ns10__GetUsage (3726)
/* Operation wrapper: */
struct __ns10__GetUsage
{
public:
	_ns10__GetUsage *ns10__GetUsage;	/* optional element of type ns10:GetUsage */
public:
	int soap_type() const { return 3726; } /* = unique type id SOAP_TYPE___ns10__GetUsage */
};
#endif

#ifndef SOAP_TYPE___ns11__GetServiceCapabilities
#define SOAP_TYPE___ns11__GetServiceCapabilities (3730)
/* Operation wrapper: */
struct __ns11__GetServiceCapabilities
{
public:
	_ns11__GetServiceCapabilities *ns11__GetServiceCapabilities;	/* optional element of type ns11:GetServiceCapabilities */
public:
	int soap_type() const { return 3730; } /* = unique type id SOAP_TYPE___ns11__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___ns11__GetScheduleState
#define SOAP_TYPE___ns11__GetScheduleState (3734)
/* Operation wrapper: */
struct __ns11__GetScheduleState
{
public:
	_ns11__GetScheduleState *ns11__GetScheduleState;	/* optional element of type ns11:GetScheduleState */
public:
	int soap_type() const { return 3734; } /* = unique type id SOAP_TYPE___ns11__GetScheduleState */
};
#endif

#ifndef SOAP_TYPE___ns11__GetScheduleInfo
#define SOAP_TYPE___ns11__GetScheduleInfo (3738)
/* Operation wrapper: */
struct __ns11__GetScheduleInfo
{
public:
	_ns11__GetScheduleInfo *ns11__GetScheduleInfo;	/* optional element of type ns11:GetScheduleInfo */
public:
	int soap_type() const { return 3738; } /* = unique type id SOAP_TYPE___ns11__GetScheduleInfo */
};
#endif

#ifndef SOAP_TYPE___ns11__GetScheduleInfoList
#define SOAP_TYPE___ns11__GetScheduleInfoList (3742)
/* Operation wrapper: */
struct __ns11__GetScheduleInfoList
{
public:
	_ns11__GetScheduleInfoList *ns11__GetScheduleInfoList;	/* optional element of type ns11:GetScheduleInfoList */
public:
	int soap_type() const { return 3742; } /* = unique type id SOAP_TYPE___ns11__GetScheduleInfoList */
};
#endif

#ifndef SOAP_TYPE___ns11__GetSchedules
#define SOAP_TYPE___ns11__GetSchedules (3746)
/* Operation wrapper: */
struct __ns11__GetSchedules
{
public:
	_ns11__GetSchedules *ns11__GetSchedules;	/* optional element of type ns11:GetSchedules */
public:
	int soap_type() const { return 3746; } /* = unique type id SOAP_TYPE___ns11__GetSchedules */
};
#endif

#ifndef SOAP_TYPE___ns11__GetScheduleList
#define SOAP_TYPE___ns11__GetScheduleList (3750)
/* Operation wrapper: */
struct __ns11__GetScheduleList
{
public:
	_ns11__GetScheduleList *ns11__GetScheduleList;	/* optional element of type ns11:GetScheduleList */
public:
	int soap_type() const { return 3750; } /* = unique type id SOAP_TYPE___ns11__GetScheduleList */
};
#endif

#ifndef SOAP_TYPE___ns11__CreateSchedule
#define SOAP_TYPE___ns11__CreateSchedule (3754)
/* Operation wrapper: */
struct __ns11__CreateSchedule
{
public:
	_ns11__CreateSchedule *ns11__CreateSchedule;	/* optional element of type ns11:CreateSchedule */
public:
	int soap_type() const { return 3754; } /* = unique type id SOAP_TYPE___ns11__CreateSchedule */
};
#endif

#ifndef SOAP_TYPE___ns11__SetSchedule
#define SOAP_TYPE___ns11__SetSchedule (3758)
/* Operation wrapper: */
struct __ns11__SetSchedule
{
public:
	_ns11__SetSchedule *ns11__SetSchedule;	/* optional element of type ns11:SetSchedule */
public:
	int soap_type() const { return 3758; } /* = unique type id SOAP_TYPE___ns11__SetSchedule */
};
#endif

#ifndef SOAP_TYPE___ns11__ModifySchedule
#define SOAP_TYPE___ns11__ModifySchedule (3762)
/* Operation wrapper: */
struct __ns11__ModifySchedule
{
public:
	_ns11__ModifySchedule *ns11__ModifySchedule;	/* optional element of type ns11:ModifySchedule */
public:
	int soap_type() const { return 3762; } /* = unique type id SOAP_TYPE___ns11__ModifySchedule */
};
#endif

#ifndef SOAP_TYPE___ns11__DeleteSchedule
#define SOAP_TYPE___ns11__DeleteSchedule (3766)
/* Operation wrapper: */
struct __ns11__DeleteSchedule
{
public:
	_ns11__DeleteSchedule *ns11__DeleteSchedule;	/* optional element of type ns11:DeleteSchedule */
public:
	int soap_type() const { return 3766; } /* = unique type id SOAP_TYPE___ns11__DeleteSchedule */
};
#endif

#ifndef SOAP_TYPE___ns11__GetSpecialDayGroupInfo
#define SOAP_TYPE___ns11__GetSpecialDayGroupInfo (3770)
/* Operation wrapper: */
struct __ns11__GetSpecialDayGroupInfo
{
public:
	_ns11__GetSpecialDayGroupInfo *ns11__GetSpecialDayGroupInfo;	/* optional element of type ns11:GetSpecialDayGroupInfo */
public:
	int soap_type() const { return 3770; } /* = unique type id SOAP_TYPE___ns11__GetSpecialDayGroupInfo */
};
#endif

#ifndef SOAP_TYPE___ns11__GetSpecialDayGroupInfoList
#define SOAP_TYPE___ns11__GetSpecialDayGroupInfoList (3774)
/* Operation wrapper: */
struct __ns11__GetSpecialDayGroupInfoList
{
public:
	_ns11__GetSpecialDayGroupInfoList *ns11__GetSpecialDayGroupInfoList;	/* optional element of type ns11:GetSpecialDayGroupInfoList */
public:
	int soap_type() const { return 3774; } /* = unique type id SOAP_TYPE___ns11__GetSpecialDayGroupInfoList */
};
#endif

#ifndef SOAP_TYPE___ns11__GetSpecialDayGroups
#define SOAP_TYPE___ns11__GetSpecialDayGroups (3778)
/* Operation wrapper: */
struct __ns11__GetSpecialDayGroups
{
public:
	_ns11__GetSpecialDayGroups *ns11__GetSpecialDayGroups;	/* optional element of type ns11:GetSpecialDayGroups */
public:
	int soap_type() const { return 3778; } /* = unique type id SOAP_TYPE___ns11__GetSpecialDayGroups */
};
#endif

#ifndef SOAP_TYPE___ns11__GetSpecialDayGroupList
#define SOAP_TYPE___ns11__GetSpecialDayGroupList (3782)
/* Operation wrapper: */
struct __ns11__GetSpecialDayGroupList
{
public:
	_ns11__GetSpecialDayGroupList *ns11__GetSpecialDayGroupList;	/* optional element of type ns11:GetSpecialDayGroupList */
public:
	int soap_type() const { return 3782; } /* = unique type id SOAP_TYPE___ns11__GetSpecialDayGroupList */
};
#endif

#ifndef SOAP_TYPE___ns11__CreateSpecialDayGroup
#define SOAP_TYPE___ns11__CreateSpecialDayGroup (3786)
/* Operation wrapper: */
struct __ns11__CreateSpecialDayGroup
{
public:
	_ns11__CreateSpecialDayGroup *ns11__CreateSpecialDayGroup;	/* optional element of type ns11:CreateSpecialDayGroup */
public:
	int soap_type() const { return 3786; } /* = unique type id SOAP_TYPE___ns11__CreateSpecialDayGroup */
};
#endif

#ifndef SOAP_TYPE___ns11__SetSpecialDayGroup
#define SOAP_TYPE___ns11__SetSpecialDayGroup (3790)
/* Operation wrapper: */
struct __ns11__SetSpecialDayGroup
{
public:
	_ns11__SetSpecialDayGroup *ns11__SetSpecialDayGroup;	/* optional element of type ns11:SetSpecialDayGroup */
public:
	int soap_type() const { return 3790; } /* = unique type id SOAP_TYPE___ns11__SetSpecialDayGroup */
};
#endif

#ifndef SOAP_TYPE___ns11__ModifySpecialDayGroup
#define SOAP_TYPE___ns11__ModifySpecialDayGroup (3794)
/* Operation wrapper: */
struct __ns11__ModifySpecialDayGroup
{
public:
	_ns11__ModifySpecialDayGroup *ns11__ModifySpecialDayGroup;	/* optional element of type ns11:ModifySpecialDayGroup */
public:
	int soap_type() const { return 3794; } /* = unique type id SOAP_TYPE___ns11__ModifySpecialDayGroup */
};
#endif

#ifndef SOAP_TYPE___ns11__DeleteSpecialDayGroup
#define SOAP_TYPE___ns11__DeleteSpecialDayGroup (3798)
/* Operation wrapper: */
struct __ns11__DeleteSpecialDayGroup
{
public:
	_ns11__DeleteSpecialDayGroup *ns11__DeleteSpecialDayGroup;	/* optional element of type ns11:DeleteSpecialDayGroup */
public:
	int soap_type() const { return 3798; } /* = unique type id SOAP_TYPE___ns11__DeleteSpecialDayGroup */
};
#endif

#ifndef SOAP_TYPE___ns12__GetServiceCapabilities
#define SOAP_TYPE___ns12__GetServiceCapabilities (3802)
/* Operation wrapper: */
struct __ns12__GetServiceCapabilities
{
public:
	_ns12__GetServiceCapabilities *ns12__GetServiceCapabilities;	/* optional element of type ns12:GetServiceCapabilities */
public:
	int soap_type() const { return 3802; } /* = unique type id SOAP_TYPE___ns12__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___ns12__GetConfigurationOptions
#define SOAP_TYPE___ns12__GetConfigurationOptions (3806)
/* Operation wrapper: */
struct __ns12__GetConfigurationOptions
{
public:
	_ns12__GetConfigurationOptions *ns12__GetConfigurationOptions;	/* optional element of type ns12:GetConfigurationOptions */
public:
	int soap_type() const { return 3806; } /* = unique type id SOAP_TYPE___ns12__GetConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___ns12__GetConfiguration
#define SOAP_TYPE___ns12__GetConfiguration (3810)
/* Operation wrapper: */
struct __ns12__GetConfiguration
{
public:
	_ns12__GetConfiguration *ns12__GetConfiguration;	/* optional element of type ns12:GetConfiguration */
public:
	int soap_type() const { return 3810; } /* = unique type id SOAP_TYPE___ns12__GetConfiguration */
};
#endif

#ifndef SOAP_TYPE___ns12__GetConfigurations
#define SOAP_TYPE___ns12__GetConfigurations (3814)
/* Operation wrapper: */
struct __ns12__GetConfigurations
{
public:
	_ns12__GetConfigurations *ns12__GetConfigurations;	/* optional element of type ns12:GetConfigurations */
public:
	int soap_type() const { return 3814; } /* = unique type id SOAP_TYPE___ns12__GetConfigurations */
};
#endif

#ifndef SOAP_TYPE___ns12__SetConfiguration
#define SOAP_TYPE___ns12__SetConfiguration (3818)
/* Operation wrapper: */
struct __ns12__SetConfiguration
{
public:
	_ns12__SetConfiguration *ns12__SetConfiguration;	/* optional element of type ns12:SetConfiguration */
public:
	int soap_type() const { return 3818; } /* = unique type id SOAP_TYPE___ns12__SetConfiguration */
};
#endif

#ifndef SOAP_TYPE___ns12__GetRadiometryConfigurationOptions
#define SOAP_TYPE___ns12__GetRadiometryConfigurationOptions (3822)
/* Operation wrapper: */
struct __ns12__GetRadiometryConfigurationOptions
{
public:
	_ns12__GetRadiometryConfigurationOptions *ns12__GetRadiometryConfigurationOptions;	/* optional element of type ns12:GetRadiometryConfigurationOptions */
public:
	int soap_type() const { return 3822; } /* = unique type id SOAP_TYPE___ns12__GetRadiometryConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___ns12__GetRadiometryConfiguration
#define SOAP_TYPE___ns12__GetRadiometryConfiguration (3826)
/* Operation wrapper: */
struct __ns12__GetRadiometryConfiguration
{
public:
	_ns12__GetRadiometryConfiguration *ns12__GetRadiometryConfiguration;	/* optional element of type ns12:GetRadiometryConfiguration */
public:
	int soap_type() const { return 3826; } /* = unique type id SOAP_TYPE___ns12__GetRadiometryConfiguration */
};
#endif

#ifndef SOAP_TYPE___ns12__SetRadiometryConfiguration
#define SOAP_TYPE___ns12__SetRadiometryConfiguration (3830)
/* Operation wrapper: */
struct __ns12__SetRadiometryConfiguration
{
public:
	_ns12__SetRadiometryConfiguration *ns12__SetRadiometryConfiguration;	/* optional element of type ns12:SetRadiometryConfiguration */
public:
	int soap_type() const { return 3830; } /* = unique type id SOAP_TYPE___ns12__SetRadiometryConfiguration */
};
#endif

#ifndef SOAP_TYPE___ns3__GetServiceCapabilities
#define SOAP_TYPE___ns3__GetServiceCapabilities (3834)
/* Operation wrapper: */
struct __ns3__GetServiceCapabilities
{
public:
	_ns3__GetServiceCapabilities *ns3__GetServiceCapabilities;	/* optional element of type ns3:GetServiceCapabilities */
public:
	int soap_type() const { return 3834; } /* = unique type id SOAP_TYPE___ns3__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___ns3__GetAccessProfileInfo
#define SOAP_TYPE___ns3__GetAccessProfileInfo (3838)
/* Operation wrapper: */
struct __ns3__GetAccessProfileInfo
{
public:
	_ns3__GetAccessProfileInfo *ns3__GetAccessProfileInfo;	/* optional element of type ns3:GetAccessProfileInfo */
public:
	int soap_type() const { return 3838; } /* = unique type id SOAP_TYPE___ns3__GetAccessProfileInfo */
};
#endif

#ifndef SOAP_TYPE___ns3__GetAccessProfileInfoList
#define SOAP_TYPE___ns3__GetAccessProfileInfoList (3842)
/* Operation wrapper: */
struct __ns3__GetAccessProfileInfoList
{
public:
	_ns3__GetAccessProfileInfoList *ns3__GetAccessProfileInfoList;	/* optional element of type ns3:GetAccessProfileInfoList */
public:
	int soap_type() const { return 3842; } /* = unique type id SOAP_TYPE___ns3__GetAccessProfileInfoList */
};
#endif

#ifndef SOAP_TYPE___ns3__GetAccessProfiles
#define SOAP_TYPE___ns3__GetAccessProfiles (3846)
/* Operation wrapper: */
struct __ns3__GetAccessProfiles
{
public:
	_ns3__GetAccessProfiles *ns3__GetAccessProfiles;	/* optional element of type ns3:GetAccessProfiles */
public:
	int soap_type() const { return 3846; } /* = unique type id SOAP_TYPE___ns3__GetAccessProfiles */
};
#endif

#ifndef SOAP_TYPE___ns3__GetAccessProfileList
#define SOAP_TYPE___ns3__GetAccessProfileList (3850)
/* Operation wrapper: */
struct __ns3__GetAccessProfileList
{
public:
	_ns3__GetAccessProfileList *ns3__GetAccessProfileList;	/* optional element of type ns3:GetAccessProfileList */
public:
	int soap_type() const { return 3850; } /* = unique type id SOAP_TYPE___ns3__GetAccessProfileList */
};
#endif

#ifndef SOAP_TYPE___ns3__CreateAccessProfile
#define SOAP_TYPE___ns3__CreateAccessProfile (3854)
/* Operation wrapper: */
struct __ns3__CreateAccessProfile
{
public:
	_ns3__CreateAccessProfile *ns3__CreateAccessProfile;	/* optional element of type ns3:CreateAccessProfile */
public:
	int soap_type() const { return 3854; } /* = unique type id SOAP_TYPE___ns3__CreateAccessProfile */
};
#endif

#ifndef SOAP_TYPE___ns3__ModifyAccessProfile
#define SOAP_TYPE___ns3__ModifyAccessProfile (3858)
/* Operation wrapper: */
struct __ns3__ModifyAccessProfile
{
public:
	_ns3__ModifyAccessProfile *ns3__ModifyAccessProfile;	/* optional element of type ns3:ModifyAccessProfile */
public:
	int soap_type() const { return 3858; } /* = unique type id SOAP_TYPE___ns3__ModifyAccessProfile */
};
#endif

#ifndef SOAP_TYPE___ns3__SetAccessProfile
#define SOAP_TYPE___ns3__SetAccessProfile (3862)
/* Operation wrapper: */
struct __ns3__SetAccessProfile
{
public:
	_ns3__SetAccessProfile *ns3__SetAccessProfile;	/* optional element of type ns3:SetAccessProfile */
public:
	int soap_type() const { return 3862; } /* = unique type id SOAP_TYPE___ns3__SetAccessProfile */
};
#endif

#ifndef SOAP_TYPE___ns3__DeleteAccessProfile
#define SOAP_TYPE___ns3__DeleteAccessProfile (3866)
/* Operation wrapper: */
struct __ns3__DeleteAccessProfile
{
public:
	_ns3__DeleteAccessProfile *ns3__DeleteAccessProfile;	/* optional element of type ns3:DeleteAccessProfile */
public:
	int soap_type() const { return 3866; } /* = unique type id SOAP_TYPE___ns3__DeleteAccessProfile */
};
#endif

#ifndef SOAP_TYPE___ns4__GetSupportedActions
#define SOAP_TYPE___ns4__GetSupportedActions (3870)
/* Operation wrapper: */
struct __ns4__GetSupportedActions
{
public:
	_ns4__GetSupportedActions *ns4__GetSupportedActions;	/* optional element of type ns4:GetSupportedActions */
public:
	int soap_type() const { return 3870; } /* = unique type id SOAP_TYPE___ns4__GetSupportedActions */
};
#endif

#ifndef SOAP_TYPE___ns4__GetActions
#define SOAP_TYPE___ns4__GetActions (3874)
/* Operation wrapper: */
struct __ns4__GetActions
{
public:
	_ns4__GetActions *ns4__GetActions;	/* optional element of type ns4:GetActions */
public:
	int soap_type() const { return 3874; } /* = unique type id SOAP_TYPE___ns4__GetActions */
};
#endif

#ifndef SOAP_TYPE___ns4__CreateActions
#define SOAP_TYPE___ns4__CreateActions (3878)
/* Operation wrapper: */
struct __ns4__CreateActions
{
public:
	_ns4__CreateActions *ns4__CreateActions;	/* optional element of type ns4:CreateActions */
public:
	int soap_type() const { return 3878; } /* = unique type id SOAP_TYPE___ns4__CreateActions */
};
#endif

#ifndef SOAP_TYPE___ns4__DeleteActions
#define SOAP_TYPE___ns4__DeleteActions (3882)
/* Operation wrapper: */
struct __ns4__DeleteActions
{
public:
	_ns4__DeleteActions *ns4__DeleteActions;	/* optional element of type ns4:DeleteActions */
public:
	int soap_type() const { return 3882; } /* = unique type id SOAP_TYPE___ns4__DeleteActions */
};
#endif

#ifndef SOAP_TYPE___ns4__ModifyActions
#define SOAP_TYPE___ns4__ModifyActions (3886)
/* Operation wrapper: */
struct __ns4__ModifyActions
{
public:
	_ns4__ModifyActions *ns4__ModifyActions;	/* optional element of type ns4:ModifyActions */
public:
	int soap_type() const { return 3886; } /* = unique type id SOAP_TYPE___ns4__ModifyActions */
};
#endif

#ifndef SOAP_TYPE___ns4__GetServiceCapabilities
#define SOAP_TYPE___ns4__GetServiceCapabilities (3890)
/* Operation wrapper: */
struct __ns4__GetServiceCapabilities
{
public:
	_ns4__GetServiceCapabilities *ns4__GetServiceCapabilities;	/* optional element of type ns4:GetServiceCapabilities */
public:
	int soap_type() const { return 3890; } /* = unique type id SOAP_TYPE___ns4__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___ns4__GetActionTriggers
#define SOAP_TYPE___ns4__GetActionTriggers (3894)
/* Operation wrapper: */
struct __ns4__GetActionTriggers
{
public:
	_ns4__GetActionTriggers *ns4__GetActionTriggers;	/* optional element of type ns4:GetActionTriggers */
public:
	int soap_type() const { return 3894; } /* = unique type id SOAP_TYPE___ns4__GetActionTriggers */
};
#endif

#ifndef SOAP_TYPE___ns4__CreateActionTriggers
#define SOAP_TYPE___ns4__CreateActionTriggers (3898)
/* Operation wrapper: */
struct __ns4__CreateActionTriggers
{
public:
	_ns4__CreateActionTriggers *ns4__CreateActionTriggers;	/* optional element of type ns4:CreateActionTriggers */
public:
	int soap_type() const { return 3898; } /* = unique type id SOAP_TYPE___ns4__CreateActionTriggers */
};
#endif

#ifndef SOAP_TYPE___ns4__DeleteActionTriggers
#define SOAP_TYPE___ns4__DeleteActionTriggers (3902)
/* Operation wrapper: */
struct __ns4__DeleteActionTriggers
{
public:
	_ns4__DeleteActionTriggers *ns4__DeleteActionTriggers;	/* optional element of type ns4:DeleteActionTriggers */
public:
	int soap_type() const { return 3902; } /* = unique type id SOAP_TYPE___ns4__DeleteActionTriggers */
};
#endif

#ifndef SOAP_TYPE___ns4__ModifyActionTriggers
#define SOAP_TYPE___ns4__ModifyActionTriggers (3906)
/* Operation wrapper: */
struct __ns4__ModifyActionTriggers
{
public:
	_ns4__ModifyActionTriggers *ns4__ModifyActionTriggers;	/* optional element of type ns4:ModifyActionTriggers */
public:
	int soap_type() const { return 3906; } /* = unique type id SOAP_TYPE___ns4__ModifyActionTriggers */
};
#endif

#ifndef SOAP_TYPE___ns6__GetServiceCapabilities
#define SOAP_TYPE___ns6__GetServiceCapabilities (3910)
/* Operation wrapper: */
struct __ns6__GetServiceCapabilities
{
public:
	_ns6__GetServiceCapabilities *ns6__GetServiceCapabilities;	/* optional element of type ns6:GetServiceCapabilities */
public:
	int soap_type() const { return 3910; } /* = unique type id SOAP_TYPE___ns6__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___ns6__GetAuthenticationProfileInfo
#define SOAP_TYPE___ns6__GetAuthenticationProfileInfo (3914)
/* Operation wrapper: */
struct __ns6__GetAuthenticationProfileInfo
{
public:
	_ns6__GetAuthenticationProfileInfo *ns6__GetAuthenticationProfileInfo;	/* optional element of type ns6:GetAuthenticationProfileInfo */
public:
	int soap_type() const { return 3914; } /* = unique type id SOAP_TYPE___ns6__GetAuthenticationProfileInfo */
};
#endif

#ifndef SOAP_TYPE___ns6__GetAuthenticationProfileInfoList
#define SOAP_TYPE___ns6__GetAuthenticationProfileInfoList (3918)
/* Operation wrapper: */
struct __ns6__GetAuthenticationProfileInfoList
{
public:
	_ns6__GetAuthenticationProfileInfoList *ns6__GetAuthenticationProfileInfoList;	/* optional element of type ns6:GetAuthenticationProfileInfoList */
public:
	int soap_type() const { return 3918; } /* = unique type id SOAP_TYPE___ns6__GetAuthenticationProfileInfoList */
};
#endif

#ifndef SOAP_TYPE___ns6__GetAuthenticationProfiles
#define SOAP_TYPE___ns6__GetAuthenticationProfiles (3922)
/* Operation wrapper: */
struct __ns6__GetAuthenticationProfiles
{
public:
	_ns6__GetAuthenticationProfiles *ns6__GetAuthenticationProfiles;	/* optional element of type ns6:GetAuthenticationProfiles */
public:
	int soap_type() const { return 3922; } /* = unique type id SOAP_TYPE___ns6__GetAuthenticationProfiles */
};
#endif

#ifndef SOAP_TYPE___ns6__GetAuthenticationProfileList
#define SOAP_TYPE___ns6__GetAuthenticationProfileList (3926)
/* Operation wrapper: */
struct __ns6__GetAuthenticationProfileList
{
public:
	_ns6__GetAuthenticationProfileList *ns6__GetAuthenticationProfileList;	/* optional element of type ns6:GetAuthenticationProfileList */
public:
	int soap_type() const { return 3926; } /* = unique type id SOAP_TYPE___ns6__GetAuthenticationProfileList */
};
#endif

#ifndef SOAP_TYPE___ns6__CreateAuthenticationProfile
#define SOAP_TYPE___ns6__CreateAuthenticationProfile (3930)
/* Operation wrapper: */
struct __ns6__CreateAuthenticationProfile
{
public:
	_ns6__CreateAuthenticationProfile *ns6__CreateAuthenticationProfile;	/* optional element of type ns6:CreateAuthenticationProfile */
public:
	int soap_type() const { return 3930; } /* = unique type id SOAP_TYPE___ns6__CreateAuthenticationProfile */
};
#endif

#ifndef SOAP_TYPE___ns6__SetAuthenticationProfile
#define SOAP_TYPE___ns6__SetAuthenticationProfile (3934)
/* Operation wrapper: */
struct __ns6__SetAuthenticationProfile
{
public:
	_ns6__SetAuthenticationProfile *ns6__SetAuthenticationProfile;	/* optional element of type ns6:SetAuthenticationProfile */
public:
	int soap_type() const { return 3934; } /* = unique type id SOAP_TYPE___ns6__SetAuthenticationProfile */
};
#endif

#ifndef SOAP_TYPE___ns6__ModifyAuthenticationProfile
#define SOAP_TYPE___ns6__ModifyAuthenticationProfile (3938)
/* Operation wrapper: */
struct __ns6__ModifyAuthenticationProfile
{
public:
	_ns6__ModifyAuthenticationProfile *ns6__ModifyAuthenticationProfile;	/* optional element of type ns6:ModifyAuthenticationProfile */
public:
	int soap_type() const { return 3938; } /* = unique type id SOAP_TYPE___ns6__ModifyAuthenticationProfile */
};
#endif

#ifndef SOAP_TYPE___ns6__DeleteAuthenticationProfile
#define SOAP_TYPE___ns6__DeleteAuthenticationProfile (3942)
/* Operation wrapper: */
struct __ns6__DeleteAuthenticationProfile
{
public:
	_ns6__DeleteAuthenticationProfile *ns6__DeleteAuthenticationProfile;	/* optional element of type ns6:DeleteAuthenticationProfile */
public:
	int soap_type() const { return 3942; } /* = unique type id SOAP_TYPE___ns6__DeleteAuthenticationProfile */
};
#endif

#ifndef SOAP_TYPE___ns6__GetSecurityLevelInfo
#define SOAP_TYPE___ns6__GetSecurityLevelInfo (3946)
/* Operation wrapper: */
struct __ns6__GetSecurityLevelInfo
{
public:
	_ns6__GetSecurityLevelInfo *ns6__GetSecurityLevelInfo;	/* optional element of type ns6:GetSecurityLevelInfo */
public:
	int soap_type() const { return 3946; } /* = unique type id SOAP_TYPE___ns6__GetSecurityLevelInfo */
};
#endif

#ifndef SOAP_TYPE___ns6__GetSecurityLevelInfoList
#define SOAP_TYPE___ns6__GetSecurityLevelInfoList (3950)
/* Operation wrapper: */
struct __ns6__GetSecurityLevelInfoList
{
public:
	_ns6__GetSecurityLevelInfoList *ns6__GetSecurityLevelInfoList;	/* optional element of type ns6:GetSecurityLevelInfoList */
public:
	int soap_type() const { return 3950; } /* = unique type id SOAP_TYPE___ns6__GetSecurityLevelInfoList */
};
#endif

#ifndef SOAP_TYPE___ns6__GetSecurityLevels
#define SOAP_TYPE___ns6__GetSecurityLevels (3954)
/* Operation wrapper: */
struct __ns6__GetSecurityLevels
{
public:
	_ns6__GetSecurityLevels *ns6__GetSecurityLevels;	/* optional element of type ns6:GetSecurityLevels */
public:
	int soap_type() const { return 3954; } /* = unique type id SOAP_TYPE___ns6__GetSecurityLevels */
};
#endif

#ifndef SOAP_TYPE___ns6__GetSecurityLevelList
#define SOAP_TYPE___ns6__GetSecurityLevelList (3958)
/* Operation wrapper: */
struct __ns6__GetSecurityLevelList
{
public:
	_ns6__GetSecurityLevelList *ns6__GetSecurityLevelList;	/* optional element of type ns6:GetSecurityLevelList */
public:
	int soap_type() const { return 3958; } /* = unique type id SOAP_TYPE___ns6__GetSecurityLevelList */
};
#endif

#ifndef SOAP_TYPE___ns6__CreateSecurityLevel
#define SOAP_TYPE___ns6__CreateSecurityLevel (3962)
/* Operation wrapper: */
struct __ns6__CreateSecurityLevel
{
public:
	_ns6__CreateSecurityLevel *ns6__CreateSecurityLevel;	/* optional element of type ns6:CreateSecurityLevel */
public:
	int soap_type() const { return 3962; } /* = unique type id SOAP_TYPE___ns6__CreateSecurityLevel */
};
#endif

#ifndef SOAP_TYPE___ns6__SetSecurityLevel
#define SOAP_TYPE___ns6__SetSecurityLevel (3966)
/* Operation wrapper: */
struct __ns6__SetSecurityLevel
{
public:
	_ns6__SetSecurityLevel *ns6__SetSecurityLevel;	/* optional element of type ns6:SetSecurityLevel */
public:
	int soap_type() const { return 3966; } /* = unique type id SOAP_TYPE___ns6__SetSecurityLevel */
};
#endif

#ifndef SOAP_TYPE___ns6__ModifySecurityLevel
#define SOAP_TYPE___ns6__ModifySecurityLevel (3970)
/* Operation wrapper: */
struct __ns6__ModifySecurityLevel
{
public:
	_ns6__ModifySecurityLevel *ns6__ModifySecurityLevel;	/* optional element of type ns6:ModifySecurityLevel */
public:
	int soap_type() const { return 3970; } /* = unique type id SOAP_TYPE___ns6__ModifySecurityLevel */
};
#endif

#ifndef SOAP_TYPE___ns6__DeleteSecurityLevel
#define SOAP_TYPE___ns6__DeleteSecurityLevel (3974)
/* Operation wrapper: */
struct __ns6__DeleteSecurityLevel
{
public:
	_ns6__DeleteSecurityLevel *ns6__DeleteSecurityLevel;	/* optional element of type ns6:DeleteSecurityLevel */
public:
	int soap_type() const { return 3974; } /* = unique type id SOAP_TYPE___ns6__DeleteSecurityLevel */
};
#endif

#ifndef SOAP_TYPE___ns7__GetServiceCapabilities
#define SOAP_TYPE___ns7__GetServiceCapabilities (3978)
/* Operation wrapper: */
struct __ns7__GetServiceCapabilities
{
public:
	_ns7__GetServiceCapabilities *ns7__GetServiceCapabilities;	/* optional element of type ns7:GetServiceCapabilities */
public:
	int soap_type() const { return 3978; } /* = unique type id SOAP_TYPE___ns7__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___ns7__GetSupportedFormatTypes
#define SOAP_TYPE___ns7__GetSupportedFormatTypes (3982)
/* Operation wrapper: */
struct __ns7__GetSupportedFormatTypes
{
public:
	_ns7__GetSupportedFormatTypes *ns7__GetSupportedFormatTypes;	/* optional element of type ns7:GetSupportedFormatTypes */
public:
	int soap_type() const { return 3982; } /* = unique type id SOAP_TYPE___ns7__GetSupportedFormatTypes */
};
#endif

#ifndef SOAP_TYPE___ns7__GetCredentialInfo
#define SOAP_TYPE___ns7__GetCredentialInfo (3986)
/* Operation wrapper: */
struct __ns7__GetCredentialInfo
{
public:
	_ns7__GetCredentialInfo *ns7__GetCredentialInfo;	/* optional element of type ns7:GetCredentialInfo */
public:
	int soap_type() const { return 3986; } /* = unique type id SOAP_TYPE___ns7__GetCredentialInfo */
};
#endif

#ifndef SOAP_TYPE___ns7__GetCredentialInfoList
#define SOAP_TYPE___ns7__GetCredentialInfoList (3990)
/* Operation wrapper: */
struct __ns7__GetCredentialInfoList
{
public:
	_ns7__GetCredentialInfoList *ns7__GetCredentialInfoList;	/* optional element of type ns7:GetCredentialInfoList */
public:
	int soap_type() const { return 3990; } /* = unique type id SOAP_TYPE___ns7__GetCredentialInfoList */
};
#endif

#ifndef SOAP_TYPE___ns7__GetCredentials
#define SOAP_TYPE___ns7__GetCredentials (3994)
/* Operation wrapper: */
struct __ns7__GetCredentials
{
public:
	_ns7__GetCredentials *ns7__GetCredentials;	/* optional element of type ns7:GetCredentials */
public:
	int soap_type() const { return 3994; } /* = unique type id SOAP_TYPE___ns7__GetCredentials */
};
#endif

#ifndef SOAP_TYPE___ns7__GetCredentialList
#define SOAP_TYPE___ns7__GetCredentialList (3998)
/* Operation wrapper: */
struct __ns7__GetCredentialList
{
public:
	_ns7__GetCredentialList *ns7__GetCredentialList;	/* optional element of type ns7:GetCredentialList */
public:
	int soap_type() const { return 3998; } /* = unique type id SOAP_TYPE___ns7__GetCredentialList */
};
#endif

#ifndef SOAP_TYPE___ns7__CreateCredential
#define SOAP_TYPE___ns7__CreateCredential (4002)
/* Operation wrapper: */
struct __ns7__CreateCredential
{
public:
	_ns7__CreateCredential *ns7__CreateCredential;	/* optional element of type ns7:CreateCredential */
public:
	int soap_type() const { return 4002; } /* = unique type id SOAP_TYPE___ns7__CreateCredential */
};
#endif

#ifndef SOAP_TYPE___ns7__SetCredential
#define SOAP_TYPE___ns7__SetCredential (4006)
/* Operation wrapper: */
struct __ns7__SetCredential
{
public:
	_ns7__SetCredential *ns7__SetCredential;	/* optional element of type ns7:SetCredential */
public:
	int soap_type() const { return 4006; } /* = unique type id SOAP_TYPE___ns7__SetCredential */
};
#endif

#ifndef SOAP_TYPE___ns7__ModifyCredential
#define SOAP_TYPE___ns7__ModifyCredential (4010)
/* Operation wrapper: */
struct __ns7__ModifyCredential
{
public:
	_ns7__ModifyCredential *ns7__ModifyCredential;	/* optional element of type ns7:ModifyCredential */
public:
	int soap_type() const { return 4010; } /* = unique type id SOAP_TYPE___ns7__ModifyCredential */
};
#endif

#ifndef SOAP_TYPE___ns7__DeleteCredential
#define SOAP_TYPE___ns7__DeleteCredential (4014)
/* Operation wrapper: */
struct __ns7__DeleteCredential
{
public:
	_ns7__DeleteCredential *ns7__DeleteCredential;	/* optional element of type ns7:DeleteCredential */
public:
	int soap_type() const { return 4014; } /* = unique type id SOAP_TYPE___ns7__DeleteCredential */
};
#endif

#ifndef SOAP_TYPE___ns7__GetCredentialState
#define SOAP_TYPE___ns7__GetCredentialState (4018)
/* Operation wrapper: */
struct __ns7__GetCredentialState
{
public:
	_ns7__GetCredentialState *ns7__GetCredentialState;	/* optional element of type ns7:GetCredentialState */
public:
	int soap_type() const { return 4018; } /* = unique type id SOAP_TYPE___ns7__GetCredentialState */
};
#endif

#ifndef SOAP_TYPE___ns7__EnableCredential
#define SOAP_TYPE___ns7__EnableCredential (4022)
/* Operation wrapper: */
struct __ns7__EnableCredential
{
public:
	_ns7__EnableCredential *ns7__EnableCredential;	/* optional element of type ns7:EnableCredential */
public:
	int soap_type() const { return 4022; } /* = unique type id SOAP_TYPE___ns7__EnableCredential */
};
#endif

#ifndef SOAP_TYPE___ns7__DisableCredential
#define SOAP_TYPE___ns7__DisableCredential (4026)
/* Operation wrapper: */
struct __ns7__DisableCredential
{
public:
	_ns7__DisableCredential *ns7__DisableCredential;	/* optional element of type ns7:DisableCredential */
public:
	int soap_type() const { return 4026; } /* = unique type id SOAP_TYPE___ns7__DisableCredential */
};
#endif

#ifndef SOAP_TYPE___ns7__ResetAntipassbackViolation
#define SOAP_TYPE___ns7__ResetAntipassbackViolation (4030)
/* Operation wrapper: */
struct __ns7__ResetAntipassbackViolation
{
public:
	_ns7__ResetAntipassbackViolation *ns7__ResetAntipassbackViolation;	/* optional element of type ns7:ResetAntipassbackViolation */
public:
	int soap_type() const { return 4030; } /* = unique type id SOAP_TYPE___ns7__ResetAntipassbackViolation */
};
#endif

#ifndef SOAP_TYPE___ns7__GetCredentialIdentifiers
#define SOAP_TYPE___ns7__GetCredentialIdentifiers (4034)
/* Operation wrapper: */
struct __ns7__GetCredentialIdentifiers
{
public:
	_ns7__GetCredentialIdentifiers *ns7__GetCredentialIdentifiers;	/* optional element of type ns7:GetCredentialIdentifiers */
public:
	int soap_type() const { return 4034; } /* = unique type id SOAP_TYPE___ns7__GetCredentialIdentifiers */
};
#endif

#ifndef SOAP_TYPE___ns7__SetCredentialIdentifier
#define SOAP_TYPE___ns7__SetCredentialIdentifier (4038)
/* Operation wrapper: */
struct __ns7__SetCredentialIdentifier
{
public:
	_ns7__SetCredentialIdentifier *ns7__SetCredentialIdentifier;	/* optional element of type ns7:SetCredentialIdentifier */
public:
	int soap_type() const { return 4038; } /* = unique type id SOAP_TYPE___ns7__SetCredentialIdentifier */
};
#endif

#ifndef SOAP_TYPE___ns7__DeleteCredentialIdentifier
#define SOAP_TYPE___ns7__DeleteCredentialIdentifier (4042)
/* Operation wrapper: */
struct __ns7__DeleteCredentialIdentifier
{
public:
	_ns7__DeleteCredentialIdentifier *ns7__DeleteCredentialIdentifier;	/* optional element of type ns7:DeleteCredentialIdentifier */
public:
	int soap_type() const { return 4042; } /* = unique type id SOAP_TYPE___ns7__DeleteCredentialIdentifier */
};
#endif

#ifndef SOAP_TYPE___ns7__GetCredentialAccessProfiles
#define SOAP_TYPE___ns7__GetCredentialAccessProfiles (4046)
/* Operation wrapper: */
struct __ns7__GetCredentialAccessProfiles
{
public:
	_ns7__GetCredentialAccessProfiles *ns7__GetCredentialAccessProfiles;	/* optional element of type ns7:GetCredentialAccessProfiles */
public:
	int soap_type() const { return 4046; } /* = unique type id SOAP_TYPE___ns7__GetCredentialAccessProfiles */
};
#endif

#ifndef SOAP_TYPE___ns7__SetCredentialAccessProfiles
#define SOAP_TYPE___ns7__SetCredentialAccessProfiles (4050)
/* Operation wrapper: */
struct __ns7__SetCredentialAccessProfiles
{
public:
	_ns7__SetCredentialAccessProfiles *ns7__SetCredentialAccessProfiles;	/* optional element of type ns7:SetCredentialAccessProfiles */
public:
	int soap_type() const { return 4050; } /* = unique type id SOAP_TYPE___ns7__SetCredentialAccessProfiles */
};
#endif

#ifndef SOAP_TYPE___ns7__DeleteCredentialAccessProfiles
#define SOAP_TYPE___ns7__DeleteCredentialAccessProfiles (4054)
/* Operation wrapper: */
struct __ns7__DeleteCredentialAccessProfiles
{
public:
	_ns7__DeleteCredentialAccessProfiles *ns7__DeleteCredentialAccessProfiles;	/* optional element of type ns7:DeleteCredentialAccessProfiles */
public:
	int soap_type() const { return 4054; } /* = unique type id SOAP_TYPE___ns7__DeleteCredentialAccessProfiles */
};
#endif

#ifndef SOAP_TYPE___ns8__GetServiceCapabilities
#define SOAP_TYPE___ns8__GetServiceCapabilities (4058)
/* Operation wrapper: */
struct __ns8__GetServiceCapabilities
{
public:
	_ns8__GetServiceCapabilities *ns8__GetServiceCapabilities;	/* optional element of type ns8:GetServiceCapabilities */
public:
	int soap_type() const { return 4058; } /* = unique type id SOAP_TYPE___ns8__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___ns8__GetDoorInfoList
#define SOAP_TYPE___ns8__GetDoorInfoList (4062)
/* Operation wrapper: */
struct __ns8__GetDoorInfoList
{
public:
	_ns8__GetDoorInfoList *ns8__GetDoorInfoList;	/* optional element of type ns8:GetDoorInfoList */
public:
	int soap_type() const { return 4062; } /* = unique type id SOAP_TYPE___ns8__GetDoorInfoList */
};
#endif

#ifndef SOAP_TYPE___ns8__GetDoorInfo
#define SOAP_TYPE___ns8__GetDoorInfo (4066)
/* Operation wrapper: */
struct __ns8__GetDoorInfo
{
public:
	_ns8__GetDoorInfo *ns8__GetDoorInfo;	/* optional element of type ns8:GetDoorInfo */
public:
	int soap_type() const { return 4066; } /* = unique type id SOAP_TYPE___ns8__GetDoorInfo */
};
#endif

#ifndef SOAP_TYPE___ns8__GetDoorList
#define SOAP_TYPE___ns8__GetDoorList (4070)
/* Operation wrapper: */
struct __ns8__GetDoorList
{
public:
	_ns8__GetDoorList *ns8__GetDoorList;	/* optional element of type ns8:GetDoorList */
public:
	int soap_type() const { return 4070; } /* = unique type id SOAP_TYPE___ns8__GetDoorList */
};
#endif

#ifndef SOAP_TYPE___ns8__GetDoors
#define SOAP_TYPE___ns8__GetDoors (4074)
/* Operation wrapper: */
struct __ns8__GetDoors
{
public:
	_ns8__GetDoors *ns8__GetDoors;	/* optional element of type ns8:GetDoors */
public:
	int soap_type() const { return 4074; } /* = unique type id SOAP_TYPE___ns8__GetDoors */
};
#endif

#ifndef SOAP_TYPE___ns8__CreateDoor
#define SOAP_TYPE___ns8__CreateDoor (4078)
/* Operation wrapper: */
struct __ns8__CreateDoor
{
public:
	_ns8__CreateDoor *ns8__CreateDoor;	/* optional element of type ns8:CreateDoor */
public:
	int soap_type() const { return 4078; } /* = unique type id SOAP_TYPE___ns8__CreateDoor */
};
#endif

#ifndef SOAP_TYPE___ns8__SetDoor
#define SOAP_TYPE___ns8__SetDoor (4082)
/* Operation wrapper: */
struct __ns8__SetDoor
{
public:
	_ns8__SetDoor *ns8__SetDoor;	/* optional element of type ns8:SetDoor */
public:
	int soap_type() const { return 4082; } /* = unique type id SOAP_TYPE___ns8__SetDoor */
};
#endif

#ifndef SOAP_TYPE___ns8__ModifyDoor
#define SOAP_TYPE___ns8__ModifyDoor (4086)
/* Operation wrapper: */
struct __ns8__ModifyDoor
{
public:
	_ns8__ModifyDoor *ns8__ModifyDoor;	/* optional element of type ns8:ModifyDoor */
public:
	int soap_type() const { return 4086; } /* = unique type id SOAP_TYPE___ns8__ModifyDoor */
};
#endif

#ifndef SOAP_TYPE___ns8__DeleteDoor
#define SOAP_TYPE___ns8__DeleteDoor (4090)
/* Operation wrapper: */
struct __ns8__DeleteDoor
{
public:
	_ns8__DeleteDoor *ns8__DeleteDoor;	/* optional element of type ns8:DeleteDoor */
public:
	int soap_type() const { return 4090; } /* = unique type id SOAP_TYPE___ns8__DeleteDoor */
};
#endif

#ifndef SOAP_TYPE___ns8__GetDoorState
#define SOAP_TYPE___ns8__GetDoorState (4094)
/* Operation wrapper: */
struct __ns8__GetDoorState
{
public:
	_ns8__GetDoorState *ns8__GetDoorState;	/* optional element of type ns8:GetDoorState */
public:
	int soap_type() const { return 4094; } /* = unique type id SOAP_TYPE___ns8__GetDoorState */
};
#endif

#ifndef SOAP_TYPE___ns8__AccessDoor
#define SOAP_TYPE___ns8__AccessDoor (4098)
/* Operation wrapper: */
struct __ns8__AccessDoor
{
public:
	_ns8__AccessDoor *ns8__AccessDoor;	/* optional element of type ns8:AccessDoor */
public:
	int soap_type() const { return 4098; } /* = unique type id SOAP_TYPE___ns8__AccessDoor */
};
#endif

#ifndef SOAP_TYPE___ns8__LockDoor
#define SOAP_TYPE___ns8__LockDoor (4102)
/* Operation wrapper: */
struct __ns8__LockDoor
{
public:
	_ns8__LockDoor *ns8__LockDoor;	/* optional element of type ns8:LockDoor */
public:
	int soap_type() const { return 4102; } /* = unique type id SOAP_TYPE___ns8__LockDoor */
};
#endif

#ifndef SOAP_TYPE___ns8__UnlockDoor
#define SOAP_TYPE___ns8__UnlockDoor (4106)
/* Operation wrapper: */
struct __ns8__UnlockDoor
{
public:
	_ns8__UnlockDoor *ns8__UnlockDoor;	/* optional element of type ns8:UnlockDoor */
public:
	int soap_type() const { return 4106; } /* = unique type id SOAP_TYPE___ns8__UnlockDoor */
};
#endif

#ifndef SOAP_TYPE___ns8__BlockDoor
#define SOAP_TYPE___ns8__BlockDoor (4110)
/* Operation wrapper: */
struct __ns8__BlockDoor
{
public:
	_ns8__BlockDoor *ns8__BlockDoor;	/* optional element of type ns8:BlockDoor */
public:
	int soap_type() const { return 4110; } /* = unique type id SOAP_TYPE___ns8__BlockDoor */
};
#endif

#ifndef SOAP_TYPE___ns8__LockDownDoor
#define SOAP_TYPE___ns8__LockDownDoor (4114)
/* Operation wrapper: */
struct __ns8__LockDownDoor
{
public:
	_ns8__LockDownDoor *ns8__LockDownDoor;	/* optional element of type ns8:LockDownDoor */
public:
	int soap_type() const { return 4114; } /* = unique type id SOAP_TYPE___ns8__LockDownDoor */
};
#endif

#ifndef SOAP_TYPE___ns8__LockDownReleaseDoor
#define SOAP_TYPE___ns8__LockDownReleaseDoor (4118)
/* Operation wrapper: */
struct __ns8__LockDownReleaseDoor
{
public:
	_ns8__LockDownReleaseDoor *ns8__LockDownReleaseDoor;	/* optional element of type ns8:LockDownReleaseDoor */
public:
	int soap_type() const { return 4118; } /* = unique type id SOAP_TYPE___ns8__LockDownReleaseDoor */
};
#endif

#ifndef SOAP_TYPE___ns8__LockOpenDoor
#define SOAP_TYPE___ns8__LockOpenDoor (4122)
/* Operation wrapper: */
struct __ns8__LockOpenDoor
{
public:
	_ns8__LockOpenDoor *ns8__LockOpenDoor;	/* optional element of type ns8:LockOpenDoor */
public:
	int soap_type() const { return 4122; } /* = unique type id SOAP_TYPE___ns8__LockOpenDoor */
};
#endif

#ifndef SOAP_TYPE___ns8__LockOpenReleaseDoor
#define SOAP_TYPE___ns8__LockOpenReleaseDoor (4126)
/* Operation wrapper: */
struct __ns8__LockOpenReleaseDoor
{
public:
	_ns8__LockOpenReleaseDoor *ns8__LockOpenReleaseDoor;	/* optional element of type ns8:LockOpenReleaseDoor */
public:
	int soap_type() const { return 4126; } /* = unique type id SOAP_TYPE___ns8__LockOpenReleaseDoor */
};
#endif

#ifndef SOAP_TYPE___ns8__DoubleLockDoor
#define SOAP_TYPE___ns8__DoubleLockDoor (4130)
/* Operation wrapper: */
struct __ns8__DoubleLockDoor
{
public:
	_ns8__DoubleLockDoor *ns8__DoubleLockDoor;	/* optional element of type ns8:DoubleLockDoor */
public:
	int soap_type() const { return 4130; } /* = unique type id SOAP_TYPE___ns8__DoubleLockDoor */
};
#endif

#ifndef SOAP_TYPE___ns9__GetServiceCapabilities
#define SOAP_TYPE___ns9__GetServiceCapabilities (4134)
/* Operation wrapper: */
struct __ns9__GetServiceCapabilities
{
public:
	_ns9__GetServiceCapabilities *ns9__GetServiceCapabilities;	/* optional element of type ns9:GetServiceCapabilities */
public:
	int soap_type() const { return 4134; } /* = unique type id SOAP_TYPE___ns9__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___ns9__CreateProfile
#define SOAP_TYPE___ns9__CreateProfile (4138)
/* Operation wrapper: */
struct __ns9__CreateProfile
{
public:
	_ns9__CreateProfile *ns9__CreateProfile;	/* optional element of type ns9:CreateProfile */
public:
	int soap_type() const { return 4138; } /* = unique type id SOAP_TYPE___ns9__CreateProfile */
};
#endif

#ifndef SOAP_TYPE___ns9__GetProfiles
#define SOAP_TYPE___ns9__GetProfiles (4142)
/* Operation wrapper: */
struct __ns9__GetProfiles
{
public:
	_ns9__GetProfiles *ns9__GetProfiles;	/* optional element of type ns9:GetProfiles */
public:
	int soap_type() const { return 4142; } /* = unique type id SOAP_TYPE___ns9__GetProfiles */
};
#endif

#ifndef SOAP_TYPE___ns9__AddConfiguration
#define SOAP_TYPE___ns9__AddConfiguration (4146)
/* Operation wrapper: */
struct __ns9__AddConfiguration
{
public:
	_ns9__AddConfiguration *ns9__AddConfiguration;	/* optional element of type ns9:AddConfiguration */
public:
	int soap_type() const { return 4146; } /* = unique type id SOAP_TYPE___ns9__AddConfiguration */
};
#endif

#ifndef SOAP_TYPE___ns9__RemoveConfiguration
#define SOAP_TYPE___ns9__RemoveConfiguration (4150)
/* Operation wrapper: */
struct __ns9__RemoveConfiguration
{
public:
	_ns9__RemoveConfiguration *ns9__RemoveConfiguration;	/* optional element of type ns9:RemoveConfiguration */
public:
	int soap_type() const { return 4150; } /* = unique type id SOAP_TYPE___ns9__RemoveConfiguration */
};
#endif

#ifndef SOAP_TYPE___ns9__DeleteProfile
#define SOAP_TYPE___ns9__DeleteProfile (4154)
/* Operation wrapper: */
struct __ns9__DeleteProfile
{
public:
	_ns9__DeleteProfile *ns9__DeleteProfile;	/* optional element of type ns9:DeleteProfile */
public:
	int soap_type() const { return 4154; } /* = unique type id SOAP_TYPE___ns9__DeleteProfile */
};
#endif

#ifndef SOAP_TYPE___ns9__GetVideoSourceConfigurations
#define SOAP_TYPE___ns9__GetVideoSourceConfigurations (4158)
/* Operation wrapper: */
struct __ns9__GetVideoSourceConfigurations
{
public:
	ns9__GetConfiguration *ns9__GetVideoSourceConfigurations;	/* optional element of type ns9:GetConfiguration */
public:
	int soap_type() const { return 4158; } /* = unique type id SOAP_TYPE___ns9__GetVideoSourceConfigurations */
};
#endif

#ifndef SOAP_TYPE___ns9__GetVideoEncoderConfigurations
#define SOAP_TYPE___ns9__GetVideoEncoderConfigurations (4161)
/* Operation wrapper: */
struct __ns9__GetVideoEncoderConfigurations
{
public:
	ns9__GetConfiguration *ns9__GetVideoEncoderConfigurations;	/* optional element of type ns9:GetConfiguration */
public:
	int soap_type() const { return 4161; } /* = unique type id SOAP_TYPE___ns9__GetVideoEncoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___ns9__GetAudioSourceConfigurations
#define SOAP_TYPE___ns9__GetAudioSourceConfigurations (4164)
/* Operation wrapper: */
struct __ns9__GetAudioSourceConfigurations
{
public:
	ns9__GetConfiguration *ns9__GetAudioSourceConfigurations;	/* optional element of type ns9:GetConfiguration */
public:
	int soap_type() const { return 4164; } /* = unique type id SOAP_TYPE___ns9__GetAudioSourceConfigurations */
};
#endif

#ifndef SOAP_TYPE___ns9__GetAudioEncoderConfigurations
#define SOAP_TYPE___ns9__GetAudioEncoderConfigurations (4167)
/* Operation wrapper: */
struct __ns9__GetAudioEncoderConfigurations
{
public:
	ns9__GetConfiguration *ns9__GetAudioEncoderConfigurations;	/* optional element of type ns9:GetConfiguration */
public:
	int soap_type() const { return 4167; } /* = unique type id SOAP_TYPE___ns9__GetAudioEncoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___ns9__GetAnalyticsConfigurations
#define SOAP_TYPE___ns9__GetAnalyticsConfigurations (4170)
/* Operation wrapper: */
struct __ns9__GetAnalyticsConfigurations
{
public:
	ns9__GetConfiguration *ns9__GetAnalyticsConfigurations;	/* optional element of type ns9:GetConfiguration */
public:
	int soap_type() const { return 4170; } /* = unique type id SOAP_TYPE___ns9__GetAnalyticsConfigurations */
};
#endif

#ifndef SOAP_TYPE___ns9__GetMetadataConfigurations
#define SOAP_TYPE___ns9__GetMetadataConfigurations (4173)
/* Operation wrapper: */
struct __ns9__GetMetadataConfigurations
{
public:
	ns9__GetConfiguration *ns9__GetMetadataConfigurations;	/* optional element of type ns9:GetConfiguration */
public:
	int soap_type() const { return 4173; } /* = unique type id SOAP_TYPE___ns9__GetMetadataConfigurations */
};
#endif

#ifndef SOAP_TYPE___ns9__GetAudioOutputConfigurations
#define SOAP_TYPE___ns9__GetAudioOutputConfigurations (4176)
/* Operation wrapper: */
struct __ns9__GetAudioOutputConfigurations
{
public:
	ns9__GetConfiguration *ns9__GetAudioOutputConfigurations;	/* optional element of type ns9:GetConfiguration */
public:
	int soap_type() const { return 4176; } /* = unique type id SOAP_TYPE___ns9__GetAudioOutputConfigurations */
};
#endif

#ifndef SOAP_TYPE___ns9__GetAudioDecoderConfigurations
#define SOAP_TYPE___ns9__GetAudioDecoderConfigurations (4179)
/* Operation wrapper: */
struct __ns9__GetAudioDecoderConfigurations
{
public:
	ns9__GetConfiguration *ns9__GetAudioDecoderConfigurations;	/* optional element of type ns9:GetConfiguration */
public:
	int soap_type() const { return 4179; } /* = unique type id SOAP_TYPE___ns9__GetAudioDecoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___ns9__SetVideoSourceConfigurationResponse
#define SOAP_TYPE___ns9__SetVideoSourceConfigurationResponse (4183)
/* Operation wrapper: */
struct __ns9__SetVideoSourceConfigurationResponse
{
public:
	ns9__SetConfigurationResponse *ns9__SetVideoSourceConfigurationResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns9:SetConfigurationResponse */
public:
	int soap_type() const { return 4183; } /* = unique type id SOAP_TYPE___ns9__SetVideoSourceConfigurationResponse */
};
#endif

#ifndef SOAP_TYPE___ns9__SetVideoSourceConfiguration
#define SOAP_TYPE___ns9__SetVideoSourceConfiguration (4184)
/* Operation wrapper: */
struct __ns9__SetVideoSourceConfiguration
{
public:
	_ns9__SetVideoSourceConfiguration *ns9__SetVideoSourceConfiguration;	/* optional element of type ns9:SetVideoSourceConfiguration */
public:
	int soap_type() const { return 4184; } /* = unique type id SOAP_TYPE___ns9__SetVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___ns9__SetVideoEncoderConfigurationResponse
#define SOAP_TYPE___ns9__SetVideoEncoderConfigurationResponse (4187)
/* Operation wrapper: */
struct __ns9__SetVideoEncoderConfigurationResponse
{
public:
	ns9__SetConfigurationResponse *ns9__SetVideoEncoderConfigurationResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns9:SetConfigurationResponse */
public:
	int soap_type() const { return 4187; } /* = unique type id SOAP_TYPE___ns9__SetVideoEncoderConfigurationResponse */
};
#endif

#ifndef SOAP_TYPE___ns9__SetVideoEncoderConfiguration
#define SOAP_TYPE___ns9__SetVideoEncoderConfiguration (4188)
/* Operation wrapper: */
struct __ns9__SetVideoEncoderConfiguration
{
public:
	_ns9__SetVideoEncoderConfiguration *ns9__SetVideoEncoderConfiguration;	/* optional element of type ns9:SetVideoEncoderConfiguration */
public:
	int soap_type() const { return 4188; } /* = unique type id SOAP_TYPE___ns9__SetVideoEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___ns9__SetAudioSourceConfigurationResponse
#define SOAP_TYPE___ns9__SetAudioSourceConfigurationResponse (4191)
/* Operation wrapper: */
struct __ns9__SetAudioSourceConfigurationResponse
{
public:
	ns9__SetConfigurationResponse *ns9__SetAudioSourceConfigurationResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns9:SetConfigurationResponse */
public:
	int soap_type() const { return 4191; } /* = unique type id SOAP_TYPE___ns9__SetAudioSourceConfigurationResponse */
};
#endif

#ifndef SOAP_TYPE___ns9__SetAudioSourceConfiguration
#define SOAP_TYPE___ns9__SetAudioSourceConfiguration (4192)
/* Operation wrapper: */
struct __ns9__SetAudioSourceConfiguration
{
public:
	_ns9__SetAudioSourceConfiguration *ns9__SetAudioSourceConfiguration;	/* optional element of type ns9:SetAudioSourceConfiguration */
public:
	int soap_type() const { return 4192; } /* = unique type id SOAP_TYPE___ns9__SetAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___ns9__SetAudioEncoderConfigurationResponse
#define SOAP_TYPE___ns9__SetAudioEncoderConfigurationResponse (4195)
/* Operation wrapper: */
struct __ns9__SetAudioEncoderConfigurationResponse
{
public:
	ns9__SetConfigurationResponse *ns9__SetAudioEncoderConfigurationResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns9:SetConfigurationResponse */
public:
	int soap_type() const { return 4195; } /* = unique type id SOAP_TYPE___ns9__SetAudioEncoderConfigurationResponse */
};
#endif

#ifndef SOAP_TYPE___ns9__SetAudioEncoderConfiguration
#define SOAP_TYPE___ns9__SetAudioEncoderConfiguration (4196)
/* Operation wrapper: */
struct __ns9__SetAudioEncoderConfiguration
{
public:
	_ns9__SetAudioEncoderConfiguration *ns9__SetAudioEncoderConfiguration;	/* optional element of type ns9:SetAudioEncoderConfiguration */
public:
	int soap_type() const { return 4196; } /* = unique type id SOAP_TYPE___ns9__SetAudioEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___ns9__SetMetadataConfigurationResponse
#define SOAP_TYPE___ns9__SetMetadataConfigurationResponse (4199)
/* Operation wrapper: */
struct __ns9__SetMetadataConfigurationResponse
{
public:
	ns9__SetConfigurationResponse *ns9__SetMetadataConfigurationResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns9:SetConfigurationResponse */
public:
	int soap_type() const { return 4199; } /* = unique type id SOAP_TYPE___ns9__SetMetadataConfigurationResponse */
};
#endif

#ifndef SOAP_TYPE___ns9__SetMetadataConfiguration
#define SOAP_TYPE___ns9__SetMetadataConfiguration (4200)
/* Operation wrapper: */
struct __ns9__SetMetadataConfiguration
{
public:
	_ns9__SetMetadataConfiguration *ns9__SetMetadataConfiguration;	/* optional element of type ns9:SetMetadataConfiguration */
public:
	int soap_type() const { return 4200; } /* = unique type id SOAP_TYPE___ns9__SetMetadataConfiguration */
};
#endif

#ifndef SOAP_TYPE___ns9__SetAudioOutputConfigurationResponse
#define SOAP_TYPE___ns9__SetAudioOutputConfigurationResponse (4203)
/* Operation wrapper: */
struct __ns9__SetAudioOutputConfigurationResponse
{
public:
	ns9__SetConfigurationResponse *ns9__SetAudioOutputConfigurationResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns9:SetConfigurationResponse */
public:
	int soap_type() const { return 4203; } /* = unique type id SOAP_TYPE___ns9__SetAudioOutputConfigurationResponse */
};
#endif

#ifndef SOAP_TYPE___ns9__SetAudioOutputConfiguration
#define SOAP_TYPE___ns9__SetAudioOutputConfiguration (4204)
/* Operation wrapper: */
struct __ns9__SetAudioOutputConfiguration
{
public:
	_ns9__SetAudioOutputConfiguration *ns9__SetAudioOutputConfiguration;	/* optional element of type ns9:SetAudioOutputConfiguration */
public:
	int soap_type() const { return 4204; } /* = unique type id SOAP_TYPE___ns9__SetAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___ns9__SetAudioDecoderConfigurationResponse
#define SOAP_TYPE___ns9__SetAudioDecoderConfigurationResponse (4207)
/* Operation wrapper: */
struct __ns9__SetAudioDecoderConfigurationResponse
{
public:
	ns9__SetConfigurationResponse *ns9__SetAudioDecoderConfigurationResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns9:SetConfigurationResponse */
public:
	int soap_type() const { return 4207; } /* = unique type id SOAP_TYPE___ns9__SetAudioDecoderConfigurationResponse */
};
#endif

#ifndef SOAP_TYPE___ns9__SetAudioDecoderConfiguration
#define SOAP_TYPE___ns9__SetAudioDecoderConfiguration (4208)
/* Operation wrapper: */
struct __ns9__SetAudioDecoderConfiguration
{
public:
	_ns9__SetAudioDecoderConfiguration *ns9__SetAudioDecoderConfiguration;	/* optional element of type ns9:SetAudioDecoderConfiguration */
public:
	int soap_type() const { return 4208; } /* = unique type id SOAP_TYPE___ns9__SetAudioDecoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___ns9__GetVideoSourceConfigurationOptions
#define SOAP_TYPE___ns9__GetVideoSourceConfigurationOptions (4211)
/* Operation wrapper: */
struct __ns9__GetVideoSourceConfigurationOptions
{
public:
	ns9__GetConfiguration *ns9__GetVideoSourceConfigurationOptions;	/* optional element of type ns9:GetConfiguration */
public:
	int soap_type() const { return 4211; } /* = unique type id SOAP_TYPE___ns9__GetVideoSourceConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___ns9__GetVideoEncoderConfigurationOptions
#define SOAP_TYPE___ns9__GetVideoEncoderConfigurationOptions (4214)
/* Operation wrapper: */
struct __ns9__GetVideoEncoderConfigurationOptions
{
public:
	ns9__GetConfiguration *ns9__GetVideoEncoderConfigurationOptions;	/* optional element of type ns9:GetConfiguration */
public:
	int soap_type() const { return 4214; } /* = unique type id SOAP_TYPE___ns9__GetVideoEncoderConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___ns9__GetAudioSourceConfigurationOptions
#define SOAP_TYPE___ns9__GetAudioSourceConfigurationOptions (4217)
/* Operation wrapper: */
struct __ns9__GetAudioSourceConfigurationOptions
{
public:
	ns9__GetConfiguration *ns9__GetAudioSourceConfigurationOptions;	/* optional element of type ns9:GetConfiguration */
public:
	int soap_type() const { return 4217; } /* = unique type id SOAP_TYPE___ns9__GetAudioSourceConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___ns9__GetAudioEncoderConfigurationOptions
#define SOAP_TYPE___ns9__GetAudioEncoderConfigurationOptions (4220)
/* Operation wrapper: */
struct __ns9__GetAudioEncoderConfigurationOptions
{
public:
	ns9__GetConfiguration *ns9__GetAudioEncoderConfigurationOptions;	/* optional element of type ns9:GetConfiguration */
public:
	int soap_type() const { return 4220; } /* = unique type id SOAP_TYPE___ns9__GetAudioEncoderConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___ns9__GetMetadataConfigurationOptions
#define SOAP_TYPE___ns9__GetMetadataConfigurationOptions (4223)
/* Operation wrapper: */
struct __ns9__GetMetadataConfigurationOptions
{
public:
	ns9__GetConfiguration *ns9__GetMetadataConfigurationOptions;	/* optional element of type ns9:GetConfiguration */
public:
	int soap_type() const { return 4223; } /* = unique type id SOAP_TYPE___ns9__GetMetadataConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___ns9__GetAudioOutputConfigurationOptions
#define SOAP_TYPE___ns9__GetAudioOutputConfigurationOptions (4226)
/* Operation wrapper: */
struct __ns9__GetAudioOutputConfigurationOptions
{
public:
	ns9__GetConfiguration *ns9__GetAudioOutputConfigurationOptions;	/* optional element of type ns9:GetConfiguration */
public:
	int soap_type() const { return 4226; } /* = unique type id SOAP_TYPE___ns9__GetAudioOutputConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___ns9__GetAudioDecoderConfigurationOptions
#define SOAP_TYPE___ns9__GetAudioDecoderConfigurationOptions (4229)
/* Operation wrapper: */
struct __ns9__GetAudioDecoderConfigurationOptions
{
public:
	ns9__GetConfiguration *ns9__GetAudioDecoderConfigurationOptions;	/* optional element of type ns9:GetConfiguration */
public:
	int soap_type() const { return 4229; } /* = unique type id SOAP_TYPE___ns9__GetAudioDecoderConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___ns9__GetVideoEncoderInstances
#define SOAP_TYPE___ns9__GetVideoEncoderInstances (4233)
/* Operation wrapper: */
struct __ns9__GetVideoEncoderInstances
{
public:
	_ns9__GetVideoEncoderInstances *ns9__GetVideoEncoderInstances;	/* optional element of type ns9:GetVideoEncoderInstances */
public:
	int soap_type() const { return 4233; } /* = unique type id SOAP_TYPE___ns9__GetVideoEncoderInstances */
};
#endif

#ifndef SOAP_TYPE___ns9__GetStreamUri
#define SOAP_TYPE___ns9__GetStreamUri (4237)
/* Operation wrapper: */
struct __ns9__GetStreamUri
{
public:
	_ns9__GetStreamUri *ns9__GetStreamUri;	/* optional element of type ns9:GetStreamUri */
public:
	int soap_type() const { return 4237; } /* = unique type id SOAP_TYPE___ns9__GetStreamUri */
};
#endif

#ifndef SOAP_TYPE___ns9__StartMulticastStreamingResponse
#define SOAP_TYPE___ns9__StartMulticastStreamingResponse (4240)
/* Operation wrapper: */
struct __ns9__StartMulticastStreamingResponse
{
public:
	ns9__SetConfigurationResponse *ns9__StartMulticastStreamingResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns9:SetConfigurationResponse */
public:
	int soap_type() const { return 4240; } /* = unique type id SOAP_TYPE___ns9__StartMulticastStreamingResponse */
};
#endif

#ifndef SOAP_TYPE___ns9__StartMulticastStreaming
#define SOAP_TYPE___ns9__StartMulticastStreaming (4241)
/* Operation wrapper: */
struct __ns9__StartMulticastStreaming
{
public:
	ns9__StartStopMulticastStreaming *ns9__StartMulticastStreaming;	/* optional element of type ns9:StartStopMulticastStreaming */
public:
	int soap_type() const { return 4241; } /* = unique type id SOAP_TYPE___ns9__StartMulticastStreaming */
};
#endif

#ifndef SOAP_TYPE___ns9__StopMulticastStreamingResponse
#define SOAP_TYPE___ns9__StopMulticastStreamingResponse (4243)
/* Operation wrapper: */
struct __ns9__StopMulticastStreamingResponse
{
public:
	ns9__SetConfigurationResponse *ns9__StopMulticastStreamingResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns9:SetConfigurationResponse */
public:
	int soap_type() const { return 4243; } /* = unique type id SOAP_TYPE___ns9__StopMulticastStreamingResponse */
};
#endif

#ifndef SOAP_TYPE___ns9__StopMulticastStreaming
#define SOAP_TYPE___ns9__StopMulticastStreaming (4244)
/* Operation wrapper: */
struct __ns9__StopMulticastStreaming
{
public:
	ns9__StartStopMulticastStreaming *ns9__StopMulticastStreaming;	/* optional element of type ns9:StartStopMulticastStreaming */
public:
	int soap_type() const { return 4244; } /* = unique type id SOAP_TYPE___ns9__StopMulticastStreaming */
};
#endif

#ifndef SOAP_TYPE___ns9__SetSynchronizationPoint
#define SOAP_TYPE___ns9__SetSynchronizationPoint (4248)
/* Operation wrapper: */
struct __ns9__SetSynchronizationPoint
{
public:
	_ns9__SetSynchronizationPoint *ns9__SetSynchronizationPoint;	/* optional element of type ns9:SetSynchronizationPoint */
public:
	int soap_type() const { return 4248; } /* = unique type id SOAP_TYPE___ns9__SetSynchronizationPoint */
};
#endif

#ifndef SOAP_TYPE___ns9__GetSnapshotUri
#define SOAP_TYPE___ns9__GetSnapshotUri (4252)
/* Operation wrapper: */
struct __ns9__GetSnapshotUri
{
public:
	_ns9__GetSnapshotUri *ns9__GetSnapshotUri;	/* optional element of type ns9:GetSnapshotUri */
public:
	int soap_type() const { return 4252; } /* = unique type id SOAP_TYPE___ns9__GetSnapshotUri */
};
#endif

#ifndef SOAP_TYPE___ns9__GetVideoSourceModes
#define SOAP_TYPE___ns9__GetVideoSourceModes (4256)
/* Operation wrapper: */
struct __ns9__GetVideoSourceModes
{
public:
	_ns9__GetVideoSourceModes *ns9__GetVideoSourceModes;	/* optional element of type ns9:GetVideoSourceModes */
public:
	int soap_type() const { return 4256; } /* = unique type id SOAP_TYPE___ns9__GetVideoSourceModes */
};
#endif

#ifndef SOAP_TYPE___ns9__SetVideoSourceMode
#define SOAP_TYPE___ns9__SetVideoSourceMode (4260)
/* Operation wrapper: */
struct __ns9__SetVideoSourceMode
{
public:
	_ns9__SetVideoSourceMode *ns9__SetVideoSourceMode;	/* optional element of type ns9:SetVideoSourceMode */
public:
	int soap_type() const { return 4260; } /* = unique type id SOAP_TYPE___ns9__SetVideoSourceMode */
};
#endif

#ifndef SOAP_TYPE___ns9__GetOSDs
#define SOAP_TYPE___ns9__GetOSDs (4264)
/* Operation wrapper: */
struct __ns9__GetOSDs
{
public:
	_ns9__GetOSDs *ns9__GetOSDs;	/* optional element of type ns9:GetOSDs */
public:
	int soap_type() const { return 4264; } /* = unique type id SOAP_TYPE___ns9__GetOSDs */
};
#endif

#ifndef SOAP_TYPE___ns9__GetOSDOptions
#define SOAP_TYPE___ns9__GetOSDOptions (4268)
/* Operation wrapper: */
struct __ns9__GetOSDOptions
{
public:
	_ns9__GetOSDOptions *ns9__GetOSDOptions;	/* optional element of type ns9:GetOSDOptions */
public:
	int soap_type() const { return 4268; } /* = unique type id SOAP_TYPE___ns9__GetOSDOptions */
};
#endif

#ifndef SOAP_TYPE___ns9__SetOSDResponse
#define SOAP_TYPE___ns9__SetOSDResponse (4271)
/* Operation wrapper: */
struct __ns9__SetOSDResponse
{
public:
	ns9__SetConfigurationResponse *ns9__SetOSDResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns9:SetConfigurationResponse */
public:
	int soap_type() const { return 4271; } /* = unique type id SOAP_TYPE___ns9__SetOSDResponse */
};
#endif

#ifndef SOAP_TYPE___ns9__SetOSD
#define SOAP_TYPE___ns9__SetOSD (4272)
/* Operation wrapper: */
struct __ns9__SetOSD
{
public:
	_ns9__SetOSD *ns9__SetOSD;	/* optional element of type ns9:SetOSD */
public:
	int soap_type() const { return 4272; } /* = unique type id SOAP_TYPE___ns9__SetOSD */
};
#endif

#ifndef SOAP_TYPE___ns9__CreateOSD
#define SOAP_TYPE___ns9__CreateOSD (4276)
/* Operation wrapper: */
struct __ns9__CreateOSD
{
public:
	_ns9__CreateOSD *ns9__CreateOSD;	/* optional element of type ns9:CreateOSD */
public:
	int soap_type() const { return 4276; } /* = unique type id SOAP_TYPE___ns9__CreateOSD */
};
#endif

#ifndef SOAP_TYPE___ns9__DeleteOSDResponse
#define SOAP_TYPE___ns9__DeleteOSDResponse (4279)
/* Operation wrapper: */
struct __ns9__DeleteOSDResponse
{
public:
	ns9__SetConfigurationResponse *ns9__DeleteOSDResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns9:SetConfigurationResponse */
public:
	int soap_type() const { return 4279; } /* = unique type id SOAP_TYPE___ns9__DeleteOSDResponse */
};
#endif

#ifndef SOAP_TYPE___ns9__DeleteOSD
#define SOAP_TYPE___ns9__DeleteOSD (4280)
/* Operation wrapper: */
struct __ns9__DeleteOSD
{
public:
	_ns9__DeleteOSD *ns9__DeleteOSD;	/* optional element of type ns9:DeleteOSD */
public:
	int soap_type() const { return 4280; } /* = unique type id SOAP_TYPE___ns9__DeleteOSD */
};
#endif

#ifndef SOAP_TYPE___ns9__GetMasks
#define SOAP_TYPE___ns9__GetMasks (4284)
/* Operation wrapper: */
struct __ns9__GetMasks
{
public:
	_ns9__GetMasks *ns9__GetMasks;	/* optional element of type ns9:GetMasks */
public:
	int soap_type() const { return 4284; } /* = unique type id SOAP_TYPE___ns9__GetMasks */
};
#endif

#ifndef SOAP_TYPE___ns9__GetMaskOptions
#define SOAP_TYPE___ns9__GetMaskOptions (4288)
/* Operation wrapper: */
struct __ns9__GetMaskOptions
{
public:
	_ns9__GetMaskOptions *ns9__GetMaskOptions;	/* optional element of type ns9:GetMaskOptions */
public:
	int soap_type() const { return 4288; } /* = unique type id SOAP_TYPE___ns9__GetMaskOptions */
};
#endif

#ifndef SOAP_TYPE___ns9__SetMaskResponse
#define SOAP_TYPE___ns9__SetMaskResponse (4291)
/* Operation wrapper: */
struct __ns9__SetMaskResponse
{
public:
	ns9__SetConfigurationResponse *ns9__SetMaskResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns9:SetConfigurationResponse */
public:
	int soap_type() const { return 4291; } /* = unique type id SOAP_TYPE___ns9__SetMaskResponse */
};
#endif

#ifndef SOAP_TYPE___ns9__SetMask
#define SOAP_TYPE___ns9__SetMask (4292)
/* Operation wrapper: */
struct __ns9__SetMask
{
public:
	_ns9__SetMask *ns9__SetMask;	/* optional element of type ns9:SetMask */
public:
	int soap_type() const { return 4292; } /* = unique type id SOAP_TYPE___ns9__SetMask */
};
#endif

#ifndef SOAP_TYPE___ns9__CreateMask
#define SOAP_TYPE___ns9__CreateMask (4296)
/* Operation wrapper: */
struct __ns9__CreateMask
{
public:
	_ns9__CreateMask *ns9__CreateMask;	/* optional element of type ns9:CreateMask */
public:
	int soap_type() const { return 4296; } /* = unique type id SOAP_TYPE___ns9__CreateMask */
};
#endif

#ifndef SOAP_TYPE___ns9__DeleteMaskResponse
#define SOAP_TYPE___ns9__DeleteMaskResponse (4299)
/* Operation wrapper: */
struct __ns9__DeleteMaskResponse
{
public:
	ns9__SetConfigurationResponse *ns9__DeleteMaskResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns9:SetConfigurationResponse */
public:
	int soap_type() const { return 4299; } /* = unique type id SOAP_TYPE___ns9__DeleteMaskResponse */
};
#endif

#ifndef SOAP_TYPE___ns9__DeleteMask
#define SOAP_TYPE___ns9__DeleteMask (4300)
/* Operation wrapper: */
struct __ns9__DeleteMask
{
public:
	_ns9__DeleteMask *ns9__DeleteMask;	/* optional element of type ns9:DeleteMask */
public:
	int soap_type() const { return 4300; } /* = unique type id SOAP_TYPE___ns9__DeleteMask */
};
#endif

#ifndef SOAP_TYPE___tad__GetServiceCapabilities
#define SOAP_TYPE___tad__GetServiceCapabilities (4304)
/* Operation wrapper: */
struct __tad__GetServiceCapabilities
{
public:
	_tad__GetServiceCapabilities *tad__GetServiceCapabilities;	/* optional element of type tad:GetServiceCapabilities */
public:
	int soap_type() const { return 4304; } /* = unique type id SOAP_TYPE___tad__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___tad__DeleteAnalyticsEngineControl
#define SOAP_TYPE___tad__DeleteAnalyticsEngineControl (4308)
/* Operation wrapper: */
struct __tad__DeleteAnalyticsEngineControl
{
public:
	_tad__DeleteAnalyticsEngineControl *tad__DeleteAnalyticsEngineControl;	/* optional element of type tad:DeleteAnalyticsEngineControl */
public:
	int soap_type() const { return 4308; } /* = unique type id SOAP_TYPE___tad__DeleteAnalyticsEngineControl */
};
#endif

#ifndef SOAP_TYPE___tad__CreateAnalyticsEngineControl
#define SOAP_TYPE___tad__CreateAnalyticsEngineControl (4312)
/* Operation wrapper: */
struct __tad__CreateAnalyticsEngineControl
{
public:
	_tad__CreateAnalyticsEngineControl *tad__CreateAnalyticsEngineControl;	/* optional element of type tad:CreateAnalyticsEngineControl */
public:
	int soap_type() const { return 4312; } /* = unique type id SOAP_TYPE___tad__CreateAnalyticsEngineControl */
};
#endif

#ifndef SOAP_TYPE___tad__SetAnalyticsEngineControl
#define SOAP_TYPE___tad__SetAnalyticsEngineControl (4316)
/* Operation wrapper: */
struct __tad__SetAnalyticsEngineControl
{
public:
	_tad__SetAnalyticsEngineControl *tad__SetAnalyticsEngineControl;	/* optional element of type tad:SetAnalyticsEngineControl */
public:
	int soap_type() const { return 4316; } /* = unique type id SOAP_TYPE___tad__SetAnalyticsEngineControl */
};
#endif

#ifndef SOAP_TYPE___tad__GetAnalyticsEngineControl
#define SOAP_TYPE___tad__GetAnalyticsEngineControl (4320)
/* Operation wrapper: */
struct __tad__GetAnalyticsEngineControl
{
public:
	_tad__GetAnalyticsEngineControl *tad__GetAnalyticsEngineControl;	/* optional element of type tad:GetAnalyticsEngineControl */
public:
	int soap_type() const { return 4320; } /* = unique type id SOAP_TYPE___tad__GetAnalyticsEngineControl */
};
#endif

#ifndef SOAP_TYPE___tad__GetAnalyticsEngineControls
#define SOAP_TYPE___tad__GetAnalyticsEngineControls (4324)
/* Operation wrapper: */
struct __tad__GetAnalyticsEngineControls
{
public:
	_tad__GetAnalyticsEngineControls *tad__GetAnalyticsEngineControls;	/* optional element of type tad:GetAnalyticsEngineControls */
public:
	int soap_type() const { return 4324; } /* = unique type id SOAP_TYPE___tad__GetAnalyticsEngineControls */
};
#endif

#ifndef SOAP_TYPE___tad__GetAnalyticsEngine
#define SOAP_TYPE___tad__GetAnalyticsEngine (4328)
/* Operation wrapper: */
struct __tad__GetAnalyticsEngine
{
public:
	_tad__GetAnalyticsEngine *tad__GetAnalyticsEngine;	/* optional element of type tad:GetAnalyticsEngine */
public:
	int soap_type() const { return 4328; } /* = unique type id SOAP_TYPE___tad__GetAnalyticsEngine */
};
#endif

#ifndef SOAP_TYPE___tad__GetAnalyticsEngines
#define SOAP_TYPE___tad__GetAnalyticsEngines (4332)
/* Operation wrapper: */
struct __tad__GetAnalyticsEngines
{
public:
	_tad__GetAnalyticsEngines *tad__GetAnalyticsEngines;	/* optional element of type tad:GetAnalyticsEngines */
public:
	int soap_type() const { return 4332; } /* = unique type id SOAP_TYPE___tad__GetAnalyticsEngines */
};
#endif

#ifndef SOAP_TYPE___tad__SetVideoAnalyticsConfiguration
#define SOAP_TYPE___tad__SetVideoAnalyticsConfiguration (4336)
/* Operation wrapper: */
struct __tad__SetVideoAnalyticsConfiguration
{
public:
	_tad__SetVideoAnalyticsConfiguration *tad__SetVideoAnalyticsConfiguration;	/* optional element of type tad:SetVideoAnalyticsConfiguration */
public:
	int soap_type() const { return 4336; } /* = unique type id SOAP_TYPE___tad__SetVideoAnalyticsConfiguration */
};
#endif

#ifndef SOAP_TYPE___tad__SetAnalyticsEngineInput
#define SOAP_TYPE___tad__SetAnalyticsEngineInput (4340)
/* Operation wrapper: */
struct __tad__SetAnalyticsEngineInput
{
public:
	_tad__SetAnalyticsEngineInput *tad__SetAnalyticsEngineInput;	/* optional element of type tad:SetAnalyticsEngineInput */
public:
	int soap_type() const { return 4340; } /* = unique type id SOAP_TYPE___tad__SetAnalyticsEngineInput */
};
#endif

#ifndef SOAP_TYPE___tad__GetAnalyticsEngineInput
#define SOAP_TYPE___tad__GetAnalyticsEngineInput (4344)
/* Operation wrapper: */
struct __tad__GetAnalyticsEngineInput
{
public:
	_tad__GetAnalyticsEngineInput *tad__GetAnalyticsEngineInput;	/* optional element of type tad:GetAnalyticsEngineInput */
public:
	int soap_type() const { return 4344; } /* = unique type id SOAP_TYPE___tad__GetAnalyticsEngineInput */
};
#endif

#ifndef SOAP_TYPE___tad__GetAnalyticsEngineInputs
#define SOAP_TYPE___tad__GetAnalyticsEngineInputs (4348)
/* Operation wrapper: */
struct __tad__GetAnalyticsEngineInputs
{
public:
	_tad__GetAnalyticsEngineInputs *tad__GetAnalyticsEngineInputs;	/* optional element of type tad:GetAnalyticsEngineInputs */
public:
	int soap_type() const { return 4348; } /* = unique type id SOAP_TYPE___tad__GetAnalyticsEngineInputs */
};
#endif

#ifndef SOAP_TYPE___tad__GetAnalyticsDeviceStreamUri
#define SOAP_TYPE___tad__GetAnalyticsDeviceStreamUri (4352)
/* Operation wrapper: */
struct __tad__GetAnalyticsDeviceStreamUri
{
public:
	_tad__GetAnalyticsDeviceStreamUri *tad__GetAnalyticsDeviceStreamUri;	/* optional element of type tad:GetAnalyticsDeviceStreamUri */
public:
	int soap_type() const { return 4352; } /* = unique type id SOAP_TYPE___tad__GetAnalyticsDeviceStreamUri */
};
#endif

#ifndef SOAP_TYPE___tad__GetVideoAnalyticsConfiguration
#define SOAP_TYPE___tad__GetVideoAnalyticsConfiguration (4356)
/* Operation wrapper: */
struct __tad__GetVideoAnalyticsConfiguration
{
public:
	_tad__GetVideoAnalyticsConfiguration *tad__GetVideoAnalyticsConfiguration;	/* optional element of type tad:GetVideoAnalyticsConfiguration */
public:
	int soap_type() const { return 4356; } /* = unique type id SOAP_TYPE___tad__GetVideoAnalyticsConfiguration */
};
#endif

#ifndef SOAP_TYPE___tad__CreateAnalyticsEngineInputs
#define SOAP_TYPE___tad__CreateAnalyticsEngineInputs (4360)
/* Operation wrapper: */
struct __tad__CreateAnalyticsEngineInputs
{
public:
	_tad__CreateAnalyticsEngineInputs *tad__CreateAnalyticsEngineInputs;	/* optional element of type tad:CreateAnalyticsEngineInputs */
public:
	int soap_type() const { return 4360; } /* = unique type id SOAP_TYPE___tad__CreateAnalyticsEngineInputs */
};
#endif

#ifndef SOAP_TYPE___tad__DeleteAnalyticsEngineInputs
#define SOAP_TYPE___tad__DeleteAnalyticsEngineInputs (4364)
/* Operation wrapper: */
struct __tad__DeleteAnalyticsEngineInputs
{
public:
	_tad__DeleteAnalyticsEngineInputs *tad__DeleteAnalyticsEngineInputs;	/* optional element of type tad:DeleteAnalyticsEngineInputs */
public:
	int soap_type() const { return 4364; } /* = unique type id SOAP_TYPE___tad__DeleteAnalyticsEngineInputs */
};
#endif

#ifndef SOAP_TYPE___tad__GetAnalyticsState
#define SOAP_TYPE___tad__GetAnalyticsState (4368)
/* Operation wrapper: */
struct __tad__GetAnalyticsState
{
public:
	_tad__GetAnalyticsState *tad__GetAnalyticsState;	/* optional element of type tad:GetAnalyticsState */
public:
	int soap_type() const { return 4368; } /* = unique type id SOAP_TYPE___tad__GetAnalyticsState */
};
#endif

#ifndef SOAP_TYPE___tds__GetServices
#define SOAP_TYPE___tds__GetServices (4372)
/* Operation wrapper: */
struct __tds__GetServices
{
public:
	_tds__GetServices *tds__GetServices;	/* optional element of type tds:GetServices */
public:
	int soap_type() const { return 4372; } /* = unique type id SOAP_TYPE___tds__GetServices */
};
#endif

#ifndef SOAP_TYPE___tds__GetServiceCapabilities
#define SOAP_TYPE___tds__GetServiceCapabilities (4376)
/* Operation wrapper: */
struct __tds__GetServiceCapabilities
{
public:
	_tds__GetServiceCapabilities *tds__GetServiceCapabilities;	/* optional element of type tds:GetServiceCapabilities */
public:
	int soap_type() const { return 4376; } /* = unique type id SOAP_TYPE___tds__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___tds__GetDeviceInformation
#define SOAP_TYPE___tds__GetDeviceInformation (4380)
/* Operation wrapper: */
struct __tds__GetDeviceInformation
{
public:
	_tds__GetDeviceInformation *tds__GetDeviceInformation;	/* optional element of type tds:GetDeviceInformation */
public:
	int soap_type() const { return 4380; } /* = unique type id SOAP_TYPE___tds__GetDeviceInformation */
};
#endif

#ifndef SOAP_TYPE___tds__SetSystemDateAndTime
#define SOAP_TYPE___tds__SetSystemDateAndTime (4384)
/* Operation wrapper: */
struct __tds__SetSystemDateAndTime
{
public:
	_tds__SetSystemDateAndTime *tds__SetSystemDateAndTime;	/* optional element of type tds:SetSystemDateAndTime */
public:
	int soap_type() const { return 4384; } /* = unique type id SOAP_TYPE___tds__SetSystemDateAndTime */
};
#endif

#ifndef SOAP_TYPE___tds__GetSystemDateAndTime
#define SOAP_TYPE___tds__GetSystemDateAndTime (4388)
/* Operation wrapper: */
struct __tds__GetSystemDateAndTime
{
public:
	_tds__GetSystemDateAndTime *tds__GetSystemDateAndTime;	/* optional element of type tds:GetSystemDateAndTime */
public:
	int soap_type() const { return 4388; } /* = unique type id SOAP_TYPE___tds__GetSystemDateAndTime */
};
#endif

#ifndef SOAP_TYPE___tds__SetSystemFactoryDefault
#define SOAP_TYPE___tds__SetSystemFactoryDefault (4392)
/* Operation wrapper: */
struct __tds__SetSystemFactoryDefault
{
public:
	_tds__SetSystemFactoryDefault *tds__SetSystemFactoryDefault;	/* optional element of type tds:SetSystemFactoryDefault */
public:
	int soap_type() const { return 4392; } /* = unique type id SOAP_TYPE___tds__SetSystemFactoryDefault */
};
#endif

#ifndef SOAP_TYPE___tds__UpgradeSystemFirmware
#define SOAP_TYPE___tds__UpgradeSystemFirmware (4396)
/* Operation wrapper: */
struct __tds__UpgradeSystemFirmware
{
public:
	_tds__UpgradeSystemFirmware *tds__UpgradeSystemFirmware;	/* optional element of type tds:UpgradeSystemFirmware */
public:
	int soap_type() const { return 4396; } /* = unique type id SOAP_TYPE___tds__UpgradeSystemFirmware */
};
#endif

#ifndef SOAP_TYPE___tds__SystemReboot
#define SOAP_TYPE___tds__SystemReboot (4400)
/* Operation wrapper: */
struct __tds__SystemReboot
{
public:
	_tds__SystemReboot *tds__SystemReboot;	/* optional element of type tds:SystemReboot */
public:
	int soap_type() const { return 4400; } /* = unique type id SOAP_TYPE___tds__SystemReboot */
};
#endif

#ifndef SOAP_TYPE___tds__RestoreSystem
#define SOAP_TYPE___tds__RestoreSystem (4404)
/* Operation wrapper: */
struct __tds__RestoreSystem
{
public:
	_tds__RestoreSystem *tds__RestoreSystem;	/* optional element of type tds:RestoreSystem */
public:
	int soap_type() const { return 4404; } /* = unique type id SOAP_TYPE___tds__RestoreSystem */
};
#endif

#ifndef SOAP_TYPE___tds__GetSystemBackup
#define SOAP_TYPE___tds__GetSystemBackup (4408)
/* Operation wrapper: */
struct __tds__GetSystemBackup
{
public:
	_tds__GetSystemBackup *tds__GetSystemBackup;	/* optional element of type tds:GetSystemBackup */
public:
	int soap_type() const { return 4408; } /* = unique type id SOAP_TYPE___tds__GetSystemBackup */
};
#endif

#ifndef SOAP_TYPE___tds__GetSystemLog
#define SOAP_TYPE___tds__GetSystemLog (4412)
/* Operation wrapper: */
struct __tds__GetSystemLog
{
public:
	_tds__GetSystemLog *tds__GetSystemLog;	/* optional element of type tds:GetSystemLog */
public:
	int soap_type() const { return 4412; } /* = unique type id SOAP_TYPE___tds__GetSystemLog */
};
#endif

#ifndef SOAP_TYPE___tds__GetSystemSupportInformation
#define SOAP_TYPE___tds__GetSystemSupportInformation (4416)
/* Operation wrapper: */
struct __tds__GetSystemSupportInformation
{
public:
	_tds__GetSystemSupportInformation *tds__GetSystemSupportInformation;	/* optional element of type tds:GetSystemSupportInformation */
public:
	int soap_type() const { return 4416; } /* = unique type id SOAP_TYPE___tds__GetSystemSupportInformation */
};
#endif

#ifndef SOAP_TYPE___tds__GetScopes
#define SOAP_TYPE___tds__GetScopes (4420)
/* Operation wrapper: */
struct __tds__GetScopes
{
public:
	_tds__GetScopes *tds__GetScopes;	/* optional element of type tds:GetScopes */
public:
	int soap_type() const { return 4420; } /* = unique type id SOAP_TYPE___tds__GetScopes */
};
#endif

#ifndef SOAP_TYPE___tds__SetScopes
#define SOAP_TYPE___tds__SetScopes (4424)
/* Operation wrapper: */
struct __tds__SetScopes
{
public:
	_tds__SetScopes *tds__SetScopes;	/* optional element of type tds:SetScopes */
public:
	int soap_type() const { return 4424; } /* = unique type id SOAP_TYPE___tds__SetScopes */
};
#endif

#ifndef SOAP_TYPE___tds__AddScopes
#define SOAP_TYPE___tds__AddScopes (4428)
/* Operation wrapper: */
struct __tds__AddScopes
{
public:
	_tds__AddScopes *tds__AddScopes;	/* optional element of type tds:AddScopes */
public:
	int soap_type() const { return 4428; } /* = unique type id SOAP_TYPE___tds__AddScopes */
};
#endif

#ifndef SOAP_TYPE___tds__RemoveScopes
#define SOAP_TYPE___tds__RemoveScopes (4432)
/* Operation wrapper: */
struct __tds__RemoveScopes
{
public:
	_tds__RemoveScopes *tds__RemoveScopes;	/* optional element of type tds:RemoveScopes */
public:
	int soap_type() const { return 4432; } /* = unique type id SOAP_TYPE___tds__RemoveScopes */
};
#endif

#ifndef SOAP_TYPE___tds__GetDiscoveryMode
#define SOAP_TYPE___tds__GetDiscoveryMode (4436)
/* Operation wrapper: */
struct __tds__GetDiscoveryMode
{
public:
	_tds__GetDiscoveryMode *tds__GetDiscoveryMode;	/* optional element of type tds:GetDiscoveryMode */
public:
	int soap_type() const { return 4436; } /* = unique type id SOAP_TYPE___tds__GetDiscoveryMode */
};
#endif

#ifndef SOAP_TYPE___tds__SetDiscoveryMode
#define SOAP_TYPE___tds__SetDiscoveryMode (4440)
/* Operation wrapper: */
struct __tds__SetDiscoveryMode
{
public:
	_tds__SetDiscoveryMode *tds__SetDiscoveryMode;	/* optional element of type tds:SetDiscoveryMode */
public:
	int soap_type() const { return 4440; } /* = unique type id SOAP_TYPE___tds__SetDiscoveryMode */
};
#endif

#ifndef SOAP_TYPE___tds__GetRemoteDiscoveryMode
#define SOAP_TYPE___tds__GetRemoteDiscoveryMode (4444)
/* Operation wrapper: */
struct __tds__GetRemoteDiscoveryMode
{
public:
	_tds__GetRemoteDiscoveryMode *tds__GetRemoteDiscoveryMode;	/* optional element of type tds:GetRemoteDiscoveryMode */
public:
	int soap_type() const { return 4444; } /* = unique type id SOAP_TYPE___tds__GetRemoteDiscoveryMode */
};
#endif

#ifndef SOAP_TYPE___tds__SetRemoteDiscoveryMode
#define SOAP_TYPE___tds__SetRemoteDiscoveryMode (4448)
/* Operation wrapper: */
struct __tds__SetRemoteDiscoveryMode
{
public:
	_tds__SetRemoteDiscoveryMode *tds__SetRemoteDiscoveryMode;	/* optional element of type tds:SetRemoteDiscoveryMode */
public:
	int soap_type() const { return 4448; } /* = unique type id SOAP_TYPE___tds__SetRemoteDiscoveryMode */
};
#endif

#ifndef SOAP_TYPE___tds__GetDPAddresses
#define SOAP_TYPE___tds__GetDPAddresses (4452)
/* Operation wrapper: */
struct __tds__GetDPAddresses
{
public:
	_tds__GetDPAddresses *tds__GetDPAddresses;	/* optional element of type tds:GetDPAddresses */
public:
	int soap_type() const { return 4452; } /* = unique type id SOAP_TYPE___tds__GetDPAddresses */
};
#endif

#ifndef SOAP_TYPE___tds__GetEndpointReference
#define SOAP_TYPE___tds__GetEndpointReference (4456)
/* Operation wrapper: */
struct __tds__GetEndpointReference
{
public:
	_tds__GetEndpointReference *tds__GetEndpointReference;	/* optional element of type tds:GetEndpointReference */
public:
	int soap_type() const { return 4456; } /* = unique type id SOAP_TYPE___tds__GetEndpointReference */
};
#endif

#ifndef SOAP_TYPE___tds__GetRemoteUser
#define SOAP_TYPE___tds__GetRemoteUser (4460)
/* Operation wrapper: */
struct __tds__GetRemoteUser
{
public:
	_tds__GetRemoteUser *tds__GetRemoteUser;	/* optional element of type tds:GetRemoteUser */
public:
	int soap_type() const { return 4460; } /* = unique type id SOAP_TYPE___tds__GetRemoteUser */
};
#endif

#ifndef SOAP_TYPE___tds__SetRemoteUser
#define SOAP_TYPE___tds__SetRemoteUser (4464)
/* Operation wrapper: */
struct __tds__SetRemoteUser
{
public:
	_tds__SetRemoteUser *tds__SetRemoteUser;	/* optional element of type tds:SetRemoteUser */
public:
	int soap_type() const { return 4464; } /* = unique type id SOAP_TYPE___tds__SetRemoteUser */
};
#endif

#ifndef SOAP_TYPE___tds__GetUsers
#define SOAP_TYPE___tds__GetUsers (4468)
/* Operation wrapper: */
struct __tds__GetUsers
{
public:
	_tds__GetUsers *tds__GetUsers;	/* optional element of type tds:GetUsers */
public:
	int soap_type() const { return 4468; } /* = unique type id SOAP_TYPE___tds__GetUsers */
};
#endif

#ifndef SOAP_TYPE___tds__CreateUsers
#define SOAP_TYPE___tds__CreateUsers (4472)
/* Operation wrapper: */
struct __tds__CreateUsers
{
public:
	_tds__CreateUsers *tds__CreateUsers;	/* optional element of type tds:CreateUsers */
public:
	int soap_type() const { return 4472; } /* = unique type id SOAP_TYPE___tds__CreateUsers */
};
#endif

#ifndef SOAP_TYPE___tds__DeleteUsers
#define SOAP_TYPE___tds__DeleteUsers (4476)
/* Operation wrapper: */
struct __tds__DeleteUsers
{
public:
	_tds__DeleteUsers *tds__DeleteUsers;	/* optional element of type tds:DeleteUsers */
public:
	int soap_type() const { return 4476; } /* = unique type id SOAP_TYPE___tds__DeleteUsers */
};
#endif

#ifndef SOAP_TYPE___tds__SetUser
#define SOAP_TYPE___tds__SetUser (4480)
/* Operation wrapper: */
struct __tds__SetUser
{
public:
	_tds__SetUser *tds__SetUser;	/* optional element of type tds:SetUser */
public:
	int soap_type() const { return 4480; } /* = unique type id SOAP_TYPE___tds__SetUser */
};
#endif

#ifndef SOAP_TYPE___tds__GetWsdlUrl
#define SOAP_TYPE___tds__GetWsdlUrl (4484)
/* Operation wrapper: */
struct __tds__GetWsdlUrl
{
public:
	_tds__GetWsdlUrl *tds__GetWsdlUrl;	/* optional element of type tds:GetWsdlUrl */
public:
	int soap_type() const { return 4484; } /* = unique type id SOAP_TYPE___tds__GetWsdlUrl */
};
#endif

#ifndef SOAP_TYPE___tds__GetCapabilities
#define SOAP_TYPE___tds__GetCapabilities (4488)
/* Operation wrapper: */
struct __tds__GetCapabilities
{
public:
	_tds__GetCapabilities *tds__GetCapabilities;	/* optional element of type tds:GetCapabilities */
public:
	int soap_type() const { return 4488; } /* = unique type id SOAP_TYPE___tds__GetCapabilities */
};
#endif

#ifndef SOAP_TYPE___tds__SetDPAddresses
#define SOAP_TYPE___tds__SetDPAddresses (4492)
/* Operation wrapper: */
struct __tds__SetDPAddresses
{
public:
	_tds__SetDPAddresses *tds__SetDPAddresses;	/* optional element of type tds:SetDPAddresses */
public:
	int soap_type() const { return 4492; } /* = unique type id SOAP_TYPE___tds__SetDPAddresses */
};
#endif

#ifndef SOAP_TYPE___tds__GetHostname
#define SOAP_TYPE___tds__GetHostname (4496)
/* Operation wrapper: */
struct __tds__GetHostname
{
public:
	_tds__GetHostname *tds__GetHostname;	/* optional element of type tds:GetHostname */
public:
	int soap_type() const { return 4496; } /* = unique type id SOAP_TYPE___tds__GetHostname */
};
#endif

#ifndef SOAP_TYPE___tds__SetHostname
#define SOAP_TYPE___tds__SetHostname (4500)
/* Operation wrapper: */
struct __tds__SetHostname
{
public:
	_tds__SetHostname *tds__SetHostname;	/* optional element of type tds:SetHostname */
public:
	int soap_type() const { return 4500; } /* = unique type id SOAP_TYPE___tds__SetHostname */
};
#endif

#ifndef SOAP_TYPE___tds__SetHostnameFromDHCP
#define SOAP_TYPE___tds__SetHostnameFromDHCP (4504)
/* Operation wrapper: */
struct __tds__SetHostnameFromDHCP
{
public:
	_tds__SetHostnameFromDHCP *tds__SetHostnameFromDHCP;	/* optional element of type tds:SetHostnameFromDHCP */
public:
	int soap_type() const { return 4504; } /* = unique type id SOAP_TYPE___tds__SetHostnameFromDHCP */
};
#endif

#ifndef SOAP_TYPE___tds__GetDNS
#define SOAP_TYPE___tds__GetDNS (4508)
/* Operation wrapper: */
struct __tds__GetDNS
{
public:
	_tds__GetDNS *tds__GetDNS;	/* optional element of type tds:GetDNS */
public:
	int soap_type() const { return 4508; } /* = unique type id SOAP_TYPE___tds__GetDNS */
};
#endif

#ifndef SOAP_TYPE___tds__SetDNS
#define SOAP_TYPE___tds__SetDNS (4512)
/* Operation wrapper: */
struct __tds__SetDNS
{
public:
	_tds__SetDNS *tds__SetDNS;	/* optional element of type tds:SetDNS */
public:
	int soap_type() const { return 4512; } /* = unique type id SOAP_TYPE___tds__SetDNS */
};
#endif

#ifndef SOAP_TYPE___tds__GetNTP
#define SOAP_TYPE___tds__GetNTP (4516)
/* Operation wrapper: */
struct __tds__GetNTP
{
public:
	_tds__GetNTP *tds__GetNTP;	/* optional element of type tds:GetNTP */
public:
	int soap_type() const { return 4516; } /* = unique type id SOAP_TYPE___tds__GetNTP */
};
#endif

#ifndef SOAP_TYPE___tds__SetNTP
#define SOAP_TYPE___tds__SetNTP (4520)
/* Operation wrapper: */
struct __tds__SetNTP
{
public:
	_tds__SetNTP *tds__SetNTP;	/* optional element of type tds:SetNTP */
public:
	int soap_type() const { return 4520; } /* = unique type id SOAP_TYPE___tds__SetNTP */
};
#endif

#ifndef SOAP_TYPE___tds__GetDynamicDNS
#define SOAP_TYPE___tds__GetDynamicDNS (4524)
/* Operation wrapper: */
struct __tds__GetDynamicDNS
{
public:
	_tds__GetDynamicDNS *tds__GetDynamicDNS;	/* optional element of type tds:GetDynamicDNS */
public:
	int soap_type() const { return 4524; } /* = unique type id SOAP_TYPE___tds__GetDynamicDNS */
};
#endif

#ifndef SOAP_TYPE___tds__SetDynamicDNS
#define SOAP_TYPE___tds__SetDynamicDNS (4528)
/* Operation wrapper: */
struct __tds__SetDynamicDNS
{
public:
	_tds__SetDynamicDNS *tds__SetDynamicDNS;	/* optional element of type tds:SetDynamicDNS */
public:
	int soap_type() const { return 4528; } /* = unique type id SOAP_TYPE___tds__SetDynamicDNS */
};
#endif

#ifndef SOAP_TYPE___tds__GetNetworkInterfaces
#define SOAP_TYPE___tds__GetNetworkInterfaces (4532)
/* Operation wrapper: */
struct __tds__GetNetworkInterfaces
{
public:
	_tds__GetNetworkInterfaces *tds__GetNetworkInterfaces;	/* optional element of type tds:GetNetworkInterfaces */
public:
	int soap_type() const { return 4532; } /* = unique type id SOAP_TYPE___tds__GetNetworkInterfaces */
};
#endif

#ifndef SOAP_TYPE___tds__SetNetworkInterfaces
#define SOAP_TYPE___tds__SetNetworkInterfaces (4536)
/* Operation wrapper: */
struct __tds__SetNetworkInterfaces
{
public:
	_tds__SetNetworkInterfaces *tds__SetNetworkInterfaces;	/* optional element of type tds:SetNetworkInterfaces */
public:
	int soap_type() const { return 4536; } /* = unique type id SOAP_TYPE___tds__SetNetworkInterfaces */
};
#endif

#ifndef SOAP_TYPE___tds__GetNetworkProtocols
#define SOAP_TYPE___tds__GetNetworkProtocols (4540)
/* Operation wrapper: */
struct __tds__GetNetworkProtocols
{
public:
	_tds__GetNetworkProtocols *tds__GetNetworkProtocols;	/* optional element of type tds:GetNetworkProtocols */
public:
	int soap_type() const { return 4540; } /* = unique type id SOAP_TYPE___tds__GetNetworkProtocols */
};
#endif

#ifndef SOAP_TYPE___tds__SetNetworkProtocols
#define SOAP_TYPE___tds__SetNetworkProtocols (4544)
/* Operation wrapper: */
struct __tds__SetNetworkProtocols
{
public:
	_tds__SetNetworkProtocols *tds__SetNetworkProtocols;	/* optional element of type tds:SetNetworkProtocols */
public:
	int soap_type() const { return 4544; } /* = unique type id SOAP_TYPE___tds__SetNetworkProtocols */
};
#endif

#ifndef SOAP_TYPE___tds__GetNetworkDefaultGateway
#define SOAP_TYPE___tds__GetNetworkDefaultGateway (4548)
/* Operation wrapper: */
struct __tds__GetNetworkDefaultGateway
{
public:
	_tds__GetNetworkDefaultGateway *tds__GetNetworkDefaultGateway;	/* optional element of type tds:GetNetworkDefaultGateway */
public:
	int soap_type() const { return 4548; } /* = unique type id SOAP_TYPE___tds__GetNetworkDefaultGateway */
};
#endif

#ifndef SOAP_TYPE___tds__SetNetworkDefaultGateway
#define SOAP_TYPE___tds__SetNetworkDefaultGateway (4552)
/* Operation wrapper: */
struct __tds__SetNetworkDefaultGateway
{
public:
	_tds__SetNetworkDefaultGateway *tds__SetNetworkDefaultGateway;	/* optional element of type tds:SetNetworkDefaultGateway */
public:
	int soap_type() const { return 4552; } /* = unique type id SOAP_TYPE___tds__SetNetworkDefaultGateway */
};
#endif

#ifndef SOAP_TYPE___tds__GetZeroConfiguration
#define SOAP_TYPE___tds__GetZeroConfiguration (4556)
/* Operation wrapper: */
struct __tds__GetZeroConfiguration
{
public:
	_tds__GetZeroConfiguration *tds__GetZeroConfiguration;	/* optional element of type tds:GetZeroConfiguration */
public:
	int soap_type() const { return 4556; } /* = unique type id SOAP_TYPE___tds__GetZeroConfiguration */
};
#endif

#ifndef SOAP_TYPE___tds__SetZeroConfiguration
#define SOAP_TYPE___tds__SetZeroConfiguration (4560)
/* Operation wrapper: */
struct __tds__SetZeroConfiguration
{
public:
	_tds__SetZeroConfiguration *tds__SetZeroConfiguration;	/* optional element of type tds:SetZeroConfiguration */
public:
	int soap_type() const { return 4560; } /* = unique type id SOAP_TYPE___tds__SetZeroConfiguration */
};
#endif

#ifndef SOAP_TYPE___tds__GetIPAddressFilter
#define SOAP_TYPE___tds__GetIPAddressFilter (4564)
/* Operation wrapper: */
struct __tds__GetIPAddressFilter
{
public:
	_tds__GetIPAddressFilter *tds__GetIPAddressFilter;	/* optional element of type tds:GetIPAddressFilter */
public:
	int soap_type() const { return 4564; } /* = unique type id SOAP_TYPE___tds__GetIPAddressFilter */
};
#endif

#ifndef SOAP_TYPE___tds__SetIPAddressFilter
#define SOAP_TYPE___tds__SetIPAddressFilter (4568)
/* Operation wrapper: */
struct __tds__SetIPAddressFilter
{
public:
	_tds__SetIPAddressFilter *tds__SetIPAddressFilter;	/* optional element of type tds:SetIPAddressFilter */
public:
	int soap_type() const { return 4568; } /* = unique type id SOAP_TYPE___tds__SetIPAddressFilter */
};
#endif

#ifndef SOAP_TYPE___tds__AddIPAddressFilter
#define SOAP_TYPE___tds__AddIPAddressFilter (4572)
/* Operation wrapper: */
struct __tds__AddIPAddressFilter
{
public:
	_tds__AddIPAddressFilter *tds__AddIPAddressFilter;	/* optional element of type tds:AddIPAddressFilter */
public:
	int soap_type() const { return 4572; } /* = unique type id SOAP_TYPE___tds__AddIPAddressFilter */
};
#endif

#ifndef SOAP_TYPE___tds__RemoveIPAddressFilter
#define SOAP_TYPE___tds__RemoveIPAddressFilter (4576)
/* Operation wrapper: */
struct __tds__RemoveIPAddressFilter
{
public:
	_tds__RemoveIPAddressFilter *tds__RemoveIPAddressFilter;	/* optional element of type tds:RemoveIPAddressFilter */
public:
	int soap_type() const { return 4576; } /* = unique type id SOAP_TYPE___tds__RemoveIPAddressFilter */
};
#endif

#ifndef SOAP_TYPE___tds__GetAccessPolicy
#define SOAP_TYPE___tds__GetAccessPolicy (4580)
/* Operation wrapper: */
struct __tds__GetAccessPolicy
{
public:
	_tds__GetAccessPolicy *tds__GetAccessPolicy;	/* optional element of type tds:GetAccessPolicy */
public:
	int soap_type() const { return 4580; } /* = unique type id SOAP_TYPE___tds__GetAccessPolicy */
};
#endif

#ifndef SOAP_TYPE___tds__SetAccessPolicy
#define SOAP_TYPE___tds__SetAccessPolicy (4584)
/* Operation wrapper: */
struct __tds__SetAccessPolicy
{
public:
	_tds__SetAccessPolicy *tds__SetAccessPolicy;	/* optional element of type tds:SetAccessPolicy */
public:
	int soap_type() const { return 4584; } /* = unique type id SOAP_TYPE___tds__SetAccessPolicy */
};
#endif

#ifndef SOAP_TYPE___tds__CreateCertificate
#define SOAP_TYPE___tds__CreateCertificate (4588)
/* Operation wrapper: */
struct __tds__CreateCertificate
{
public:
	_tds__CreateCertificate *tds__CreateCertificate;	/* optional element of type tds:CreateCertificate */
public:
	int soap_type() const { return 4588; } /* = unique type id SOAP_TYPE___tds__CreateCertificate */
};
#endif

#ifndef SOAP_TYPE___tds__GetCertificates
#define SOAP_TYPE___tds__GetCertificates (4592)
/* Operation wrapper: */
struct __tds__GetCertificates
{
public:
	_tds__GetCertificates *tds__GetCertificates;	/* optional element of type tds:GetCertificates */
public:
	int soap_type() const { return 4592; } /* = unique type id SOAP_TYPE___tds__GetCertificates */
};
#endif

#ifndef SOAP_TYPE___tds__GetCertificatesStatus
#define SOAP_TYPE___tds__GetCertificatesStatus (4596)
/* Operation wrapper: */
struct __tds__GetCertificatesStatus
{
public:
	_tds__GetCertificatesStatus *tds__GetCertificatesStatus;	/* optional element of type tds:GetCertificatesStatus */
public:
	int soap_type() const { return 4596; } /* = unique type id SOAP_TYPE___tds__GetCertificatesStatus */
};
#endif

#ifndef SOAP_TYPE___tds__SetCertificatesStatus
#define SOAP_TYPE___tds__SetCertificatesStatus (4600)
/* Operation wrapper: */
struct __tds__SetCertificatesStatus
{
public:
	_tds__SetCertificatesStatus *tds__SetCertificatesStatus;	/* optional element of type tds:SetCertificatesStatus */
public:
	int soap_type() const { return 4600; } /* = unique type id SOAP_TYPE___tds__SetCertificatesStatus */
};
#endif

#ifndef SOAP_TYPE___tds__DeleteCertificates
#define SOAP_TYPE___tds__DeleteCertificates (4604)
/* Operation wrapper: */
struct __tds__DeleteCertificates
{
public:
	_tds__DeleteCertificates *tds__DeleteCertificates;	/* optional element of type tds:DeleteCertificates */
public:
	int soap_type() const { return 4604; } /* = unique type id SOAP_TYPE___tds__DeleteCertificates */
};
#endif

#ifndef SOAP_TYPE___tds__GetPkcs10Request
#define SOAP_TYPE___tds__GetPkcs10Request (4608)
/* Operation wrapper: */
struct __tds__GetPkcs10Request
{
public:
	_tds__GetPkcs10Request *tds__GetPkcs10Request;	/* optional element of type tds:GetPkcs10Request */
public:
	int soap_type() const { return 4608; } /* = unique type id SOAP_TYPE___tds__GetPkcs10Request */
};
#endif

#ifndef SOAP_TYPE___tds__LoadCertificates
#define SOAP_TYPE___tds__LoadCertificates (4612)
/* Operation wrapper: */
struct __tds__LoadCertificates
{
public:
	_tds__LoadCertificates *tds__LoadCertificates;	/* optional element of type tds:LoadCertificates */
public:
	int soap_type() const { return 4612; } /* = unique type id SOAP_TYPE___tds__LoadCertificates */
};
#endif

#ifndef SOAP_TYPE___tds__GetClientCertificateMode
#define SOAP_TYPE___tds__GetClientCertificateMode (4616)
/* Operation wrapper: */
struct __tds__GetClientCertificateMode
{
public:
	_tds__GetClientCertificateMode *tds__GetClientCertificateMode;	/* optional element of type tds:GetClientCertificateMode */
public:
	int soap_type() const { return 4616; } /* = unique type id SOAP_TYPE___tds__GetClientCertificateMode */
};
#endif

#ifndef SOAP_TYPE___tds__SetClientCertificateMode
#define SOAP_TYPE___tds__SetClientCertificateMode (4620)
/* Operation wrapper: */
struct __tds__SetClientCertificateMode
{
public:
	_tds__SetClientCertificateMode *tds__SetClientCertificateMode;	/* optional element of type tds:SetClientCertificateMode */
public:
	int soap_type() const { return 4620; } /* = unique type id SOAP_TYPE___tds__SetClientCertificateMode */
};
#endif

#ifndef SOAP_TYPE___tds__GetRelayOutputs
#define SOAP_TYPE___tds__GetRelayOutputs (4624)
/* Operation wrapper: */
struct __tds__GetRelayOutputs
{
public:
	_tds__GetRelayOutputs *tds__GetRelayOutputs;	/* optional element of type tds:GetRelayOutputs */
public:
	int soap_type() const { return 4624; } /* = unique type id SOAP_TYPE___tds__GetRelayOutputs */
};
#endif

#ifndef SOAP_TYPE___tds__SetRelayOutputSettings
#define SOAP_TYPE___tds__SetRelayOutputSettings (4628)
/* Operation wrapper: */
struct __tds__SetRelayOutputSettings
{
public:
	_tds__SetRelayOutputSettings *tds__SetRelayOutputSettings;	/* optional element of type tds:SetRelayOutputSettings */
public:
	int soap_type() const { return 4628; } /* = unique type id SOAP_TYPE___tds__SetRelayOutputSettings */
};
#endif

#ifndef SOAP_TYPE___tds__SetRelayOutputState
#define SOAP_TYPE___tds__SetRelayOutputState (4632)
/* Operation wrapper: */
struct __tds__SetRelayOutputState
{
public:
	_tds__SetRelayOutputState *tds__SetRelayOutputState;	/* optional element of type tds:SetRelayOutputState */
public:
	int soap_type() const { return 4632; } /* = unique type id SOAP_TYPE___tds__SetRelayOutputState */
};
#endif

#ifndef SOAP_TYPE___tds__SendAuxiliaryCommand
#define SOAP_TYPE___tds__SendAuxiliaryCommand (4636)
/* Operation wrapper: */
struct __tds__SendAuxiliaryCommand
{
public:
	_tds__SendAuxiliaryCommand *tds__SendAuxiliaryCommand;	/* optional element of type tds:SendAuxiliaryCommand */
public:
	int soap_type() const { return 4636; } /* = unique type id SOAP_TYPE___tds__SendAuxiliaryCommand */
};
#endif

#ifndef SOAP_TYPE___tds__GetCACertificates
#define SOAP_TYPE___tds__GetCACertificates (4640)
/* Operation wrapper: */
struct __tds__GetCACertificates
{
public:
	_tds__GetCACertificates *tds__GetCACertificates;	/* optional element of type tds:GetCACertificates */
public:
	int soap_type() const { return 4640; } /* = unique type id SOAP_TYPE___tds__GetCACertificates */
};
#endif

#ifndef SOAP_TYPE___tds__LoadCertificateWithPrivateKey
#define SOAP_TYPE___tds__LoadCertificateWithPrivateKey (4644)
/* Operation wrapper: */
struct __tds__LoadCertificateWithPrivateKey
{
public:
	_tds__LoadCertificateWithPrivateKey *tds__LoadCertificateWithPrivateKey;	/* optional element of type tds:LoadCertificateWithPrivateKey */
public:
	int soap_type() const { return 4644; } /* = unique type id SOAP_TYPE___tds__LoadCertificateWithPrivateKey */
};
#endif

#ifndef SOAP_TYPE___tds__GetCertificateInformation
#define SOAP_TYPE___tds__GetCertificateInformation (4648)
/* Operation wrapper: */
struct __tds__GetCertificateInformation
{
public:
	_tds__GetCertificateInformation *tds__GetCertificateInformation;	/* optional element of type tds:GetCertificateInformation */
public:
	int soap_type() const { return 4648; } /* = unique type id SOAP_TYPE___tds__GetCertificateInformation */
};
#endif

#ifndef SOAP_TYPE___tds__LoadCACertificates
#define SOAP_TYPE___tds__LoadCACertificates (4652)
/* Operation wrapper: */
struct __tds__LoadCACertificates
{
public:
	_tds__LoadCACertificates *tds__LoadCACertificates;	/* optional element of type tds:LoadCACertificates */
public:
	int soap_type() const { return 4652; } /* = unique type id SOAP_TYPE___tds__LoadCACertificates */
};
#endif

#ifndef SOAP_TYPE___tds__CreateDot1XConfiguration
#define SOAP_TYPE___tds__CreateDot1XConfiguration (4656)
/* Operation wrapper: */
struct __tds__CreateDot1XConfiguration
{
public:
	_tds__CreateDot1XConfiguration *tds__CreateDot1XConfiguration;	/* optional element of type tds:CreateDot1XConfiguration */
public:
	int soap_type() const { return 4656; } /* = unique type id SOAP_TYPE___tds__CreateDot1XConfiguration */
};
#endif

#ifndef SOAP_TYPE___tds__SetDot1XConfiguration
#define SOAP_TYPE___tds__SetDot1XConfiguration (4660)
/* Operation wrapper: */
struct __tds__SetDot1XConfiguration
{
public:
	_tds__SetDot1XConfiguration *tds__SetDot1XConfiguration;	/* optional element of type tds:SetDot1XConfiguration */
public:
	int soap_type() const { return 4660; } /* = unique type id SOAP_TYPE___tds__SetDot1XConfiguration */
};
#endif

#ifndef SOAP_TYPE___tds__GetDot1XConfiguration
#define SOAP_TYPE___tds__GetDot1XConfiguration (4664)
/* Operation wrapper: */
struct __tds__GetDot1XConfiguration
{
public:
	_tds__GetDot1XConfiguration *tds__GetDot1XConfiguration;	/* optional element of type tds:GetDot1XConfiguration */
public:
	int soap_type() const { return 4664; } /* = unique type id SOAP_TYPE___tds__GetDot1XConfiguration */
};
#endif

#ifndef SOAP_TYPE___tds__GetDot1XConfigurations
#define SOAP_TYPE___tds__GetDot1XConfigurations (4668)
/* Operation wrapper: */
struct __tds__GetDot1XConfigurations
{
public:
	_tds__GetDot1XConfigurations *tds__GetDot1XConfigurations;	/* optional element of type tds:GetDot1XConfigurations */
public:
	int soap_type() const { return 4668; } /* = unique type id SOAP_TYPE___tds__GetDot1XConfigurations */
};
#endif

#ifndef SOAP_TYPE___tds__DeleteDot1XConfiguration
#define SOAP_TYPE___tds__DeleteDot1XConfiguration (4672)
/* Operation wrapper: */
struct __tds__DeleteDot1XConfiguration
{
public:
	_tds__DeleteDot1XConfiguration *tds__DeleteDot1XConfiguration;	/* optional element of type tds:DeleteDot1XConfiguration */
public:
	int soap_type() const { return 4672; } /* = unique type id SOAP_TYPE___tds__DeleteDot1XConfiguration */
};
#endif

#ifndef SOAP_TYPE___tds__GetDot11Capabilities
#define SOAP_TYPE___tds__GetDot11Capabilities (4676)
/* Operation wrapper: */
struct __tds__GetDot11Capabilities
{
public:
	_tds__GetDot11Capabilities *tds__GetDot11Capabilities;	/* optional element of type tds:GetDot11Capabilities */
public:
	int soap_type() const { return 4676; } /* = unique type id SOAP_TYPE___tds__GetDot11Capabilities */
};
#endif

#ifndef SOAP_TYPE___tds__GetDot11Status
#define SOAP_TYPE___tds__GetDot11Status (4680)
/* Operation wrapper: */
struct __tds__GetDot11Status
{
public:
	_tds__GetDot11Status *tds__GetDot11Status;	/* optional element of type tds:GetDot11Status */
public:
	int soap_type() const { return 4680; } /* = unique type id SOAP_TYPE___tds__GetDot11Status */
};
#endif

#ifndef SOAP_TYPE___tds__ScanAvailableDot11Networks
#define SOAP_TYPE___tds__ScanAvailableDot11Networks (4684)
/* Operation wrapper: */
struct __tds__ScanAvailableDot11Networks
{
public:
	_tds__ScanAvailableDot11Networks *tds__ScanAvailableDot11Networks;	/* optional element of type tds:ScanAvailableDot11Networks */
public:
	int soap_type() const { return 4684; } /* = unique type id SOAP_TYPE___tds__ScanAvailableDot11Networks */
};
#endif

#ifndef SOAP_TYPE___tds__GetSystemUris
#define SOAP_TYPE___tds__GetSystemUris (4688)
/* Operation wrapper: */
struct __tds__GetSystemUris
{
public:
	_tds__GetSystemUris *tds__GetSystemUris;	/* optional element of type tds:GetSystemUris */
public:
	int soap_type() const { return 4688; } /* = unique type id SOAP_TYPE___tds__GetSystemUris */
};
#endif

#ifndef SOAP_TYPE___tds__StartFirmwareUpgrade
#define SOAP_TYPE___tds__StartFirmwareUpgrade (4692)
/* Operation wrapper: */
struct __tds__StartFirmwareUpgrade
{
public:
	_tds__StartFirmwareUpgrade *tds__StartFirmwareUpgrade;	/* optional element of type tds:StartFirmwareUpgrade */
public:
	int soap_type() const { return 4692; } /* = unique type id SOAP_TYPE___tds__StartFirmwareUpgrade */
};
#endif

#ifndef SOAP_TYPE___tds__StartSystemRestore
#define SOAP_TYPE___tds__StartSystemRestore (4696)
/* Operation wrapper: */
struct __tds__StartSystemRestore
{
public:
	_tds__StartSystemRestore *tds__StartSystemRestore;	/* optional element of type tds:StartSystemRestore */
public:
	int soap_type() const { return 4696; } /* = unique type id SOAP_TYPE___tds__StartSystemRestore */
};
#endif

#ifndef SOAP_TYPE___tds__GetStorageConfigurations
#define SOAP_TYPE___tds__GetStorageConfigurations (4700)
/* Operation wrapper: */
struct __tds__GetStorageConfigurations
{
public:
	_tds__GetStorageConfigurations *tds__GetStorageConfigurations;	/* optional element of type tds:GetStorageConfigurations */
public:
	int soap_type() const { return 4700; } /* = unique type id SOAP_TYPE___tds__GetStorageConfigurations */
};
#endif

#ifndef SOAP_TYPE___tds__CreateStorageConfiguration
#define SOAP_TYPE___tds__CreateStorageConfiguration (4704)
/* Operation wrapper: */
struct __tds__CreateStorageConfiguration
{
public:
	_tds__CreateStorageConfiguration *tds__CreateStorageConfiguration;	/* optional element of type tds:CreateStorageConfiguration */
public:
	int soap_type() const { return 4704; } /* = unique type id SOAP_TYPE___tds__CreateStorageConfiguration */
};
#endif

#ifndef SOAP_TYPE___tds__GetStorageConfiguration
#define SOAP_TYPE___tds__GetStorageConfiguration (4708)
/* Operation wrapper: */
struct __tds__GetStorageConfiguration
{
public:
	_tds__GetStorageConfiguration *tds__GetStorageConfiguration;	/* optional element of type tds:GetStorageConfiguration */
public:
	int soap_type() const { return 4708; } /* = unique type id SOAP_TYPE___tds__GetStorageConfiguration */
};
#endif

#ifndef SOAP_TYPE___tds__SetStorageConfiguration
#define SOAP_TYPE___tds__SetStorageConfiguration (4712)
/* Operation wrapper: */
struct __tds__SetStorageConfiguration
{
public:
	_tds__SetStorageConfiguration *tds__SetStorageConfiguration;	/* optional element of type tds:SetStorageConfiguration */
public:
	int soap_type() const { return 4712; } /* = unique type id SOAP_TYPE___tds__SetStorageConfiguration */
};
#endif

#ifndef SOAP_TYPE___tds__DeleteStorageConfiguration
#define SOAP_TYPE___tds__DeleteStorageConfiguration (4716)
/* Operation wrapper: */
struct __tds__DeleteStorageConfiguration
{
public:
	_tds__DeleteStorageConfiguration *tds__DeleteStorageConfiguration;	/* optional element of type tds:DeleteStorageConfiguration */
public:
	int soap_type() const { return 4716; } /* = unique type id SOAP_TYPE___tds__DeleteStorageConfiguration */
};
#endif

#ifndef SOAP_TYPE___tds__GetGeoLocation
#define SOAP_TYPE___tds__GetGeoLocation (4720)
/* Operation wrapper: */
struct __tds__GetGeoLocation
{
public:
	_tds__GetGeoLocation *tds__GetGeoLocation;	/* optional element of type tds:GetGeoLocation */
public:
	int soap_type() const { return 4720; } /* = unique type id SOAP_TYPE___tds__GetGeoLocation */
};
#endif

#ifndef SOAP_TYPE___tds__SetGeoLocation
#define SOAP_TYPE___tds__SetGeoLocation (4724)
/* Operation wrapper: */
struct __tds__SetGeoLocation
{
public:
	_tds__SetGeoLocation *tds__SetGeoLocation;	/* optional element of type tds:SetGeoLocation */
public:
	int soap_type() const { return 4724; } /* = unique type id SOAP_TYPE___tds__SetGeoLocation */
};
#endif

#ifndef SOAP_TYPE___tds__DeleteGeoLocation
#define SOAP_TYPE___tds__DeleteGeoLocation (4728)
/* Operation wrapper: */
struct __tds__DeleteGeoLocation
{
public:
	_tds__DeleteGeoLocation *tds__DeleteGeoLocation;	/* optional element of type tds:DeleteGeoLocation */
public:
	int soap_type() const { return 4728; } /* = unique type id SOAP_TYPE___tds__DeleteGeoLocation */
};
#endif

#ifndef SOAP_TYPE___tds__GetServices_
#define SOAP_TYPE___tds__GetServices_ (4730)
/* Operation wrapper: */
struct __tds__GetServices_
{
public:
	_tds__GetServices *tds__GetServices;	/* optional element of type tds:GetServices */
public:
	int soap_type() const { return 4730; } /* = unique type id SOAP_TYPE___tds__GetServices_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetServiceCapabilities_
#define SOAP_TYPE___tds__GetServiceCapabilities_ (4732)
/* Operation wrapper: */
struct __tds__GetServiceCapabilities_
{
public:
	_tds__GetServiceCapabilities *tds__GetServiceCapabilities;	/* optional element of type tds:GetServiceCapabilities */
public:
	int soap_type() const { return 4732; } /* = unique type id SOAP_TYPE___tds__GetServiceCapabilities_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetDeviceInformation_
#define SOAP_TYPE___tds__GetDeviceInformation_ (4734)
/* Operation wrapper: */
struct __tds__GetDeviceInformation_
{
public:
	_tds__GetDeviceInformation *tds__GetDeviceInformation;	/* optional element of type tds:GetDeviceInformation */
public:
	int soap_type() const { return 4734; } /* = unique type id SOAP_TYPE___tds__GetDeviceInformation_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetSystemDateAndTime_
#define SOAP_TYPE___tds__SetSystemDateAndTime_ (4736)
/* Operation wrapper: */
struct __tds__SetSystemDateAndTime_
{
public:
	_tds__SetSystemDateAndTime *tds__SetSystemDateAndTime;	/* optional element of type tds:SetSystemDateAndTime */
public:
	int soap_type() const { return 4736; } /* = unique type id SOAP_TYPE___tds__SetSystemDateAndTime_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetSystemDateAndTime_
#define SOAP_TYPE___tds__GetSystemDateAndTime_ (4738)
/* Operation wrapper: */
struct __tds__GetSystemDateAndTime_
{
public:
	_tds__GetSystemDateAndTime *tds__GetSystemDateAndTime;	/* optional element of type tds:GetSystemDateAndTime */
public:
	int soap_type() const { return 4738; } /* = unique type id SOAP_TYPE___tds__GetSystemDateAndTime_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetSystemFactoryDefault_
#define SOAP_TYPE___tds__SetSystemFactoryDefault_ (4740)
/* Operation wrapper: */
struct __tds__SetSystemFactoryDefault_
{
public:
	_tds__SetSystemFactoryDefault *tds__SetSystemFactoryDefault;	/* optional element of type tds:SetSystemFactoryDefault */
public:
	int soap_type() const { return 4740; } /* = unique type id SOAP_TYPE___tds__SetSystemFactoryDefault_ */
};
#endif

#ifndef SOAP_TYPE___tds__UpgradeSystemFirmware_
#define SOAP_TYPE___tds__UpgradeSystemFirmware_ (4742)
/* Operation wrapper: */
struct __tds__UpgradeSystemFirmware_
{
public:
	_tds__UpgradeSystemFirmware *tds__UpgradeSystemFirmware;	/* optional element of type tds:UpgradeSystemFirmware */
public:
	int soap_type() const { return 4742; } /* = unique type id SOAP_TYPE___tds__UpgradeSystemFirmware_ */
};
#endif

#ifndef SOAP_TYPE___tds__SystemReboot_
#define SOAP_TYPE___tds__SystemReboot_ (4744)
/* Operation wrapper: */
struct __tds__SystemReboot_
{
public:
	_tds__SystemReboot *tds__SystemReboot;	/* optional element of type tds:SystemReboot */
public:
	int soap_type() const { return 4744; } /* = unique type id SOAP_TYPE___tds__SystemReboot_ */
};
#endif

#ifndef SOAP_TYPE___tds__RestoreSystem_
#define SOAP_TYPE___tds__RestoreSystem_ (4746)
/* Operation wrapper: */
struct __tds__RestoreSystem_
{
public:
	_tds__RestoreSystem *tds__RestoreSystem;	/* optional element of type tds:RestoreSystem */
public:
	int soap_type() const { return 4746; } /* = unique type id SOAP_TYPE___tds__RestoreSystem_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetSystemBackup_
#define SOAP_TYPE___tds__GetSystemBackup_ (4748)
/* Operation wrapper: */
struct __tds__GetSystemBackup_
{
public:
	_tds__GetSystemBackup *tds__GetSystemBackup;	/* optional element of type tds:GetSystemBackup */
public:
	int soap_type() const { return 4748; } /* = unique type id SOAP_TYPE___tds__GetSystemBackup_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetSystemLog_
#define SOAP_TYPE___tds__GetSystemLog_ (4750)
/* Operation wrapper: */
struct __tds__GetSystemLog_
{
public:
	_tds__GetSystemLog *tds__GetSystemLog;	/* optional element of type tds:GetSystemLog */
public:
	int soap_type() const { return 4750; } /* = unique type id SOAP_TYPE___tds__GetSystemLog_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetSystemSupportInformation_
#define SOAP_TYPE___tds__GetSystemSupportInformation_ (4752)
/* Operation wrapper: */
struct __tds__GetSystemSupportInformation_
{
public:
	_tds__GetSystemSupportInformation *tds__GetSystemSupportInformation;	/* optional element of type tds:GetSystemSupportInformation */
public:
	int soap_type() const { return 4752; } /* = unique type id SOAP_TYPE___tds__GetSystemSupportInformation_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetScopes_
#define SOAP_TYPE___tds__GetScopes_ (4754)
/* Operation wrapper: */
struct __tds__GetScopes_
{
public:
	_tds__GetScopes *tds__GetScopes;	/* optional element of type tds:GetScopes */
public:
	int soap_type() const { return 4754; } /* = unique type id SOAP_TYPE___tds__GetScopes_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetScopes_
#define SOAP_TYPE___tds__SetScopes_ (4756)
/* Operation wrapper: */
struct __tds__SetScopes_
{
public:
	_tds__SetScopes *tds__SetScopes;	/* optional element of type tds:SetScopes */
public:
	int soap_type() const { return 4756; } /* = unique type id SOAP_TYPE___tds__SetScopes_ */
};
#endif

#ifndef SOAP_TYPE___tds__AddScopes_
#define SOAP_TYPE___tds__AddScopes_ (4758)
/* Operation wrapper: */
struct __tds__AddScopes_
{
public:
	_tds__AddScopes *tds__AddScopes;	/* optional element of type tds:AddScopes */
public:
	int soap_type() const { return 4758; } /* = unique type id SOAP_TYPE___tds__AddScopes_ */
};
#endif

#ifndef SOAP_TYPE___tds__RemoveScopes_
#define SOAP_TYPE___tds__RemoveScopes_ (4760)
/* Operation wrapper: */
struct __tds__RemoveScopes_
{
public:
	_tds__RemoveScopes *tds__RemoveScopes;	/* optional element of type tds:RemoveScopes */
public:
	int soap_type() const { return 4760; } /* = unique type id SOAP_TYPE___tds__RemoveScopes_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetDiscoveryMode_
#define SOAP_TYPE___tds__GetDiscoveryMode_ (4762)
/* Operation wrapper: */
struct __tds__GetDiscoveryMode_
{
public:
	_tds__GetDiscoveryMode *tds__GetDiscoveryMode;	/* optional element of type tds:GetDiscoveryMode */
public:
	int soap_type() const { return 4762; } /* = unique type id SOAP_TYPE___tds__GetDiscoveryMode_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetDiscoveryMode_
#define SOAP_TYPE___tds__SetDiscoveryMode_ (4764)
/* Operation wrapper: */
struct __tds__SetDiscoveryMode_
{
public:
	_tds__SetDiscoveryMode *tds__SetDiscoveryMode;	/* optional element of type tds:SetDiscoveryMode */
public:
	int soap_type() const { return 4764; } /* = unique type id SOAP_TYPE___tds__SetDiscoveryMode_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetRemoteDiscoveryMode_
#define SOAP_TYPE___tds__GetRemoteDiscoveryMode_ (4766)
/* Operation wrapper: */
struct __tds__GetRemoteDiscoveryMode_
{
public:
	_tds__GetRemoteDiscoveryMode *tds__GetRemoteDiscoveryMode;	/* optional element of type tds:GetRemoteDiscoveryMode */
public:
	int soap_type() const { return 4766; } /* = unique type id SOAP_TYPE___tds__GetRemoteDiscoveryMode_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetRemoteDiscoveryMode_
#define SOAP_TYPE___tds__SetRemoteDiscoveryMode_ (4768)
/* Operation wrapper: */
struct __tds__SetRemoteDiscoveryMode_
{
public:
	_tds__SetRemoteDiscoveryMode *tds__SetRemoteDiscoveryMode;	/* optional element of type tds:SetRemoteDiscoveryMode */
public:
	int soap_type() const { return 4768; } /* = unique type id SOAP_TYPE___tds__SetRemoteDiscoveryMode_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetDPAddresses_
#define SOAP_TYPE___tds__GetDPAddresses_ (4770)
/* Operation wrapper: */
struct __tds__GetDPAddresses_
{
public:
	_tds__GetDPAddresses *tds__GetDPAddresses;	/* optional element of type tds:GetDPAddresses */
public:
	int soap_type() const { return 4770; } /* = unique type id SOAP_TYPE___tds__GetDPAddresses_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetEndpointReference_
#define SOAP_TYPE___tds__GetEndpointReference_ (4772)
/* Operation wrapper: */
struct __tds__GetEndpointReference_
{
public:
	_tds__GetEndpointReference *tds__GetEndpointReference;	/* optional element of type tds:GetEndpointReference */
public:
	int soap_type() const { return 4772; } /* = unique type id SOAP_TYPE___tds__GetEndpointReference_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetRemoteUser_
#define SOAP_TYPE___tds__GetRemoteUser_ (4774)
/* Operation wrapper: */
struct __tds__GetRemoteUser_
{
public:
	_tds__GetRemoteUser *tds__GetRemoteUser;	/* optional element of type tds:GetRemoteUser */
public:
	int soap_type() const { return 4774; } /* = unique type id SOAP_TYPE___tds__GetRemoteUser_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetRemoteUser_
#define SOAP_TYPE___tds__SetRemoteUser_ (4776)
/* Operation wrapper: */
struct __tds__SetRemoteUser_
{
public:
	_tds__SetRemoteUser *tds__SetRemoteUser;	/* optional element of type tds:SetRemoteUser */
public:
	int soap_type() const { return 4776; } /* = unique type id SOAP_TYPE___tds__SetRemoteUser_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetUsers_
#define SOAP_TYPE___tds__GetUsers_ (4778)
/* Operation wrapper: */
struct __tds__GetUsers_
{
public:
	_tds__GetUsers *tds__GetUsers;	/* optional element of type tds:GetUsers */
public:
	int soap_type() const { return 4778; } /* = unique type id SOAP_TYPE___tds__GetUsers_ */
};
#endif

#ifndef SOAP_TYPE___tds__CreateUsers_
#define SOAP_TYPE___tds__CreateUsers_ (4780)
/* Operation wrapper: */
struct __tds__CreateUsers_
{
public:
	_tds__CreateUsers *tds__CreateUsers;	/* optional element of type tds:CreateUsers */
public:
	int soap_type() const { return 4780; } /* = unique type id SOAP_TYPE___tds__CreateUsers_ */
};
#endif

#ifndef SOAP_TYPE___tds__DeleteUsers_
#define SOAP_TYPE___tds__DeleteUsers_ (4782)
/* Operation wrapper: */
struct __tds__DeleteUsers_
{
public:
	_tds__DeleteUsers *tds__DeleteUsers;	/* optional element of type tds:DeleteUsers */
public:
	int soap_type() const { return 4782; } /* = unique type id SOAP_TYPE___tds__DeleteUsers_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetUser_
#define SOAP_TYPE___tds__SetUser_ (4784)
/* Operation wrapper: */
struct __tds__SetUser_
{
public:
	_tds__SetUser *tds__SetUser;	/* optional element of type tds:SetUser */
public:
	int soap_type() const { return 4784; } /* = unique type id SOAP_TYPE___tds__SetUser_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetWsdlUrl_
#define SOAP_TYPE___tds__GetWsdlUrl_ (4786)
/* Operation wrapper: */
struct __tds__GetWsdlUrl_
{
public:
	_tds__GetWsdlUrl *tds__GetWsdlUrl;	/* optional element of type tds:GetWsdlUrl */
public:
	int soap_type() const { return 4786; } /* = unique type id SOAP_TYPE___tds__GetWsdlUrl_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetCapabilities_
#define SOAP_TYPE___tds__GetCapabilities_ (4788)
/* Operation wrapper: */
struct __tds__GetCapabilities_
{
public:
	_tds__GetCapabilities *tds__GetCapabilities;	/* optional element of type tds:GetCapabilities */
public:
	int soap_type() const { return 4788; } /* = unique type id SOAP_TYPE___tds__GetCapabilities_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetDPAddresses_
#define SOAP_TYPE___tds__SetDPAddresses_ (4790)
/* Operation wrapper: */
struct __tds__SetDPAddresses_
{
public:
	_tds__SetDPAddresses *tds__SetDPAddresses;	/* optional element of type tds:SetDPAddresses */
public:
	int soap_type() const { return 4790; } /* = unique type id SOAP_TYPE___tds__SetDPAddresses_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetHostname_
#define SOAP_TYPE___tds__GetHostname_ (4792)
/* Operation wrapper: */
struct __tds__GetHostname_
{
public:
	_tds__GetHostname *tds__GetHostname;	/* optional element of type tds:GetHostname */
public:
	int soap_type() const { return 4792; } /* = unique type id SOAP_TYPE___tds__GetHostname_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetHostname_
#define SOAP_TYPE___tds__SetHostname_ (4794)
/* Operation wrapper: */
struct __tds__SetHostname_
{
public:
	_tds__SetHostname *tds__SetHostname;	/* optional element of type tds:SetHostname */
public:
	int soap_type() const { return 4794; } /* = unique type id SOAP_TYPE___tds__SetHostname_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetHostnameFromDHCP_
#define SOAP_TYPE___tds__SetHostnameFromDHCP_ (4796)
/* Operation wrapper: */
struct __tds__SetHostnameFromDHCP_
{
public:
	_tds__SetHostnameFromDHCP *tds__SetHostnameFromDHCP;	/* optional element of type tds:SetHostnameFromDHCP */
public:
	int soap_type() const { return 4796; } /* = unique type id SOAP_TYPE___tds__SetHostnameFromDHCP_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetDNS_
#define SOAP_TYPE___tds__GetDNS_ (4798)
/* Operation wrapper: */
struct __tds__GetDNS_
{
public:
	_tds__GetDNS *tds__GetDNS;	/* optional element of type tds:GetDNS */
public:
	int soap_type() const { return 4798; } /* = unique type id SOAP_TYPE___tds__GetDNS_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetDNS_
#define SOAP_TYPE___tds__SetDNS_ (4800)
/* Operation wrapper: */
struct __tds__SetDNS_
{
public:
	_tds__SetDNS *tds__SetDNS;	/* optional element of type tds:SetDNS */
public:
	int soap_type() const { return 4800; } /* = unique type id SOAP_TYPE___tds__SetDNS_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetNTP_
#define SOAP_TYPE___tds__GetNTP_ (4802)
/* Operation wrapper: */
struct __tds__GetNTP_
{
public:
	_tds__GetNTP *tds__GetNTP;	/* optional element of type tds:GetNTP */
public:
	int soap_type() const { return 4802; } /* = unique type id SOAP_TYPE___tds__GetNTP_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetNTP_
#define SOAP_TYPE___tds__SetNTP_ (4804)
/* Operation wrapper: */
struct __tds__SetNTP_
{
public:
	_tds__SetNTP *tds__SetNTP;	/* optional element of type tds:SetNTP */
public:
	int soap_type() const { return 4804; } /* = unique type id SOAP_TYPE___tds__SetNTP_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetDynamicDNS_
#define SOAP_TYPE___tds__GetDynamicDNS_ (4806)
/* Operation wrapper: */
struct __tds__GetDynamicDNS_
{
public:
	_tds__GetDynamicDNS *tds__GetDynamicDNS;	/* optional element of type tds:GetDynamicDNS */
public:
	int soap_type() const { return 4806; } /* = unique type id SOAP_TYPE___tds__GetDynamicDNS_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetDynamicDNS_
#define SOAP_TYPE___tds__SetDynamicDNS_ (4808)
/* Operation wrapper: */
struct __tds__SetDynamicDNS_
{
public:
	_tds__SetDynamicDNS *tds__SetDynamicDNS;	/* optional element of type tds:SetDynamicDNS */
public:
	int soap_type() const { return 4808; } /* = unique type id SOAP_TYPE___tds__SetDynamicDNS_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetNetworkInterfaces_
#define SOAP_TYPE___tds__GetNetworkInterfaces_ (4810)
/* Operation wrapper: */
struct __tds__GetNetworkInterfaces_
{
public:
	_tds__GetNetworkInterfaces *tds__GetNetworkInterfaces;	/* optional element of type tds:GetNetworkInterfaces */
public:
	int soap_type() const { return 4810; } /* = unique type id SOAP_TYPE___tds__GetNetworkInterfaces_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetNetworkInterfaces_
#define SOAP_TYPE___tds__SetNetworkInterfaces_ (4812)
/* Operation wrapper: */
struct __tds__SetNetworkInterfaces_
{
public:
	_tds__SetNetworkInterfaces *tds__SetNetworkInterfaces;	/* optional element of type tds:SetNetworkInterfaces */
public:
	int soap_type() const { return 4812; } /* = unique type id SOAP_TYPE___tds__SetNetworkInterfaces_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetNetworkProtocols_
#define SOAP_TYPE___tds__GetNetworkProtocols_ (4814)
/* Operation wrapper: */
struct __tds__GetNetworkProtocols_
{
public:
	_tds__GetNetworkProtocols *tds__GetNetworkProtocols;	/* optional element of type tds:GetNetworkProtocols */
public:
	int soap_type() const { return 4814; } /* = unique type id SOAP_TYPE___tds__GetNetworkProtocols_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetNetworkProtocols_
#define SOAP_TYPE___tds__SetNetworkProtocols_ (4816)
/* Operation wrapper: */
struct __tds__SetNetworkProtocols_
{
public:
	_tds__SetNetworkProtocols *tds__SetNetworkProtocols;	/* optional element of type tds:SetNetworkProtocols */
public:
	int soap_type() const { return 4816; } /* = unique type id SOAP_TYPE___tds__SetNetworkProtocols_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetNetworkDefaultGateway_
#define SOAP_TYPE___tds__GetNetworkDefaultGateway_ (4818)
/* Operation wrapper: */
struct __tds__GetNetworkDefaultGateway_
{
public:
	_tds__GetNetworkDefaultGateway *tds__GetNetworkDefaultGateway;	/* optional element of type tds:GetNetworkDefaultGateway */
public:
	int soap_type() const { return 4818; } /* = unique type id SOAP_TYPE___tds__GetNetworkDefaultGateway_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetNetworkDefaultGateway_
#define SOAP_TYPE___tds__SetNetworkDefaultGateway_ (4820)
/* Operation wrapper: */
struct __tds__SetNetworkDefaultGateway_
{
public:
	_tds__SetNetworkDefaultGateway *tds__SetNetworkDefaultGateway;	/* optional element of type tds:SetNetworkDefaultGateway */
public:
	int soap_type() const { return 4820; } /* = unique type id SOAP_TYPE___tds__SetNetworkDefaultGateway_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetZeroConfiguration_
#define SOAP_TYPE___tds__GetZeroConfiguration_ (4822)
/* Operation wrapper: */
struct __tds__GetZeroConfiguration_
{
public:
	_tds__GetZeroConfiguration *tds__GetZeroConfiguration;	/* optional element of type tds:GetZeroConfiguration */
public:
	int soap_type() const { return 4822; } /* = unique type id SOAP_TYPE___tds__GetZeroConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetZeroConfiguration_
#define SOAP_TYPE___tds__SetZeroConfiguration_ (4824)
/* Operation wrapper: */
struct __tds__SetZeroConfiguration_
{
public:
	_tds__SetZeroConfiguration *tds__SetZeroConfiguration;	/* optional element of type tds:SetZeroConfiguration */
public:
	int soap_type() const { return 4824; } /* = unique type id SOAP_TYPE___tds__SetZeroConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetIPAddressFilter_
#define SOAP_TYPE___tds__GetIPAddressFilter_ (4826)
/* Operation wrapper: */
struct __tds__GetIPAddressFilter_
{
public:
	_tds__GetIPAddressFilter *tds__GetIPAddressFilter;	/* optional element of type tds:GetIPAddressFilter */
public:
	int soap_type() const { return 4826; } /* = unique type id SOAP_TYPE___tds__GetIPAddressFilter_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetIPAddressFilter_
#define SOAP_TYPE___tds__SetIPAddressFilter_ (4828)
/* Operation wrapper: */
struct __tds__SetIPAddressFilter_
{
public:
	_tds__SetIPAddressFilter *tds__SetIPAddressFilter;	/* optional element of type tds:SetIPAddressFilter */
public:
	int soap_type() const { return 4828; } /* = unique type id SOAP_TYPE___tds__SetIPAddressFilter_ */
};
#endif

#ifndef SOAP_TYPE___tds__AddIPAddressFilter_
#define SOAP_TYPE___tds__AddIPAddressFilter_ (4830)
/* Operation wrapper: */
struct __tds__AddIPAddressFilter_
{
public:
	_tds__AddIPAddressFilter *tds__AddIPAddressFilter;	/* optional element of type tds:AddIPAddressFilter */
public:
	int soap_type() const { return 4830; } /* = unique type id SOAP_TYPE___tds__AddIPAddressFilter_ */
};
#endif

#ifndef SOAP_TYPE___tds__RemoveIPAddressFilter_
#define SOAP_TYPE___tds__RemoveIPAddressFilter_ (4832)
/* Operation wrapper: */
struct __tds__RemoveIPAddressFilter_
{
public:
	_tds__RemoveIPAddressFilter *tds__RemoveIPAddressFilter;	/* optional element of type tds:RemoveIPAddressFilter */
public:
	int soap_type() const { return 4832; } /* = unique type id SOAP_TYPE___tds__RemoveIPAddressFilter_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetAccessPolicy_
#define SOAP_TYPE___tds__GetAccessPolicy_ (4834)
/* Operation wrapper: */
struct __tds__GetAccessPolicy_
{
public:
	_tds__GetAccessPolicy *tds__GetAccessPolicy;	/* optional element of type tds:GetAccessPolicy */
public:
	int soap_type() const { return 4834; } /* = unique type id SOAP_TYPE___tds__GetAccessPolicy_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetAccessPolicy_
#define SOAP_TYPE___tds__SetAccessPolicy_ (4836)
/* Operation wrapper: */
struct __tds__SetAccessPolicy_
{
public:
	_tds__SetAccessPolicy *tds__SetAccessPolicy;	/* optional element of type tds:SetAccessPolicy */
public:
	int soap_type() const { return 4836; } /* = unique type id SOAP_TYPE___tds__SetAccessPolicy_ */
};
#endif

#ifndef SOAP_TYPE___tds__CreateCertificate_
#define SOAP_TYPE___tds__CreateCertificate_ (4838)
/* Operation wrapper: */
struct __tds__CreateCertificate_
{
public:
	_tds__CreateCertificate *tds__CreateCertificate;	/* optional element of type tds:CreateCertificate */
public:
	int soap_type() const { return 4838; } /* = unique type id SOAP_TYPE___tds__CreateCertificate_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetCertificates_
#define SOAP_TYPE___tds__GetCertificates_ (4840)
/* Operation wrapper: */
struct __tds__GetCertificates_
{
public:
	_tds__GetCertificates *tds__GetCertificates;	/* optional element of type tds:GetCertificates */
public:
	int soap_type() const { return 4840; } /* = unique type id SOAP_TYPE___tds__GetCertificates_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetCertificatesStatus_
#define SOAP_TYPE___tds__GetCertificatesStatus_ (4842)
/* Operation wrapper: */
struct __tds__GetCertificatesStatus_
{
public:
	_tds__GetCertificatesStatus *tds__GetCertificatesStatus;	/* optional element of type tds:GetCertificatesStatus */
public:
	int soap_type() const { return 4842; } /* = unique type id SOAP_TYPE___tds__GetCertificatesStatus_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetCertificatesStatus_
#define SOAP_TYPE___tds__SetCertificatesStatus_ (4844)
/* Operation wrapper: */
struct __tds__SetCertificatesStatus_
{
public:
	_tds__SetCertificatesStatus *tds__SetCertificatesStatus;	/* optional element of type tds:SetCertificatesStatus */
public:
	int soap_type() const { return 4844; } /* = unique type id SOAP_TYPE___tds__SetCertificatesStatus_ */
};
#endif

#ifndef SOAP_TYPE___tds__DeleteCertificates_
#define SOAP_TYPE___tds__DeleteCertificates_ (4846)
/* Operation wrapper: */
struct __tds__DeleteCertificates_
{
public:
	_tds__DeleteCertificates *tds__DeleteCertificates;	/* optional element of type tds:DeleteCertificates */
public:
	int soap_type() const { return 4846; } /* = unique type id SOAP_TYPE___tds__DeleteCertificates_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetPkcs10Request_
#define SOAP_TYPE___tds__GetPkcs10Request_ (4848)
/* Operation wrapper: */
struct __tds__GetPkcs10Request_
{
public:
	_tds__GetPkcs10Request *tds__GetPkcs10Request;	/* optional element of type tds:GetPkcs10Request */
public:
	int soap_type() const { return 4848; } /* = unique type id SOAP_TYPE___tds__GetPkcs10Request_ */
};
#endif

#ifndef SOAP_TYPE___tds__LoadCertificates_
#define SOAP_TYPE___tds__LoadCertificates_ (4850)
/* Operation wrapper: */
struct __tds__LoadCertificates_
{
public:
	_tds__LoadCertificates *tds__LoadCertificates;	/* optional element of type tds:LoadCertificates */
public:
	int soap_type() const { return 4850; } /* = unique type id SOAP_TYPE___tds__LoadCertificates_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetClientCertificateMode_
#define SOAP_TYPE___tds__GetClientCertificateMode_ (4852)
/* Operation wrapper: */
struct __tds__GetClientCertificateMode_
{
public:
	_tds__GetClientCertificateMode *tds__GetClientCertificateMode;	/* optional element of type tds:GetClientCertificateMode */
public:
	int soap_type() const { return 4852; } /* = unique type id SOAP_TYPE___tds__GetClientCertificateMode_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetClientCertificateMode_
#define SOAP_TYPE___tds__SetClientCertificateMode_ (4854)
/* Operation wrapper: */
struct __tds__SetClientCertificateMode_
{
public:
	_tds__SetClientCertificateMode *tds__SetClientCertificateMode;	/* optional element of type tds:SetClientCertificateMode */
public:
	int soap_type() const { return 4854; } /* = unique type id SOAP_TYPE___tds__SetClientCertificateMode_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetRelayOutputs_
#define SOAP_TYPE___tds__GetRelayOutputs_ (4856)
/* Operation wrapper: */
struct __tds__GetRelayOutputs_
{
public:
	_tds__GetRelayOutputs *tds__GetRelayOutputs;	/* optional element of type tds:GetRelayOutputs */
public:
	int soap_type() const { return 4856; } /* = unique type id SOAP_TYPE___tds__GetRelayOutputs_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetRelayOutputSettings_
#define SOAP_TYPE___tds__SetRelayOutputSettings_ (4858)
/* Operation wrapper: */
struct __tds__SetRelayOutputSettings_
{
public:
	_tds__SetRelayOutputSettings *tds__SetRelayOutputSettings;	/* optional element of type tds:SetRelayOutputSettings */
public:
	int soap_type() const { return 4858; } /* = unique type id SOAP_TYPE___tds__SetRelayOutputSettings_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetRelayOutputState_
#define SOAP_TYPE___tds__SetRelayOutputState_ (4860)
/* Operation wrapper: */
struct __tds__SetRelayOutputState_
{
public:
	_tds__SetRelayOutputState *tds__SetRelayOutputState;	/* optional element of type tds:SetRelayOutputState */
public:
	int soap_type() const { return 4860; } /* = unique type id SOAP_TYPE___tds__SetRelayOutputState_ */
};
#endif

#ifndef SOAP_TYPE___tds__SendAuxiliaryCommand_
#define SOAP_TYPE___tds__SendAuxiliaryCommand_ (4862)
/* Operation wrapper: */
struct __tds__SendAuxiliaryCommand_
{
public:
	_tds__SendAuxiliaryCommand *tds__SendAuxiliaryCommand;	/* optional element of type tds:SendAuxiliaryCommand */
public:
	int soap_type() const { return 4862; } /* = unique type id SOAP_TYPE___tds__SendAuxiliaryCommand_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetCACertificates_
#define SOAP_TYPE___tds__GetCACertificates_ (4864)
/* Operation wrapper: */
struct __tds__GetCACertificates_
{
public:
	_tds__GetCACertificates *tds__GetCACertificates;	/* optional element of type tds:GetCACertificates */
public:
	int soap_type() const { return 4864; } /* = unique type id SOAP_TYPE___tds__GetCACertificates_ */
};
#endif

#ifndef SOAP_TYPE___tds__LoadCertificateWithPrivateKey_
#define SOAP_TYPE___tds__LoadCertificateWithPrivateKey_ (4866)
/* Operation wrapper: */
struct __tds__LoadCertificateWithPrivateKey_
{
public:
	_tds__LoadCertificateWithPrivateKey *tds__LoadCertificateWithPrivateKey;	/* optional element of type tds:LoadCertificateWithPrivateKey */
public:
	int soap_type() const { return 4866; } /* = unique type id SOAP_TYPE___tds__LoadCertificateWithPrivateKey_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetCertificateInformation_
#define SOAP_TYPE___tds__GetCertificateInformation_ (4868)
/* Operation wrapper: */
struct __tds__GetCertificateInformation_
{
public:
	_tds__GetCertificateInformation *tds__GetCertificateInformation;	/* optional element of type tds:GetCertificateInformation */
public:
	int soap_type() const { return 4868; } /* = unique type id SOAP_TYPE___tds__GetCertificateInformation_ */
};
#endif

#ifndef SOAP_TYPE___tds__LoadCACertificates_
#define SOAP_TYPE___tds__LoadCACertificates_ (4870)
/* Operation wrapper: */
struct __tds__LoadCACertificates_
{
public:
	_tds__LoadCACertificates *tds__LoadCACertificates;	/* optional element of type tds:LoadCACertificates */
public:
	int soap_type() const { return 4870; } /* = unique type id SOAP_TYPE___tds__LoadCACertificates_ */
};
#endif

#ifndef SOAP_TYPE___tds__CreateDot1XConfiguration_
#define SOAP_TYPE___tds__CreateDot1XConfiguration_ (4872)
/* Operation wrapper: */
struct __tds__CreateDot1XConfiguration_
{
public:
	_tds__CreateDot1XConfiguration *tds__CreateDot1XConfiguration;	/* optional element of type tds:CreateDot1XConfiguration */
public:
	int soap_type() const { return 4872; } /* = unique type id SOAP_TYPE___tds__CreateDot1XConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetDot1XConfiguration_
#define SOAP_TYPE___tds__SetDot1XConfiguration_ (4874)
/* Operation wrapper: */
struct __tds__SetDot1XConfiguration_
{
public:
	_tds__SetDot1XConfiguration *tds__SetDot1XConfiguration;	/* optional element of type tds:SetDot1XConfiguration */
public:
	int soap_type() const { return 4874; } /* = unique type id SOAP_TYPE___tds__SetDot1XConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetDot1XConfiguration_
#define SOAP_TYPE___tds__GetDot1XConfiguration_ (4876)
/* Operation wrapper: */
struct __tds__GetDot1XConfiguration_
{
public:
	_tds__GetDot1XConfiguration *tds__GetDot1XConfiguration;	/* optional element of type tds:GetDot1XConfiguration */
public:
	int soap_type() const { return 4876; } /* = unique type id SOAP_TYPE___tds__GetDot1XConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetDot1XConfigurations_
#define SOAP_TYPE___tds__GetDot1XConfigurations_ (4878)
/* Operation wrapper: */
struct __tds__GetDot1XConfigurations_
{
public:
	_tds__GetDot1XConfigurations *tds__GetDot1XConfigurations;	/* optional element of type tds:GetDot1XConfigurations */
public:
	int soap_type() const { return 4878; } /* = unique type id SOAP_TYPE___tds__GetDot1XConfigurations_ */
};
#endif

#ifndef SOAP_TYPE___tds__DeleteDot1XConfiguration_
#define SOAP_TYPE___tds__DeleteDot1XConfiguration_ (4880)
/* Operation wrapper: */
struct __tds__DeleteDot1XConfiguration_
{
public:
	_tds__DeleteDot1XConfiguration *tds__DeleteDot1XConfiguration;	/* optional element of type tds:DeleteDot1XConfiguration */
public:
	int soap_type() const { return 4880; } /* = unique type id SOAP_TYPE___tds__DeleteDot1XConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetDot11Capabilities_
#define SOAP_TYPE___tds__GetDot11Capabilities_ (4882)
/* Operation wrapper: */
struct __tds__GetDot11Capabilities_
{
public:
	_tds__GetDot11Capabilities *tds__GetDot11Capabilities;	/* optional element of type tds:GetDot11Capabilities */
public:
	int soap_type() const { return 4882; } /* = unique type id SOAP_TYPE___tds__GetDot11Capabilities_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetDot11Status_
#define SOAP_TYPE___tds__GetDot11Status_ (4884)
/* Operation wrapper: */
struct __tds__GetDot11Status_
{
public:
	_tds__GetDot11Status *tds__GetDot11Status;	/* optional element of type tds:GetDot11Status */
public:
	int soap_type() const { return 4884; } /* = unique type id SOAP_TYPE___tds__GetDot11Status_ */
};
#endif

#ifndef SOAP_TYPE___tds__ScanAvailableDot11Networks_
#define SOAP_TYPE___tds__ScanAvailableDot11Networks_ (4886)
/* Operation wrapper: */
struct __tds__ScanAvailableDot11Networks_
{
public:
	_tds__ScanAvailableDot11Networks *tds__ScanAvailableDot11Networks;	/* optional element of type tds:ScanAvailableDot11Networks */
public:
	int soap_type() const { return 4886; } /* = unique type id SOAP_TYPE___tds__ScanAvailableDot11Networks_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetSystemUris_
#define SOAP_TYPE___tds__GetSystemUris_ (4888)
/* Operation wrapper: */
struct __tds__GetSystemUris_
{
public:
	_tds__GetSystemUris *tds__GetSystemUris;	/* optional element of type tds:GetSystemUris */
public:
	int soap_type() const { return 4888; } /* = unique type id SOAP_TYPE___tds__GetSystemUris_ */
};
#endif

#ifndef SOAP_TYPE___tds__StartFirmwareUpgrade_
#define SOAP_TYPE___tds__StartFirmwareUpgrade_ (4890)
/* Operation wrapper: */
struct __tds__StartFirmwareUpgrade_
{
public:
	_tds__StartFirmwareUpgrade *tds__StartFirmwareUpgrade;	/* optional element of type tds:StartFirmwareUpgrade */
public:
	int soap_type() const { return 4890; } /* = unique type id SOAP_TYPE___tds__StartFirmwareUpgrade_ */
};
#endif

#ifndef SOAP_TYPE___tds__StartSystemRestore_
#define SOAP_TYPE___tds__StartSystemRestore_ (4892)
/* Operation wrapper: */
struct __tds__StartSystemRestore_
{
public:
	_tds__StartSystemRestore *tds__StartSystemRestore;	/* optional element of type tds:StartSystemRestore */
public:
	int soap_type() const { return 4892; } /* = unique type id SOAP_TYPE___tds__StartSystemRestore_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetStorageConfigurations_
#define SOAP_TYPE___tds__GetStorageConfigurations_ (4894)
/* Operation wrapper: */
struct __tds__GetStorageConfigurations_
{
public:
	_tds__GetStorageConfigurations *tds__GetStorageConfigurations;	/* optional element of type tds:GetStorageConfigurations */
public:
	int soap_type() const { return 4894; } /* = unique type id SOAP_TYPE___tds__GetStorageConfigurations_ */
};
#endif

#ifndef SOAP_TYPE___tds__CreateStorageConfiguration_
#define SOAP_TYPE___tds__CreateStorageConfiguration_ (4896)
/* Operation wrapper: */
struct __tds__CreateStorageConfiguration_
{
public:
	_tds__CreateStorageConfiguration *tds__CreateStorageConfiguration;	/* optional element of type tds:CreateStorageConfiguration */
public:
	int soap_type() const { return 4896; } /* = unique type id SOAP_TYPE___tds__CreateStorageConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetStorageConfiguration_
#define SOAP_TYPE___tds__GetStorageConfiguration_ (4898)
/* Operation wrapper: */
struct __tds__GetStorageConfiguration_
{
public:
	_tds__GetStorageConfiguration *tds__GetStorageConfiguration;	/* optional element of type tds:GetStorageConfiguration */
public:
	int soap_type() const { return 4898; } /* = unique type id SOAP_TYPE___tds__GetStorageConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetStorageConfiguration_
#define SOAP_TYPE___tds__SetStorageConfiguration_ (4900)
/* Operation wrapper: */
struct __tds__SetStorageConfiguration_
{
public:
	_tds__SetStorageConfiguration *tds__SetStorageConfiguration;	/* optional element of type tds:SetStorageConfiguration */
public:
	int soap_type() const { return 4900; } /* = unique type id SOAP_TYPE___tds__SetStorageConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___tds__DeleteStorageConfiguration_
#define SOAP_TYPE___tds__DeleteStorageConfiguration_ (4902)
/* Operation wrapper: */
struct __tds__DeleteStorageConfiguration_
{
public:
	_tds__DeleteStorageConfiguration *tds__DeleteStorageConfiguration;	/* optional element of type tds:DeleteStorageConfiguration */
public:
	int soap_type() const { return 4902; } /* = unique type id SOAP_TYPE___tds__DeleteStorageConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetGeoLocation_
#define SOAP_TYPE___tds__GetGeoLocation_ (4904)
/* Operation wrapper: */
struct __tds__GetGeoLocation_
{
public:
	_tds__GetGeoLocation *tds__GetGeoLocation;	/* optional element of type tds:GetGeoLocation */
public:
	int soap_type() const { return 4904; } /* = unique type id SOAP_TYPE___tds__GetGeoLocation_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetGeoLocation_
#define SOAP_TYPE___tds__SetGeoLocation_ (4906)
/* Operation wrapper: */
struct __tds__SetGeoLocation_
{
public:
	_tds__SetGeoLocation *tds__SetGeoLocation;	/* optional element of type tds:SetGeoLocation */
public:
	int soap_type() const { return 4906; } /* = unique type id SOAP_TYPE___tds__SetGeoLocation_ */
};
#endif

#ifndef SOAP_TYPE___tds__DeleteGeoLocation_
#define SOAP_TYPE___tds__DeleteGeoLocation_ (4908)
/* Operation wrapper: */
struct __tds__DeleteGeoLocation_
{
public:
	_tds__DeleteGeoLocation *tds__DeleteGeoLocation;	/* optional element of type tds:DeleteGeoLocation */
public:
	int soap_type() const { return 4908; } /* = unique type id SOAP_TYPE___tds__DeleteGeoLocation_ */
};
#endif

#ifndef SOAP_TYPE___timg__GetServiceCapabilities
#define SOAP_TYPE___timg__GetServiceCapabilities (4912)
/* Operation wrapper: */
struct __timg__GetServiceCapabilities
{
public:
	_timg__GetServiceCapabilities *timg__GetServiceCapabilities;	/* optional element of type timg:GetServiceCapabilities */
public:
	int soap_type() const { return 4912; } /* = unique type id SOAP_TYPE___timg__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___timg__GetImagingSettings
#define SOAP_TYPE___timg__GetImagingSettings (4916)
/* Operation wrapper: */
struct __timg__GetImagingSettings
{
public:
	_timg__GetImagingSettings *timg__GetImagingSettings;	/* optional element of type timg:GetImagingSettings */
public:
	int soap_type() const { return 4916; } /* = unique type id SOAP_TYPE___timg__GetImagingSettings */
};
#endif

#ifndef SOAP_TYPE___timg__SetImagingSettings
#define SOAP_TYPE___timg__SetImagingSettings (4920)
/* Operation wrapper: */
struct __timg__SetImagingSettings
{
public:
	_timg__SetImagingSettings *timg__SetImagingSettings;	/* optional element of type timg:SetImagingSettings */
public:
	int soap_type() const { return 4920; } /* = unique type id SOAP_TYPE___timg__SetImagingSettings */
};
#endif

#ifndef SOAP_TYPE___timg__GetOptions
#define SOAP_TYPE___timg__GetOptions (4924)
/* Operation wrapper: */
struct __timg__GetOptions
{
public:
	_timg__GetOptions *timg__GetOptions;	/* optional element of type timg:GetOptions */
public:
	int soap_type() const { return 4924; } /* = unique type id SOAP_TYPE___timg__GetOptions */
};
#endif

#ifndef SOAP_TYPE___timg__Move
#define SOAP_TYPE___timg__Move (4928)
/* Operation wrapper: */
struct __timg__Move
{
public:
	_timg__Move *timg__Move;	/* optional element of type timg:Move */
public:
	int soap_type() const { return 4928; } /* = unique type id SOAP_TYPE___timg__Move */
};
#endif

#ifndef SOAP_TYPE___timg__Stop
#define SOAP_TYPE___timg__Stop (4932)
/* Operation wrapper: */
struct __timg__Stop
{
public:
	_timg__Stop *timg__Stop;	/* optional element of type timg:Stop */
public:
	int soap_type() const { return 4932; } /* = unique type id SOAP_TYPE___timg__Stop */
};
#endif

#ifndef SOAP_TYPE___timg__GetStatus
#define SOAP_TYPE___timg__GetStatus (4936)
/* Operation wrapper: */
struct __timg__GetStatus
{
public:
	_timg__GetStatus *timg__GetStatus;	/* optional element of type timg:GetStatus */
public:
	int soap_type() const { return 4936; } /* = unique type id SOAP_TYPE___timg__GetStatus */
};
#endif

#ifndef SOAP_TYPE___timg__GetMoveOptions
#define SOAP_TYPE___timg__GetMoveOptions (4940)
/* Operation wrapper: */
struct __timg__GetMoveOptions
{
public:
	_timg__GetMoveOptions *timg__GetMoveOptions;	/* optional element of type timg:GetMoveOptions */
public:
	int soap_type() const { return 4940; } /* = unique type id SOAP_TYPE___timg__GetMoveOptions */
};
#endif

#ifndef SOAP_TYPE___timg__GetPresets
#define SOAP_TYPE___timg__GetPresets (4944)
/* Operation wrapper: */
struct __timg__GetPresets
{
public:
	_timg__GetPresets *timg__GetPresets;	/* optional element of type timg:GetPresets */
public:
	int soap_type() const { return 4944; } /* = unique type id SOAP_TYPE___timg__GetPresets */
};
#endif

#ifndef SOAP_TYPE___timg__GetCurrentPreset
#define SOAP_TYPE___timg__GetCurrentPreset (4948)
/* Operation wrapper: */
struct __timg__GetCurrentPreset
{
public:
	_timg__GetCurrentPreset *timg__GetCurrentPreset;	/* optional element of type timg:GetCurrentPreset */
public:
	int soap_type() const { return 4948; } /* = unique type id SOAP_TYPE___timg__GetCurrentPreset */
};
#endif

#ifndef SOAP_TYPE___timg__SetCurrentPreset
#define SOAP_TYPE___timg__SetCurrentPreset (4952)
/* Operation wrapper: */
struct __timg__SetCurrentPreset
{
public:
	_timg__SetCurrentPreset *timg__SetCurrentPreset;	/* optional element of type timg:SetCurrentPreset */
public:
	int soap_type() const { return 4952; } /* = unique type id SOAP_TYPE___timg__SetCurrentPreset */
};
#endif

#ifndef SOAP_TYPE___tls__GetServiceCapabilities
#define SOAP_TYPE___tls__GetServiceCapabilities (4956)
/* Operation wrapper: */
struct __tls__GetServiceCapabilities
{
public:
	_tls__GetServiceCapabilities *tls__GetServiceCapabilities;	/* optional element of type tls:GetServiceCapabilities */
public:
	int soap_type() const { return 4956; } /* = unique type id SOAP_TYPE___tls__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___tls__GetLayout
#define SOAP_TYPE___tls__GetLayout (4960)
/* Operation wrapper: */
struct __tls__GetLayout
{
public:
	_tls__GetLayout *tls__GetLayout;	/* optional element of type tls:GetLayout */
public:
	int soap_type() const { return 4960; } /* = unique type id SOAP_TYPE___tls__GetLayout */
};
#endif

#ifndef SOAP_TYPE___tls__SetLayout
#define SOAP_TYPE___tls__SetLayout (4964)
/* Operation wrapper: */
struct __tls__SetLayout
{
public:
	_tls__SetLayout *tls__SetLayout;	/* optional element of type tls:SetLayout */
public:
	int soap_type() const { return 4964; } /* = unique type id SOAP_TYPE___tls__SetLayout */
};
#endif

#ifndef SOAP_TYPE___tls__GetDisplayOptions
#define SOAP_TYPE___tls__GetDisplayOptions (4968)
/* Operation wrapper: */
struct __tls__GetDisplayOptions
{
public:
	_tls__GetDisplayOptions *tls__GetDisplayOptions;	/* optional element of type tls:GetDisplayOptions */
public:
	int soap_type() const { return 4968; } /* = unique type id SOAP_TYPE___tls__GetDisplayOptions */
};
#endif

#ifndef SOAP_TYPE___tls__GetPaneConfigurations
#define SOAP_TYPE___tls__GetPaneConfigurations (4972)
/* Operation wrapper: */
struct __tls__GetPaneConfigurations
{
public:
	_tls__GetPaneConfigurations *tls__GetPaneConfigurations;	/* optional element of type tls:GetPaneConfigurations */
public:
	int soap_type() const { return 4972; } /* = unique type id SOAP_TYPE___tls__GetPaneConfigurations */
};
#endif

#ifndef SOAP_TYPE___tls__GetPaneConfiguration
#define SOAP_TYPE___tls__GetPaneConfiguration (4976)
/* Operation wrapper: */
struct __tls__GetPaneConfiguration
{
public:
	_tls__GetPaneConfiguration *tls__GetPaneConfiguration;	/* optional element of type tls:GetPaneConfiguration */
public:
	int soap_type() const { return 4976; } /* = unique type id SOAP_TYPE___tls__GetPaneConfiguration */
};
#endif

#ifndef SOAP_TYPE___tls__SetPaneConfigurations
#define SOAP_TYPE___tls__SetPaneConfigurations (4980)
/* Operation wrapper: */
struct __tls__SetPaneConfigurations
{
public:
	_tls__SetPaneConfigurations *tls__SetPaneConfigurations;	/* optional element of type tls:SetPaneConfigurations */
public:
	int soap_type() const { return 4980; } /* = unique type id SOAP_TYPE___tls__SetPaneConfigurations */
};
#endif

#ifndef SOAP_TYPE___tls__SetPaneConfiguration
#define SOAP_TYPE___tls__SetPaneConfiguration (4984)
/* Operation wrapper: */
struct __tls__SetPaneConfiguration
{
public:
	_tls__SetPaneConfiguration *tls__SetPaneConfiguration;	/* optional element of type tls:SetPaneConfiguration */
public:
	int soap_type() const { return 4984; } /* = unique type id SOAP_TYPE___tls__SetPaneConfiguration */
};
#endif

#ifndef SOAP_TYPE___tls__CreatePaneConfiguration
#define SOAP_TYPE___tls__CreatePaneConfiguration (4988)
/* Operation wrapper: */
struct __tls__CreatePaneConfiguration
{
public:
	_tls__CreatePaneConfiguration *tls__CreatePaneConfiguration;	/* optional element of type tls:CreatePaneConfiguration */
public:
	int soap_type() const { return 4988; } /* = unique type id SOAP_TYPE___tls__CreatePaneConfiguration */
};
#endif

#ifndef SOAP_TYPE___tls__DeletePaneConfiguration
#define SOAP_TYPE___tls__DeletePaneConfiguration (4992)
/* Operation wrapper: */
struct __tls__DeletePaneConfiguration
{
public:
	_tls__DeletePaneConfiguration *tls__DeletePaneConfiguration;	/* optional element of type tls:DeletePaneConfiguration */
public:
	int soap_type() const { return 4992; } /* = unique type id SOAP_TYPE___tls__DeletePaneConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__GetServiceCapabilities
#define SOAP_TYPE___tmd__GetServiceCapabilities (4996)
/* Operation wrapper: */
struct __tmd__GetServiceCapabilities
{
public:
	_tmd__GetServiceCapabilities *tmd__GetServiceCapabilities;	/* optional element of type tmd:GetServiceCapabilities */
public:
	int soap_type() const { return 4996; } /* = unique type id SOAP_TYPE___tmd__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___tmd__GetRelayOutputOptions
#define SOAP_TYPE___tmd__GetRelayOutputOptions (5000)
/* Operation wrapper: */
struct __tmd__GetRelayOutputOptions
{
public:
	_tmd__GetRelayOutputOptions *tmd__GetRelayOutputOptions;	/* optional element of type tmd:GetRelayOutputOptions */
public:
	int soap_type() const { return 5000; } /* = unique type id SOAP_TYPE___tmd__GetRelayOutputOptions */
};
#endif

#ifndef SOAP_TYPE___tmd__GetAudioSources
#define SOAP_TYPE___tmd__GetAudioSources (5004)
/* Operation wrapper: */
struct __tmd__GetAudioSources
{
public:
	tmd__Get *tmd__GetAudioSources;	/* optional element of type tmd:Get */
public:
	int soap_type() const { return 5004; } /* = unique type id SOAP_TYPE___tmd__GetAudioSources */
};
#endif

#ifndef SOAP_TYPE___tmd__GetAudioOutputs
#define SOAP_TYPE___tmd__GetAudioOutputs (5006)
/* Operation wrapper: */
struct __tmd__GetAudioOutputs
{
public:
	tmd__Get *tmd__GetAudioOutputs;	/* optional element of type tmd:Get */
public:
	int soap_type() const { return 5006; } /* = unique type id SOAP_TYPE___tmd__GetAudioOutputs */
};
#endif

#ifndef SOAP_TYPE___tmd__GetVideoSources
#define SOAP_TYPE___tmd__GetVideoSources (5008)
/* Operation wrapper: */
struct __tmd__GetVideoSources
{
public:
	tmd__Get *tmd__GetVideoSources;	/* optional element of type tmd:Get */
public:
	int soap_type() const { return 5008; } /* = unique type id SOAP_TYPE___tmd__GetVideoSources */
};
#endif

#ifndef SOAP_TYPE___tmd__GetVideoOutputs
#define SOAP_TYPE___tmd__GetVideoOutputs (5012)
/* Operation wrapper: */
struct __tmd__GetVideoOutputs
{
public:
	_tmd__GetVideoOutputs *tmd__GetVideoOutputs;	/* optional element of type tmd:GetVideoOutputs */
public:
	int soap_type() const { return 5012; } /* = unique type id SOAP_TYPE___tmd__GetVideoOutputs */
};
#endif

#ifndef SOAP_TYPE___tmd__GetVideoSourceConfiguration
#define SOAP_TYPE___tmd__GetVideoSourceConfiguration (5016)
/* Operation wrapper: */
struct __tmd__GetVideoSourceConfiguration
{
public:
	_tmd__GetVideoSourceConfiguration *tmd__GetVideoSourceConfiguration;	/* optional element of type tmd:GetVideoSourceConfiguration */
public:
	int soap_type() const { return 5016; } /* = unique type id SOAP_TYPE___tmd__GetVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__GetVideoOutputConfiguration
#define SOAP_TYPE___tmd__GetVideoOutputConfiguration (5020)
/* Operation wrapper: */
struct __tmd__GetVideoOutputConfiguration
{
public:
	_tmd__GetVideoOutputConfiguration *tmd__GetVideoOutputConfiguration;	/* optional element of type tmd:GetVideoOutputConfiguration */
public:
	int soap_type() const { return 5020; } /* = unique type id SOAP_TYPE___tmd__GetVideoOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__GetAudioSourceConfiguration
#define SOAP_TYPE___tmd__GetAudioSourceConfiguration (5024)
/* Operation wrapper: */
struct __tmd__GetAudioSourceConfiguration
{
public:
	_tmd__GetAudioSourceConfiguration *tmd__GetAudioSourceConfiguration;	/* optional element of type tmd:GetAudioSourceConfiguration */
public:
	int soap_type() const { return 5024; } /* = unique type id SOAP_TYPE___tmd__GetAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__GetAudioOutputConfiguration
#define SOAP_TYPE___tmd__GetAudioOutputConfiguration (5028)
/* Operation wrapper: */
struct __tmd__GetAudioOutputConfiguration
{
public:
	_tmd__GetAudioOutputConfiguration *tmd__GetAudioOutputConfiguration;	/* optional element of type tmd:GetAudioOutputConfiguration */
public:
	int soap_type() const { return 5028; } /* = unique type id SOAP_TYPE___tmd__GetAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__SetVideoSourceConfiguration
#define SOAP_TYPE___tmd__SetVideoSourceConfiguration (5032)
/* Operation wrapper: */
struct __tmd__SetVideoSourceConfiguration
{
public:
	_tmd__SetVideoSourceConfiguration *tmd__SetVideoSourceConfiguration;	/* optional element of type tmd:SetVideoSourceConfiguration */
public:
	int soap_type() const { return 5032; } /* = unique type id SOAP_TYPE___tmd__SetVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__SetVideoOutputConfiguration
#define SOAP_TYPE___tmd__SetVideoOutputConfiguration (5036)
/* Operation wrapper: */
struct __tmd__SetVideoOutputConfiguration
{
public:
	_tmd__SetVideoOutputConfiguration *tmd__SetVideoOutputConfiguration;	/* optional element of type tmd:SetVideoOutputConfiguration */
public:
	int soap_type() const { return 5036; } /* = unique type id SOAP_TYPE___tmd__SetVideoOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__SetAudioSourceConfiguration
#define SOAP_TYPE___tmd__SetAudioSourceConfiguration (5040)
/* Operation wrapper: */
struct __tmd__SetAudioSourceConfiguration
{
public:
	_tmd__SetAudioSourceConfiguration *tmd__SetAudioSourceConfiguration;	/* optional element of type tmd:SetAudioSourceConfiguration */
public:
	int soap_type() const { return 5040; } /* = unique type id SOAP_TYPE___tmd__SetAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__SetAudioOutputConfiguration
#define SOAP_TYPE___tmd__SetAudioOutputConfiguration (5044)
/* Operation wrapper: */
struct __tmd__SetAudioOutputConfiguration
{
public:
	_tmd__SetAudioOutputConfiguration *tmd__SetAudioOutputConfiguration;	/* optional element of type tmd:SetAudioOutputConfiguration */
public:
	int soap_type() const { return 5044; } /* = unique type id SOAP_TYPE___tmd__SetAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__GetVideoSourceConfigurationOptions
#define SOAP_TYPE___tmd__GetVideoSourceConfigurationOptions (5048)
/* Operation wrapper: */
struct __tmd__GetVideoSourceConfigurationOptions
{
public:
	_tmd__GetVideoSourceConfigurationOptions *tmd__GetVideoSourceConfigurationOptions;	/* optional element of type tmd:GetVideoSourceConfigurationOptions */
public:
	int soap_type() const { return 5048; } /* = unique type id SOAP_TYPE___tmd__GetVideoSourceConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___tmd__GetVideoOutputConfigurationOptions
#define SOAP_TYPE___tmd__GetVideoOutputConfigurationOptions (5052)
/* Operation wrapper: */
struct __tmd__GetVideoOutputConfigurationOptions
{
public:
	_tmd__GetVideoOutputConfigurationOptions *tmd__GetVideoOutputConfigurationOptions;	/* optional element of type tmd:GetVideoOutputConfigurationOptions */
public:
	int soap_type() const { return 5052; } /* = unique type id SOAP_TYPE___tmd__GetVideoOutputConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___tmd__GetAudioSourceConfigurationOptions
#define SOAP_TYPE___tmd__GetAudioSourceConfigurationOptions (5056)
/* Operation wrapper: */
struct __tmd__GetAudioSourceConfigurationOptions
{
public:
	_tmd__GetAudioSourceConfigurationOptions *tmd__GetAudioSourceConfigurationOptions;	/* optional element of type tmd:GetAudioSourceConfigurationOptions */
public:
	int soap_type() const { return 5056; } /* = unique type id SOAP_TYPE___tmd__GetAudioSourceConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___tmd__GetAudioOutputConfigurationOptions
#define SOAP_TYPE___tmd__GetAudioOutputConfigurationOptions (5060)
/* Operation wrapper: */
struct __tmd__GetAudioOutputConfigurationOptions
{
public:
	_tmd__GetAudioOutputConfigurationOptions *tmd__GetAudioOutputConfigurationOptions;	/* optional element of type tmd:GetAudioOutputConfigurationOptions */
public:
	int soap_type() const { return 5060; } /* = unique type id SOAP_TYPE___tmd__GetAudioOutputConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___tmd__GetRelayOutputs
#define SOAP_TYPE___tmd__GetRelayOutputs (5062)
/* Operation wrapper: */
struct __tmd__GetRelayOutputs
{
public:
	_tds__GetRelayOutputs *tds__GetRelayOutputs;	/* optional element of type tds:GetRelayOutputs */
public:
	int soap_type() const { return 5062; } /* = unique type id SOAP_TYPE___tmd__GetRelayOutputs */
};
#endif

#ifndef SOAP_TYPE___tmd__SetRelayOutputSettings
#define SOAP_TYPE___tmd__SetRelayOutputSettings (5066)
/* Operation wrapper: */
struct __tmd__SetRelayOutputSettings
{
public:
	_tmd__SetRelayOutputSettings *tmd__SetRelayOutputSettings;	/* optional element of type tmd:SetRelayOutputSettings */
public:
	int soap_type() const { return 5066; } /* = unique type id SOAP_TYPE___tmd__SetRelayOutputSettings */
};
#endif

#ifndef SOAP_TYPE___tmd__SetRelayOutputState
#define SOAP_TYPE___tmd__SetRelayOutputState (5068)
/* Operation wrapper: */
struct __tmd__SetRelayOutputState
{
public:
	_tds__SetRelayOutputState *tds__SetRelayOutputState;	/* optional element of type tds:SetRelayOutputState */
public:
	int soap_type() const { return 5068; } /* = unique type id SOAP_TYPE___tmd__SetRelayOutputState */
};
#endif

#ifndef SOAP_TYPE___tmd__GetDigitalInputs
#define SOAP_TYPE___tmd__GetDigitalInputs (5072)
/* Operation wrapper: */
struct __tmd__GetDigitalInputs
{
public:
	_tmd__GetDigitalInputs *tmd__GetDigitalInputs;	/* optional element of type tmd:GetDigitalInputs */
public:
	int soap_type() const { return 5072; } /* = unique type id SOAP_TYPE___tmd__GetDigitalInputs */
};
#endif

#ifndef SOAP_TYPE___tmd__GetDigitalInputConfigurationOptions
#define SOAP_TYPE___tmd__GetDigitalInputConfigurationOptions (5076)
/* Operation wrapper: */
struct __tmd__GetDigitalInputConfigurationOptions
{
public:
	_tmd__GetDigitalInputConfigurationOptions *tmd__GetDigitalInputConfigurationOptions;	/* optional element of type tmd:GetDigitalInputConfigurationOptions */
public:
	int soap_type() const { return 5076; } /* = unique type id SOAP_TYPE___tmd__GetDigitalInputConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___tmd__SetDigitalInputConfigurations
#define SOAP_TYPE___tmd__SetDigitalInputConfigurations (5080)
/* Operation wrapper: */
struct __tmd__SetDigitalInputConfigurations
{
public:
	_tmd__SetDigitalInputConfigurations *tmd__SetDigitalInputConfigurations;	/* optional element of type tmd:SetDigitalInputConfigurations */
public:
	int soap_type() const { return 5080; } /* = unique type id SOAP_TYPE___tmd__SetDigitalInputConfigurations */
};
#endif

#ifndef SOAP_TYPE___tmd__GetSerialPorts
#define SOAP_TYPE___tmd__GetSerialPorts (5084)
/* Operation wrapper: */
struct __tmd__GetSerialPorts
{
public:
	_tmd__GetSerialPorts *tmd__GetSerialPorts;	/* optional element of type tmd:GetSerialPorts */
public:
	int soap_type() const { return 5084; } /* = unique type id SOAP_TYPE___tmd__GetSerialPorts */
};
#endif

#ifndef SOAP_TYPE___tmd__GetSerialPortConfiguration
#define SOAP_TYPE___tmd__GetSerialPortConfiguration (5088)
/* Operation wrapper: */
struct __tmd__GetSerialPortConfiguration
{
public:
	_tmd__GetSerialPortConfiguration *tmd__GetSerialPortConfiguration;	/* optional element of type tmd:GetSerialPortConfiguration */
public:
	int soap_type() const { return 5088; } /* = unique type id SOAP_TYPE___tmd__GetSerialPortConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__SetSerialPortConfiguration
#define SOAP_TYPE___tmd__SetSerialPortConfiguration (5092)
/* Operation wrapper: */
struct __tmd__SetSerialPortConfiguration
{
public:
	_tmd__SetSerialPortConfiguration *tmd__SetSerialPortConfiguration;	/* optional element of type tmd:SetSerialPortConfiguration */
public:
	int soap_type() const { return 5092; } /* = unique type id SOAP_TYPE___tmd__SetSerialPortConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__GetSerialPortConfigurationOptions
#define SOAP_TYPE___tmd__GetSerialPortConfigurationOptions (5096)
/* Operation wrapper: */
struct __tmd__GetSerialPortConfigurationOptions
{
public:
	_tmd__GetSerialPortConfigurationOptions *tmd__GetSerialPortConfigurationOptions;	/* optional element of type tmd:GetSerialPortConfigurationOptions */
public:
	int soap_type() const { return 5096; } /* = unique type id SOAP_TYPE___tmd__GetSerialPortConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___tmd__SendReceiveSerialCommand
#define SOAP_TYPE___tmd__SendReceiveSerialCommand (5100)
/* Operation wrapper: */
struct __tmd__SendReceiveSerialCommand
{
public:
	_tmd__SendReceiveSerialCommand *tmd__SendReceiveSerialCommand;	/* optional element of type tmd:SendReceiveSerialCommand */
public:
	int soap_type() const { return 5100; } /* = unique type id SOAP_TYPE___tmd__SendReceiveSerialCommand */
};
#endif

#ifndef SOAP_TYPE___tptz__GetServiceCapabilities
#define SOAP_TYPE___tptz__GetServiceCapabilities (5104)
/* Operation wrapper: */
struct __tptz__GetServiceCapabilities
{
public:
	_tptz__GetServiceCapabilities *tptz__GetServiceCapabilities;	/* optional element of type tptz:GetServiceCapabilities */
public:
	int soap_type() const { return 5104; } /* = unique type id SOAP_TYPE___tptz__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___tptz__GetConfigurations
#define SOAP_TYPE___tptz__GetConfigurations (5108)
/* Operation wrapper: */
struct __tptz__GetConfigurations
{
public:
	_tptz__GetConfigurations *tptz__GetConfigurations;	/* optional element of type tptz:GetConfigurations */
public:
	int soap_type() const { return 5108; } /* = unique type id SOAP_TYPE___tptz__GetConfigurations */
};
#endif

#ifndef SOAP_TYPE___tptz__GetPresets
#define SOAP_TYPE___tptz__GetPresets (5112)
/* Operation wrapper: */
struct __tptz__GetPresets
{
public:
	_tptz__GetPresets *tptz__GetPresets;	/* optional element of type tptz:GetPresets */
public:
	int soap_type() const { return 5112; } /* = unique type id SOAP_TYPE___tptz__GetPresets */
};
#endif

#ifndef SOAP_TYPE___tptz__SetPreset
#define SOAP_TYPE___tptz__SetPreset (5116)
/* Operation wrapper: */
struct __tptz__SetPreset
{
public:
	_tptz__SetPreset *tptz__SetPreset;	/* optional element of type tptz:SetPreset */
public:
	int soap_type() const { return 5116; } /* = unique type id SOAP_TYPE___tptz__SetPreset */
};
#endif

#ifndef SOAP_TYPE___tptz__RemovePreset
#define SOAP_TYPE___tptz__RemovePreset (5120)
/* Operation wrapper: */
struct __tptz__RemovePreset
{
public:
	_tptz__RemovePreset *tptz__RemovePreset;	/* optional element of type tptz:RemovePreset */
public:
	int soap_type() const { return 5120; } /* = unique type id SOAP_TYPE___tptz__RemovePreset */
};
#endif

#ifndef SOAP_TYPE___tptz__GotoPreset
#define SOAP_TYPE___tptz__GotoPreset (5124)
/* Operation wrapper: */
struct __tptz__GotoPreset
{
public:
	_tptz__GotoPreset *tptz__GotoPreset;	/* optional element of type tptz:GotoPreset */
public:
	int soap_type() const { return 5124; } /* = unique type id SOAP_TYPE___tptz__GotoPreset */
};
#endif

#ifndef SOAP_TYPE___tptz__GetStatus
#define SOAP_TYPE___tptz__GetStatus (5128)
/* Operation wrapper: */
struct __tptz__GetStatus
{
public:
	_tptz__GetStatus *tptz__GetStatus;	/* optional element of type tptz:GetStatus */
public:
	int soap_type() const { return 5128; } /* = unique type id SOAP_TYPE___tptz__GetStatus */
};
#endif

#ifndef SOAP_TYPE___tptz__GetConfiguration
#define SOAP_TYPE___tptz__GetConfiguration (5132)
/* Operation wrapper: */
struct __tptz__GetConfiguration
{
public:
	_tptz__GetConfiguration *tptz__GetConfiguration;	/* optional element of type tptz:GetConfiguration */
public:
	int soap_type() const { return 5132; } /* = unique type id SOAP_TYPE___tptz__GetConfiguration */
};
#endif

#ifndef SOAP_TYPE___tptz__GetNodes
#define SOAP_TYPE___tptz__GetNodes (5136)
/* Operation wrapper: */
struct __tptz__GetNodes
{
public:
	_tptz__GetNodes *tptz__GetNodes;	/* optional element of type tptz:GetNodes */
public:
	int soap_type() const { return 5136; } /* = unique type id SOAP_TYPE___tptz__GetNodes */
};
#endif

#ifndef SOAP_TYPE___tptz__GetNode
#define SOAP_TYPE___tptz__GetNode (5140)
/* Operation wrapper: */
struct __tptz__GetNode
{
public:
	_tptz__GetNode *tptz__GetNode;	/* optional element of type tptz:GetNode */
public:
	int soap_type() const { return 5140; } /* = unique type id SOAP_TYPE___tptz__GetNode */
};
#endif

#ifndef SOAP_TYPE___tptz__SetConfiguration
#define SOAP_TYPE___tptz__SetConfiguration (5144)
/* Operation wrapper: */
struct __tptz__SetConfiguration
{
public:
	_tptz__SetConfiguration *tptz__SetConfiguration;	/* optional element of type tptz:SetConfiguration */
public:
	int soap_type() const { return 5144; } /* = unique type id SOAP_TYPE___tptz__SetConfiguration */
};
#endif

#ifndef SOAP_TYPE___tptz__GetConfigurationOptions
#define SOAP_TYPE___tptz__GetConfigurationOptions (5148)
/* Operation wrapper: */
struct __tptz__GetConfigurationOptions
{
public:
	_tptz__GetConfigurationOptions *tptz__GetConfigurationOptions;	/* optional element of type tptz:GetConfigurationOptions */
public:
	int soap_type() const { return 5148; } /* = unique type id SOAP_TYPE___tptz__GetConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___tptz__GotoHomePosition
#define SOAP_TYPE___tptz__GotoHomePosition (5152)
/* Operation wrapper: */
struct __tptz__GotoHomePosition
{
public:
	_tptz__GotoHomePosition *tptz__GotoHomePosition;	/* optional element of type tptz:GotoHomePosition */
public:
	int soap_type() const { return 5152; } /* = unique type id SOAP_TYPE___tptz__GotoHomePosition */
};
#endif

#ifndef SOAP_TYPE___tptz__SetHomePosition
#define SOAP_TYPE___tptz__SetHomePosition (5156)
/* Operation wrapper: */
struct __tptz__SetHomePosition
{
public:
	_tptz__SetHomePosition *tptz__SetHomePosition;	/* optional element of type tptz:SetHomePosition */
public:
	int soap_type() const { return 5156; } /* = unique type id SOAP_TYPE___tptz__SetHomePosition */
};
#endif

#ifndef SOAP_TYPE___tptz__ContinuousMove
#define SOAP_TYPE___tptz__ContinuousMove (5160)
/* Operation wrapper: */
struct __tptz__ContinuousMove
{
public:
	_tptz__ContinuousMove *tptz__ContinuousMove;	/* optional element of type tptz:ContinuousMove */
public:
	int soap_type() const { return 5160; } /* = unique type id SOAP_TYPE___tptz__ContinuousMove */
};
#endif

#ifndef SOAP_TYPE___tptz__RelativeMove
#define SOAP_TYPE___tptz__RelativeMove (5164)
/* Operation wrapper: */
struct __tptz__RelativeMove
{
public:
	_tptz__RelativeMove *tptz__RelativeMove;	/* optional element of type tptz:RelativeMove */
public:
	int soap_type() const { return 5164; } /* = unique type id SOAP_TYPE___tptz__RelativeMove */
};
#endif

#ifndef SOAP_TYPE___tptz__SendAuxiliaryCommand
#define SOAP_TYPE___tptz__SendAuxiliaryCommand (5168)
/* Operation wrapper: */
struct __tptz__SendAuxiliaryCommand
{
public:
	_tptz__SendAuxiliaryCommand *tptz__SendAuxiliaryCommand;	/* optional element of type tptz:SendAuxiliaryCommand */
public:
	int soap_type() const { return 5168; } /* = unique type id SOAP_TYPE___tptz__SendAuxiliaryCommand */
};
#endif

#ifndef SOAP_TYPE___tptz__AbsoluteMove
#define SOAP_TYPE___tptz__AbsoluteMove (5172)
/* Operation wrapper: */
struct __tptz__AbsoluteMove
{
public:
	_tptz__AbsoluteMove *tptz__AbsoluteMove;	/* optional element of type tptz:AbsoluteMove */
public:
	int soap_type() const { return 5172; } /* = unique type id SOAP_TYPE___tptz__AbsoluteMove */
};
#endif

#ifndef SOAP_TYPE___tptz__GeoMove
#define SOAP_TYPE___tptz__GeoMove (5176)
/* Operation wrapper: */
struct __tptz__GeoMove
{
public:
	_tptz__GeoMove *tptz__GeoMove;	/* optional element of type tptz:GeoMove */
public:
	int soap_type() const { return 5176; } /* = unique type id SOAP_TYPE___tptz__GeoMove */
};
#endif

#ifndef SOAP_TYPE___tptz__Stop
#define SOAP_TYPE___tptz__Stop (5180)
/* Operation wrapper: */
struct __tptz__Stop
{
public:
	_tptz__Stop *tptz__Stop;	/* optional element of type tptz:Stop */
public:
	int soap_type() const { return 5180; } /* = unique type id SOAP_TYPE___tptz__Stop */
};
#endif

#ifndef SOAP_TYPE___tptz__GetPresetTours
#define SOAP_TYPE___tptz__GetPresetTours (5184)
/* Operation wrapper: */
struct __tptz__GetPresetTours
{
public:
	_tptz__GetPresetTours *tptz__GetPresetTours;	/* optional element of type tptz:GetPresetTours */
public:
	int soap_type() const { return 5184; } /* = unique type id SOAP_TYPE___tptz__GetPresetTours */
};
#endif

#ifndef SOAP_TYPE___tptz__GetPresetTour
#define SOAP_TYPE___tptz__GetPresetTour (5188)
/* Operation wrapper: */
struct __tptz__GetPresetTour
{
public:
	_tptz__GetPresetTour *tptz__GetPresetTour;	/* optional element of type tptz:GetPresetTour */
public:
	int soap_type() const { return 5188; } /* = unique type id SOAP_TYPE___tptz__GetPresetTour */
};
#endif

#ifndef SOAP_TYPE___tptz__GetPresetTourOptions
#define SOAP_TYPE___tptz__GetPresetTourOptions (5192)
/* Operation wrapper: */
struct __tptz__GetPresetTourOptions
{
public:
	_tptz__GetPresetTourOptions *tptz__GetPresetTourOptions;	/* optional element of type tptz:GetPresetTourOptions */
public:
	int soap_type() const { return 5192; } /* = unique type id SOAP_TYPE___tptz__GetPresetTourOptions */
};
#endif

#ifndef SOAP_TYPE___tptz__CreatePresetTour
#define SOAP_TYPE___tptz__CreatePresetTour (5196)
/* Operation wrapper: */
struct __tptz__CreatePresetTour
{
public:
	_tptz__CreatePresetTour *tptz__CreatePresetTour;	/* optional element of type tptz:CreatePresetTour */
public:
	int soap_type() const { return 5196; } /* = unique type id SOAP_TYPE___tptz__CreatePresetTour */
};
#endif

#ifndef SOAP_TYPE___tptz__ModifyPresetTour
#define SOAP_TYPE___tptz__ModifyPresetTour (5200)
/* Operation wrapper: */
struct __tptz__ModifyPresetTour
{
public:
	_tptz__ModifyPresetTour *tptz__ModifyPresetTour;	/* optional element of type tptz:ModifyPresetTour */
public:
	int soap_type() const { return 5200; } /* = unique type id SOAP_TYPE___tptz__ModifyPresetTour */
};
#endif

#ifndef SOAP_TYPE___tptz__OperatePresetTour
#define SOAP_TYPE___tptz__OperatePresetTour (5204)
/* Operation wrapper: */
struct __tptz__OperatePresetTour
{
public:
	_tptz__OperatePresetTour *tptz__OperatePresetTour;	/* optional element of type tptz:OperatePresetTour */
public:
	int soap_type() const { return 5204; } /* = unique type id SOAP_TYPE___tptz__OperatePresetTour */
};
#endif

#ifndef SOAP_TYPE___tptz__RemovePresetTour
#define SOAP_TYPE___tptz__RemovePresetTour (5208)
/* Operation wrapper: */
struct __tptz__RemovePresetTour
{
public:
	_tptz__RemovePresetTour *tptz__RemovePresetTour;	/* optional element of type tptz:RemovePresetTour */
public:
	int soap_type() const { return 5208; } /* = unique type id SOAP_TYPE___tptz__RemovePresetTour */
};
#endif

#ifndef SOAP_TYPE___tptz__GetCompatibleConfigurations
#define SOAP_TYPE___tptz__GetCompatibleConfigurations (5212)
/* Operation wrapper: */
struct __tptz__GetCompatibleConfigurations
{
public:
	_tptz__GetCompatibleConfigurations *tptz__GetCompatibleConfigurations;	/* optional element of type tptz:GetCompatibleConfigurations */
public:
	int soap_type() const { return 5212; } /* = unique type id SOAP_TYPE___tptz__GetCompatibleConfigurations */
};
#endif

#ifndef SOAP_TYPE___trc__GetServiceCapabilities
#define SOAP_TYPE___trc__GetServiceCapabilities (5216)
/* Operation wrapper: */
struct __trc__GetServiceCapabilities
{
public:
	_trc__GetServiceCapabilities *trc__GetServiceCapabilities;	/* optional element of type trc:GetServiceCapabilities */
public:
	int soap_type() const { return 5216; } /* = unique type id SOAP_TYPE___trc__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___trc__CreateRecording
#define SOAP_TYPE___trc__CreateRecording (5220)
/* Operation wrapper: */
struct __trc__CreateRecording
{
public:
	_trc__CreateRecording *trc__CreateRecording;	/* optional element of type trc:CreateRecording */
public:
	int soap_type() const { return 5220; } /* = unique type id SOAP_TYPE___trc__CreateRecording */
};
#endif

#ifndef SOAP_TYPE___trc__DeleteRecording
#define SOAP_TYPE___trc__DeleteRecording (5224)
/* Operation wrapper: */
struct __trc__DeleteRecording
{
public:
	_trc__DeleteRecording *trc__DeleteRecording;	/* optional element of type trc:DeleteRecording */
public:
	int soap_type() const { return 5224; } /* = unique type id SOAP_TYPE___trc__DeleteRecording */
};
#endif

#ifndef SOAP_TYPE___trc__GetRecordings
#define SOAP_TYPE___trc__GetRecordings (5228)
/* Operation wrapper: */
struct __trc__GetRecordings
{
public:
	_trc__GetRecordings *trc__GetRecordings;	/* optional element of type trc:GetRecordings */
public:
	int soap_type() const { return 5228; } /* = unique type id SOAP_TYPE___trc__GetRecordings */
};
#endif

#ifndef SOAP_TYPE___trc__SetRecordingConfiguration
#define SOAP_TYPE___trc__SetRecordingConfiguration (5232)
/* Operation wrapper: */
struct __trc__SetRecordingConfiguration
{
public:
	_trc__SetRecordingConfiguration *trc__SetRecordingConfiguration;	/* optional element of type trc:SetRecordingConfiguration */
public:
	int soap_type() const { return 5232; } /* = unique type id SOAP_TYPE___trc__SetRecordingConfiguration */
};
#endif

#ifndef SOAP_TYPE___trc__GetRecordingConfiguration
#define SOAP_TYPE___trc__GetRecordingConfiguration (5236)
/* Operation wrapper: */
struct __trc__GetRecordingConfiguration
{
public:
	_trc__GetRecordingConfiguration *trc__GetRecordingConfiguration;	/* optional element of type trc:GetRecordingConfiguration */
public:
	int soap_type() const { return 5236; } /* = unique type id SOAP_TYPE___trc__GetRecordingConfiguration */
};
#endif

#ifndef SOAP_TYPE___trc__GetRecordingOptions
#define SOAP_TYPE___trc__GetRecordingOptions (5240)
/* Operation wrapper: */
struct __trc__GetRecordingOptions
{
public:
	_trc__GetRecordingOptions *trc__GetRecordingOptions;	/* optional element of type trc:GetRecordingOptions */
public:
	int soap_type() const { return 5240; } /* = unique type id SOAP_TYPE___trc__GetRecordingOptions */
};
#endif

#ifndef SOAP_TYPE___trc__CreateTrack
#define SOAP_TYPE___trc__CreateTrack (5244)
/* Operation wrapper: */
struct __trc__CreateTrack
{
public:
	_trc__CreateTrack *trc__CreateTrack;	/* optional element of type trc:CreateTrack */
public:
	int soap_type() const { return 5244; } /* = unique type id SOAP_TYPE___trc__CreateTrack */
};
#endif

#ifndef SOAP_TYPE___trc__DeleteTrack
#define SOAP_TYPE___trc__DeleteTrack (5248)
/* Operation wrapper: */
struct __trc__DeleteTrack
{
public:
	_trc__DeleteTrack *trc__DeleteTrack;	/* optional element of type trc:DeleteTrack */
public:
	int soap_type() const { return 5248; } /* = unique type id SOAP_TYPE___trc__DeleteTrack */
};
#endif

#ifndef SOAP_TYPE___trc__GetTrackConfiguration
#define SOAP_TYPE___trc__GetTrackConfiguration (5252)
/* Operation wrapper: */
struct __trc__GetTrackConfiguration
{
public:
	_trc__GetTrackConfiguration *trc__GetTrackConfiguration;	/* optional element of type trc:GetTrackConfiguration */
public:
	int soap_type() const { return 5252; } /* = unique type id SOAP_TYPE___trc__GetTrackConfiguration */
};
#endif

#ifndef SOAP_TYPE___trc__SetTrackConfiguration
#define SOAP_TYPE___trc__SetTrackConfiguration (5256)
/* Operation wrapper: */
struct __trc__SetTrackConfiguration
{
public:
	_trc__SetTrackConfiguration *trc__SetTrackConfiguration;	/* optional element of type trc:SetTrackConfiguration */
public:
	int soap_type() const { return 5256; } /* = unique type id SOAP_TYPE___trc__SetTrackConfiguration */
};
#endif

#ifndef SOAP_TYPE___trc__CreateRecordingJob
#define SOAP_TYPE___trc__CreateRecordingJob (5260)
/* Operation wrapper: */
struct __trc__CreateRecordingJob
{
public:
	_trc__CreateRecordingJob *trc__CreateRecordingJob;	/* optional element of type trc:CreateRecordingJob */
public:
	int soap_type() const { return 5260; } /* = unique type id SOAP_TYPE___trc__CreateRecordingJob */
};
#endif

#ifndef SOAP_TYPE___trc__DeleteRecordingJob
#define SOAP_TYPE___trc__DeleteRecordingJob (5264)
/* Operation wrapper: */
struct __trc__DeleteRecordingJob
{
public:
	_trc__DeleteRecordingJob *trc__DeleteRecordingJob;	/* optional element of type trc:DeleteRecordingJob */
public:
	int soap_type() const { return 5264; } /* = unique type id SOAP_TYPE___trc__DeleteRecordingJob */
};
#endif

#ifndef SOAP_TYPE___trc__GetRecordingJobs
#define SOAP_TYPE___trc__GetRecordingJobs (5268)
/* Operation wrapper: */
struct __trc__GetRecordingJobs
{
public:
	_trc__GetRecordingJobs *trc__GetRecordingJobs;	/* optional element of type trc:GetRecordingJobs */
public:
	int soap_type() const { return 5268; } /* = unique type id SOAP_TYPE___trc__GetRecordingJobs */
};
#endif

#ifndef SOAP_TYPE___trc__SetRecordingJobConfiguration
#define SOAP_TYPE___trc__SetRecordingJobConfiguration (5272)
/* Operation wrapper: */
struct __trc__SetRecordingJobConfiguration
{
public:
	_trc__SetRecordingJobConfiguration *trc__SetRecordingJobConfiguration;	/* optional element of type trc:SetRecordingJobConfiguration */
public:
	int soap_type() const { return 5272; } /* = unique type id SOAP_TYPE___trc__SetRecordingJobConfiguration */
};
#endif

#ifndef SOAP_TYPE___trc__GetRecordingJobConfiguration
#define SOAP_TYPE___trc__GetRecordingJobConfiguration (5276)
/* Operation wrapper: */
struct __trc__GetRecordingJobConfiguration
{
public:
	_trc__GetRecordingJobConfiguration *trc__GetRecordingJobConfiguration;	/* optional element of type trc:GetRecordingJobConfiguration */
public:
	int soap_type() const { return 5276; } /* = unique type id SOAP_TYPE___trc__GetRecordingJobConfiguration */
};
#endif

#ifndef SOAP_TYPE___trc__SetRecordingJobMode
#define SOAP_TYPE___trc__SetRecordingJobMode (5280)
/* Operation wrapper: */
struct __trc__SetRecordingJobMode
{
public:
	_trc__SetRecordingJobMode *trc__SetRecordingJobMode;	/* optional element of type trc:SetRecordingJobMode */
public:
	int soap_type() const { return 5280; } /* = unique type id SOAP_TYPE___trc__SetRecordingJobMode */
};
#endif

#ifndef SOAP_TYPE___trc__GetRecordingJobState
#define SOAP_TYPE___trc__GetRecordingJobState (5284)
/* Operation wrapper: */
struct __trc__GetRecordingJobState
{
public:
	_trc__GetRecordingJobState *trc__GetRecordingJobState;	/* optional element of type trc:GetRecordingJobState */
public:
	int soap_type() const { return 5284; } /* = unique type id SOAP_TYPE___trc__GetRecordingJobState */
};
#endif

#ifndef SOAP_TYPE___trc__ExportRecordedData
#define SOAP_TYPE___trc__ExportRecordedData (5288)
/* Operation wrapper: */
struct __trc__ExportRecordedData
{
public:
	_trc__ExportRecordedData *trc__ExportRecordedData;	/* optional element of type trc:ExportRecordedData */
public:
	int soap_type() const { return 5288; } /* = unique type id SOAP_TYPE___trc__ExportRecordedData */
};
#endif

#ifndef SOAP_TYPE___trc__StopExportRecordedData
#define SOAP_TYPE___trc__StopExportRecordedData (5292)
/* Operation wrapper: */
struct __trc__StopExportRecordedData
{
public:
	_trc__StopExportRecordedData *trc__StopExportRecordedData;	/* optional element of type trc:StopExportRecordedData */
public:
	int soap_type() const { return 5292; } /* = unique type id SOAP_TYPE___trc__StopExportRecordedData */
};
#endif

#ifndef SOAP_TYPE___trc__GetExportRecordedDataState
#define SOAP_TYPE___trc__GetExportRecordedDataState (5296)
/* Operation wrapper: */
struct __trc__GetExportRecordedDataState
{
public:
	_trc__GetExportRecordedDataState *trc__GetExportRecordedDataState;	/* optional element of type trc:GetExportRecordedDataState */
public:
	int soap_type() const { return 5296; } /* = unique type id SOAP_TYPE___trc__GetExportRecordedDataState */
};
#endif

#ifndef SOAP_TYPE___trp__GetServiceCapabilities
#define SOAP_TYPE___trp__GetServiceCapabilities (5300)
/* Operation wrapper: */
struct __trp__GetServiceCapabilities
{
public:
	_trp__GetServiceCapabilities *trp__GetServiceCapabilities;	/* optional element of type trp:GetServiceCapabilities */
public:
	int soap_type() const { return 5300; } /* = unique type id SOAP_TYPE___trp__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___trp__GetReplayUri
#define SOAP_TYPE___trp__GetReplayUri (5304)
/* Operation wrapper: */
struct __trp__GetReplayUri
{
public:
	_trp__GetReplayUri *trp__GetReplayUri;	/* optional element of type trp:GetReplayUri */
public:
	int soap_type() const { return 5304; } /* = unique type id SOAP_TYPE___trp__GetReplayUri */
};
#endif

#ifndef SOAP_TYPE___trp__GetReplayConfiguration
#define SOAP_TYPE___trp__GetReplayConfiguration (5308)
/* Operation wrapper: */
struct __trp__GetReplayConfiguration
{
public:
	_trp__GetReplayConfiguration *trp__GetReplayConfiguration;	/* optional element of type trp:GetReplayConfiguration */
public:
	int soap_type() const { return 5308; } /* = unique type id SOAP_TYPE___trp__GetReplayConfiguration */
};
#endif

#ifndef SOAP_TYPE___trp__SetReplayConfiguration
#define SOAP_TYPE___trp__SetReplayConfiguration (5312)
/* Operation wrapper: */
struct __trp__SetReplayConfiguration
{
public:
	_trp__SetReplayConfiguration *trp__SetReplayConfiguration;	/* optional element of type trp:SetReplayConfiguration */
public:
	int soap_type() const { return 5312; } /* = unique type id SOAP_TYPE___trp__SetReplayConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetServiceCapabilities
#define SOAP_TYPE___trt__GetServiceCapabilities (5316)
/* Operation wrapper: */
struct __trt__GetServiceCapabilities
{
public:
	_trt__GetServiceCapabilities *trt__GetServiceCapabilities;	/* optional element of type trt:GetServiceCapabilities */
public:
	int soap_type() const { return 5316; } /* = unique type id SOAP_TYPE___trt__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoSources
#define SOAP_TYPE___trt__GetVideoSources (5320)
/* Operation wrapper: */
struct __trt__GetVideoSources
{
public:
	_trt__GetVideoSources *trt__GetVideoSources;	/* optional element of type trt:GetVideoSources */
public:
	int soap_type() const { return 5320; } /* = unique type id SOAP_TYPE___trt__GetVideoSources */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioSources
#define SOAP_TYPE___trt__GetAudioSources (5324)
/* Operation wrapper: */
struct __trt__GetAudioSources
{
public:
	_trt__GetAudioSources *trt__GetAudioSources;	/* optional element of type trt:GetAudioSources */
public:
	int soap_type() const { return 5324; } /* = unique type id SOAP_TYPE___trt__GetAudioSources */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioOutputs
#define SOAP_TYPE___trt__GetAudioOutputs (5328)
/* Operation wrapper: */
struct __trt__GetAudioOutputs
{
public:
	_trt__GetAudioOutputs *trt__GetAudioOutputs;	/* optional element of type trt:GetAudioOutputs */
public:
	int soap_type() const { return 5328; } /* = unique type id SOAP_TYPE___trt__GetAudioOutputs */
};
#endif

#ifndef SOAP_TYPE___trt__CreateProfile
#define SOAP_TYPE___trt__CreateProfile (5332)
/* Operation wrapper: */
struct __trt__CreateProfile
{
public:
	_trt__CreateProfile *trt__CreateProfile;	/* optional element of type trt:CreateProfile */
public:
	int soap_type() const { return 5332; } /* = unique type id SOAP_TYPE___trt__CreateProfile */
};
#endif

#ifndef SOAP_TYPE___trt__GetProfile
#define SOAP_TYPE___trt__GetProfile (5336)
/* Operation wrapper: */
struct __trt__GetProfile
{
public:
	_trt__GetProfile *trt__GetProfile;	/* optional element of type trt:GetProfile */
public:
	int soap_type() const { return 5336; } /* = unique type id SOAP_TYPE___trt__GetProfile */
};
#endif

#ifndef SOAP_TYPE___trt__GetProfiles
#define SOAP_TYPE___trt__GetProfiles (5340)
/* Operation wrapper: */
struct __trt__GetProfiles
{
public:
	_trt__GetProfiles *trt__GetProfiles;	/* optional element of type trt:GetProfiles */
public:
	int soap_type() const { return 5340; } /* = unique type id SOAP_TYPE___trt__GetProfiles */
};
#endif

#ifndef SOAP_TYPE___trt__AddVideoEncoderConfiguration
#define SOAP_TYPE___trt__AddVideoEncoderConfiguration (5344)
/* Operation wrapper: */
struct __trt__AddVideoEncoderConfiguration
{
public:
	_trt__AddVideoEncoderConfiguration *trt__AddVideoEncoderConfiguration;	/* optional element of type trt:AddVideoEncoderConfiguration */
public:
	int soap_type() const { return 5344; } /* = unique type id SOAP_TYPE___trt__AddVideoEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddVideoSourceConfiguration
#define SOAP_TYPE___trt__AddVideoSourceConfiguration (5348)
/* Operation wrapper: */
struct __trt__AddVideoSourceConfiguration
{
public:
	_trt__AddVideoSourceConfiguration *trt__AddVideoSourceConfiguration;	/* optional element of type trt:AddVideoSourceConfiguration */
public:
	int soap_type() const { return 5348; } /* = unique type id SOAP_TYPE___trt__AddVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddAudioEncoderConfiguration
#define SOAP_TYPE___trt__AddAudioEncoderConfiguration (5352)
/* Operation wrapper: */
struct __trt__AddAudioEncoderConfiguration
{
public:
	_trt__AddAudioEncoderConfiguration *trt__AddAudioEncoderConfiguration;	/* optional element of type trt:AddAudioEncoderConfiguration */
public:
	int soap_type() const { return 5352; } /* = unique type id SOAP_TYPE___trt__AddAudioEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddAudioSourceConfiguration
#define SOAP_TYPE___trt__AddAudioSourceConfiguration (5356)
/* Operation wrapper: */
struct __trt__AddAudioSourceConfiguration
{
public:
	_trt__AddAudioSourceConfiguration *trt__AddAudioSourceConfiguration;	/* optional element of type trt:AddAudioSourceConfiguration */
public:
	int soap_type() const { return 5356; } /* = unique type id SOAP_TYPE___trt__AddAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddPTZConfiguration
#define SOAP_TYPE___trt__AddPTZConfiguration (5360)
/* Operation wrapper: */
struct __trt__AddPTZConfiguration
{
public:
	_trt__AddPTZConfiguration *trt__AddPTZConfiguration;	/* optional element of type trt:AddPTZConfiguration */
public:
	int soap_type() const { return 5360; } /* = unique type id SOAP_TYPE___trt__AddPTZConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddVideoAnalyticsConfiguration
#define SOAP_TYPE___trt__AddVideoAnalyticsConfiguration (5364)
/* Operation wrapper: */
struct __trt__AddVideoAnalyticsConfiguration
{
public:
	_trt__AddVideoAnalyticsConfiguration *trt__AddVideoAnalyticsConfiguration;	/* optional element of type trt:AddVideoAnalyticsConfiguration */
public:
	int soap_type() const { return 5364; } /* = unique type id SOAP_TYPE___trt__AddVideoAnalyticsConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddMetadataConfiguration
#define SOAP_TYPE___trt__AddMetadataConfiguration (5368)
/* Operation wrapper: */
struct __trt__AddMetadataConfiguration
{
public:
	_trt__AddMetadataConfiguration *trt__AddMetadataConfiguration;	/* optional element of type trt:AddMetadataConfiguration */
public:
	int soap_type() const { return 5368; } /* = unique type id SOAP_TYPE___trt__AddMetadataConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddAudioOutputConfiguration
#define SOAP_TYPE___trt__AddAudioOutputConfiguration (5372)
/* Operation wrapper: */
struct __trt__AddAudioOutputConfiguration
{
public:
	_trt__AddAudioOutputConfiguration *trt__AddAudioOutputConfiguration;	/* optional element of type trt:AddAudioOutputConfiguration */
public:
	int soap_type() const { return 5372; } /* = unique type id SOAP_TYPE___trt__AddAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddAudioDecoderConfiguration
#define SOAP_TYPE___trt__AddAudioDecoderConfiguration (5376)
/* Operation wrapper: */
struct __trt__AddAudioDecoderConfiguration
{
public:
	_trt__AddAudioDecoderConfiguration *trt__AddAudioDecoderConfiguration;	/* optional element of type trt:AddAudioDecoderConfiguration */
public:
	int soap_type() const { return 5376; } /* = unique type id SOAP_TYPE___trt__AddAudioDecoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveVideoEncoderConfiguration
#define SOAP_TYPE___trt__RemoveVideoEncoderConfiguration (5380)
/* Operation wrapper: */
struct __trt__RemoveVideoEncoderConfiguration
{
public:
	_trt__RemoveVideoEncoderConfiguration *trt__RemoveVideoEncoderConfiguration;	/* optional element of type trt:RemoveVideoEncoderConfiguration */
public:
	int soap_type() const { return 5380; } /* = unique type id SOAP_TYPE___trt__RemoveVideoEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveVideoSourceConfiguration
#define SOAP_TYPE___trt__RemoveVideoSourceConfiguration (5384)
/* Operation wrapper: */
struct __trt__RemoveVideoSourceConfiguration
{
public:
	_trt__RemoveVideoSourceConfiguration *trt__RemoveVideoSourceConfiguration;	/* optional element of type trt:RemoveVideoSourceConfiguration */
public:
	int soap_type() const { return 5384; } /* = unique type id SOAP_TYPE___trt__RemoveVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveAudioEncoderConfiguration
#define SOAP_TYPE___trt__RemoveAudioEncoderConfiguration (5388)
/* Operation wrapper: */
struct __trt__RemoveAudioEncoderConfiguration
{
public:
	_trt__RemoveAudioEncoderConfiguration *trt__RemoveAudioEncoderConfiguration;	/* optional element of type trt:RemoveAudioEncoderConfiguration */
public:
	int soap_type() const { return 5388; } /* = unique type id SOAP_TYPE___trt__RemoveAudioEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveAudioSourceConfiguration
#define SOAP_TYPE___trt__RemoveAudioSourceConfiguration (5392)
/* Operation wrapper: */
struct __trt__RemoveAudioSourceConfiguration
{
public:
	_trt__RemoveAudioSourceConfiguration *trt__RemoveAudioSourceConfiguration;	/* optional element of type trt:RemoveAudioSourceConfiguration */
public:
	int soap_type() const { return 5392; } /* = unique type id SOAP_TYPE___trt__RemoveAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemovePTZConfiguration
#define SOAP_TYPE___trt__RemovePTZConfiguration (5396)
/* Operation wrapper: */
struct __trt__RemovePTZConfiguration
{
public:
	_trt__RemovePTZConfiguration *trt__RemovePTZConfiguration;	/* optional element of type trt:RemovePTZConfiguration */
public:
	int soap_type() const { return 5396; } /* = unique type id SOAP_TYPE___trt__RemovePTZConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveVideoAnalyticsConfiguration
#define SOAP_TYPE___trt__RemoveVideoAnalyticsConfiguration (5400)
/* Operation wrapper: */
struct __trt__RemoveVideoAnalyticsConfiguration
{
public:
	_trt__RemoveVideoAnalyticsConfiguration *trt__RemoveVideoAnalyticsConfiguration;	/* optional element of type trt:RemoveVideoAnalyticsConfiguration */
public:
	int soap_type() const { return 5400; } /* = unique type id SOAP_TYPE___trt__RemoveVideoAnalyticsConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveMetadataConfiguration
#define SOAP_TYPE___trt__RemoveMetadataConfiguration (5404)
/* Operation wrapper: */
struct __trt__RemoveMetadataConfiguration
{
public:
	_trt__RemoveMetadataConfiguration *trt__RemoveMetadataConfiguration;	/* optional element of type trt:RemoveMetadataConfiguration */
public:
	int soap_type() const { return 5404; } /* = unique type id SOAP_TYPE___trt__RemoveMetadataConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveAudioOutputConfiguration
#define SOAP_TYPE___trt__RemoveAudioOutputConfiguration (5408)
/* Operation wrapper: */
struct __trt__RemoveAudioOutputConfiguration
{
public:
	_trt__RemoveAudioOutputConfiguration *trt__RemoveAudioOutputConfiguration;	/* optional element of type trt:RemoveAudioOutputConfiguration */
public:
	int soap_type() const { return 5408; } /* = unique type id SOAP_TYPE___trt__RemoveAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveAudioDecoderConfiguration
#define SOAP_TYPE___trt__RemoveAudioDecoderConfiguration (5412)
/* Operation wrapper: */
struct __trt__RemoveAudioDecoderConfiguration
{
public:
	_trt__RemoveAudioDecoderConfiguration *trt__RemoveAudioDecoderConfiguration;	/* optional element of type trt:RemoveAudioDecoderConfiguration */
public:
	int soap_type() const { return 5412; } /* = unique type id SOAP_TYPE___trt__RemoveAudioDecoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__DeleteProfile
#define SOAP_TYPE___trt__DeleteProfile (5416)
/* Operation wrapper: */
struct __trt__DeleteProfile
{
public:
	_trt__DeleteProfile *trt__DeleteProfile;	/* optional element of type trt:DeleteProfile */
public:
	int soap_type() const { return 5416; } /* = unique type id SOAP_TYPE___trt__DeleteProfile */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoSourceConfigurations
#define SOAP_TYPE___trt__GetVideoSourceConfigurations (5420)
/* Operation wrapper: */
struct __trt__GetVideoSourceConfigurations
{
public:
	_trt__GetVideoSourceConfigurations *trt__GetVideoSourceConfigurations;	/* optional element of type trt:GetVideoSourceConfigurations */
public:
	int soap_type() const { return 5420; } /* = unique type id SOAP_TYPE___trt__GetVideoSourceConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoEncoderConfigurations
#define SOAP_TYPE___trt__GetVideoEncoderConfigurations (5424)
/* Operation wrapper: */
struct __trt__GetVideoEncoderConfigurations
{
public:
	_trt__GetVideoEncoderConfigurations *trt__GetVideoEncoderConfigurations;	/* optional element of type trt:GetVideoEncoderConfigurations */
public:
	int soap_type() const { return 5424; } /* = unique type id SOAP_TYPE___trt__GetVideoEncoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioSourceConfigurations
#define SOAP_TYPE___trt__GetAudioSourceConfigurations (5428)
/* Operation wrapper: */
struct __trt__GetAudioSourceConfigurations
{
public:
	_trt__GetAudioSourceConfigurations *trt__GetAudioSourceConfigurations;	/* optional element of type trt:GetAudioSourceConfigurations */
public:
	int soap_type() const { return 5428; } /* = unique type id SOAP_TYPE___trt__GetAudioSourceConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioEncoderConfigurations
#define SOAP_TYPE___trt__GetAudioEncoderConfigurations (5432)
/* Operation wrapper: */
struct __trt__GetAudioEncoderConfigurations
{
public:
	_trt__GetAudioEncoderConfigurations *trt__GetAudioEncoderConfigurations;	/* optional element of type trt:GetAudioEncoderConfigurations */
public:
	int soap_type() const { return 5432; } /* = unique type id SOAP_TYPE___trt__GetAudioEncoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoAnalyticsConfigurations
#define SOAP_TYPE___trt__GetVideoAnalyticsConfigurations (5436)
/* Operation wrapper: */
struct __trt__GetVideoAnalyticsConfigurations
{
public:
	_trt__GetVideoAnalyticsConfigurations *trt__GetVideoAnalyticsConfigurations;	/* optional element of type trt:GetVideoAnalyticsConfigurations */
public:
	int soap_type() const { return 5436; } /* = unique type id SOAP_TYPE___trt__GetVideoAnalyticsConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetMetadataConfigurations
#define SOAP_TYPE___trt__GetMetadataConfigurations (5440)
/* Operation wrapper: */
struct __trt__GetMetadataConfigurations
{
public:
	_trt__GetMetadataConfigurations *trt__GetMetadataConfigurations;	/* optional element of type trt:GetMetadataConfigurations */
public:
	int soap_type() const { return 5440; } /* = unique type id SOAP_TYPE___trt__GetMetadataConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioOutputConfigurations
#define SOAP_TYPE___trt__GetAudioOutputConfigurations (5444)
/* Operation wrapper: */
struct __trt__GetAudioOutputConfigurations
{
public:
	_trt__GetAudioOutputConfigurations *trt__GetAudioOutputConfigurations;	/* optional element of type trt:GetAudioOutputConfigurations */
public:
	int soap_type() const { return 5444; } /* = unique type id SOAP_TYPE___trt__GetAudioOutputConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioDecoderConfigurations
#define SOAP_TYPE___trt__GetAudioDecoderConfigurations (5448)
/* Operation wrapper: */
struct __trt__GetAudioDecoderConfigurations
{
public:
	_trt__GetAudioDecoderConfigurations *trt__GetAudioDecoderConfigurations;	/* optional element of type trt:GetAudioDecoderConfigurations */
public:
	int soap_type() const { return 5448; } /* = unique type id SOAP_TYPE___trt__GetAudioDecoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoSourceConfiguration
#define SOAP_TYPE___trt__GetVideoSourceConfiguration (5452)
/* Operation wrapper: */
struct __trt__GetVideoSourceConfiguration
{
public:
	_trt__GetVideoSourceConfiguration *trt__GetVideoSourceConfiguration;	/* optional element of type trt:GetVideoSourceConfiguration */
public:
	int soap_type() const { return 5452; } /* = unique type id SOAP_TYPE___trt__GetVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoEncoderConfiguration
#define SOAP_TYPE___trt__GetVideoEncoderConfiguration (5456)
/* Operation wrapper: */
struct __trt__GetVideoEncoderConfiguration
{
public:
	_trt__GetVideoEncoderConfiguration *trt__GetVideoEncoderConfiguration;	/* optional element of type trt:GetVideoEncoderConfiguration */
public:
	int soap_type() const { return 5456; } /* = unique type id SOAP_TYPE___trt__GetVideoEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioSourceConfiguration
#define SOAP_TYPE___trt__GetAudioSourceConfiguration (5460)
/* Operation wrapper: */
struct __trt__GetAudioSourceConfiguration
{
public:
	_trt__GetAudioSourceConfiguration *trt__GetAudioSourceConfiguration;	/* optional element of type trt:GetAudioSourceConfiguration */
public:
	int soap_type() const { return 5460; } /* = unique type id SOAP_TYPE___trt__GetAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioEncoderConfiguration
#define SOAP_TYPE___trt__GetAudioEncoderConfiguration (5464)
/* Operation wrapper: */
struct __trt__GetAudioEncoderConfiguration
{
public:
	_trt__GetAudioEncoderConfiguration *trt__GetAudioEncoderConfiguration;	/* optional element of type trt:GetAudioEncoderConfiguration */
public:
	int soap_type() const { return 5464; } /* = unique type id SOAP_TYPE___trt__GetAudioEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoAnalyticsConfiguration
#define SOAP_TYPE___trt__GetVideoAnalyticsConfiguration (5468)
/* Operation wrapper: */
struct __trt__GetVideoAnalyticsConfiguration
{
public:
	_trt__GetVideoAnalyticsConfiguration *trt__GetVideoAnalyticsConfiguration;	/* optional element of type trt:GetVideoAnalyticsConfiguration */
public:
	int soap_type() const { return 5468; } /* = unique type id SOAP_TYPE___trt__GetVideoAnalyticsConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetMetadataConfiguration
#define SOAP_TYPE___trt__GetMetadataConfiguration (5472)
/* Operation wrapper: */
struct __trt__GetMetadataConfiguration
{
public:
	_trt__GetMetadataConfiguration *trt__GetMetadataConfiguration;	/* optional element of type trt:GetMetadataConfiguration */
public:
	int soap_type() const { return 5472; } /* = unique type id SOAP_TYPE___trt__GetMetadataConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioOutputConfiguration
#define SOAP_TYPE___trt__GetAudioOutputConfiguration (5476)
/* Operation wrapper: */
struct __trt__GetAudioOutputConfiguration
{
public:
	_trt__GetAudioOutputConfiguration *trt__GetAudioOutputConfiguration;	/* optional element of type trt:GetAudioOutputConfiguration */
public:
	int soap_type() const { return 5476; } /* = unique type id SOAP_TYPE___trt__GetAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioDecoderConfiguration
#define SOAP_TYPE___trt__GetAudioDecoderConfiguration (5480)
/* Operation wrapper: */
struct __trt__GetAudioDecoderConfiguration
{
public:
	_trt__GetAudioDecoderConfiguration *trt__GetAudioDecoderConfiguration;	/* optional element of type trt:GetAudioDecoderConfiguration */
public:
	int soap_type() const { return 5480; } /* = unique type id SOAP_TYPE___trt__GetAudioDecoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleVideoEncoderConfigurations
#define SOAP_TYPE___trt__GetCompatibleVideoEncoderConfigurations (5484)
/* Operation wrapper: */
struct __trt__GetCompatibleVideoEncoderConfigurations
{
public:
	_trt__GetCompatibleVideoEncoderConfigurations *trt__GetCompatibleVideoEncoderConfigurations;	/* optional element of type trt:GetCompatibleVideoEncoderConfigurations */
public:
	int soap_type() const { return 5484; } /* = unique type id SOAP_TYPE___trt__GetCompatibleVideoEncoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleVideoSourceConfigurations
#define SOAP_TYPE___trt__GetCompatibleVideoSourceConfigurations (5488)
/* Operation wrapper: */
struct __trt__GetCompatibleVideoSourceConfigurations
{
public:
	_trt__GetCompatibleVideoSourceConfigurations *trt__GetCompatibleVideoSourceConfigurations;	/* optional element of type trt:GetCompatibleVideoSourceConfigurations */
public:
	int soap_type() const { return 5488; } /* = unique type id SOAP_TYPE___trt__GetCompatibleVideoSourceConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleAudioEncoderConfigurations
#define SOAP_TYPE___trt__GetCompatibleAudioEncoderConfigurations (5492)
/* Operation wrapper: */
struct __trt__GetCompatibleAudioEncoderConfigurations
{
public:
	_trt__GetCompatibleAudioEncoderConfigurations *trt__GetCompatibleAudioEncoderConfigurations;	/* optional element of type trt:GetCompatibleAudioEncoderConfigurations */
public:
	int soap_type() const { return 5492; } /* = unique type id SOAP_TYPE___trt__GetCompatibleAudioEncoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleAudioSourceConfigurations
#define SOAP_TYPE___trt__GetCompatibleAudioSourceConfigurations (5496)
/* Operation wrapper: */
struct __trt__GetCompatibleAudioSourceConfigurations
{
public:
	_trt__GetCompatibleAudioSourceConfigurations *trt__GetCompatibleAudioSourceConfigurations;	/* optional element of type trt:GetCompatibleAudioSourceConfigurations */
public:
	int soap_type() const { return 5496; } /* = unique type id SOAP_TYPE___trt__GetCompatibleAudioSourceConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleVideoAnalyticsConfigurations
#define SOAP_TYPE___trt__GetCompatibleVideoAnalyticsConfigurations (5500)
/* Operation wrapper: */
struct __trt__GetCompatibleVideoAnalyticsConfigurations
{
public:
	_trt__GetCompatibleVideoAnalyticsConfigurations *trt__GetCompatibleVideoAnalyticsConfigurations;	/* optional element of type trt:GetCompatibleVideoAnalyticsConfigurations */
public:
	int soap_type() const { return 5500; } /* = unique type id SOAP_TYPE___trt__GetCompatibleVideoAnalyticsConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleMetadataConfigurations
#define SOAP_TYPE___trt__GetCompatibleMetadataConfigurations (5504)
/* Operation wrapper: */
struct __trt__GetCompatibleMetadataConfigurations
{
public:
	_trt__GetCompatibleMetadataConfigurations *trt__GetCompatibleMetadataConfigurations;	/* optional element of type trt:GetCompatibleMetadataConfigurations */
public:
	int soap_type() const { return 5504; } /* = unique type id SOAP_TYPE___trt__GetCompatibleMetadataConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleAudioOutputConfigurations
#define SOAP_TYPE___trt__GetCompatibleAudioOutputConfigurations (5508)
/* Operation wrapper: */
struct __trt__GetCompatibleAudioOutputConfigurations
{
public:
	_trt__GetCompatibleAudioOutputConfigurations *trt__GetCompatibleAudioOutputConfigurations;	/* optional element of type trt:GetCompatibleAudioOutputConfigurations */
public:
	int soap_type() const { return 5508; } /* = unique type id SOAP_TYPE___trt__GetCompatibleAudioOutputConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleAudioDecoderConfigurations
#define SOAP_TYPE___trt__GetCompatibleAudioDecoderConfigurations (5512)
/* Operation wrapper: */
struct __trt__GetCompatibleAudioDecoderConfigurations
{
public:
	_trt__GetCompatibleAudioDecoderConfigurations *trt__GetCompatibleAudioDecoderConfigurations;	/* optional element of type trt:GetCompatibleAudioDecoderConfigurations */
public:
	int soap_type() const { return 5512; } /* = unique type id SOAP_TYPE___trt__GetCompatibleAudioDecoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__SetVideoSourceConfiguration
#define SOAP_TYPE___trt__SetVideoSourceConfiguration (5516)
/* Operation wrapper: */
struct __trt__SetVideoSourceConfiguration
{
public:
	_trt__SetVideoSourceConfiguration *trt__SetVideoSourceConfiguration;	/* optional element of type trt:SetVideoSourceConfiguration */
public:
	int soap_type() const { return 5516; } /* = unique type id SOAP_TYPE___trt__SetVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__SetVideoEncoderConfiguration
#define SOAP_TYPE___trt__SetVideoEncoderConfiguration (5520)
/* Operation wrapper: */
struct __trt__SetVideoEncoderConfiguration
{
public:
	_trt__SetVideoEncoderConfiguration *trt__SetVideoEncoderConfiguration;	/* optional element of type trt:SetVideoEncoderConfiguration */
public:
	int soap_type() const { return 5520; } /* = unique type id SOAP_TYPE___trt__SetVideoEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__SetAudioSourceConfiguration
#define SOAP_TYPE___trt__SetAudioSourceConfiguration (5524)
/* Operation wrapper: */
struct __trt__SetAudioSourceConfiguration
{
public:
	_trt__SetAudioSourceConfiguration *trt__SetAudioSourceConfiguration;	/* optional element of type trt:SetAudioSourceConfiguration */
public:
	int soap_type() const { return 5524; } /* = unique type id SOAP_TYPE___trt__SetAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__SetAudioEncoderConfiguration
#define SOAP_TYPE___trt__SetAudioEncoderConfiguration (5528)
/* Operation wrapper: */
struct __trt__SetAudioEncoderConfiguration
{
public:
	_trt__SetAudioEncoderConfiguration *trt__SetAudioEncoderConfiguration;	/* optional element of type trt:SetAudioEncoderConfiguration */
public:
	int soap_type() const { return 5528; } /* = unique type id SOAP_TYPE___trt__SetAudioEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__SetVideoAnalyticsConfiguration
#define SOAP_TYPE___trt__SetVideoAnalyticsConfiguration (5532)
/* Operation wrapper: */
struct __trt__SetVideoAnalyticsConfiguration
{
public:
	_trt__SetVideoAnalyticsConfiguration *trt__SetVideoAnalyticsConfiguration;	/* optional element of type trt:SetVideoAnalyticsConfiguration */
public:
	int soap_type() const { return 5532; } /* = unique type id SOAP_TYPE___trt__SetVideoAnalyticsConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__SetMetadataConfiguration
#define SOAP_TYPE___trt__SetMetadataConfiguration (5536)
/* Operation wrapper: */
struct __trt__SetMetadataConfiguration
{
public:
	_trt__SetMetadataConfiguration *trt__SetMetadataConfiguration;	/* optional element of type trt:SetMetadataConfiguration */
public:
	int soap_type() const { return 5536; } /* = unique type id SOAP_TYPE___trt__SetMetadataConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__SetAudioOutputConfiguration
#define SOAP_TYPE___trt__SetAudioOutputConfiguration (5540)
/* Operation wrapper: */
struct __trt__SetAudioOutputConfiguration
{
public:
	_trt__SetAudioOutputConfiguration *trt__SetAudioOutputConfiguration;	/* optional element of type trt:SetAudioOutputConfiguration */
public:
	int soap_type() const { return 5540; } /* = unique type id SOAP_TYPE___trt__SetAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__SetAudioDecoderConfiguration
#define SOAP_TYPE___trt__SetAudioDecoderConfiguration (5544)
/* Operation wrapper: */
struct __trt__SetAudioDecoderConfiguration
{
public:
	_trt__SetAudioDecoderConfiguration *trt__SetAudioDecoderConfiguration;	/* optional element of type trt:SetAudioDecoderConfiguration */
public:
	int soap_type() const { return 5544; } /* = unique type id SOAP_TYPE___trt__SetAudioDecoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoSourceConfigurationOptions
#define SOAP_TYPE___trt__GetVideoSourceConfigurationOptions (5548)
/* Operation wrapper: */
struct __trt__GetVideoSourceConfigurationOptions
{
public:
	_trt__GetVideoSourceConfigurationOptions *trt__GetVideoSourceConfigurationOptions;	/* optional element of type trt:GetVideoSourceConfigurationOptions */
public:
	int soap_type() const { return 5548; } /* = unique type id SOAP_TYPE___trt__GetVideoSourceConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoEncoderConfigurationOptions
#define SOAP_TYPE___trt__GetVideoEncoderConfigurationOptions (5552)
/* Operation wrapper: */
struct __trt__GetVideoEncoderConfigurationOptions
{
public:
	_trt__GetVideoEncoderConfigurationOptions *trt__GetVideoEncoderConfigurationOptions;	/* optional element of type trt:GetVideoEncoderConfigurationOptions */
public:
	int soap_type() const { return 5552; } /* = unique type id SOAP_TYPE___trt__GetVideoEncoderConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioSourceConfigurationOptions
#define SOAP_TYPE___trt__GetAudioSourceConfigurationOptions (5556)
/* Operation wrapper: */
struct __trt__GetAudioSourceConfigurationOptions
{
public:
	_trt__GetAudioSourceConfigurationOptions *trt__GetAudioSourceConfigurationOptions;	/* optional element of type trt:GetAudioSourceConfigurationOptions */
public:
	int soap_type() const { return 5556; } /* = unique type id SOAP_TYPE___trt__GetAudioSourceConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioEncoderConfigurationOptions
#define SOAP_TYPE___trt__GetAudioEncoderConfigurationOptions (5560)
/* Operation wrapper: */
struct __trt__GetAudioEncoderConfigurationOptions
{
public:
	_trt__GetAudioEncoderConfigurationOptions *trt__GetAudioEncoderConfigurationOptions;	/* optional element of type trt:GetAudioEncoderConfigurationOptions */
public:
	int soap_type() const { return 5560; } /* = unique type id SOAP_TYPE___trt__GetAudioEncoderConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___trt__GetMetadataConfigurationOptions
#define SOAP_TYPE___trt__GetMetadataConfigurationOptions (5564)
/* Operation wrapper: */
struct __trt__GetMetadataConfigurationOptions
{
public:
	_trt__GetMetadataConfigurationOptions *trt__GetMetadataConfigurationOptions;	/* optional element of type trt:GetMetadataConfigurationOptions */
public:
	int soap_type() const { return 5564; } /* = unique type id SOAP_TYPE___trt__GetMetadataConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioOutputConfigurationOptions
#define SOAP_TYPE___trt__GetAudioOutputConfigurationOptions (5568)
/* Operation wrapper: */
struct __trt__GetAudioOutputConfigurationOptions
{
public:
	_trt__GetAudioOutputConfigurationOptions *trt__GetAudioOutputConfigurationOptions;	/* optional element of type trt:GetAudioOutputConfigurationOptions */
public:
	int soap_type() const { return 5568; } /* = unique type id SOAP_TYPE___trt__GetAudioOutputConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioDecoderConfigurationOptions
#define SOAP_TYPE___trt__GetAudioDecoderConfigurationOptions (5572)
/* Operation wrapper: */
struct __trt__GetAudioDecoderConfigurationOptions
{
public:
	_trt__GetAudioDecoderConfigurationOptions *trt__GetAudioDecoderConfigurationOptions;	/* optional element of type trt:GetAudioDecoderConfigurationOptions */
public:
	int soap_type() const { return 5572; } /* = unique type id SOAP_TYPE___trt__GetAudioDecoderConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___trt__GetGuaranteedNumberOfVideoEncoderInstances
#define SOAP_TYPE___trt__GetGuaranteedNumberOfVideoEncoderInstances (5576)
/* Operation wrapper: */
struct __trt__GetGuaranteedNumberOfVideoEncoderInstances
{
public:
	_trt__GetGuaranteedNumberOfVideoEncoderInstances *trt__GetGuaranteedNumberOfVideoEncoderInstances;	/* optional element of type trt:GetGuaranteedNumberOfVideoEncoderInstances */
public:
	int soap_type() const { return 5576; } /* = unique type id SOAP_TYPE___trt__GetGuaranteedNumberOfVideoEncoderInstances */
};
#endif

#ifndef SOAP_TYPE___trt__GetStreamUri
#define SOAP_TYPE___trt__GetStreamUri (5580)
/* Operation wrapper: */
struct __trt__GetStreamUri
{
public:
	_trt__GetStreamUri *trt__GetStreamUri;	/* optional element of type trt:GetStreamUri */
public:
	int soap_type() const { return 5580; } /* = unique type id SOAP_TYPE___trt__GetStreamUri */
};
#endif

#ifndef SOAP_TYPE___trt__StartMulticastStreaming
#define SOAP_TYPE___trt__StartMulticastStreaming (5584)
/* Operation wrapper: */
struct __trt__StartMulticastStreaming
{
public:
	_trt__StartMulticastStreaming *trt__StartMulticastStreaming;	/* optional element of type trt:StartMulticastStreaming */
public:
	int soap_type() const { return 5584; } /* = unique type id SOAP_TYPE___trt__StartMulticastStreaming */
};
#endif

#ifndef SOAP_TYPE___trt__StopMulticastStreaming
#define SOAP_TYPE___trt__StopMulticastStreaming (5588)
/* Operation wrapper: */
struct __trt__StopMulticastStreaming
{
public:
	_trt__StopMulticastStreaming *trt__StopMulticastStreaming;	/* optional element of type trt:StopMulticastStreaming */
public:
	int soap_type() const { return 5588; } /* = unique type id SOAP_TYPE___trt__StopMulticastStreaming */
};
#endif

#ifndef SOAP_TYPE___trt__SetSynchronizationPoint
#define SOAP_TYPE___trt__SetSynchronizationPoint (5592)
/* Operation wrapper: */
struct __trt__SetSynchronizationPoint
{
public:
	_trt__SetSynchronizationPoint *trt__SetSynchronizationPoint;	/* optional element of type trt:SetSynchronizationPoint */
public:
	int soap_type() const { return 5592; } /* = unique type id SOAP_TYPE___trt__SetSynchronizationPoint */
};
#endif

#ifndef SOAP_TYPE___trt__GetSnapshotUri
#define SOAP_TYPE___trt__GetSnapshotUri (5596)
/* Operation wrapper: */
struct __trt__GetSnapshotUri
{
public:
	_trt__GetSnapshotUri *trt__GetSnapshotUri;	/* optional element of type trt:GetSnapshotUri */
public:
	int soap_type() const { return 5596; } /* = unique type id SOAP_TYPE___trt__GetSnapshotUri */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoSourceModes
#define SOAP_TYPE___trt__GetVideoSourceModes (5600)
/* Operation wrapper: */
struct __trt__GetVideoSourceModes
{
public:
	_trt__GetVideoSourceModes *trt__GetVideoSourceModes;	/* optional element of type trt:GetVideoSourceModes */
public:
	int soap_type() const { return 5600; } /* = unique type id SOAP_TYPE___trt__GetVideoSourceModes */
};
#endif

#ifndef SOAP_TYPE___trt__SetVideoSourceMode
#define SOAP_TYPE___trt__SetVideoSourceMode (5604)
/* Operation wrapper: */
struct __trt__SetVideoSourceMode
{
public:
	_trt__SetVideoSourceMode *trt__SetVideoSourceMode;	/* optional element of type trt:SetVideoSourceMode */
public:
	int soap_type() const { return 5604; } /* = unique type id SOAP_TYPE___trt__SetVideoSourceMode */
};
#endif

#ifndef SOAP_TYPE___trt__GetOSDs
#define SOAP_TYPE___trt__GetOSDs (5608)
/* Operation wrapper: */
struct __trt__GetOSDs
{
public:
	_trt__GetOSDs *trt__GetOSDs;	/* optional element of type trt:GetOSDs */
public:
	int soap_type() const { return 5608; } /* = unique type id SOAP_TYPE___trt__GetOSDs */
};
#endif

#ifndef SOAP_TYPE___trt__GetOSD
#define SOAP_TYPE___trt__GetOSD (5612)
/* Operation wrapper: */
struct __trt__GetOSD
{
public:
	_trt__GetOSD *trt__GetOSD;	/* optional element of type trt:GetOSD */
public:
	int soap_type() const { return 5612; } /* = unique type id SOAP_TYPE___trt__GetOSD */
};
#endif

#ifndef SOAP_TYPE___trt__GetOSDOptions
#define SOAP_TYPE___trt__GetOSDOptions (5616)
/* Operation wrapper: */
struct __trt__GetOSDOptions
{
public:
	_trt__GetOSDOptions *trt__GetOSDOptions;	/* optional element of type trt:GetOSDOptions */
public:
	int soap_type() const { return 5616; } /* = unique type id SOAP_TYPE___trt__GetOSDOptions */
};
#endif

#ifndef SOAP_TYPE___trt__SetOSD
#define SOAP_TYPE___trt__SetOSD (5620)
/* Operation wrapper: */
struct __trt__SetOSD
{
public:
	_trt__SetOSD *trt__SetOSD;	/* optional element of type trt:SetOSD */
public:
	int soap_type() const { return 5620; } /* = unique type id SOAP_TYPE___trt__SetOSD */
};
#endif

#ifndef SOAP_TYPE___trt__CreateOSD
#define SOAP_TYPE___trt__CreateOSD (5624)
/* Operation wrapper: */
struct __trt__CreateOSD
{
public:
	_trt__CreateOSD *trt__CreateOSD;	/* optional element of type trt:CreateOSD */
public:
	int soap_type() const { return 5624; } /* = unique type id SOAP_TYPE___trt__CreateOSD */
};
#endif

#ifndef SOAP_TYPE___trt__DeleteOSD
#define SOAP_TYPE___trt__DeleteOSD (5628)
/* Operation wrapper: */
struct __trt__DeleteOSD
{
public:
	_trt__DeleteOSD *trt__DeleteOSD;	/* optional element of type trt:DeleteOSD */
public:
	int soap_type() const { return 5628; } /* = unique type id SOAP_TYPE___trt__DeleteOSD */
};
#endif

#ifndef SOAP_TYPE___trv__GetServiceCapabilities
#define SOAP_TYPE___trv__GetServiceCapabilities (5632)
/* Operation wrapper: */
struct __trv__GetServiceCapabilities
{
public:
	_trv__GetServiceCapabilities *trv__GetServiceCapabilities;	/* optional element of type trv:GetServiceCapabilities */
public:
	int soap_type() const { return 5632; } /* = unique type id SOAP_TYPE___trv__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___trv__GetReceivers
#define SOAP_TYPE___trv__GetReceivers (5636)
/* Operation wrapper: */
struct __trv__GetReceivers
{
public:
	_trv__GetReceivers *trv__GetReceivers;	/* optional element of type trv:GetReceivers */
public:
	int soap_type() const { return 5636; } /* = unique type id SOAP_TYPE___trv__GetReceivers */
};
#endif

#ifndef SOAP_TYPE___trv__GetReceiver
#define SOAP_TYPE___trv__GetReceiver (5640)
/* Operation wrapper: */
struct __trv__GetReceiver
{
public:
	_trv__GetReceiver *trv__GetReceiver;	/* optional element of type trv:GetReceiver */
public:
	int soap_type() const { return 5640; } /* = unique type id SOAP_TYPE___trv__GetReceiver */
};
#endif

#ifndef SOAP_TYPE___trv__CreateReceiver
#define SOAP_TYPE___trv__CreateReceiver (5644)
/* Operation wrapper: */
struct __trv__CreateReceiver
{
public:
	_trv__CreateReceiver *trv__CreateReceiver;	/* optional element of type trv:CreateReceiver */
public:
	int soap_type() const { return 5644; } /* = unique type id SOAP_TYPE___trv__CreateReceiver */
};
#endif

#ifndef SOAP_TYPE___trv__DeleteReceiver
#define SOAP_TYPE___trv__DeleteReceiver (5648)
/* Operation wrapper: */
struct __trv__DeleteReceiver
{
public:
	_trv__DeleteReceiver *trv__DeleteReceiver;	/* optional element of type trv:DeleteReceiver */
public:
	int soap_type() const { return 5648; } /* = unique type id SOAP_TYPE___trv__DeleteReceiver */
};
#endif

#ifndef SOAP_TYPE___trv__ConfigureReceiver
#define SOAP_TYPE___trv__ConfigureReceiver (5652)
/* Operation wrapper: */
struct __trv__ConfigureReceiver
{
public:
	_trv__ConfigureReceiver *trv__ConfigureReceiver;	/* optional element of type trv:ConfigureReceiver */
public:
	int soap_type() const { return 5652; } /* = unique type id SOAP_TYPE___trv__ConfigureReceiver */
};
#endif

#ifndef SOAP_TYPE___trv__SetReceiverMode
#define SOAP_TYPE___trv__SetReceiverMode (5656)
/* Operation wrapper: */
struct __trv__SetReceiverMode
{
public:
	_trv__SetReceiverMode *trv__SetReceiverMode;	/* optional element of type trv:SetReceiverMode */
public:
	int soap_type() const { return 5656; } /* = unique type id SOAP_TYPE___trv__SetReceiverMode */
};
#endif

#ifndef SOAP_TYPE___trv__GetReceiverState
#define SOAP_TYPE___trv__GetReceiverState (5660)
/* Operation wrapper: */
struct __trv__GetReceiverState
{
public:
	_trv__GetReceiverState *trv__GetReceiverState;	/* optional element of type trv:GetReceiverState */
public:
	int soap_type() const { return 5660; } /* = unique type id SOAP_TYPE___trv__GetReceiverState */
};
#endif

#ifndef SOAP_TYPE___tse__GetServiceCapabilities
#define SOAP_TYPE___tse__GetServiceCapabilities (5664)
/* Operation wrapper: */
struct __tse__GetServiceCapabilities
{
public:
	_tse__GetServiceCapabilities *tse__GetServiceCapabilities;	/* optional element of type tse:GetServiceCapabilities */
public:
	int soap_type() const { return 5664; } /* = unique type id SOAP_TYPE___tse__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___tse__GetRecordingSummary
#define SOAP_TYPE___tse__GetRecordingSummary (5668)
/* Operation wrapper: */
struct __tse__GetRecordingSummary
{
public:
	_tse__GetRecordingSummary *tse__GetRecordingSummary;	/* optional element of type tse:GetRecordingSummary */
public:
	int soap_type() const { return 5668; } /* = unique type id SOAP_TYPE___tse__GetRecordingSummary */
};
#endif

#ifndef SOAP_TYPE___tse__GetRecordingInformation
#define SOAP_TYPE___tse__GetRecordingInformation (5672)
/* Operation wrapper: */
struct __tse__GetRecordingInformation
{
public:
	_tse__GetRecordingInformation *tse__GetRecordingInformation;	/* optional element of type tse:GetRecordingInformation */
public:
	int soap_type() const { return 5672; } /* = unique type id SOAP_TYPE___tse__GetRecordingInformation */
};
#endif

#ifndef SOAP_TYPE___tse__GetMediaAttributes
#define SOAP_TYPE___tse__GetMediaAttributes (5676)
/* Operation wrapper: */
struct __tse__GetMediaAttributes
{
public:
	_tse__GetMediaAttributes *tse__GetMediaAttributes;	/* optional element of type tse:GetMediaAttributes */
public:
	int soap_type() const { return 5676; } /* = unique type id SOAP_TYPE___tse__GetMediaAttributes */
};
#endif

#ifndef SOAP_TYPE___tse__FindRecordings
#define SOAP_TYPE___tse__FindRecordings (5680)
/* Operation wrapper: */
struct __tse__FindRecordings
{
public:
	_tse__FindRecordings *tse__FindRecordings;	/* optional element of type tse:FindRecordings */
public:
	int soap_type() const { return 5680; } /* = unique type id SOAP_TYPE___tse__FindRecordings */
};
#endif

#ifndef SOAP_TYPE___tse__GetRecordingSearchResults
#define SOAP_TYPE___tse__GetRecordingSearchResults (5684)
/* Operation wrapper: */
struct __tse__GetRecordingSearchResults
{
public:
	_tse__GetRecordingSearchResults *tse__GetRecordingSearchResults;	/* optional element of type tse:GetRecordingSearchResults */
public:
	int soap_type() const { return 5684; } /* = unique type id SOAP_TYPE___tse__GetRecordingSearchResults */
};
#endif

#ifndef SOAP_TYPE___tse__FindEvents
#define SOAP_TYPE___tse__FindEvents (5688)
/* Operation wrapper: */
struct __tse__FindEvents
{
public:
	_tse__FindEvents *tse__FindEvents;	/* optional element of type tse:FindEvents */
public:
	int soap_type() const { return 5688; } /* = unique type id SOAP_TYPE___tse__FindEvents */
};
#endif

#ifndef SOAP_TYPE___tse__GetEventSearchResults
#define SOAP_TYPE___tse__GetEventSearchResults (5692)
/* Operation wrapper: */
struct __tse__GetEventSearchResults
{
public:
	_tse__GetEventSearchResults *tse__GetEventSearchResults;	/* optional element of type tse:GetEventSearchResults */
public:
	int soap_type() const { return 5692; } /* = unique type id SOAP_TYPE___tse__GetEventSearchResults */
};
#endif

#ifndef SOAP_TYPE___tse__FindPTZPosition
#define SOAP_TYPE___tse__FindPTZPosition (5696)
/* Operation wrapper: */
struct __tse__FindPTZPosition
{
public:
	_tse__FindPTZPosition *tse__FindPTZPosition;	/* optional element of type tse:FindPTZPosition */
public:
	int soap_type() const { return 5696; } /* = unique type id SOAP_TYPE___tse__FindPTZPosition */
};
#endif

#ifndef SOAP_TYPE___tse__GetPTZPositionSearchResults
#define SOAP_TYPE___tse__GetPTZPositionSearchResults (5700)
/* Operation wrapper: */
struct __tse__GetPTZPositionSearchResults
{
public:
	_tse__GetPTZPositionSearchResults *tse__GetPTZPositionSearchResults;	/* optional element of type tse:GetPTZPositionSearchResults */
public:
	int soap_type() const { return 5700; } /* = unique type id SOAP_TYPE___tse__GetPTZPositionSearchResults */
};
#endif

#ifndef SOAP_TYPE___tse__GetSearchState
#define SOAP_TYPE___tse__GetSearchState (5704)
/* Operation wrapper: */
struct __tse__GetSearchState
{
public:
	_tse__GetSearchState *tse__GetSearchState;	/* optional element of type tse:GetSearchState */
public:
	int soap_type() const { return 5704; } /* = unique type id SOAP_TYPE___tse__GetSearchState */
};
#endif

#ifndef SOAP_TYPE___tse__EndSearch
#define SOAP_TYPE___tse__EndSearch (5708)
/* Operation wrapper: */
struct __tse__EndSearch
{
public:
	_tse__EndSearch *tse__EndSearch;	/* optional element of type tse:EndSearch */
public:
	int soap_type() const { return 5708; } /* = unique type id SOAP_TYPE___tse__EndSearch */
};
#endif

#ifndef SOAP_TYPE___tse__FindMetadata
#define SOAP_TYPE___tse__FindMetadata (5712)
/* Operation wrapper: */
struct __tse__FindMetadata
{
public:
	_tse__FindMetadata *tse__FindMetadata;	/* optional element of type tse:FindMetadata */
public:
	int soap_type() const { return 5712; } /* = unique type id SOAP_TYPE___tse__FindMetadata */
};
#endif

#ifndef SOAP_TYPE___tse__GetMetadataSearchResults
#define SOAP_TYPE___tse__GetMetadataSearchResults (5716)
/* Operation wrapper: */
struct __tse__GetMetadataSearchResults
{
public:
	_tse__GetMetadataSearchResults *tse__GetMetadataSearchResults;	/* optional element of type tse:GetMetadataSearchResults */
public:
	int soap_type() const { return 5716; } /* = unique type id SOAP_TYPE___tse__GetMetadataSearchResults */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_wsa5__RelationshipTypeOpenEnum
#define SOAP_TYPE_wsa5__RelationshipTypeOpenEnum (17)
typedef char *wsa5__RelationshipTypeOpenEnum;
#endif

#ifndef SOAP_TYPE_wsa5__FaultCodesOpenEnumType
#define SOAP_TYPE_wsa5__FaultCodesOpenEnumType (18)
typedef char *wsa5__FaultCodesOpenEnumType;
#endif

#ifndef SOAP_TYPE__wsa5__EndpointReference
#define SOAP_TYPE__wsa5__EndpointReference (25)
typedef struct wsa5__EndpointReferenceType _wsa5__EndpointReference;
#endif

#ifndef SOAP_TYPE__wsa5__ReferenceParameters
#define SOAP_TYPE__wsa5__ReferenceParameters (26)
typedef struct wsa5__ReferenceParametersType _wsa5__ReferenceParameters;
#endif

#ifndef SOAP_TYPE__wsa5__Metadata
#define SOAP_TYPE__wsa5__Metadata (27)
typedef struct wsa5__MetadataType _wsa5__Metadata;
#endif

#ifndef SOAP_TYPE__wsa5__MessageID
#define SOAP_TYPE__wsa5__MessageID (28)
typedef char *_wsa5__MessageID;
#endif

#ifndef SOAP_TYPE__wsa5__RelatesTo
#define SOAP_TYPE__wsa5__RelatesTo (29)
typedef struct wsa5__RelatesToType _wsa5__RelatesTo;
#endif

#ifndef SOAP_TYPE__wsa5__ReplyTo
#define SOAP_TYPE__wsa5__ReplyTo (30)
typedef struct wsa5__EndpointReferenceType _wsa5__ReplyTo;
#endif

#ifndef SOAP_TYPE__wsa5__From
#define SOAP_TYPE__wsa5__From (31)
typedef struct wsa5__EndpointReferenceType _wsa5__From;
#endif

#ifndef SOAP_TYPE__wsa5__FaultTo
#define SOAP_TYPE__wsa5__FaultTo (32)
typedef struct wsa5__EndpointReferenceType _wsa5__FaultTo;
#endif

#ifndef SOAP_TYPE__wsa5__To
#define SOAP_TYPE__wsa5__To (33)
typedef char *_wsa5__To;
#endif

#ifndef SOAP_TYPE__wsa5__Action
#define SOAP_TYPE__wsa5__Action (34)
typedef char *_wsa5__Action;
#endif

#ifndef SOAP_TYPE__wsa5__RetryAfter
#define SOAP_TYPE__wsa5__RetryAfter (36)
typedef ULONG64 _wsa5__RetryAfter;
#endif

#ifndef SOAP_TYPE__wsa5__ProblemHeaderQName
#define SOAP_TYPE__wsa5__ProblemHeaderQName (37)
typedef char *_wsa5__ProblemHeaderQName;
#endif

#ifndef SOAP_TYPE__wsa5__ProblemIRI
#define SOAP_TYPE__wsa5__ProblemIRI (38)
typedef char *_wsa5__ProblemIRI;
#endif

#ifndef SOAP_TYPE__wsa5__ProblemAction
#define SOAP_TYPE__wsa5__ProblemAction (39)
typedef struct wsa5__ProblemActionType _wsa5__ProblemAction;
#endif

#ifndef SOAP_TYPE__ds__Signature
#define SOAP_TYPE__ds__Signature (78)
typedef struct ds__SignatureType _ds__Signature;
#endif

#ifndef SOAP_TYPE__ds__Transform
#define SOAP_TYPE__ds__Transform (86)
typedef struct ds__TransformType _ds__Transform;
#endif

#ifndef SOAP_TYPE__ds__KeyInfo
#define SOAP_TYPE__ds__KeyInfo (93)
typedef struct ds__KeyInfoType _ds__KeyInfo;
#endif

#ifndef SOAP_TYPE_wsc__FaultCodeOpenEnumType
#define SOAP_TYPE_wsc__FaultCodeOpenEnumType (130)
typedef char *wsc__FaultCodeOpenEnumType;
#endif

#ifndef SOAP_TYPE_xsd__NCName
#define SOAP_TYPE_xsd__NCName (160)
typedef std::string xsd__NCName;
#endif

#ifndef SOAP_TYPE_xsd__anySimpleType
#define SOAP_TYPE_xsd__anySimpleType (163)
typedef std::string xsd__anySimpleType;
#endif

#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (165)
typedef std::string xsd__anyURI;
#endif

#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (179)
typedef std::string xsd__integer;
#endif

#ifndef SOAP_TYPE_xsd__nonNegativeInteger
#define SOAP_TYPE_xsd__nonNegativeInteger (181)
typedef std::string xsd__nonNegativeInteger;
#endif

#ifndef SOAP_TYPE_xsd__positiveInteger
#define SOAP_TYPE_xsd__positiveInteger (183)
typedef std::string xsd__positiveInteger;
#endif

#ifndef SOAP_TYPE_xsd__time
#define SOAP_TYPE_xsd__time (186)
typedef std::string xsd__time;
#endif

#ifndef SOAP_TYPE_xsd__token
#define SOAP_TYPE_xsd__token (188)
typedef std::string xsd__token;
#endif

#ifndef SOAP_TYPE__xml__lang
#define SOAP_TYPE__xml__lang (191)
typedef std::string _xml__lang;
#endif

#ifndef SOAP_TYPE_tt__IntAttrList
#define SOAP_TYPE_tt__IntAttrList (2002)
typedef std::string tt__IntAttrList;
#endif

#ifndef SOAP_TYPE_tt__FloatAttrList
#define SOAP_TYPE_tt__FloatAttrList (2003)
typedef std::string tt__FloatAttrList;
#endif

#ifndef SOAP_TYPE_tt__StringAttrList
#define SOAP_TYPE_tt__StringAttrList (2004)
typedef std::string tt__StringAttrList;
#endif

#ifndef SOAP_TYPE_tt__ReferenceTokenList
#define SOAP_TYPE_tt__ReferenceTokenList (2005)
typedef std::string tt__ReferenceTokenList;
#endif

#ifndef SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType
#define SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType (2006)
typedef std::string wsnt__AbsoluteOrRelativeTimeType;
#endif

#ifndef SOAP_TYPE_ns5__Dot1XMethods
#define SOAP_TYPE_ns5__Dot1XMethods (2007)
typedef std::string ns5__Dot1XMethods;
#endif

#ifndef SOAP_TYPE_ns5__RSAKeyLengths
#define SOAP_TYPE_ns5__RSAKeyLengths (2008)
typedef std::string ns5__RSAKeyLengths;
#endif

#ifndef SOAP_TYPE_ns5__X509Versions
#define SOAP_TYPE_ns5__X509Versions (2009)
typedef std::string ns5__X509Versions;
#endif

#ifndef SOAP_TYPE_ns5__TLSVersions
#define SOAP_TYPE_ns5__TLSVersions (2010)
typedef std::string ns5__TLSVersions;
#endif

#ifndef SOAP_TYPE_ns5__PasswordBasedEncryptionAlgorithms
#define SOAP_TYPE_ns5__PasswordBasedEncryptionAlgorithms (2011)
typedef std::string ns5__PasswordBasedEncryptionAlgorithms;
#endif

#ifndef SOAP_TYPE_ns5__PasswordBasedMACAlgorithms
#define SOAP_TYPE_ns5__PasswordBasedMACAlgorithms (2012)
typedef std::string ns5__PasswordBasedMACAlgorithms;
#endif

#ifndef SOAP_TYPE_tmd__DelayTimes
#define SOAP_TYPE_tmd__DelayTimes (2013)
typedef std::string tmd__DelayTimes;
#endif

#ifndef SOAP_TYPE_tds__EAPMethodTypes
#define SOAP_TYPE_tds__EAPMethodTypes (2014)
typedef std::string tds__EAPMethodTypes;
#endif

#ifndef SOAP_TYPE_trt__EncodingTypes
#define SOAP_TYPE_trt__EncodingTypes (2015)
typedef std::string trt__EncodingTypes;
#endif

#ifndef SOAP_TYPE_ns9__EncodingTypes
#define SOAP_TYPE_ns9__EncodingTypes (2016)
typedef std::string ns9__EncodingTypes;
#endif

#ifndef SOAP_TYPE_trc__EncodingTypes
#define SOAP_TYPE_trc__EncodingTypes (2017)
typedef std::string trc__EncodingTypes;
#endif

#ifndef SOAP_TYPE_ns2__ReferenceToken
#define SOAP_TYPE_ns2__ReferenceToken (2022)
typedef std::string ns2__ReferenceToken;
#endif

#ifndef SOAP_TYPE_ns2__Name
#define SOAP_TYPE_ns2__Name (2024)
typedef std::string ns2__Name;
#endif

#ifndef SOAP_TYPE_ns2__Description
#define SOAP_TYPE_ns2__Description (2026)
typedef std::string ns2__Description;
#endif

#ifndef SOAP_TYPE_ns2__PositiveInteger
#define SOAP_TYPE_ns2__PositiveInteger (2028)
typedef unsigned int ns2__PositiveInteger;
#endif

#ifndef SOAP_TYPE_tt__Name
#define SOAP_TYPE_tt__Name (2040)
typedef std::string tt__Name;
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceConfigPriority
#define SOAP_TYPE_tt__NetworkInterfaceConfigPriority (2074)
typedef std::string tt__NetworkInterfaceConfigPriority;
#endif

#ifndef SOAP_TYPE_tt__IANA_IfTypes
#define SOAP_TYPE_tt__IANA_IfTypes (2078)
typedef int tt__IANA_IfTypes;
#endif

#ifndef SOAP_TYPE_tt__IPv4Address
#define SOAP_TYPE_tt__IPv4Address (2086)
typedef std::string tt__IPv4Address;
#endif

#ifndef SOAP_TYPE_tt__IPv6Address
#define SOAP_TYPE_tt__IPv6Address (2088)
typedef std::string tt__IPv6Address;
#endif

#ifndef SOAP_TYPE_tt__HwAddress
#define SOAP_TYPE_tt__HwAddress (2090)
typedef std::string tt__HwAddress;
#endif

#ifndef SOAP_TYPE_tt__DNSName
#define SOAP_TYPE_tt__DNSName (2094)
typedef std::string tt__DNSName;
#endif

#ifndef SOAP_TYPE_tt__Domain
#define SOAP_TYPE_tt__Domain (2096)
typedef std::string tt__Domain;
#endif

#ifndef SOAP_TYPE_tt__Dot11SSIDType
#define SOAP_TYPE_tt__Dot11SSIDType (2102)
typedef xsd__hexBinary tt__Dot11SSIDType;
#endif

#ifndef SOAP_TYPE_tt__Dot11PSK
#define SOAP_TYPE_tt__Dot11PSK (2110)
typedef xsd__hexBinary tt__Dot11PSK;
#endif

#ifndef SOAP_TYPE_tt__Dot11PSKPassphrase
#define SOAP_TYPE_tt__Dot11PSKPassphrase (2112)
typedef std::string tt__Dot11PSKPassphrase;
#endif

#ifndef SOAP_TYPE_tt__AuxiliaryData
#define SOAP_TYPE_tt__AuxiliaryData (2140)
typedef std::string tt__AuxiliaryData;
#endif

#ifndef SOAP_TYPE_tt__TopicNamespaceLocation
#define SOAP_TYPE_tt__TopicNamespaceLocation (2172)
typedef std::string tt__TopicNamespaceLocation;
#endif

#ifndef SOAP_TYPE_tt__Description
#define SOAP_TYPE_tt__Description (2182)
typedef std::string tt__Description;
#endif

#ifndef SOAP_TYPE_tt__XPathExpression
#define SOAP_TYPE_tt__XPathExpression (2184)
typedef std::string tt__XPathExpression;
#endif

#ifndef SOAP_TYPE_tt__RecordingJobMode
#define SOAP_TYPE_tt__RecordingJobMode (2192)
typedef std::string tt__RecordingJobMode;
#endif

#ifndef SOAP_TYPE_tt__RecordingJobState
#define SOAP_TYPE_tt__RecordingJobState (2194)
typedef std::string tt__RecordingJobState;
#endif

#ifndef SOAP_TYPE_tt__AudioClassType
#define SOAP_TYPE_tt__AudioClassType (2198)
typedef std::string tt__AudioClassType;
#endif

#ifndef SOAP_TYPE_tt__ReferenceToken
#define SOAP_TYPE_tt__ReferenceToken (2202)
typedef std::string tt__ReferenceToken;
#endif

#ifndef SOAP_TYPE_wstop__FullTopicExpression
#define SOAP_TYPE_wstop__FullTopicExpression (2208)
typedef std::string wstop__FullTopicExpression;
#endif

#ifndef SOAP_TYPE_wstop__ConcreteTopicExpression
#define SOAP_TYPE_wstop__ConcreteTopicExpression (2210)
typedef std::string wstop__ConcreteTopicExpression;
#endif

#ifndef SOAP_TYPE_wstop__SimpleTopicExpression
#define SOAP_TYPE_wstop__SimpleTopicExpression (2212)
typedef std::string wstop__SimpleTopicExpression;
#endif

#ifndef SOAP_TYPE_ns5__KeyID
#define SOAP_TYPE_ns5__KeyID (2214)
typedef std::string ns5__KeyID;
#endif

#ifndef SOAP_TYPE_ns5__CertificateID
#define SOAP_TYPE_ns5__CertificateID (2216)
typedef std::string ns5__CertificateID;
#endif

#ifndef SOAP_TYPE_ns5__CertificationPathID
#define SOAP_TYPE_ns5__CertificationPathID (2218)
typedef std::string ns5__CertificationPathID;
#endif

#ifndef SOAP_TYPE_ns5__PassphraseID
#define SOAP_TYPE_ns5__PassphraseID (2220)
typedef std::string ns5__PassphraseID;
#endif

#ifndef SOAP_TYPE_ns5__Dot1XID
#define SOAP_TYPE_ns5__Dot1XID (2222)
typedef std::string ns5__Dot1XID;
#endif

#ifndef SOAP_TYPE_ns5__DotDecimalOID
#define SOAP_TYPE_ns5__DotDecimalOID (2226)
typedef std::string ns5__DotDecimalOID;
#endif

#ifndef SOAP_TYPE_ns5__DNAttributeType
#define SOAP_TYPE_ns5__DNAttributeType (2228)
typedef std::string ns5__DNAttributeType;
#endif

#ifndef SOAP_TYPE_ns5__DNAttributeValue
#define SOAP_TYPE_ns5__DNAttributeValue (2230)
typedef std::string ns5__DNAttributeValue;
#endif

#ifndef SOAP_TYPE_ns5__Base64DERencodedASN1Value
#define SOAP_TYPE_ns5__Base64DERencodedASN1Value (2232)
typedef xsd__base64Binary ns5__Base64DERencodedASN1Value;
#endif

#ifndef SOAP_TYPE_ns5__CRLID
#define SOAP_TYPE_ns5__CRLID (2234)
typedef std::string ns5__CRLID;
#endif

#ifndef SOAP_TYPE_ns5__CertPathValidationPolicyID
#define SOAP_TYPE_ns5__CertPathValidationPolicyID (2236)
typedef std::string ns5__CertPathValidationPolicyID;
#endif

#ifndef SOAP_TYPE_tt__ReceiverReference
#define SOAP_TYPE_tt__ReceiverReference (2280)
typedef std::string tt__ReceiverReference;
#endif

#ifndef SOAP_TYPE_tt__RecordingReference
#define SOAP_TYPE_tt__RecordingReference (2282)
typedef std::string tt__RecordingReference;
#endif

#ifndef SOAP_TYPE_tt__TrackReference
#define SOAP_TYPE_tt__TrackReference (2284)
typedef std::string tt__TrackReference;
#endif

#ifndef SOAP_TYPE_tt__JobToken
#define SOAP_TYPE_tt__JobToken (2286)
typedef std::string tt__JobToken;
#endif

#ifndef SOAP_TYPE_tt__RecordingJobReference
#define SOAP_TYPE_tt__RecordingJobReference (2288)
typedef std::string tt__RecordingJobReference;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
