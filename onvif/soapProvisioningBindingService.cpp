/* soapProvisioningBindingService.cpp
   Generated by gSOAP 2.8.17r from onvif.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapProvisioningBindingService.h"

ProvisioningBindingService::ProvisioningBindingService()
{	this->soap = soap_new();
	this->own = true;
	ProvisioningBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

ProvisioningBindingService::ProvisioningBindingService(struct soap *_soap)
{	this->soap = _soap;
	this->own = false;
	ProvisioningBindingService_init(_soap->imode, _soap->omode);
}

ProvisioningBindingService::ProvisioningBindingService(soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	ProvisioningBindingService_init(iomode, iomode);
}

ProvisioningBindingService::ProvisioningBindingService(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->own = true;
	ProvisioningBindingService_init(imode, omode);
}

ProvisioningBindingService::~ProvisioningBindingService()
{	if (this->own)
		soap_free(this->soap);
}

void ProvisioningBindingService::ProvisioningBindingService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"chan", "http://schemas.microsoft.com/ws/2005/02/duplex", NULL, NULL},
	{"wsa5", "http://www.w3.org/2005/08/addressing", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL},
	{"c14n", "http://www.w3.org/2001/10/xml-exc-c14n#", NULL, NULL},
	{"wsu", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd", NULL, NULL},
	{"xenc", "http://www.w3.org/2001/04/xmlenc#", NULL, NULL},
	{"wsc", "http://schemas.xmlsoap.org/ws/2005/02/sc", NULL, NULL},
	{"ds", "http://www.w3.org/2000/09/xmldsig#", NULL, NULL},
	{"wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd", NULL},
	{"ns2", "http://www.onvif.org/ver10/pacs", NULL, NULL},
	{"xmime", "http://tempuri.org/xmime.xsd", NULL, NULL},
	{"xop", "http://www.w3.org/2004/08/xop/include", NULL, NULL},
	{"tt", "http://www.onvif.org/ver10/schema", NULL, NULL},
	{"wsrfbf", "http://docs.oasis-open.org/wsrf/bf-2", NULL, NULL},
	{"wstop", "http://docs.oasis-open.org/wsn/t-1", NULL, NULL},
	{"wsrfr", "http://docs.oasis-open.org/wsrf/r-2", NULL, NULL},
	{"name", "http://www.onvif.org/ver10/advancedsecurity/wsdl/AdvancedSecurityServiceBinding", NULL, NULL},
	{"name10", "http://www.onvif.org/ver10/events/wsdl/NotificationProducerBinding", NULL, NULL},
	{"name11", "http://www.onvif.org/ver10/events/wsdl/NotificationConsumerBinding", NULL, NULL},
	{"name12", "http://www.onvif.org/ver10/events/wsdl/PullPointBinding", NULL, NULL},
	{"name13", "http://www.onvif.org/ver10/events/wsdl/CreatePullPointBinding", NULL, NULL},
	{"name14", "http://www.onvif.org/ver10/events/wsdl/PausableSubscriptionManagerBinding", NULL, NULL},
	{"wsnt", "http://docs.oasis-open.org/wsn/b-2", NULL, NULL},
	{"name2", "http://www.onvif.org/ver10/advancedsecurity/wsdl/KeystoreBinding", NULL, NULL},
	{"name3", "http://www.onvif.org/ver10/advancedsecurity/wsdl/TLSServerBinding", NULL, NULL},
	{"name4", "http://www.onvif.org/ver10/advancedsecurity/wsdl/Dot1XBinding", NULL, NULL},
	{"ns5", "http://www.onvif.org/ver10/advancedsecurity/wsdl", NULL, NULL},
	{"name5", "http://www.onvif.org/ver20/analytics/wsdl/RuleEngineBinding", NULL, NULL},
	{"name6", "http://www.onvif.org/ver20/analytics/wsdl/AnalyticsEngineBinding", NULL, NULL},
	{"tan", "http://www.onvif.org/ver20/analytics/wsdl", NULL, NULL},
	{"name7", "http://www.onvif.org/ver10/events/wsdl/PullPointSubscriptionBinding", NULL, NULL},
	{"name8", "http://www.onvif.org/ver10/events/wsdl/EventBinding", NULL, NULL},
	{"tev", "http://www.onvif.org/ver10/events/wsdl", NULL, NULL},
	{"name9", "http://www.onvif.org/ver10/events/wsdl/SubscriptionManagerBinding", NULL, NULL},
	{"ns1", "http://www.onvif.org/ver10/accesscontrol/wsdl", NULL, NULL},
	{"ns10", "http://www.onvif.org/ver10/provisioning/wsdl", NULL, NULL},
	{"ns11", "http://www.onvif.org/ver10/schedule/wsdl", NULL, NULL},
	{"ns12", "http://www.onvif.org/ver10/thermal/wsdl", NULL, NULL},
	{"ns3", "http://www.onvif.org/ver10/accessrules/wsdl", NULL, NULL},
	{"ns4", "http://www.onvif.org/ver10/actionengine/wsdl", NULL, NULL},
	{"ns6", "http://www.onvif.org/ver10/authenticationbehavior/wsdl", NULL, NULL},
	{"ns7", "http://www.onvif.org/ver10/credential/wsdl", NULL, NULL},
	{"ns8", "http://www.onvif.org/ver10/doorcontrol/wsdl", NULL, NULL},
	{"ns9", "http://www.onvif.org/ver20/media/wsdl", NULL, NULL},
	{"tad", "http://www.onvif.org/ver10/analyticsdevice/wsdl", NULL, NULL},
	{"tds", "http://www.onvif.org/ver10/device/wsdl", NULL, NULL},
	{"timg", "http://www.onvif.org/ver20/imaging/wsdl", NULL, NULL},
	{"tls", "http://www.onvif.org/ver10/display/wsdl", NULL, NULL},
	{"tmd", "http://www.onvif.org/ver10/deviceIO/wsdl", NULL, NULL},
	{"tptz", "http://www.onvif.org/ver20/ptz/wsdl", NULL, NULL},
	{"trc", "http://www.onvif.org/ver10/recording/wsdl", NULL, NULL},
	{"trp", "http://www.onvif.org/ver10/replay/wsdl", NULL, NULL},
	{"trt", "http://www.onvif.org/ver10/media/wsdl", NULL, NULL},
	{"trv", "http://www.onvif.org/ver10/receiver/wsdl", NULL, NULL},
	{"tse", "http://www.onvif.org/ver10/search/wsdl", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
}

void ProvisioningBindingService::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void ProvisioningBindingService::reset()
{	destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	ProvisioningBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
ProvisioningBindingService *ProvisioningBindingService::copy()
{	ProvisioningBindingService *dup = SOAP_NEW_COPY(ProvisioningBindingService);
	if (dup)
		soap_copy_context(dup->soap, this->soap);
	return dup;
}
#endif

int ProvisioningBindingService::soap_close_socket()
{	return soap_closesock(this->soap);
}

int ProvisioningBindingService::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

int ProvisioningBindingService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this->soap, string, detailXML);
}

int ProvisioningBindingService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

int ProvisioningBindingService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this->soap, string, detailXML);
}

int ProvisioningBindingService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

void ProvisioningBindingService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void ProvisioningBindingService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *ProvisioningBindingService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

void ProvisioningBindingService::soap_noheader()
{	this->soap->header = NULL;
}

void ProvisioningBindingService::soap_header(char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance, struct _wsse__Security *wsse__Security)
{	::soap_header(this->soap);
	this->soap->header->wsa5__MessageID = wsa5__MessageID;
	this->soap->header->wsa5__RelatesTo = wsa5__RelatesTo;
	this->soap->header->wsa5__From = wsa5__From;
	this->soap->header->wsa5__ReplyTo = wsa5__ReplyTo;
	this->soap->header->wsa5__FaultTo = wsa5__FaultTo;
	this->soap->header->wsa5__To = wsa5__To;
	this->soap->header->wsa5__Action = wsa5__Action;
	this->soap->header->chan__ChannelInstance = chan__ChannelInstance;
	this->soap->header->wsse__Security = wsse__Security;
}

const SOAP_ENV__Header *ProvisioningBindingService::soap_header()
{	return this->soap->header;
}

int ProvisioningBindingService::run(int port)
{	if (soap_valid_socket(this->soap->master) || soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()) || serve())
				return this->soap->error;
			soap_destroy(this->soap);
			soap_end(this->soap);
		}
	}
	else
		return this->soap->error;
	return SOAP_OK;
}

SOAP_SOCKET ProvisioningBindingService::bind(const char *host, int port, int backlog)
{	return soap_bind(this->soap, host, port, backlog);
}

SOAP_SOCKET ProvisioningBindingService::accept()
{	return soap_accept(this->soap);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int ProvisioningBindingService::ssl_accept()
{	return soap_ssl_accept(this->soap);
}
#endif

int ProvisioningBindingService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->soap->max_keep_alive;
#endif
	do
	{

#ifndef WITH_FASTCGI
		if (this->soap->max_keep_alive > 0 && !--k)
			this->soap->keep_alive = 0;
#endif

		if (soap_begin_serve(this->soap))
		{	if (this->soap->error >= SOAP_STOP)
				continue;
			return this->soap->error;
		}
		if (dispatch() || (this->soap->fserveloop && this->soap->fserveloop(this->soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this->soap);
#else
			return soap_send_fault(this->soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this->soap);
		soap_end(this->soap);
	} while (1);
#else
	} while (this->soap->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___ns10__GetServiceCapabilities(ProvisioningBindingService*);
static int serve___ns10__PanMove(ProvisioningBindingService*);
static int serve___ns10__TiltMove(ProvisioningBindingService*);
static int serve___ns10__ZoomMove(ProvisioningBindingService*);
static int serve___ns10__RollMove(ProvisioningBindingService*);
static int serve___ns10__FocusMove(ProvisioningBindingService*);
static int serve___ns10__Stop(ProvisioningBindingService*);
static int serve___ns10__GetUsage(ProvisioningBindingService*);

int ProvisioningBindingService::dispatch()
{	ProvisioningBindingService_init(this->soap->imode, this->soap->omode);
	soap_peek_element(this->soap);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns10:GetServiceCapabilities"))
		return serve___ns10__GetServiceCapabilities(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns10:PanMove"))
		return serve___ns10__PanMove(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns10:TiltMove"))
		return serve___ns10__TiltMove(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns10:ZoomMove"))
		return serve___ns10__ZoomMove(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns10:RollMove"))
		return serve___ns10__RollMove(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns10:FocusMove"))
		return serve___ns10__FocusMove(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns10:Stop"))
		return serve___ns10__Stop(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns10:GetUsage"))
		return serve___ns10__GetUsage(this);
	return this->soap->error = SOAP_NO_METHOD;
}

static int serve___ns10__GetServiceCapabilities(ProvisioningBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns10__GetServiceCapabilities soap_tmp___ns10__GetServiceCapabilities;
	_ns10__GetServiceCapabilitiesResponse ns10__GetServiceCapabilitiesResponse;
	ns10__GetServiceCapabilitiesResponse.soap_default(soap);
	soap_default___ns10__GetServiceCapabilities(soap, &soap_tmp___ns10__GetServiceCapabilities);
	if (!soap_get___ns10__GetServiceCapabilities(soap, &soap_tmp___ns10__GetServiceCapabilities, "-ns10:GetServiceCapabilities", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetServiceCapabilities(soap_tmp___ns10__GetServiceCapabilities.ns10__GetServiceCapabilities, &ns10__GetServiceCapabilitiesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns10__GetServiceCapabilitiesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns10__GetServiceCapabilitiesResponse.soap_put(soap, "ns10:GetServiceCapabilitiesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns10__GetServiceCapabilitiesResponse.soap_put(soap, "ns10:GetServiceCapabilitiesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns10__PanMove(ProvisioningBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns10__PanMove soap_tmp___ns10__PanMove;
	_ns10__PanMoveResponse ns10__PanMoveResponse;
	ns10__PanMoveResponse.soap_default(soap);
	soap_default___ns10__PanMove(soap, &soap_tmp___ns10__PanMove);
	if (!soap_get___ns10__PanMove(soap, &soap_tmp___ns10__PanMove, "-ns10:PanMove", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->PanMove(soap_tmp___ns10__PanMove.ns10__PanMove, &ns10__PanMoveResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns10__PanMoveResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns10__PanMoveResponse.soap_put(soap, "ns10:PanMoveResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns10__PanMoveResponse.soap_put(soap, "ns10:PanMoveResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns10__TiltMove(ProvisioningBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns10__TiltMove soap_tmp___ns10__TiltMove;
	_ns10__TiltMoveResponse ns10__TiltMoveResponse;
	ns10__TiltMoveResponse.soap_default(soap);
	soap_default___ns10__TiltMove(soap, &soap_tmp___ns10__TiltMove);
	if (!soap_get___ns10__TiltMove(soap, &soap_tmp___ns10__TiltMove, "-ns10:TiltMove", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->TiltMove(soap_tmp___ns10__TiltMove.ns10__TiltMove, &ns10__TiltMoveResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns10__TiltMoveResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns10__TiltMoveResponse.soap_put(soap, "ns10:TiltMoveResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns10__TiltMoveResponse.soap_put(soap, "ns10:TiltMoveResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns10__ZoomMove(ProvisioningBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns10__ZoomMove soap_tmp___ns10__ZoomMove;
	_ns10__ZoomMoveResponse ns10__ZoomMoveResponse;
	ns10__ZoomMoveResponse.soap_default(soap);
	soap_default___ns10__ZoomMove(soap, &soap_tmp___ns10__ZoomMove);
	if (!soap_get___ns10__ZoomMove(soap, &soap_tmp___ns10__ZoomMove, "-ns10:ZoomMove", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->ZoomMove(soap_tmp___ns10__ZoomMove.ns10__ZoomMove, &ns10__ZoomMoveResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns10__ZoomMoveResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns10__ZoomMoveResponse.soap_put(soap, "ns10:ZoomMoveResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns10__ZoomMoveResponse.soap_put(soap, "ns10:ZoomMoveResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns10__RollMove(ProvisioningBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns10__RollMove soap_tmp___ns10__RollMove;
	_ns10__RollMoveResponse ns10__RollMoveResponse;
	ns10__RollMoveResponse.soap_default(soap);
	soap_default___ns10__RollMove(soap, &soap_tmp___ns10__RollMove);
	if (!soap_get___ns10__RollMove(soap, &soap_tmp___ns10__RollMove, "-ns10:RollMove", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->RollMove(soap_tmp___ns10__RollMove.ns10__RollMove, &ns10__RollMoveResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns10__RollMoveResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns10__RollMoveResponse.soap_put(soap, "ns10:RollMoveResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns10__RollMoveResponse.soap_put(soap, "ns10:RollMoveResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns10__FocusMove(ProvisioningBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns10__FocusMove soap_tmp___ns10__FocusMove;
	_ns10__FocusMoveResponse ns10__FocusMoveResponse;
	ns10__FocusMoveResponse.soap_default(soap);
	soap_default___ns10__FocusMove(soap, &soap_tmp___ns10__FocusMove);
	if (!soap_get___ns10__FocusMove(soap, &soap_tmp___ns10__FocusMove, "-ns10:FocusMove", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->FocusMove(soap_tmp___ns10__FocusMove.ns10__FocusMove, &ns10__FocusMoveResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns10__FocusMoveResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns10__FocusMoveResponse.soap_put(soap, "ns10:FocusMoveResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns10__FocusMoveResponse.soap_put(soap, "ns10:FocusMoveResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns10__Stop(ProvisioningBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns10__Stop soap_tmp___ns10__Stop;
	_ns10__StopResponse ns10__StopResponse;
	ns10__StopResponse.soap_default(soap);
	soap_default___ns10__Stop(soap, &soap_tmp___ns10__Stop);
	if (!soap_get___ns10__Stop(soap, &soap_tmp___ns10__Stop, "-ns10:Stop", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Stop(soap_tmp___ns10__Stop.ns10__Stop, &ns10__StopResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns10__StopResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns10__StopResponse.soap_put(soap, "ns10:StopResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns10__StopResponse.soap_put(soap, "ns10:StopResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns10__GetUsage(ProvisioningBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns10__GetUsage soap_tmp___ns10__GetUsage;
	_ns10__GetUsageResponse ns10__GetUsageResponse;
	ns10__GetUsageResponse.soap_default(soap);
	soap_default___ns10__GetUsage(soap, &soap_tmp___ns10__GetUsage);
	if (!soap_get___ns10__GetUsage(soap, &soap_tmp___ns10__GetUsage, "-ns10:GetUsage", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetUsage(soap_tmp___ns10__GetUsage.ns10__GetUsage, &ns10__GetUsageResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns10__GetUsageResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns10__GetUsageResponse.soap_put(soap, "ns10:GetUsageResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns10__GetUsageResponse.soap_put(soap, "ns10:GetUsageResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
