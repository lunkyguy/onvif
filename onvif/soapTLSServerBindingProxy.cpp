/* soapTLSServerBindingProxy.cpp
   Generated by gSOAP 2.8.17r from onvif.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapTLSServerBindingProxy.h"

TLSServerBindingProxy::TLSServerBindingProxy()
{	this->soap = soap_new();
	this->own = true;
	TLSServerBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

TLSServerBindingProxy::TLSServerBindingProxy(struct soap *_soap)
{	this->soap = _soap;
	this->own = false;
	TLSServerBindingProxy_init(_soap->imode, _soap->omode);
}

TLSServerBindingProxy::TLSServerBindingProxy(const char *url)
{	this->soap = soap_new();
	this->own = true;
	TLSServerBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

TLSServerBindingProxy::TLSServerBindingProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	TLSServerBindingProxy_init(iomode, iomode);
}

TLSServerBindingProxy::TLSServerBindingProxy(const char *url, soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	TLSServerBindingProxy_init(iomode, iomode);
	soap_endpoint = url;
}

TLSServerBindingProxy::TLSServerBindingProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->own = true;
	TLSServerBindingProxy_init(imode, omode);
}

TLSServerBindingProxy::~TLSServerBindingProxy()
{	if (this->own)
		soap_free(this->soap);
}

void TLSServerBindingProxy::TLSServerBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"chan", "http://schemas.microsoft.com/ws/2005/02/duplex", NULL, NULL},
	{"wsa5", "http://www.w3.org/2005/08/addressing", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL},
	{"c14n", "http://www.w3.org/2001/10/xml-exc-c14n#", NULL, NULL},
	{"wsu", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd", NULL, NULL},
	{"xenc", "http://www.w3.org/2001/04/xmlenc#", NULL, NULL},
	{"wsc", "http://schemas.xmlsoap.org/ws/2005/02/sc", NULL, NULL},
	{"ds", "http://www.w3.org/2000/09/xmldsig#", NULL, NULL},
	{"wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd", NULL},
	{"ns2", "http://www.onvif.org/ver10/pacs", NULL, NULL},
	{"xmime", "http://tempuri.org/xmime.xsd", NULL, NULL},
	{"xop", "http://www.w3.org/2004/08/xop/include", NULL, NULL},
	{"tt", "http://www.onvif.org/ver10/schema", NULL, NULL},
	{"wsrfbf", "http://docs.oasis-open.org/wsrf/bf-2", NULL, NULL},
	{"wstop", "http://docs.oasis-open.org/wsn/t-1", NULL, NULL},
	{"wsrfr", "http://docs.oasis-open.org/wsrf/r-2", NULL, NULL},
	{"name", "http://www.onvif.org/ver10/advancedsecurity/wsdl/AdvancedSecurityServiceBinding", NULL, NULL},
	{"name10", "http://www.onvif.org/ver10/events/wsdl/NotificationProducerBinding", NULL, NULL},
	{"name11", "http://www.onvif.org/ver10/events/wsdl/NotificationConsumerBinding", NULL, NULL},
	{"name12", "http://www.onvif.org/ver10/events/wsdl/PullPointBinding", NULL, NULL},
	{"name13", "http://www.onvif.org/ver10/events/wsdl/CreatePullPointBinding", NULL, NULL},
	{"name14", "http://www.onvif.org/ver10/events/wsdl/PausableSubscriptionManagerBinding", NULL, NULL},
	{"wsnt", "http://docs.oasis-open.org/wsn/b-2", NULL, NULL},
	{"name2", "http://www.onvif.org/ver10/advancedsecurity/wsdl/KeystoreBinding", NULL, NULL},
	{"name3", "http://www.onvif.org/ver10/advancedsecurity/wsdl/TLSServerBinding", NULL, NULL},
	{"name4", "http://www.onvif.org/ver10/advancedsecurity/wsdl/Dot1XBinding", NULL, NULL},
	{"ns5", "http://www.onvif.org/ver10/advancedsecurity/wsdl", NULL, NULL},
	{"name5", "http://www.onvif.org/ver20/analytics/wsdl/RuleEngineBinding", NULL, NULL},
	{"name6", "http://www.onvif.org/ver20/analytics/wsdl/AnalyticsEngineBinding", NULL, NULL},
	{"tan", "http://www.onvif.org/ver20/analytics/wsdl", NULL, NULL},
	{"name7", "http://www.onvif.org/ver10/events/wsdl/PullPointSubscriptionBinding", NULL, NULL},
	{"name8", "http://www.onvif.org/ver10/events/wsdl/EventBinding", NULL, NULL},
	{"tev", "http://www.onvif.org/ver10/events/wsdl", NULL, NULL},
	{"name9", "http://www.onvif.org/ver10/events/wsdl/SubscriptionManagerBinding", NULL, NULL},
	{"ns1", "http://www.onvif.org/ver10/accesscontrol/wsdl", NULL, NULL},
	{"ns10", "http://www.onvif.org/ver10/provisioning/wsdl", NULL, NULL},
	{"ns11", "http://www.onvif.org/ver10/schedule/wsdl", NULL, NULL},
	{"ns12", "http://www.onvif.org/ver10/thermal/wsdl", NULL, NULL},
	{"ns3", "http://www.onvif.org/ver10/accessrules/wsdl", NULL, NULL},
	{"ns4", "http://www.onvif.org/ver10/actionengine/wsdl", NULL, NULL},
	{"ns6", "http://www.onvif.org/ver10/authenticationbehavior/wsdl", NULL, NULL},
	{"ns7", "http://www.onvif.org/ver10/credential/wsdl", NULL, NULL},
	{"ns8", "http://www.onvif.org/ver10/doorcontrol/wsdl", NULL, NULL},
	{"ns9", "http://www.onvif.org/ver20/media/wsdl", NULL, NULL},
	{"tad", "http://www.onvif.org/ver10/analyticsdevice/wsdl", NULL, NULL},
	{"tds", "http://www.onvif.org/ver10/device/wsdl", NULL, NULL},
	{"timg", "http://www.onvif.org/ver20/imaging/wsdl", NULL, NULL},
	{"tls", "http://www.onvif.org/ver10/display/wsdl", NULL, NULL},
	{"tmd", "http://www.onvif.org/ver10/deviceIO/wsdl", NULL, NULL},
	{"tptz", "http://www.onvif.org/ver20/ptz/wsdl", NULL, NULL},
	{"trc", "http://www.onvif.org/ver10/recording/wsdl", NULL, NULL},
	{"trp", "http://www.onvif.org/ver10/replay/wsdl", NULL, NULL},
	{"trt", "http://www.onvif.org/ver10/media/wsdl", NULL, NULL},
	{"trv", "http://www.onvif.org/ver10/receiver/wsdl", NULL, NULL},
	{"tse", "http://www.onvif.org/ver10/search/wsdl", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
}

void TLSServerBindingProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void TLSServerBindingProxy::reset()
{	destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	TLSServerBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void TLSServerBindingProxy::soap_noheader()
{	this->soap->header = NULL;
}

void TLSServerBindingProxy::soap_header(char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance, struct _wsse__Security *wsse__Security)
{	::soap_header(this->soap);
	this->soap->header->wsa5__MessageID = wsa5__MessageID;
	this->soap->header->wsa5__RelatesTo = wsa5__RelatesTo;
	this->soap->header->wsa5__From = wsa5__From;
	this->soap->header->wsa5__ReplyTo = wsa5__ReplyTo;
	this->soap->header->wsa5__FaultTo = wsa5__FaultTo;
	this->soap->header->wsa5__To = wsa5__To;
	this->soap->header->wsa5__Action = wsa5__Action;
	this->soap->header->chan__ChannelInstance = chan__ChannelInstance;
	this->soap->header->wsse__Security = wsse__Security;
}

const SOAP_ENV__Header *TLSServerBindingProxy::soap_header()
{	return this->soap->header;
}

const SOAP_ENV__Fault *TLSServerBindingProxy::soap_fault()
{	return this->soap->fault;
}

const char *TLSServerBindingProxy::soap_fault_string()
{	return *soap_faultstring(this->soap);
}

const char *TLSServerBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this->soap);
}

int TLSServerBindingProxy::soap_close_socket()
{	return soap_closesock(this->soap);
}

int TLSServerBindingProxy::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

void TLSServerBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void TLSServerBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *TLSServerBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int TLSServerBindingProxy::AddServerCertificateAssignment(const char *endpoint, const char *soap_action, _ns5__AddServerCertificateAssignment *ns5__AddServerCertificateAssignment, _ns5__AddServerCertificateAssignmentResponse *ns5__AddServerCertificateAssignmentResponse)
{	struct soap *soap = this->soap;
	struct __name3__AddServerCertificateAssignment soap_tmp___name3__AddServerCertificateAssignment;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/AddServerCertificateAssignment";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___name3__AddServerCertificateAssignment.ns5__AddServerCertificateAssignment = ns5__AddServerCertificateAssignment;
	soap_set_version(soap, 2); /* SOAP1.2 */
	soap_serializeheader(soap);
	soap_serialize___name3__AddServerCertificateAssignment(soap, &soap_tmp___name3__AddServerCertificateAssignment);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name3__AddServerCertificateAssignment(soap, &soap_tmp___name3__AddServerCertificateAssignment, "-name3:AddServerCertificateAssignment", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name3__AddServerCertificateAssignment(soap, &soap_tmp___name3__AddServerCertificateAssignment, "-name3:AddServerCertificateAssignment", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns5__AddServerCertificateAssignmentResponse)
		return soap_closesock(soap);
	ns5__AddServerCertificateAssignmentResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns5__AddServerCertificateAssignmentResponse->soap_get(soap, "ns5:AddServerCertificateAssignmentResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int TLSServerBindingProxy::RemoveServerCertificateAssignment(const char *endpoint, const char *soap_action, _ns5__RemoveServerCertificateAssignment *ns5__RemoveServerCertificateAssignment, _ns5__RemoveServerCertificateAssignmentResponse *ns5__RemoveServerCertificateAssignmentResponse)
{	struct soap *soap = this->soap;
	struct __name3__RemoveServerCertificateAssignment soap_tmp___name3__RemoveServerCertificateAssignment;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/RemoveServerCertificateAssignment";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___name3__RemoveServerCertificateAssignment.ns5__RemoveServerCertificateAssignment = ns5__RemoveServerCertificateAssignment;
	soap_set_version(soap, 2); /* SOAP1.2 */
	soap_serializeheader(soap);
	soap_serialize___name3__RemoveServerCertificateAssignment(soap, &soap_tmp___name3__RemoveServerCertificateAssignment);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name3__RemoveServerCertificateAssignment(soap, &soap_tmp___name3__RemoveServerCertificateAssignment, "-name3:RemoveServerCertificateAssignment", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name3__RemoveServerCertificateAssignment(soap, &soap_tmp___name3__RemoveServerCertificateAssignment, "-name3:RemoveServerCertificateAssignment", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns5__RemoveServerCertificateAssignmentResponse)
		return soap_closesock(soap);
	ns5__RemoveServerCertificateAssignmentResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns5__RemoveServerCertificateAssignmentResponse->soap_get(soap, "ns5:RemoveServerCertificateAssignmentResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int TLSServerBindingProxy::ReplaceServerCertificateAssignment(const char *endpoint, const char *soap_action, _ns5__ReplaceServerCertificateAssignment *ns5__ReplaceServerCertificateAssignment, _ns5__ReplaceServerCertificateAssignmentResponse *ns5__ReplaceServerCertificateAssignmentResponse)
{	struct soap *soap = this->soap;
	struct __name3__ReplaceServerCertificateAssignment soap_tmp___name3__ReplaceServerCertificateAssignment;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/ReplaceServerCertificateAssignment";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___name3__ReplaceServerCertificateAssignment.ns5__ReplaceServerCertificateAssignment = ns5__ReplaceServerCertificateAssignment;
	soap_set_version(soap, 2); /* SOAP1.2 */
	soap_serializeheader(soap);
	soap_serialize___name3__ReplaceServerCertificateAssignment(soap, &soap_tmp___name3__ReplaceServerCertificateAssignment);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name3__ReplaceServerCertificateAssignment(soap, &soap_tmp___name3__ReplaceServerCertificateAssignment, "-name3:ReplaceServerCertificateAssignment", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name3__ReplaceServerCertificateAssignment(soap, &soap_tmp___name3__ReplaceServerCertificateAssignment, "-name3:ReplaceServerCertificateAssignment", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns5__ReplaceServerCertificateAssignmentResponse)
		return soap_closesock(soap);
	ns5__ReplaceServerCertificateAssignmentResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns5__ReplaceServerCertificateAssignmentResponse->soap_get(soap, "ns5:ReplaceServerCertificateAssignmentResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int TLSServerBindingProxy::GetAssignedServerCertificates(const char *endpoint, const char *soap_action, _ns5__GetAssignedServerCertificates *ns5__GetAssignedServerCertificates, _ns5__GetAssignedServerCertificatesResponse *ns5__GetAssignedServerCertificatesResponse)
{	struct soap *soap = this->soap;
	struct __name3__GetAssignedServerCertificates soap_tmp___name3__GetAssignedServerCertificates;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/GetAssignedServerCertificates";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___name3__GetAssignedServerCertificates.ns5__GetAssignedServerCertificates = ns5__GetAssignedServerCertificates;
	soap_set_version(soap, 2); /* SOAP1.2 */
	soap_serializeheader(soap);
	soap_serialize___name3__GetAssignedServerCertificates(soap, &soap_tmp___name3__GetAssignedServerCertificates);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name3__GetAssignedServerCertificates(soap, &soap_tmp___name3__GetAssignedServerCertificates, "-name3:GetAssignedServerCertificates", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name3__GetAssignedServerCertificates(soap, &soap_tmp___name3__GetAssignedServerCertificates, "-name3:GetAssignedServerCertificates", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns5__GetAssignedServerCertificatesResponse)
		return soap_closesock(soap);
	ns5__GetAssignedServerCertificatesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns5__GetAssignedServerCertificatesResponse->soap_get(soap, "ns5:GetAssignedServerCertificatesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int TLSServerBindingProxy::SetClientAuthenticationRequired(const char *endpoint, const char *soap_action, _ns5__SetClientAuthenticationRequired *ns5__SetClientAuthenticationRequired, _ns5__SetClientAuthenticationRequiredResponse *ns5__SetClientAuthenticationRequiredResponse)
{	struct soap *soap = this->soap;
	struct __name3__SetClientAuthenticationRequired soap_tmp___name3__SetClientAuthenticationRequired;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/SetClientAuthenticationRequired";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___name3__SetClientAuthenticationRequired.ns5__SetClientAuthenticationRequired = ns5__SetClientAuthenticationRequired;
	soap_set_version(soap, 2); /* SOAP1.2 */
	soap_serializeheader(soap);
	soap_serialize___name3__SetClientAuthenticationRequired(soap, &soap_tmp___name3__SetClientAuthenticationRequired);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name3__SetClientAuthenticationRequired(soap, &soap_tmp___name3__SetClientAuthenticationRequired, "-name3:SetClientAuthenticationRequired", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name3__SetClientAuthenticationRequired(soap, &soap_tmp___name3__SetClientAuthenticationRequired, "-name3:SetClientAuthenticationRequired", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns5__SetClientAuthenticationRequiredResponse)
		return soap_closesock(soap);
	ns5__SetClientAuthenticationRequiredResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns5__SetClientAuthenticationRequiredResponse->soap_get(soap, "ns5:SetClientAuthenticationRequiredResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int TLSServerBindingProxy::GetClientAuthenticationRequired(const char *endpoint, const char *soap_action, _ns5__GetClientAuthenticationRequired *ns5__GetClientAuthenticationRequired, _ns5__GetClientAuthenticationRequiredResponse *ns5__GetClientAuthenticationRequiredResponse)
{	struct soap *soap = this->soap;
	struct __name3__GetClientAuthenticationRequired soap_tmp___name3__GetClientAuthenticationRequired;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/GetClientAuthenticationRequired";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___name3__GetClientAuthenticationRequired.ns5__GetClientAuthenticationRequired = ns5__GetClientAuthenticationRequired;
	soap_set_version(soap, 2); /* SOAP1.2 */
	soap_serializeheader(soap);
	soap_serialize___name3__GetClientAuthenticationRequired(soap, &soap_tmp___name3__GetClientAuthenticationRequired);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name3__GetClientAuthenticationRequired(soap, &soap_tmp___name3__GetClientAuthenticationRequired, "-name3:GetClientAuthenticationRequired", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name3__GetClientAuthenticationRequired(soap, &soap_tmp___name3__GetClientAuthenticationRequired, "-name3:GetClientAuthenticationRequired", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns5__GetClientAuthenticationRequiredResponse)
		return soap_closesock(soap);
	ns5__GetClientAuthenticationRequiredResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns5__GetClientAuthenticationRequiredResponse->soap_get(soap, "ns5:GetClientAuthenticationRequiredResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int TLSServerBindingProxy::AddCertPathValidationPolicyAssignment(const char *endpoint, const char *soap_action, _ns5__AddCertPathValidationPolicyAssignment *ns5__AddCertPathValidationPolicyAssignment, _ns5__AddCertPathValidationPolicyAssignmentResponse *ns5__AddCertPathValidationPolicyAssignmentResponse)
{	struct soap *soap = this->soap;
	struct __name3__AddCertPathValidationPolicyAssignment soap_tmp___name3__AddCertPathValidationPolicyAssignment;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/AddCertPathValidationPolicyAssignment";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___name3__AddCertPathValidationPolicyAssignment.ns5__AddCertPathValidationPolicyAssignment = ns5__AddCertPathValidationPolicyAssignment;
	soap_set_version(soap, 2); /* SOAP1.2 */
	soap_serializeheader(soap);
	soap_serialize___name3__AddCertPathValidationPolicyAssignment(soap, &soap_tmp___name3__AddCertPathValidationPolicyAssignment);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name3__AddCertPathValidationPolicyAssignment(soap, &soap_tmp___name3__AddCertPathValidationPolicyAssignment, "-name3:AddCertPathValidationPolicyAssignment", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name3__AddCertPathValidationPolicyAssignment(soap, &soap_tmp___name3__AddCertPathValidationPolicyAssignment, "-name3:AddCertPathValidationPolicyAssignment", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns5__AddCertPathValidationPolicyAssignmentResponse)
		return soap_closesock(soap);
	ns5__AddCertPathValidationPolicyAssignmentResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns5__AddCertPathValidationPolicyAssignmentResponse->soap_get(soap, "ns5:AddCertPathValidationPolicyAssignmentResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int TLSServerBindingProxy::RemoveCertPathValidationPolicyAssignment(const char *endpoint, const char *soap_action, _ns5__RemoveCertPathValidationPolicyAssignment *ns5__RemoveCertPathValidationPolicyAssignment, _ns5__RemoveCertPathValidationPolicyAssignmentResponse *ns5__RemoveCertPathValidationPolicyAssignmentResponse)
{	struct soap *soap = this->soap;
	struct __name3__RemoveCertPathValidationPolicyAssignment soap_tmp___name3__RemoveCertPathValidationPolicyAssignment;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/RemoveCertPathValidationPolicyAssignment";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___name3__RemoveCertPathValidationPolicyAssignment.ns5__RemoveCertPathValidationPolicyAssignment = ns5__RemoveCertPathValidationPolicyAssignment;
	soap_set_version(soap, 2); /* SOAP1.2 */
	soap_serializeheader(soap);
	soap_serialize___name3__RemoveCertPathValidationPolicyAssignment(soap, &soap_tmp___name3__RemoveCertPathValidationPolicyAssignment);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name3__RemoveCertPathValidationPolicyAssignment(soap, &soap_tmp___name3__RemoveCertPathValidationPolicyAssignment, "-name3:RemoveCertPathValidationPolicyAssignment", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name3__RemoveCertPathValidationPolicyAssignment(soap, &soap_tmp___name3__RemoveCertPathValidationPolicyAssignment, "-name3:RemoveCertPathValidationPolicyAssignment", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns5__RemoveCertPathValidationPolicyAssignmentResponse)
		return soap_closesock(soap);
	ns5__RemoveCertPathValidationPolicyAssignmentResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns5__RemoveCertPathValidationPolicyAssignmentResponse->soap_get(soap, "ns5:RemoveCertPathValidationPolicyAssignmentResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int TLSServerBindingProxy::ReplaceCertPathValidationPolicyAssignment(const char *endpoint, const char *soap_action, _ns5__ReplaceCertPathValidationPolicyAssignment *ns5__ReplaceCertPathValidationPolicyAssignment, _ns5__ReplaceCertPathValidationPolicyAssignmentResponse *ns5__ReplaceCertPathValidationPolicyAssignmentResponse)
{	struct soap *soap = this->soap;
	struct __name3__ReplaceCertPathValidationPolicyAssignment soap_tmp___name3__ReplaceCertPathValidationPolicyAssignment;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/ReplaceCertPathValidationPolicyAssignment";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___name3__ReplaceCertPathValidationPolicyAssignment.ns5__ReplaceCertPathValidationPolicyAssignment = ns5__ReplaceCertPathValidationPolicyAssignment;
	soap_set_version(soap, 2); /* SOAP1.2 */
	soap_serializeheader(soap);
	soap_serialize___name3__ReplaceCertPathValidationPolicyAssignment(soap, &soap_tmp___name3__ReplaceCertPathValidationPolicyAssignment);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name3__ReplaceCertPathValidationPolicyAssignment(soap, &soap_tmp___name3__ReplaceCertPathValidationPolicyAssignment, "-name3:ReplaceCertPathValidationPolicyAssignment", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name3__ReplaceCertPathValidationPolicyAssignment(soap, &soap_tmp___name3__ReplaceCertPathValidationPolicyAssignment, "-name3:ReplaceCertPathValidationPolicyAssignment", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns5__ReplaceCertPathValidationPolicyAssignmentResponse)
		return soap_closesock(soap);
	ns5__ReplaceCertPathValidationPolicyAssignmentResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns5__ReplaceCertPathValidationPolicyAssignmentResponse->soap_get(soap, "ns5:ReplaceCertPathValidationPolicyAssignmentResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int TLSServerBindingProxy::GetAssignedCertPathValidationPolicies(const char *endpoint, const char *soap_action, _ns5__GetAssignedCertPathValidationPolicies *ns5__GetAssignedCertPathValidationPolicies, _ns5__GetAssignedCertPathValidationPoliciesResponse *ns5__GetAssignedCertPathValidationPoliciesResponse)
{	struct soap *soap = this->soap;
	struct __name3__GetAssignedCertPathValidationPolicies soap_tmp___name3__GetAssignedCertPathValidationPolicies;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/GetAssignedCertPathValidationPolicies";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___name3__GetAssignedCertPathValidationPolicies.ns5__GetAssignedCertPathValidationPolicies = ns5__GetAssignedCertPathValidationPolicies;
	soap_set_version(soap, 2); /* SOAP1.2 */
	soap_serializeheader(soap);
	soap_serialize___name3__GetAssignedCertPathValidationPolicies(soap, &soap_tmp___name3__GetAssignedCertPathValidationPolicies);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name3__GetAssignedCertPathValidationPolicies(soap, &soap_tmp___name3__GetAssignedCertPathValidationPolicies, "-name3:GetAssignedCertPathValidationPolicies", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name3__GetAssignedCertPathValidationPolicies(soap, &soap_tmp___name3__GetAssignedCertPathValidationPolicies, "-name3:GetAssignedCertPathValidationPolicies", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns5__GetAssignedCertPathValidationPoliciesResponse)
		return soap_closesock(soap);
	ns5__GetAssignedCertPathValidationPoliciesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns5__GetAssignedCertPathValidationPoliciesResponse->soap_get(soap, "ns5:GetAssignedCertPathValidationPoliciesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
