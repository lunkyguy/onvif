/* soapProvisioningBindingProxy.h
   Generated by gSOAP 2.8.17r from onvif.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapProvisioningBindingProxy_H
#define soapProvisioningBindingProxy_H
#include "soapH.h"

class SOAP_CMAC ProvisioningBindingProxy
{ public:
	struct soap *soap;
	bool own;
	/// Endpoint URL of service 'ProvisioningBindingProxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	ProvisioningBindingProxy();
	/// Constructor to use/share an engine state
	ProvisioningBindingProxy(struct soap*);
	/// Constructor with endpoint URL
	ProvisioningBindingProxy(const char *url);
	/// Constructor with engine input+output mode control
	ProvisioningBindingProxy(soap_mode iomode);
	/// Constructor with URL and input+output mode control
	ProvisioningBindingProxy(const char *url, soap_mode iomode);
	/// Constructor with engine input and output mode control
	ProvisioningBindingProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~ProvisioningBindingProxy();
	/// Initializer used by constructors
	virtual	void ProvisioningBindingProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (with soap_destroy and soap_end)
	virtual	void destroy();
	/// Delete all deserialized data and reset to default
	virtual	void reset();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Put SOAP Header in message
	virtual	void soap_header(char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance, struct _wsse__Security *wsse__Security);
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
#ifndef WITH_COMPAT
	virtual	void soap_stream_fault(std::ostream&);
#endif

	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'GetServiceCapabilities' (returns error code or SOAP_OK)
	virtual	int GetServiceCapabilities(_ns10__GetServiceCapabilities *ns10__GetServiceCapabilities, _ns10__GetServiceCapabilitiesResponse *ns10__GetServiceCapabilitiesResponse) { return this->GetServiceCapabilities(NULL, NULL, ns10__GetServiceCapabilities, ns10__GetServiceCapabilitiesResponse); }
	virtual	int GetServiceCapabilities(const char *endpoint, const char *soap_action, _ns10__GetServiceCapabilities *ns10__GetServiceCapabilities, _ns10__GetServiceCapabilitiesResponse *ns10__GetServiceCapabilitiesResponse);

	/// Web service operation 'PanMove' (returns error code or SOAP_OK)
	virtual	int PanMove(_ns10__PanMove *ns10__PanMove, _ns10__PanMoveResponse *ns10__PanMoveResponse) { return this->PanMove(NULL, NULL, ns10__PanMove, ns10__PanMoveResponse); }
	virtual	int PanMove(const char *endpoint, const char *soap_action, _ns10__PanMove *ns10__PanMove, _ns10__PanMoveResponse *ns10__PanMoveResponse);

	/// Web service operation 'TiltMove' (returns error code or SOAP_OK)
	virtual	int TiltMove(_ns10__TiltMove *ns10__TiltMove, _ns10__TiltMoveResponse *ns10__TiltMoveResponse) { return this->TiltMove(NULL, NULL, ns10__TiltMove, ns10__TiltMoveResponse); }
	virtual	int TiltMove(const char *endpoint, const char *soap_action, _ns10__TiltMove *ns10__TiltMove, _ns10__TiltMoveResponse *ns10__TiltMoveResponse);

	/// Web service operation 'ZoomMove' (returns error code or SOAP_OK)
	virtual	int ZoomMove(_ns10__ZoomMove *ns10__ZoomMove, _ns10__ZoomMoveResponse *ns10__ZoomMoveResponse) { return this->ZoomMove(NULL, NULL, ns10__ZoomMove, ns10__ZoomMoveResponse); }
	virtual	int ZoomMove(const char *endpoint, const char *soap_action, _ns10__ZoomMove *ns10__ZoomMove, _ns10__ZoomMoveResponse *ns10__ZoomMoveResponse);

	/// Web service operation 'RollMove' (returns error code or SOAP_OK)
	virtual	int RollMove(_ns10__RollMove *ns10__RollMove, _ns10__RollMoveResponse *ns10__RollMoveResponse) { return this->RollMove(NULL, NULL, ns10__RollMove, ns10__RollMoveResponse); }
	virtual	int RollMove(const char *endpoint, const char *soap_action, _ns10__RollMove *ns10__RollMove, _ns10__RollMoveResponse *ns10__RollMoveResponse);

	/// Web service operation 'FocusMove' (returns error code or SOAP_OK)
	virtual	int FocusMove(_ns10__FocusMove *ns10__FocusMove, _ns10__FocusMoveResponse *ns10__FocusMoveResponse) { return this->FocusMove(NULL, NULL, ns10__FocusMove, ns10__FocusMoveResponse); }
	virtual	int FocusMove(const char *endpoint, const char *soap_action, _ns10__FocusMove *ns10__FocusMove, _ns10__FocusMoveResponse *ns10__FocusMoveResponse);

	/// Web service operation 'Stop' (returns error code or SOAP_OK)
	virtual	int Stop(_ns10__Stop *ns10__Stop, _ns10__StopResponse *ns10__StopResponse) { return this->Stop(NULL, NULL, ns10__Stop, ns10__StopResponse); }
	virtual	int Stop(const char *endpoint, const char *soap_action, _ns10__Stop *ns10__Stop, _ns10__StopResponse *ns10__StopResponse);

	/// Web service operation 'GetUsage' (returns error code or SOAP_OK)
	virtual	int GetUsage(_ns10__GetUsage *ns10__GetUsage, _ns10__GetUsageResponse *ns10__GetUsageResponse) { return this->GetUsage(NULL, NULL, ns10__GetUsage, ns10__GetUsageResponse); }
	virtual	int GetUsage(const char *endpoint, const char *soap_action, _ns10__GetUsage *ns10__GetUsage, _ns10__GetUsageResponse *ns10__GetUsageResponse);
};
#endif
